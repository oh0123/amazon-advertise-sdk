// Package accountbudgets provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package accountbudgets

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AccountBudgetFeatureFlagsErrorCode.
const (
	AccountBudgetFeatureFlagsErrorCodeENTRYNOTFOUND         AccountBudgetFeatureFlagsErrorCode = "ENTRY_NOT_FOUND"
	AccountBudgetFeatureFlagsErrorCodeINVALIDPARAMETERVALUE AccountBudgetFeatureFlagsErrorCode = "INVALID_PARAMETER_VALUE"
	AccountBudgetFeatureFlagsErrorCodeOK                    AccountBudgetFeatureFlagsErrorCode = "OK"
)

// Defines values for UpdateAccountBudgetFeatureFlagsResponseCode.
const (
	UpdateAccountBudgetFeatureFlagsResponseCodeENTRYNOTFOUND         UpdateAccountBudgetFeatureFlagsResponseCode = "ENTRY_NOT_FOUND"
	UpdateAccountBudgetFeatureFlagsResponseCodeINVALIDPARAMETERVALUE UpdateAccountBudgetFeatureFlagsResponseCode = "INVALID_PARAMETER_VALUE"
	UpdateAccountBudgetFeatureFlagsResponseCodeOK                    UpdateAccountBudgetFeatureFlagsResponseCode = "OK"
)

// AccountBudgetFeatureFlagsError The Error Response Object.
type AccountBudgetFeatureFlagsError struct {
	// Code An enumerated code for machine use.
	Code *AccountBudgetFeatureFlagsErrorCode `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// AccountBudgetFeatureFlagsErrorCode An enumerated code for machine use.
type AccountBudgetFeatureFlagsErrorCode string

// FeatureFlags Feature flags for account budget, which denotes that advertiser Opted In/Out from specific budget feature.
type FeatureFlags struct {
	// IsOptedOutForAverageDailyBudgetIncrease Denotes the opt in/out decision for AverageDailyBudgetIncrease feature. If the entity spends less than your daily budget, the unspent amount can be used to increase your daily budget to 100% (if opted in) or 25% (if opted out) in other days of calendar month.
	IsOptedOutForAverageDailyBudgetIncrease *bool `json:"isOptedOutForAverageDailyBudgetIncrease,omitempty"`
}

// GetAccountBudgetFeatureFlagsResponse Response to get account budget feature flags information.
type GetAccountBudgetFeatureFlagsResponse struct {
	// FeatureFlags Feature flags for account budget, which denotes that advertiser Opted In/Out from specific budget feature.
	FeatureFlags *FeatureFlags `json:"featureFlags,omitempty"`
}

// UpdateAccountBudgetFeatureFlagsRequest Request to update account budget feature flags information.
type UpdateAccountBudgetFeatureFlagsRequest struct {
	// FeatureFlags Feature flags for account budget, which denotes that advertiser Opted In/Out from specific budget feature.
	FeatureFlags FeatureFlags `json:"featureFlags"`
}

// UpdateAccountBudgetFeatureFlagsResponse Response for update account budget feature flags information.
type UpdateAccountBudgetFeatureFlagsResponse struct {
	// Code An enumerated code for machine use.
	Code *UpdateAccountBudgetFeatureFlagsResponseCode `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// UpdateAccountBudgetFeatureFlagsResponseCode An enumerated code for machine use.
type UpdateAccountBudgetFeatureFlagsResponseCode string

// APIScopeHeader defines model for APIScopeHeader.
type APIScopeHeader = string

// ClientIdHeader defines model for ClientIdHeader.
type ClientIdHeader = string

// GetAccountBudgetFeatureFlagsParams defines parameters for GetAccountBudgetFeatureFlags.
type GetAccountBudgetFeatureFlagsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientIdHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope APIScopeHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateAccountBudgetFeatureFlagsParams defines parameters for UpdateAccountBudgetFeatureFlags.
type UpdateAccountBudgetFeatureFlagsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientIdHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope APIScopeHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody defines body for UpdateAccountBudgetFeatureFlags for application/vnd.accountBudgetFeatureFlags.v1+json ContentType.
type UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody = UpdateAccountBudgetFeatureFlagsRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccountBudgetFeatureFlags request
	GetAccountBudgetFeatureFlags(ctx context.Context, params *GetAccountBudgetFeatureFlagsParams) (*http.Response, error)

	// UpdateAccountBudgetFeatureFlagsWithBody request with any body
	UpdateAccountBudgetFeatureFlagsWithBody(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateAccountBudgetFeatureFlagsWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, body UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetAccountBudgetFeatureFlags(ctx context.Context, params *GetAccountBudgetFeatureFlagsParams) (*http.Response, error) {
	req, err := NewGetAccountBudgetFeatureFlagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateAccountBudgetFeatureFlagsWithBody(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateAccountBudgetFeatureFlagsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateAccountBudgetFeatureFlagsWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, body UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateAccountBudgetFeatureFlagsRequestWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAccountBudgetFeatureFlagsRequest generates requests for GetAccountBudgetFeatureFlags
func NewGetAccountBudgetFeatureFlagsRequest(server string, params *GetAccountBudgetFeatureFlagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accountBudgets/featureFlags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateAccountBudgetFeatureFlagsRequestWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody calls the generic UpdateAccountBudgetFeatureFlags builder with application/vnd.accountBudgetFeatureFlags.v1+json body
func NewUpdateAccountBudgetFeatureFlagsRequestWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody(server string, params *UpdateAccountBudgetFeatureFlagsParams, body UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountBudgetFeatureFlagsRequestWithBody(server, params, "application/vnd.accountBudgetFeatureFlags.v1+json", bodyReader)
}

// NewUpdateAccountBudgetFeatureFlagsRequestWithBody generates requests for UpdateAccountBudgetFeatureFlags with any type of body
func NewUpdateAccountBudgetFeatureFlagsRequestWithBody(server string, params *UpdateAccountBudgetFeatureFlagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accountBudgets/featureFlags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountBudgetFeatureFlagsWithResponse request
	GetAccountBudgetFeatureFlagsWithResponse(ctx context.Context, params *GetAccountBudgetFeatureFlagsParams) (*GetAccountBudgetFeatureFlagsResp, error)

	// UpdateAccountBudgetFeatureFlagsWithBodyWithResponse request with any body
	UpdateAccountBudgetFeatureFlagsWithBodyWithResponse(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, contentType string, body io.Reader) (*UpdateAccountBudgetFeatureFlagsResp, error)

	UpdateAccountBudgetFeatureFlagsWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, body UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody) (*UpdateAccountBudgetFeatureFlagsResp, error)
}

type GetAccountBudgetFeatureFlagsResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndAccountBudgetFeatureFlagsV1JSON200      *GetAccountBudgetFeatureFlagsResponse
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON400 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON401 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON403 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON429 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON500 *AccountBudgetFeatureFlagsError
}

// Status returns HTTPResponse.Status
func (r GetAccountBudgetFeatureFlagsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountBudgetFeatureFlagsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountBudgetFeatureFlagsResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndAccountBudgetFeatureFlagsV1JSON200      *UpdateAccountBudgetFeatureFlagsResponse
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON400 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON401 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON403 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON429 *AccountBudgetFeatureFlagsError
	ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON500 *AccountBudgetFeatureFlagsError
}

// Status returns HTTPResponse.Status
func (r UpdateAccountBudgetFeatureFlagsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountBudgetFeatureFlagsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountBudgetFeatureFlagsWithResponse request returning *GetAccountBudgetFeatureFlagsResp
func (c *ClientWithResponses) GetAccountBudgetFeatureFlagsWithResponse(ctx context.Context, params *GetAccountBudgetFeatureFlagsParams) (*GetAccountBudgetFeatureFlagsResp, error) {
	rsp, err := c.GetAccountBudgetFeatureFlags(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBudgetFeatureFlagsResp(rsp)
}

// UpdateAccountBudgetFeatureFlagsWithBodyWithResponse request with arbitrary body returning *UpdateAccountBudgetFeatureFlagsResp
func (c *ClientWithResponses) UpdateAccountBudgetFeatureFlagsWithBodyWithResponse(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, contentType string, body io.Reader) (*UpdateAccountBudgetFeatureFlagsResp, error) {
	rsp, err := c.UpdateAccountBudgetFeatureFlagsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountBudgetFeatureFlagsResp(rsp)
}

func (c *ClientWithResponses) UpdateAccountBudgetFeatureFlagsWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateAccountBudgetFeatureFlagsParams, body UpdateAccountBudgetFeatureFlagsApplicationVndAccountBudgetFeatureFlagsV1PlusJSONRequestBody) (*UpdateAccountBudgetFeatureFlagsResp, error) {
	rsp, err := c.UpdateAccountBudgetFeatureFlagsWithApplicationVndAccountBudgetFeatureFlagsV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountBudgetFeatureFlagsResp(rsp)
}

// ParseGetAccountBudgetFeatureFlagsResp parses an HTTP response from a GetAccountBudgetFeatureFlagsWithResponse call
func ParseGetAccountBudgetFeatureFlagsResp(rsp *http.Response) (*GetAccountBudgetFeatureFlagsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountBudgetFeatureFlagsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountBudgetFeatureFlagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAccountBudgetFeatureFlagsResp parses an HTTP response from a UpdateAccountBudgetFeatureFlagsWithResponse call
func ParseUpdateAccountBudgetFeatureFlagsResp(rsp *http.Response) (*UpdateAccountBudgetFeatureFlagsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountBudgetFeatureFlagsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateAccountBudgetFeatureFlagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AccountBudgetFeatureFlagsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndAccountBudgetFeatureFlagsErrorV1JSON500 = &dest

	}

	return response, nil
}
