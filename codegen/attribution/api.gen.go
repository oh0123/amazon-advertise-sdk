// Package attribution provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package attribution

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for ReportRequestBodyGroupBy.
const (
	ADGROUP  ReportRequestBodyGroupBy = "ADGROUP"
	CAMPAIGN ReportRequestBodyGroupBy = "CAMPAIGN"
	CREATIVE ReportRequestBodyGroupBy = "CREATIVE"
)

// AdvertiserResponse defines model for AdvertiserResponse.
type AdvertiserResponse struct {
	Advertisers *[]Advertiser `json:"advertisers,omitempty"`
}

// AttributionTagResponse A list of advertisers and associated attribution tags.
type AttributionTagResponse map[string]AttributionTagMap

// MaaSError The error response object.
type MaaSError struct {
	// Code The HTTP status code of the response. Possible value of code is "200", "207", "400", "401", "429", "403", or "500".
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// Publisher defines model for Publisher.
type Publisher struct {
	// Id The identifier of a publisher.
	Id *string `json:"id,omitempty"`

	// MacroEnabled Set to 'true' if Amazon Attribution provides macro tags for the given publisher.
	MacroEnabled *bool `json:"macroEnabled,omitempty"`

	// Name The name of the publisher.
	Name *string `json:"name,omitempty"`
}

// PublishersResponse defines model for PublishersResponse.
type PublishersResponse struct {
	// Publishers A list of publishers.
	Publishers *[]Publisher `json:"publishers,omitempty"`
}

// ReportEntry Report entry object in GetReport reports list.
type ReportEntry struct {
	// AdGroupId An ad group external identifier. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// AdvertiserName Name of advertiser. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
	AdvertiserName *string `json:"advertiserName,omitempty"`

	// BrandName Name of the advertiser's brand. Applies only to `PRODUCTS` reportType.
	BrandName *string `json:"brandName,omitempty"`

	// CampaignId A campaign external identifier. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
	CampaignId *string `json:"campaignId,omitempty"`

	// CreativeId A creative external identifier. Applies only to `PERFORMANCE` reportType
	CreativeId *string `json:"creativeId,omitempty"`

	// Date Date on which the events took place. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
	Date *string `json:"date,omitempty"`

	// Marketplace The Amazon-owned site the product is sold on. Applies only to `PRODUCTS` reportType.
	Marketplace *string `json:"marketplace,omitempty"`

	// ProductAsin A unique block of letters and/or numbers that identify all products sold on Amazon. Applies only to `PRODUCTS` reportType.
	ProductAsin *string `json:"productAsin,omitempty"`

	// ProductCategory A classification for the type of product being sold which determines its place in the Amazon retail catalog. Contains categories of products. Applies only to `PRODUCTS` reportType.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ProductConversionType The conversion type describes whether the conversion happened on a promoted or a brand halo ASIN. Applies only to `PRODUCTS` reportType.
	ProductConversionType *string `json:"productConversionType,omitempty"`

	// ProductGroup A distinct product grouping distinguishing products like watches from video games from toys. Contains groups of products. Applies only to `PRODUCTS` reportType.
	ProductGroup *string `json:"productGroup,omitempty"`

	// ProductName The name of the product. Applies only to `PRODUCTS` reportType.
	ProductName *string `json:"productName,omitempty"`

	// ProductSubcategory A classification for the type of product being sold which determines its place in the Amazon retail catalog. Contains subcategories of products. Applies only to `PRODUCTS` reportType
	ProductSubcategory *string `json:"productSubcategory,omitempty"`

	// Publisher The publisher name. Applies to `PERFORMANCE` and `PRODUCTS` reportType
	Publisher *string `json:"publisher,omitempty"`
}

// ReportRequestBody Report request body.
// Two types of reports are available: Performance or Products - choose by including the `reportType` property. Performance report may be aggregated at any of three levels: campaign, ad group, or creative - choose by including the `groupBy` property. Products report is always aggregated at ad group level - when requesting a Products report, do not include the `groupBy` property or an error will occur.
//
// Pagination is recommended - include the `count` and `cursorId` properties.
//
// Pass a list of metrics to control which metrics appear in the response, or omit this list to receive all available metrics (except brb_bonus_amount).
//
// Dimensions available within each report type and aggregation level:
// | reportType  | groupBy  | Dimensions|
// |-------------|-------------------|-----------|
// |PERFORMANCE|CREATIVE|campaignId, adgroupId, creativeid, publisher|
// |PERFORMANCE|ADGROUP|campaignId, adgroupId, publisher|
// |PERFORMANCE|CAMPAIGN|campaignId|
// |PRODUCTS|N/A|campaignId, adgroupId, publisher, productName, productGroup, productCategory, productSubcategory, brandName, productAsin, productConversionType|
// Example requests:
// ```
//
//	# PerformanceReportGroupedAtCampaignLevel
//
//	{
//	  "reportType": "PERFORMANCE",
//	  "endDate": "20220601",
//	  "count": 1000,
//	  "startDate": "20220525",
//	  "groupBy":"CAMPAIGN"
//	}
//
//	# ProductsReport
//
//	{
//	  "reportType": "PRODUCTS",
//	  "endDate": "20220601",
//	  "count": 1000,
//	  "startDate": "20220525"
//	}
//
// ```
type ReportRequestBody struct {
	// AdvertiserIds One or more advertiser Ids to filter reporting by. If requesting reporting for multiple advertiser Ids, input via a comma-delimited list.
	AdvertiserIds *string `json:"advertiserIds,omitempty"`

	// Count The number of entries to include in the report.
	Count *int `json:"count,omitempty"`

	// CursorId The value of `cursorId` must be set to `null` without `""`, or set to `""` for the first request. For each following request, the value of `cursorId` from the previous response must be included in the current request. Note that for the cursorId values the `"` character must be escaped with `\`.
	CursorId *string `json:"cursorId,omitempty"`

	// EndDate The end date for the report, form as "YYYYMMDD"
	EndDate *string `json:"endDate,omitempty"`

	// GroupBy For Performance report only - controls level of aggregation. Value can be `CAMPAIGN`, `ADGROUP`, or `CREATIVE`. Default is `CREATIVE`.
	GroupBy *ReportRequestBodyGroupBy `json:"groupBy,omitempty"`

	// Metrics A comma-delimited list of metrics to include in the report. In the report, each metric’s value reflects the events which took place on the row’s date; in other words, events are reported on the date they occurred, not on the date of the attributed click. Attribution is calculated using a 14-day last-click model. For more detail on attribution methodology, see the [Measurement](https://advertising.amazon.com/API/docs/en-us/amazon-attribution/how-to#measurement) section of the API guide. View the list of available metrics for each report type below."Promoted products" refers to products associated with the campaign.
	// |Metrics for reportType`PERFORMANCE`|
	// |-------------------|
	//
	// |Metric  |Description|
	// |--------|-----------|
	// |Click-throughs|Ad clicks.|
	// |attributedDetailPageViewsClicks14d|Ad click-attributed detail page views for promoted product.|
	// |attributedAddToCartClicks14d|Ad click-attributed add to carts for promoted products.|
	// |attributedPurchases14d|Ad click-attributed purchases for promoted products.|
	// |unitsSold14d|Ad click-attributed units sold for promoted products.|
	// |attributedSales14d|Ad click-attributed sales for promoted products in local currency.|
	// |attributedTotalDetailPageViewsClicks14d|Ad click-attributed detail page views  for promoted products plus brand halo products.|
	// |attributedTotalAddToCartClicks14d|Ad click-attributed add to carts for promoted products plus brand halo products.|
	// |attributedTotalPurchases14d|Ad click-attributed purchases for promoted products plus brand halo products.|
	// |totalUnitsSold14d|Ad click-attributed units sold for promoted products plus brand halo products.|
	// |totalAttributedSales14d|Ad click-attributed attributed sales for promoted products plus brand halo products.|
	// |brb_bonus_amount|Estimated ad-attributed Brand Referral Bonus credit amount in local currency. Will be omitted from response if advertiser is not a BRB-enrolled seller or request does not include a ‘metrics’ list. Requests for this metric must groupBy ADGROUP or CAMPAIGN, or will result in an error 400. Please refer to <https://sellercentral.amazon.com/gp/help/external/L9HPJ34VBFP76HX> to learn more about BRB program.|
	// |kindleEditionNormalizedPagesRead14d| Number of attributed Kindle edition pages read within 14 days of ad click.|
	// |kindleEditionNormalizedPagesRoyalties14d|The estimated royalties of attributed estimated Kindle edition normalized pages within 14 days of ad click.|
	//
	// |Metrics for reportType`PRODUCTS`|
	// |-------------------|
	//
	// |Metric  |Description|
	// |--------|-----------|
	// |attributedDetailPageViewsClicks14d|Ad click-attributed detail page views for promoted products.|
	// |attributedAddToCartClicks14d|Ad click-attributed add to carts for promoted products.|
	// |attributedPurchases14d|Ad click-attributed purchases for promoted products.|
	// |unitsSold14d|Ad click-attributed units sold for promoted products.|
	// |attributedSales14d|Ad click-attributed sales for promoted products in local currency.|
	// |brandHaloDetailPageViewsClicks14d|Ad click-attributed detail page views for brand halo products.|
	// |brandHaloAttributedAddToCartClicks14d|Ad click-attributed add to carts for brand halo products.|
	// |brandHaloAttributedPurchases14d|Ad click-attributed purchases for brand halo products.|
	// |brandHaloUnitsSold14d|Ad click-attributed units sold for brand halo products.|
	// |brandHaloAttributedSales14d|Ad click-attributed attributed sales for brand halo products.|
	// |attributedNewToBrandPurchases14d|Ad click-attributed new-to-brand purchases for promoted products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |attributedNewToBrandUnitsSold14d|Ad click-attributed units sold in new-to-brand purchases for promoted products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |attributedNewToBrandSales14d|Ad click-attributed sales of new-to-brand purchases for promoted products in local currency. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |brandHaloNewToBrandPurchases14d|Ad click-attributed new-to-brand purchases for brand halo products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |brandHaloNewToBrandUnitsSold14d|Ad click-attributed units sold in new-to-brand purchases for brand halo products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |brandHaloNewToBrandSales14d|Ad click-attributed sales of new-to-brand purchases for brand halo products in local currency. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
	// |kindleEditionNormalizedPagesRead14d| The no of pages read attributed to ad click-throughs within 14 days.|
	// |kindleEditionNormalizedPagesRoyalties14d|The estimated royalties of attributed estimated Kindle edition normalized pages within 14 days of ad click.|
	Metrics *string `json:"metrics,omitempty"`

	// ReportType The type of report. Either `PERFORMANCE` or `PRODUCTS`. It is an optional parameter. If not used in request body, default reportType is `PERFORMANCE`.
	ReportType *string `json:"reportType,omitempty"`

	// StartDate The start date for the report, in "YYYYMMDD" format. For reportType `PRODUCTS`, startDate can only be within last 90 days from current date.
	StartDate *string `json:"startDate,omitempty"`
}

// ReportRequestBodyGroupBy For Performance report only - controls level of aggregation. Value can be `CAMPAIGN`, `ADGROUP`, or `CREATIVE`. Default is `CREATIVE`.
type ReportRequestBodyGroupBy string

// ReportResponse defines model for ReportResponse.
type ReportResponse struct {
	// CursorId The identifier of the pagination cursor.
	CursorId *string        `json:"cursorId,omitempty"`
	Reports  *[]ReportEntry `json:"reports,omitempty"`

	// Size The size of the report.
	Size *int `json:"size,omitempty"`
}

// Advertiser defines model for advertiser.
type Advertiser struct {
	AdvertiserId   *string `json:"advertiserId,omitempty"`
	AdvertiserName *string `json:"advertiserName,omitempty"`
}

// AttributionTagMap An object representing the association between a publisher identifier and an attribution tag.
type AttributionTagMap map[string]string

// GetAdvertisersByProfileParams defines parameters for GetAdvertisersByProfile.
type GetAdvertisersByProfileParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetPublishersParams defines parameters for GetPublishers.
type GetPublishersParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetAttributionTagsByCampaignParams defines parameters for GetAttributionTagsByCampaign.
type GetAttributionTagsByCampaignParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetPublisherAttributionTagTemplateParams defines parameters for GetPublisherAttributionTagTemplate.
type GetPublisherAttributionTagTemplateParams struct {
	// PublisherIds A list of publisher identifiers for which to request tags.
	PublisherIds []string `form:"publisherIds" json:"publisherIds"`

	// AdvertiserIds List of advertiser identifiers for which to request tags.
	// If no values are passed, all advertisers are returned.
	AdvertiserIds *[]int64 `form:"advertiserIds,omitempty" json:"advertiserIds,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetPublisherMacroAttributionTagParams defines parameters for GetPublisherMacroAttributionTag.
type GetPublisherMacroAttributionTagParams struct {
	// PublisherIds A list of publisher identifiers for which to request tags.
	PublisherIds []string `form:"publisherIds" json:"publisherIds"`

	// AdvertiserIds List of advertiser identifiers for which to request tags.
	// If no values are passed, all advertisers are returned.
	AdvertiserIds *[]string `form:"advertiserIds,omitempty" json:"advertiserIds,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetAttributionTagsByCampaignJSONRequestBody defines body for GetAttributionTagsByCampaign for application/json ContentType.
type GetAttributionTagsByCampaignJSONRequestBody = ReportRequestBody

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdvertisersByProfile request
	GetAdvertisersByProfile(ctx context.Context, params *GetAdvertisersByProfileParams) (*http.Response, error)

	// GetPublishers request
	GetPublishers(ctx context.Context, params *GetPublishersParams) (*http.Response, error)

	// GetAttributionTagsByCampaignWithBody request with any body
	GetAttributionTagsByCampaignWithBody(ctx context.Context, params *GetAttributionTagsByCampaignParams, contentType string, body io.Reader) (*http.Response, error)

	GetAttributionTagsByCampaign(ctx context.Context, params *GetAttributionTagsByCampaignParams, body GetAttributionTagsByCampaignJSONRequestBody) (*http.Response, error)

	// GetPublisherAttributionTagTemplate request
	GetPublisherAttributionTagTemplate(ctx context.Context, params *GetPublisherAttributionTagTemplateParams) (*http.Response, error)

	// GetPublisherMacroAttributionTag request
	GetPublisherMacroAttributionTag(ctx context.Context, params *GetPublisherMacroAttributionTagParams) (*http.Response, error)
}

func (c *Client) GetAdvertisersByProfile(ctx context.Context, params *GetAdvertisersByProfileParams) (*http.Response, error) {
	req, err := NewGetAdvertisersByProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetPublishers(ctx context.Context, params *GetPublishersParams) (*http.Response, error) {
	req, err := NewGetPublishersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAttributionTagsByCampaignWithBody(ctx context.Context, params *GetAttributionTagsByCampaignParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetAttributionTagsByCampaignRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAttributionTagsByCampaign(ctx context.Context, params *GetAttributionTagsByCampaignParams, body GetAttributionTagsByCampaignJSONRequestBody) (*http.Response, error) {
	req, err := NewGetAttributionTagsByCampaignRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetPublisherAttributionTagTemplate(ctx context.Context, params *GetPublisherAttributionTagTemplateParams) (*http.Response, error) {
	req, err := NewGetPublisherAttributionTagTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetPublisherMacroAttributionTag(ctx context.Context, params *GetPublisherMacroAttributionTagParams) (*http.Response, error) {
	req, err := NewGetPublisherMacroAttributionTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAdvertisersByProfileRequest generates requests for GetAdvertisersByProfile
func NewGetAdvertisersByProfileRequest(server string, params *GetAdvertisersByProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attribution/advertisers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetPublishersRequest generates requests for GetPublishers
func NewGetPublishersRequest(server string, params *GetPublishersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attribution/publishers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAttributionTagsByCampaignRequest calls the generic GetAttributionTagsByCampaign builder with application/json body
func NewGetAttributionTagsByCampaignRequest(server string, params *GetAttributionTagsByCampaignParams, body GetAttributionTagsByCampaignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAttributionTagsByCampaignRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetAttributionTagsByCampaignRequestWithBody generates requests for GetAttributionTagsByCampaign with any type of body
func NewGetAttributionTagsByCampaignRequestWithBody(server string, params *GetAttributionTagsByCampaignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attribution/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetPublisherAttributionTagTemplateRequest generates requests for GetPublisherAttributionTagTemplate
func NewGetPublisherAttributionTagTemplateRequest(server string, params *GetPublisherAttributionTagTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attribution/tags/macroTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisherIds", runtime.ParamLocationQuery, params.PublisherIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.AdvertiserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserIds", runtime.ParamLocationQuery, *params.AdvertiserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetPublisherMacroAttributionTagRequest generates requests for GetPublisherMacroAttributionTag
func NewGetPublisherMacroAttributionTagRequest(server string, params *GetPublisherMacroAttributionTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attribution/tags/nonMacroTemplateTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisherIds", runtime.ParamLocationQuery, params.PublisherIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.AdvertiserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserIds", runtime.ParamLocationQuery, *params.AdvertiserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdvertisersByProfileWithResponse request
	GetAdvertisersByProfileWithResponse(ctx context.Context, params *GetAdvertisersByProfileParams) (*GetAdvertisersByProfileResp, error)

	// GetPublishersWithResponse request
	GetPublishersWithResponse(ctx context.Context, params *GetPublishersParams) (*GetPublishersResp, error)

	// GetAttributionTagsByCampaignWithBodyWithResponse request with any body
	GetAttributionTagsByCampaignWithBodyWithResponse(ctx context.Context, params *GetAttributionTagsByCampaignParams, contentType string, body io.Reader) (*GetAttributionTagsByCampaignResp, error)

	GetAttributionTagsByCampaignWithResponse(ctx context.Context, params *GetAttributionTagsByCampaignParams, body GetAttributionTagsByCampaignJSONRequestBody) (*GetAttributionTagsByCampaignResp, error)

	// GetPublisherAttributionTagTemplateWithResponse request
	GetPublisherAttributionTagTemplateWithResponse(ctx context.Context, params *GetPublisherAttributionTagTemplateParams) (*GetPublisherAttributionTagTemplateResp, error)

	// GetPublisherMacroAttributionTagWithResponse request
	GetPublisherMacroAttributionTagWithResponse(ctx context.Context, params *GetPublisherMacroAttributionTagParams) (*GetPublisherMacroAttributionTagResp, error)
}

type GetAdvertisersByProfileResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvertiserResponse
}

// Status returns HTTPResponse.Status
func (r GetAdvertisersByProfileResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvertisersByProfileResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublishersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublishersResponse
}

// Status returns HTTPResponse.Status
func (r GetPublishersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublishersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributionTagsByCampaignResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportResponse
	JSON400      *MaaSError
	JSON403      *MaaSError
	JSON500      *MaaSError
}

// Status returns HTTPResponse.Status
func (r GetAttributionTagsByCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributionTagsByCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAttributionTagTemplateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributionTagResponse
	JSON400      *MaaSError
	JSON401      *MaaSError
	JSON403      *MaaSError
	JSON429      *MaaSError
	JSON500      *MaaSError
}

// Status returns HTTPResponse.Status
func (r GetPublisherAttributionTagTemplateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAttributionTagTemplateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherMacroAttributionTagResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributionTagResponse
	JSON400      *MaaSError
	JSON401      *MaaSError
	JSON403      *MaaSError
	JSON429      *MaaSError
	JSON500      *MaaSError
}

// Status returns HTTPResponse.Status
func (r GetPublisherMacroAttributionTagResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherMacroAttributionTagResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdvertisersByProfileWithResponse request returning *GetAdvertisersByProfileResp
func (c *ClientWithResponses) GetAdvertisersByProfileWithResponse(ctx context.Context, params *GetAdvertisersByProfileParams) (*GetAdvertisersByProfileResp, error) {
	rsp, err := c.GetAdvertisersByProfile(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvertisersByProfileResp(rsp)
}

// GetPublishersWithResponse request returning *GetPublishersResp
func (c *ClientWithResponses) GetPublishersWithResponse(ctx context.Context, params *GetPublishersParams) (*GetPublishersResp, error) {
	rsp, err := c.GetPublishers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPublishersResp(rsp)
}

// GetAttributionTagsByCampaignWithBodyWithResponse request with arbitrary body returning *GetAttributionTagsByCampaignResp
func (c *ClientWithResponses) GetAttributionTagsByCampaignWithBodyWithResponse(ctx context.Context, params *GetAttributionTagsByCampaignParams, contentType string, body io.Reader) (*GetAttributionTagsByCampaignResp, error) {
	rsp, err := c.GetAttributionTagsByCampaignWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributionTagsByCampaignResp(rsp)
}

func (c *ClientWithResponses) GetAttributionTagsByCampaignWithResponse(ctx context.Context, params *GetAttributionTagsByCampaignParams, body GetAttributionTagsByCampaignJSONRequestBody) (*GetAttributionTagsByCampaignResp, error) {
	rsp, err := c.GetAttributionTagsByCampaign(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributionTagsByCampaignResp(rsp)
}

// GetPublisherAttributionTagTemplateWithResponse request returning *GetPublisherAttributionTagTemplateResp
func (c *ClientWithResponses) GetPublisherAttributionTagTemplateWithResponse(ctx context.Context, params *GetPublisherAttributionTagTemplateParams) (*GetPublisherAttributionTagTemplateResp, error) {
	rsp, err := c.GetPublisherAttributionTagTemplate(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAttributionTagTemplateResp(rsp)
}

// GetPublisherMacroAttributionTagWithResponse request returning *GetPublisherMacroAttributionTagResp
func (c *ClientWithResponses) GetPublisherMacroAttributionTagWithResponse(ctx context.Context, params *GetPublisherMacroAttributionTagParams) (*GetPublisherMacroAttributionTagResp, error) {
	rsp, err := c.GetPublisherMacroAttributionTag(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherMacroAttributionTagResp(rsp)
}

// ParseGetAdvertisersByProfileResp parses an HTTP response from a GetAdvertisersByProfileWithResponse call
func ParseGetAdvertisersByProfileResp(rsp *http.Response) (*GetAdvertisersByProfileResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvertisersByProfileResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvertiserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublishersResp parses an HTTP response from a GetPublishersWithResponse call
func ParseGetPublishersResp(rsp *http.Response) (*GetPublishersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublishersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublishersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAttributionTagsByCampaignResp parses an HTTP response from a GetAttributionTagsByCampaignWithResponse call
func ParseGetAttributionTagsByCampaignResp(rsp *http.Response) (*GetAttributionTagsByCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributionTagsByCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublisherAttributionTagTemplateResp parses an HTTP response from a GetPublisherAttributionTagTemplateWithResponse call
func ParseGetPublisherAttributionTagTemplateResp(rsp *http.Response) (*GetPublisherAttributionTagTemplateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAttributionTagTemplateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributionTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublisherMacroAttributionTagResp parses an HTTP response from a GetPublisherMacroAttributionTagWithResponse call
func ParseGetPublisherMacroAttributionTagResp(rsp *http.Response) (*GetPublisherMacroAttributionTagResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherMacroAttributionTagResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributionTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MaaSError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
