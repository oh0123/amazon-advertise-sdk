// Package amazonmarketingstream provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package amazonmarketingstream

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for SubscriptionEntityStatus.
const (
	SubscriptionEntityStatusACTIVE              SubscriptionEntityStatus = "ACTIVE"
	SubscriptionEntityStatusARCHIVED            SubscriptionEntityStatus = "ARCHIVED"
	SubscriptionEntityStatusFAILEDCONFIRMATION  SubscriptionEntityStatus = "FAILED_CONFIRMATION"
	SubscriptionEntityStatusPENDINGCONFIRMATION SubscriptionEntityStatus = "PENDING_CONFIRMATION"
	SubscriptionEntityStatusPROVISIONING        SubscriptionEntityStatus = "PROVISIONING"
	SubscriptionEntityStatusSUSPENDED           SubscriptionEntityStatus = "SUSPENDED"
)

// Defines values for UpdateEntityStatus.
const (
	UpdateEntityStatusARCHIVED UpdateEntityStatus = "ARCHIVED"
)

// AccessForbiddenErrorResponseContent defines model for AccessForbiddenErrorResponseContent.
type AccessForbiddenErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// CreateDspStreamSubscriptionRequestContent defines model for CreateDspStreamSubscriptionRequestContent.
type CreateDspStreamSubscriptionRequestContent struct {
	// ClientRequestToken Unique value supplied by the caller used to track identical API requests.
	// Should request be re-tried, the caller should supply the same value. We recommend using GUID.
	ClientRequestToken string `json:"clientRequestToken"`

	// DataSetId Identifier of data set, callers can be subscribed to. Please refer to https://advertising.amazon.com/API/docs/en-us/amazon-marketing-stream/data-guide for the list of all data sets.
	DataSetId string `json:"dataSetId"`

	// DestinationArn AWS ARN of the destination endpoint associated with the subscription.
	// Supported destination types:
	// - SQS
	DestinationArn string `json:"destinationArn"`

	// Notes Additional details associated with the subscription
	Notes *string `json:"notes,omitempty"`
}

// CreateDspStreamSubscriptionResponseContent defines model for CreateDspStreamSubscriptionResponseContent.
type CreateDspStreamSubscriptionResponseContent struct {
	// ClientRequestToken Unique value supplied by the caller used to track identical API requests.
	// Should request be re-tried, the caller should supply the same value. We recommend using GUID.
	ClientRequestToken string `json:"clientRequestToken"`

	// SubscriptionId Unique subscription identifier
	SubscriptionId string `json:"subscriptionId"`
}

// CreateStreamSubscriptionRequestContent defines model for CreateStreamSubscriptionRequestContent.
type CreateStreamSubscriptionRequestContent struct {
	// ClientRequestToken Unique value supplied by the caller used to track identical API requests.
	// Should request be re-tried, the caller should supply the same value. We recommend using GUID.
	ClientRequestToken string `json:"clientRequestToken"`

	// DataSetId Identifier of data set, callers can be subscribed to. Please refer to https://advertising.amazon.com/API/docs/en-us/amazon-marketing-stream/data-guide for the list of all data sets.
	DataSetId string `json:"dataSetId"`

	// DestinationArn AWS ARN of the destination endpoint associated with the subscription.
	// Supported destination types:
	// - SQS
	DestinationArn string `json:"destinationArn"`

	// Notes Additional details associated with the subscription
	Notes *string `json:"notes,omitempty"`
}

// CreateStreamSubscriptionResponseContent defines model for CreateStreamSubscriptionResponseContent.
type CreateStreamSubscriptionResponseContent struct {
	// ClientRequestToken Unique value supplied by the caller used to track identical API requests.
	// Should request be re-tried, the caller should supply the same value. We recommend using GUID.
	ClientRequestToken string `json:"clientRequestToken"`

	// SubscriptionId Unique subscription identifier
	SubscriptionId string `json:"subscriptionId"`
}

// GetDspStreamSubscriptionResponseContent defines model for GetDspStreamSubscriptionResponseContent.
type GetDspStreamSubscriptionResponseContent struct {
	Subscription StreamSubscription `json:"subscription"`
}

// GetStreamSubscriptionResponseContent defines model for GetStreamSubscriptionResponseContent.
type GetStreamSubscriptionResponseContent struct {
	Subscription StreamSubscription `json:"subscription"`
}

// InternalServerErrorResponseContent defines model for InternalServerErrorResponseContent.
type InternalServerErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// InvalidRequestErrorResponseContent defines model for InvalidRequestErrorResponseContent.
type InvalidRequestErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// ListDspStreamSubscriptionsResponseContent defines model for ListDspStreamSubscriptionsResponseContent.
type ListDspStreamSubscriptionsResponseContent struct {
	// NextToken Token which can be used to get the next page of results, if more entries exist
	NextToken     *string              `json:"nextToken,omitempty"`
	Subscriptions []StreamSubscription `json:"subscriptions"`
}

// ListStreamSubscriptionsResponseContent defines model for ListStreamSubscriptionsResponseContent.
type ListStreamSubscriptionsResponseContent struct {
	// NextToken Token which can be used to get the next page of results, if more entries exist
	NextToken     *string              `json:"nextToken,omitempty"`
	Subscriptions []StreamSubscription `json:"subscriptions"`
}

// OperationConflictErrorResponseContent defines model for OperationConflictErrorResponseContent.
type OperationConflictErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// ResourceNotFoundErrorResponseContent defines model for ResourceNotFoundErrorResponseContent.
type ResourceNotFoundErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// StreamSubscription defines model for StreamSubscription.
type StreamSubscription struct {
	// CreatedDate ISO8601 Timestamp
	CreatedDate time.Time `json:"createdDate"`

	// DataSetId Identifier of data set, callers can be subscribed to. Please refer to https://advertising.amazon.com/API/docs/en-us/amazon-marketing-stream/data-guide for the list of all data sets.
	DataSetId string `json:"dataSetId"`

	// DestinationArn AWS ARN of the destination endpoint associated with the subscription.
	// Supported destination types:
	// - SQS
	DestinationArn string `json:"destinationArn"`

	// Notes Additional details associated with the subscription
	Notes *string `json:"notes,omitempty"`

	// Status Current status of the entity. Possible values are PROVISIONING, PENDING_CONFIRMATION, ACTIVE, ARCHIVED, FAILED_CONFIRMATION, SUSPENDED
	Status SubscriptionEntityStatus `json:"status"`

	// SubscriptionId Unique subscription identifier
	SubscriptionId string `json:"subscriptionId"`

	// UpdatedDate ISO8601 Timestamp
	UpdatedDate time.Time `json:"updatedDate"`
}

// SubscriptionEntityStatus Current status of the entity. Possible values are PROVISIONING, PENDING_CONFIRMATION, ACTIVE, ARCHIVED, FAILED_CONFIRMATION, SUSPENDED
type SubscriptionEntityStatus string

// TooManyRequestsErrorResponseContent defines model for TooManyRequestsErrorResponseContent.
type TooManyRequestsErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// UnauthorizedAccessErrorResponseContent defines model for UnauthorizedAccessErrorResponseContent.
type UnauthorizedAccessErrorResponseContent struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// UpdateDspStreamSubscriptionRequestContent defines model for UpdateDspStreamSubscriptionRequestContent.
type UpdateDspStreamSubscriptionRequestContent struct {
	// Notes Additional details associated with the subscription
	Notes *string `json:"notes,omitempty"`

	// Status Update the status of the entity
	Status *UpdateEntityStatus `json:"status,omitempty"`
}

// UpdateEntityStatus Update the status of the entity
type UpdateEntityStatus string

// UpdateStreamSubscriptionRequestContent defines model for UpdateStreamSubscriptionRequestContent.
type UpdateStreamSubscriptionRequestContent struct {
	// Notes Additional details associated with the subscription
	Notes *string `json:"notes,omitempty"`

	// Status Update the status of the entity
	Status *UpdateEntityStatus `json:"status,omitempty"`
}

// ListDspStreamSubscriptionsParams defines parameters for ListDspStreamSubscriptions.
type ListDspStreamSubscriptionsParams struct {
	// MaxResults desired number of entries in the response, defaults to maximum value
	MaxResults *float32 `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// StartingToken Token which can be used to get the next page of results, if more entries exist
	StartingToken *string `form:"startingToken,omitempty" json:"startingToken,omitempty"`

	// AmazonAdsAccountID The identifier of a DSP advertiser level account
	AmazonAdsAccountID string `json:"Amazon-Ads-Account-ID"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// CreateDspStreamSubscriptionParams defines parameters for CreateDspStreamSubscription.
type CreateDspStreamSubscriptionParams struct {
	// AmazonAdsAccountID The identifier of a DSP advertiser level account
	AmazonAdsAccountID string `json:"Amazon-Ads-Account-ID"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// GetDspStreamSubscriptionParams defines parameters for GetDspStreamSubscription.
type GetDspStreamSubscriptionParams struct {
	// AmazonAdsAccountID The identifier of a DSP advertiser level account
	AmazonAdsAccountID string `json:"Amazon-Ads-Account-ID"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// UpdateDspStreamSubscriptionParams defines parameters for UpdateDspStreamSubscription.
type UpdateDspStreamSubscriptionParams struct {
	// AmazonAdsAccountID The identifier of a DSP advertiser level account
	AmazonAdsAccountID string `json:"Amazon-Ads-Account-ID"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// ListStreamSubscriptionsParams defines parameters for ListStreamSubscriptions.
type ListStreamSubscriptionsParams struct {
	// MaxResults desired number of entries in the response, defaults to maximum value
	MaxResults *float32 `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// StartingToken Token which can be used to get the next page of results, if more entries exist
	StartingToken *string `form:"startingToken,omitempty" json:"startingToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateStreamSubscriptionParams defines parameters for CreateStreamSubscription.
type CreateStreamSubscriptionParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetStreamSubscriptionParams defines parameters for GetStreamSubscription.
type GetStreamSubscriptionParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateStreamSubscriptionParams defines parameters for UpdateStreamSubscription.
type UpdateStreamSubscriptionParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody defines body for CreateDspStreamSubscription for application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json ContentType.
type CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody = CreateDspStreamSubscriptionRequestContent

// UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody defines body for UpdateDspStreamSubscription for application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json ContentType.
type UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody = UpdateDspStreamSubscriptionRequestContent

// CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody defines body for CreateStreamSubscription for application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json ContentType.
type CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody = CreateStreamSubscriptionRequestContent

// UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody defines body for UpdateStreamSubscription for application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json ContentType.
type UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody = UpdateStreamSubscriptionRequestContent

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListDspStreamSubscriptions request
	ListDspStreamSubscriptions(ctx context.Context, params *ListDspStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDspStreamSubscriptionWithBody request with any body
	CreateDspStreamSubscriptionWithBody(ctx context.Context, params *CreateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, params *CreateDspStreamSubscriptionParams, body CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDspStreamSubscription request
	GetDspStreamSubscription(ctx context.Context, subscriptionId string, params *GetDspStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDspStreamSubscriptionWithBody request with any body
	UpdateDspStreamSubscriptionWithBody(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, body UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStreamSubscriptions request
	ListStreamSubscriptions(ctx context.Context, params *ListStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStreamSubscriptionWithBody request with any body
	CreateStreamSubscriptionWithBody(ctx context.Context, params *CreateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, params *CreateStreamSubscriptionParams, body CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamSubscription request
	GetStreamSubscription(ctx context.Context, subscriptionId string, params *GetStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStreamSubscriptionWithBody request with any body
	UpdateStreamSubscriptionWithBody(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, body UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListDspStreamSubscriptions(ctx context.Context, params *ListDspStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDspStreamSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDspStreamSubscriptionWithBody(ctx context.Context, params *CreateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDspStreamSubscriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, params *CreateDspStreamSubscriptionParams, body CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDspStreamSubscription(ctx context.Context, subscriptionId string, params *GetDspStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDspStreamSubscriptionRequest(c.Server, subscriptionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDspStreamSubscriptionWithBody(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDspStreamSubscriptionRequestWithBody(c.Server, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, body UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(c.Server, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStreamSubscriptions(ctx context.Context, params *ListStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStreamSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStreamSubscriptionWithBody(ctx context.Context, params *CreateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStreamSubscriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, params *CreateStreamSubscriptionParams, body CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreamSubscription(ctx context.Context, subscriptionId string, params *GetStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamSubscriptionRequest(c.Server, subscriptionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStreamSubscriptionWithBody(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStreamSubscriptionRequestWithBody(c.Server, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, body UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(c.Server, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListDspStreamSubscriptionsRequest generates requests for ListDspStreamSubscriptions
func NewListDspStreamSubscriptionsRequest(server string, params *ListDspStreamSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/streams/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartingToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startingToken", runtime.ParamLocationQuery, *params.StartingToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Ads-Account-ID", runtime.ParamLocationHeader, params.AmazonAdsAccountID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Ads-Account-ID", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

	}

	return req, nil
}

// NewCreateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody calls the generic CreateDspStreamSubscription builder with application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json body
func NewCreateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(server string, params *CreateDspStreamSubscriptionParams, body CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDspStreamSubscriptionRequestWithBody(server, params, "application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json", bodyReader)
}

// NewCreateDspStreamSubscriptionRequestWithBody generates requests for CreateDspStreamSubscription with any type of body
func NewCreateDspStreamSubscriptionRequestWithBody(server string, params *CreateDspStreamSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/streams/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Ads-Account-ID", runtime.ParamLocationHeader, params.AmazonAdsAccountID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Ads-Account-ID", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

	}

	return req, nil
}

// NewGetDspStreamSubscriptionRequest generates requests for GetDspStreamSubscription
func NewGetDspStreamSubscriptionRequest(server string, subscriptionId string, params *GetDspStreamSubscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/streams/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Ads-Account-ID", runtime.ParamLocationHeader, params.AmazonAdsAccountID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Ads-Account-ID", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

	}

	return req, nil
}

// NewUpdateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody calls the generic UpdateDspStreamSubscription builder with application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json body
func NewUpdateDspStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(server string, subscriptionId string, params *UpdateDspStreamSubscriptionParams, body UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDspStreamSubscriptionRequestWithBody(server, subscriptionId, params, "application/vnd.MarketingStreamSubscriptions.DspStreamSubscriptionResource.v1.0+json", bodyReader)
}

// NewUpdateDspStreamSubscriptionRequestWithBody generates requests for UpdateDspStreamSubscription with any type of body
func NewUpdateDspStreamSubscriptionRequestWithBody(server string, subscriptionId string, params *UpdateDspStreamSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/streams/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Ads-Account-ID", runtime.ParamLocationHeader, params.AmazonAdsAccountID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Ads-Account-ID", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

	}

	return req, nil
}

// NewListStreamSubscriptionsRequest generates requests for ListStreamSubscriptions
func NewListStreamSubscriptionsRequest(server string, params *ListStreamSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartingToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startingToken", runtime.ParamLocationQuery, *params.StartingToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody calls the generic CreateStreamSubscription builder with application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json body
func NewCreateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(server string, params *CreateStreamSubscriptionParams, body CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStreamSubscriptionRequestWithBody(server, params, "application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json", bodyReader)
}

// NewCreateStreamSubscriptionRequestWithBody generates requests for CreateStreamSubscription with any type of body
func NewCreateStreamSubscriptionRequestWithBody(server string, params *CreateStreamSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetStreamSubscriptionRequest generates requests for GetStreamSubscription
func NewGetStreamSubscriptionRequest(server string, subscriptionId string, params *GetStreamSubscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody calls the generic UpdateStreamSubscription builder with application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json body
func NewUpdateStreamSubscriptionRequestWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(server string, subscriptionId string, params *UpdateStreamSubscriptionParams, body UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStreamSubscriptionRequestWithBody(server, subscriptionId, params, "application/vnd.MarketingStreamSubscriptions.StreamSubscriptionResource.v1.0+json", bodyReader)
}

// NewUpdateStreamSubscriptionRequestWithBody generates requests for UpdateStreamSubscription with any type of body
func NewUpdateStreamSubscriptionRequestWithBody(server string, subscriptionId string, params *UpdateStreamSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListDspStreamSubscriptionsWithResponse request
	ListDspStreamSubscriptionsWithResponse(ctx context.Context, params *ListDspStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListDspStreamSubscriptionsResp, error)

	// CreateDspStreamSubscriptionWithBodyWithResponse request with any body
	CreateDspStreamSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDspStreamSubscriptionResp, error)

	CreateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, params *CreateDspStreamSubscriptionParams, body CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDspStreamSubscriptionResp, error)

	// GetDspStreamSubscriptionWithResponse request
	GetDspStreamSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetDspStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*GetDspStreamSubscriptionResp, error)

	// UpdateDspStreamSubscriptionWithBodyWithResponse request with any body
	UpdateDspStreamSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDspStreamSubscriptionResp, error)

	UpdateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, body UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDspStreamSubscriptionResp, error)

	// ListStreamSubscriptionsWithResponse request
	ListStreamSubscriptionsWithResponse(ctx context.Context, params *ListStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListStreamSubscriptionsResp, error)

	// CreateStreamSubscriptionWithBodyWithResponse request with any body
	CreateStreamSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStreamSubscriptionResp, error)

	CreateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, params *CreateStreamSubscriptionParams, body CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStreamSubscriptionResp, error)

	// GetStreamSubscriptionWithResponse request
	GetStreamSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*GetStreamSubscriptionResp, error)

	// UpdateStreamSubscriptionWithBodyWithResponse request with any body
	UpdateStreamSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStreamSubscriptionResp, error)

	UpdateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, body UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStreamSubscriptionResp, error)
}

type ListDspStreamSubscriptionsResp struct {
	Body                                                                              []byte
	HTTPResponse                                                                      *http.Response
	ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 *ListDspStreamSubscriptionsResponseContent
	JSON400                                                                           *InvalidRequestErrorResponseContent
	JSON403                                                                           *AccessForbiddenErrorResponseContent
	JSON429                                                                           *TooManyRequestsErrorResponseContent
	JSON500                                                                           *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r ListDspStreamSubscriptionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDspStreamSubscriptionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDspStreamSubscriptionResp struct {
	Body                                                                              []byte
	HTTPResponse                                                                      *http.Response
	ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 *CreateDspStreamSubscriptionResponseContent
	JSON400                                                                           *InvalidRequestErrorResponseContent
	JSON403                                                                           *AccessForbiddenErrorResponseContent
	JSON409                                                                           *OperationConflictErrorResponseContent
	JSON429                                                                           *TooManyRequestsErrorResponseContent
	JSON500                                                                           *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateDspStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDspStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDspStreamSubscriptionResp struct {
	Body                                                                              []byte
	HTTPResponse                                                                      *http.Response
	ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 *GetDspStreamSubscriptionResponseContent
	JSON400                                                                           *InvalidRequestErrorResponseContent
	JSON403                                                                           *AccessForbiddenErrorResponseContent
	JSON404                                                                           *ResourceNotFoundErrorResponseContent
	JSON429                                                                           *TooManyRequestsErrorResponseContent
	JSON500                                                                           *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r GetDspStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDspStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDspStreamSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequestErrorResponseContent
	JSON403      *AccessForbiddenErrorResponseContent
	JSON404      *ResourceNotFoundErrorResponseContent
	JSON409      *OperationConflictErrorResponseContent
	JSON429      *TooManyRequestsErrorResponseContent
	JSON500      *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateDspStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDspStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStreamSubscriptionsResp struct {
	Body                                                                           []byte
	HTTPResponse                                                                   *http.Response
	ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 *ListStreamSubscriptionsResponseContent
	JSON400                                                                        *InvalidRequestErrorResponseContent
	JSON401                                                                        *UnauthorizedAccessErrorResponseContent
	JSON403                                                                        *AccessForbiddenErrorResponseContent
	JSON404                                                                        *ResourceNotFoundErrorResponseContent
	JSON429                                                                        *TooManyRequestsErrorResponseContent
	JSON500                                                                        *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r ListStreamSubscriptionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStreamSubscriptionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStreamSubscriptionResp struct {
	Body                                                                           []byte
	HTTPResponse                                                                   *http.Response
	ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 *CreateStreamSubscriptionResponseContent
	JSON400                                                                        *InvalidRequestErrorResponseContent
	JSON401                                                                        *UnauthorizedAccessErrorResponseContent
	JSON403                                                                        *AccessForbiddenErrorResponseContent
	JSON404                                                                        *ResourceNotFoundErrorResponseContent
	JSON409                                                                        *OperationConflictErrorResponseContent
	JSON429                                                                        *TooManyRequestsErrorResponseContent
	JSON500                                                                        *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamSubscriptionResp struct {
	Body                                                                           []byte
	HTTPResponse                                                                   *http.Response
	ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 *GetStreamSubscriptionResponseContent
	JSON400                                                                        *InvalidRequestErrorResponseContent
	JSON401                                                                        *UnauthorizedAccessErrorResponseContent
	JSON403                                                                        *AccessForbiddenErrorResponseContent
	JSON404                                                                        *ResourceNotFoundErrorResponseContent
	JSON429                                                                        *TooManyRequestsErrorResponseContent
	JSON500                                                                        *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r GetStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStreamSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequestErrorResponseContent
	JSON401      *UnauthorizedAccessErrorResponseContent
	JSON403      *AccessForbiddenErrorResponseContent
	JSON404      *ResourceNotFoundErrorResponseContent
	JSON409      *OperationConflictErrorResponseContent
	JSON429      *TooManyRequestsErrorResponseContent
	JSON500      *InternalServerErrorResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateStreamSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStreamSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListDspStreamSubscriptionsWithResponse request returning *ListDspStreamSubscriptionsResp
func (c *ClientWithResponses) ListDspStreamSubscriptionsWithResponse(ctx context.Context, params *ListDspStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListDspStreamSubscriptionsResp, error) {
	rsp, err := c.ListDspStreamSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDspStreamSubscriptionsResp(rsp)
}

// CreateDspStreamSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateDspStreamSubscriptionResp
func (c *ClientWithResponses) CreateDspStreamSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDspStreamSubscriptionResp, error) {
	rsp, err := c.CreateDspStreamSubscriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDspStreamSubscriptionResp(rsp)
}

func (c *ClientWithResponses) CreateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, params *CreateDspStreamSubscriptionParams, body CreateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDspStreamSubscriptionResp, error) {
	rsp, err := c.CreateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDspStreamSubscriptionResp(rsp)
}

// GetDspStreamSubscriptionWithResponse request returning *GetDspStreamSubscriptionResp
func (c *ClientWithResponses) GetDspStreamSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetDspStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*GetDspStreamSubscriptionResp, error) {
	rsp, err := c.GetDspStreamSubscription(ctx, subscriptionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDspStreamSubscriptionResp(rsp)
}

// UpdateDspStreamSubscriptionWithBodyWithResponse request with arbitrary body returning *UpdateDspStreamSubscriptionResp
func (c *ClientWithResponses) UpdateDspStreamSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDspStreamSubscriptionResp, error) {
	rsp, err := c.UpdateDspStreamSubscriptionWithBody(ctx, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDspStreamSubscriptionResp(rsp)
}

func (c *ClientWithResponses) UpdateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateDspStreamSubscriptionParams, body UpdateDspStreamSubscriptionApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDspStreamSubscriptionResp, error) {
	rsp, err := c.UpdateDspStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10PlusJSONBody(ctx, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDspStreamSubscriptionResp(rsp)
}

// ListStreamSubscriptionsWithResponse request returning *ListStreamSubscriptionsResp
func (c *ClientWithResponses) ListStreamSubscriptionsWithResponse(ctx context.Context, params *ListStreamSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListStreamSubscriptionsResp, error) {
	rsp, err := c.ListStreamSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStreamSubscriptionsResp(rsp)
}

// CreateStreamSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateStreamSubscriptionResp
func (c *ClientWithResponses) CreateStreamSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStreamSubscriptionResp, error) {
	rsp, err := c.CreateStreamSubscriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStreamSubscriptionResp(rsp)
}

func (c *ClientWithResponses) CreateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, params *CreateStreamSubscriptionParams, body CreateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStreamSubscriptionResp, error) {
	rsp, err := c.CreateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStreamSubscriptionResp(rsp)
}

// GetStreamSubscriptionWithResponse request returning *GetStreamSubscriptionResp
func (c *ClientWithResponses) GetStreamSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetStreamSubscriptionParams, reqEditors ...RequestEditorFn) (*GetStreamSubscriptionResp, error) {
	rsp, err := c.GetStreamSubscription(ctx, subscriptionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamSubscriptionResp(rsp)
}

// UpdateStreamSubscriptionWithBodyWithResponse request with arbitrary body returning *UpdateStreamSubscriptionResp
func (c *ClientWithResponses) UpdateStreamSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStreamSubscriptionResp, error) {
	rsp, err := c.UpdateStreamSubscriptionWithBody(ctx, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStreamSubscriptionResp(rsp)
}

func (c *ClientWithResponses) UpdateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *UpdateStreamSubscriptionParams, body UpdateStreamSubscriptionApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStreamSubscriptionResp, error) {
	rsp, err := c.UpdateStreamSubscriptionWithApplicationVndMarketingStreamSubscriptionsStreamSubscriptionResourceV10PlusJSONBody(ctx, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStreamSubscriptionResp(rsp)
}

// ParseListDspStreamSubscriptionsResp parses an HTTP response from a ListDspStreamSubscriptionsWithResponse call
func ParseListDspStreamSubscriptionsResp(rsp *http.Response) (*ListDspStreamSubscriptionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDspStreamSubscriptionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDspStreamSubscriptionsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDspStreamSubscriptionResp parses an HTTP response from a CreateDspStreamSubscriptionWithResponse call
func ParseCreateDspStreamSubscriptionResp(rsp *http.Response) (*CreateDspStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDspStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDspStreamSubscriptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest OperationConflictErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDspStreamSubscriptionResp parses an HTTP response from a GetDspStreamSubscriptionWithResponse call
func ParseGetDspStreamSubscriptionResp(rsp *http.Response) (*GetDspStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDspStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDspStreamSubscriptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsDspStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDspStreamSubscriptionResp parses an HTTP response from a UpdateDspStreamSubscriptionWithResponse call
func ParseUpdateDspStreamSubscriptionResp(rsp *http.Response) (*UpdateDspStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDspStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest OperationConflictErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListStreamSubscriptionsResp parses an HTTP response from a ListStreamSubscriptionsWithResponse call
func ParseListStreamSubscriptionsResp(rsp *http.Response) (*ListStreamSubscriptionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStreamSubscriptionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListStreamSubscriptionsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedAccessErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateStreamSubscriptionResp parses an HTTP response from a CreateStreamSubscriptionWithResponse call
func ParseCreateStreamSubscriptionResp(rsp *http.Response) (*CreateStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateStreamSubscriptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedAccessErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest OperationConflictErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStreamSubscriptionResp parses an HTTP response from a GetStreamSubscriptionWithResponse call
func ParseGetStreamSubscriptionResp(rsp *http.Response) (*GetStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetStreamSubscriptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMarketingStreamSubscriptionsStreamSubscriptionResourceV10JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedAccessErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateStreamSubscriptionResp parses an HTTP response from a UpdateStreamSubscriptionWithResponse call
func ParseUpdateStreamSubscriptionResp(rsp *http.Response) (*UpdateStreamSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStreamSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequestErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedAccessErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessForbiddenErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest OperationConflictErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
