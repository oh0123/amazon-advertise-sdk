// Package sponsoreddisplaybudget provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package sponsoreddisplaybudget

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BudgetChangeType.
const (
	PERCENT BudgetChangeType = "PERCENT"
)

// Defines values for ComparisonOperator.
const (
	GREATERTHAN          ComparisonOperator = "GREATER_THAN"
	GREATERTHANOREQUALTO ComparisonOperator = "GREATER_THAN_OR_EQUAL_TO"
	LESSTHAN             ComparisonOperator = "LESS_THAN"
	LESSTHANOREQUALTO    ComparisonOperator = "LESS_THAN_OR_EQUAL_TO"
)

// Defines values for DayOfWeek.
const (
	FRIDAY    DayOfWeek = "FRIDAY"
	MONDAY    DayOfWeek = "MONDAY"
	SATURDAY  DayOfWeek = "SATURDAY"
	SUNDAY    DayOfWeek = "SUNDAY"
	THURSDAY  DayOfWeek = "THURSDAY"
	TUESDAY   DayOfWeek = "TUESDAY"
	WEDNESDAY DayOfWeek = "WEDNESDAY"
)

// Defines values for PerformanceMetric.
const (
	ACOS PerformanceMetric = "ACOS"
	CTR  PerformanceMetric = "CTR"
	CVR  PerformanceMetric = "CVR"
	ROAS PerformanceMetric = "ROAS"
)

// Defines values for RecurrenceType.
const (
	DAILY  RecurrenceType = "DAILY"
	WEEKLY RecurrenceType = "WEEKLY"
)

// Defines values for SDAudienceCategory.
const (
	InMarket  SDAudienceCategory = "In-market"
	Interest  SDAudienceCategory = "Interest"
	LifeEvent SDAudienceCategory = "Life event"
	Lifestyle SDAudienceCategory = "Lifestyle"
)

// Defines values for SDBidOptimizationV32.
const (
	Clicks      SDBidOptimizationV32 = "clicks"
	Conversions SDBidOptimizationV32 = "conversions"
	Reach       SDBidOptimizationV32 = "reach"
)

// Defines values for SDBrandSafetyDenyListDomainState.
const (
	ARCHIVED SDBrandSafetyDenyListDomainState = "ARCHIVED"
	ENABLED  SDBrandSafetyDenyListDomainState = "ENABLED"
)

// Defines values for SDBrandSafetyDenyListDomainType.
const (
	APP     SDBrandSafetyDenyListDomainType = "APP"
	WEBSITE SDBrandSafetyDenyListDomainType = "WEBSITE"
)

// Defines values for SDBrandSafetyDenyListDomainUpdateResultStatus.
const (
	SDBrandSafetyDenyListDomainUpdateResultStatusFAILURE SDBrandSafetyDenyListDomainUpdateResultStatus = "FAILURE"
	SDBrandSafetyDenyListDomainUpdateResultStatusSUCCESS SDBrandSafetyDenyListDomainUpdateResultStatus = "SUCCESS"
)

// Defines values for SDBrandSafetyRequestStatusStatus.
const (
	SDBrandSafetyRequestStatusStatusCOMPLETED  SDBrandSafetyRequestStatusStatus = "COMPLETED"
	SDBrandSafetyRequestStatusStatusFAILURE    SDBrandSafetyRequestStatusStatus = "FAILURE"
	SDBrandSafetyRequestStatusStatusINPROGRESS SDBrandSafetyRequestStatusStatus = "IN_PROGRESS"
)

// Defines values for SDCostTypeV31.
const (
	Cpc  SDCostTypeV31 = "cpc"
	Vcpm SDCostTypeV31 = "vcpm"
)

// Defines values for SDCreativeType.
const (
	IMAGE SDCreativeType = "IMAGE"
	VIDEO SDCreativeType = "VIDEO"
)

// Defines values for SDHeadlineRecommendationAccessDeniedExceptionCode.
const (
	ACCESSDENIED SDHeadlineRecommendationAccessDeniedExceptionCode = "ACCESS_DENIED"
)

// Defines values for SDHeadlineRecommendationIdentifierNotfoundExceptionCode.
const (
	IDENTIFIERNOTFOUND SDHeadlineRecommendationIdentifierNotfoundExceptionCode = "IDENTIFIER_NOT_FOUND"
)

// Defines values for SDHeadlineRecommendationInternalServerExceptionCode.
const (
	INTERNALERROR SDHeadlineRecommendationInternalServerExceptionCode = "INTERNAL_ERROR"
)

// Defines values for SDHeadlineRecommendationMarsThrottlingExceptionCode.
const (
	THROTTLED SDHeadlineRecommendationMarsThrottlingExceptionCode = "THROTTLED"
)

// Defines values for SDHeadlineRecommendationRequestAdFormat.
const (
	SPONSOREDDISPLAY SDHeadlineRecommendationRequestAdFormat = "SPONSORED_DISPLAY"
)

// Defines values for SDHeadlineRecommendationSchemaValidationExceptionCode.
const (
	INVALIDARGUMENT SDHeadlineRecommendationSchemaValidationExceptionCode = "INVALID_ARGUMENT"
)

// Defines values for SDLocale.
const (
	ArAE SDLocale = "ar_AE"
	DeDE SDLocale = "de_DE"
	EnAE SDLocale = "en_AE"
	EnAU SDLocale = "en_AU"
	EnCA SDLocale = "en_CA"
	EnGB SDLocale = "en_GB"
	EnIN SDLocale = "en_IN"
	EnSG SDLocale = "en_SG"
	EnUS SDLocale = "en_US"
	EsES SDLocale = "es_ES"
	EsMX SDLocale = "es_MX"
	FrCA SDLocale = "fr_CA"
	FrFR SDLocale = "fr_FR"
	HiIN SDLocale = "hi_IN"
	ItIT SDLocale = "it_IT"
	JaJP SDLocale = "ja_JP"
	KoKR SDLocale = "ko_KR"
	NlNL SDLocale = "nl_NL"
	PlPL SDLocale = "pl_PL"
	PtBR SDLocale = "pt_BR"
	SvSE SDLocale = "sv_SE"
	TaIN SDLocale = "ta_IN"
	ThTH SDLocale = "th_TH"
	TrTR SDLocale = "tr_TR"
	ViVN SDLocale = "vi_VN"
	ZhCN SDLocale = "zh_CN"
)

// Defines values for SDProductTargetingThemeExpressionType.
const (
	SDProductTargetingThemeExpressionTypeAsinBrandSameAs            SDProductTargetingThemeExpressionType = "asinBrandSameAs"
	SDProductTargetingThemeExpressionTypeAsinGlanceViewsGreaterThan SDProductTargetingThemeExpressionType = "asinGlanceViewsGreaterThan"
	SDProductTargetingThemeExpressionTypeAsinPriceGreaterThan       SDProductTargetingThemeExpressionType = "asinPriceGreaterThan"
	SDProductTargetingThemeExpressionTypeAsinReviewRatingLessThan   SDProductTargetingThemeExpressionType = "asinReviewRatingLessThan"
)

// Defines values for SDRecommendationType.
const (
	SDRecommendationTypePRODUCT SDRecommendationType = "PRODUCT"
)

// Defines values for SDRecommendationTypeV31.
const (
	SDRecommendationTypeV31CATEGORY SDRecommendationTypeV31 = "CATEGORY"
	SDRecommendationTypeV31PRODUCT  SDRecommendationTypeV31 = "PRODUCT"
)

// Defines values for SDRecommendationTypeV32.
const (
	AUDIENCE SDRecommendationTypeV32 = "AUDIENCE"
	CATEGORY SDRecommendationTypeV32 = "CATEGORY"
	PRODUCT  SDRecommendationTypeV32 = "PRODUCT"
)

// Defines values for SDRuleType.
const (
	PERFORMANCE SDRuleType = "PERFORMANCE"
	SCHEDULE    SDRuleType = "SCHEDULE"
)

// Defines values for SDTactic.
const (
	SDTacticRemarketing SDTactic = "remarketing"
	SDTacticT00001      SDTactic = "T00001"
	SDTacticT00010      SDTactic = "T00010"
	SDTacticT00020      SDTactic = "T00020"
)

// Defines values for SDTacticV31.
const (
	SDTacticV31Remarketing SDTacticV31 = "remarketing"
	SDTacticV31T00001      SDTacticV31 = "T00001"
	SDTacticV31T00010      SDTacticV31 = "T00010"
	SDTacticV31T00020      SDTacticV31 = "T00020"
	SDTacticV31T00030      SDTacticV31 = "T00030"
)

// Defines values for SDTargetingClauseV31ExpressionType.
const (
	Auto   SDTargetingClauseV31ExpressionType = "auto"
	Manual SDTargetingClauseV31ExpressionType = "manual"
)

// Defines values for SDTargetingPredicateBaseV31Type.
const (
	SDTargetingPredicateBaseV31TypeAsinAgeRangeSameAs          SDTargetingPredicateBaseV31Type = "asinAgeRangeSameAs"
	SDTargetingPredicateBaseV31TypeAsinBrandSameAs             SDTargetingPredicateBaseV31Type = "asinBrandSameAs"
	SDTargetingPredicateBaseV31TypeAsinCategorySameAs          SDTargetingPredicateBaseV31Type = "asinCategorySameAs"
	SDTargetingPredicateBaseV31TypeAsinGenreSameAs             SDTargetingPredicateBaseV31Type = "asinGenreSameAs"
	SDTargetingPredicateBaseV31TypeAsinIsPrimeShippingEligible SDTargetingPredicateBaseV31Type = "asinIsPrimeShippingEligible"
	SDTargetingPredicateBaseV31TypeAsinPriceBetween            SDTargetingPredicateBaseV31Type = "asinPriceBetween"
	SDTargetingPredicateBaseV31TypeAsinPriceGreaterThan        SDTargetingPredicateBaseV31Type = "asinPriceGreaterThan"
	SDTargetingPredicateBaseV31TypeAsinPriceLessThan           SDTargetingPredicateBaseV31Type = "asinPriceLessThan"
	SDTargetingPredicateBaseV31TypeAsinReviewRatingBetween     SDTargetingPredicateBaseV31Type = "asinReviewRatingBetween"
	SDTargetingPredicateBaseV31TypeAsinReviewRatingGreaterThan SDTargetingPredicateBaseV31Type = "asinReviewRatingGreaterThan"
	SDTargetingPredicateBaseV31TypeAsinReviewRatingLessThan    SDTargetingPredicateBaseV31Type = "asinReviewRatingLessThan"
	SDTargetingPredicateBaseV31TypeAudienceSameAs              SDTargetingPredicateBaseV31Type = "audienceSameAs"
	SDTargetingPredicateBaseV31TypeExactProduct                SDTargetingPredicateBaseV31Type = "exactProduct"
	SDTargetingPredicateBaseV31TypeLookback                    SDTargetingPredicateBaseV31Type = "lookback"
	SDTargetingPredicateBaseV31TypeNegative                    SDTargetingPredicateBaseV31Type = "negative"
	SDTargetingPredicateBaseV31TypeRelatedProduct              SDTargetingPredicateBaseV31Type = "relatedProduct"
	SDTargetingPredicateBaseV31TypeSimilarProduct              SDTargetingPredicateBaseV31Type = "similarProduct"
)

// Defines values for SDTargetingPredicateNestedV31Type.
const (
	Audience  SDTargetingPredicateNestedV31Type = "audience"
	Purchases SDTargetingPredicateNestedV31Type = "purchases"
	Views     SDTargetingPredicateNestedV31Type = "views"
)

// Defines values for SDTargetingPredicateV31Type.
const (
	AsinAgeRangeSameAs          SDTargetingPredicateV31Type = "asinAgeRangeSameAs"
	AsinBrandSameAs             SDTargetingPredicateV31Type = "asinBrandSameAs"
	AsinCategorySameAs          SDTargetingPredicateV31Type = "asinCategorySameAs"
	AsinGenreSameAs             SDTargetingPredicateV31Type = "asinGenreSameAs"
	AsinIsPrimeShippingEligible SDTargetingPredicateV31Type = "asinIsPrimeShippingEligible"
	AsinPriceBetween            SDTargetingPredicateV31Type = "asinPriceBetween"
	AsinPriceGreaterThan        SDTargetingPredicateV31Type = "asinPriceGreaterThan"
	AsinPriceLessThan           SDTargetingPredicateV31Type = "asinPriceLessThan"
	AsinReviewRatingBetween     SDTargetingPredicateV31Type = "asinReviewRatingBetween"
	AsinReviewRatingGreaterThan SDTargetingPredicateV31Type = "asinReviewRatingGreaterThan"
	AsinReviewRatingLessThan    SDTargetingPredicateV31Type = "asinReviewRatingLessThan"
	AsinSameAs                  SDTargetingPredicateV31Type = "asinSameAs"
	SimilarProduct              SDTargetingPredicateV31Type = "similarProduct"
)

// Defines values for SnapshotRequestStateFilter.
const (
	Archived              SnapshotRequestStateFilter = "archived"
	Enabled               SnapshotRequestStateFilter = "enabled"
	EnabledPaused         SnapshotRequestStateFilter = "enabled, paused"
	Enabledarchived       SnapshotRequestStateFilter = "enabled,archived"
	Enabledpausedarchived SnapshotRequestStateFilter = "enabled,paused,archived"
	Paused                SnapshotRequestStateFilter = "paused"
	Pausedarchived        SnapshotRequestStateFilter = "paused,archived"
)

// Defines values for SnapshotRequestTacticFilter.
const (
	Remarketing             SnapshotRequestTacticFilter = "remarketing"
	T00010                  SnapshotRequestTacticFilter = "T00010"
	T00010T00020            SnapshotRequestTacticFilter = "T00010,T00020"
	T00010T00020remarketing SnapshotRequestTacticFilter = "T00010,T00020,remarketing"
	T00010remarketing       SnapshotRequestTacticFilter = "T00010,remarketing"
	T00020                  SnapshotRequestTacticFilter = "T00020"
	T00020remarketing       SnapshotRequestTacticFilter = "T00020,remarketing"
)

// Defines values for SnapshotResponseRecordType.
const (
	SnapshotResponseRecordTypeAdGroups        SnapshotResponseRecordType = "adGroups"
	SnapshotResponseRecordTypeCampaigns       SnapshotResponseRecordType = "campaigns"
	SnapshotResponseRecordTypeNegativeTargets SnapshotResponseRecordType = "negativeTargets"
	SnapshotResponseRecordTypeProductAds      SnapshotResponseRecordType = "productAds"
	SnapshotResponseRecordTypeTargets         SnapshotResponseRecordType = "targets"
)

// Defines values for SnapshotResponseStatus.
const (
	FAILURE    SnapshotResponseStatus = "FAILURE"
	INPROGRESS SnapshotResponseStatus = "IN_PROGRESS"
	SUCCESS    SnapshotResponseStatus = "SUCCESS"
)

// Defines values for State.
const (
	ACTIVE State = "ACTIVE"
	PAUSED State = "PAUSED"
)

// Defines values for CreateSnapshotParamsRecordType.
const (
	CreateSnapshotParamsRecordTypeAdGroups        CreateSnapshotParamsRecordType = "adGroups"
	CreateSnapshotParamsRecordTypeCampaigns       CreateSnapshotParamsRecordType = "campaigns"
	CreateSnapshotParamsRecordTypeNegativeTargets CreateSnapshotParamsRecordType = "negativeTargets"
	CreateSnapshotParamsRecordTypeProductAds      CreateSnapshotParamsRecordType = "productAds"
	CreateSnapshotParamsRecordTypeTargets         CreateSnapshotParamsRecordType = "targets"
)

// AssociatedBudgetRuleResponse defines model for AssociatedBudgetRuleResponse.
type AssociatedBudgetRuleResponse struct {
	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The budget rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// AssociatedCampaign defines model for AssociatedCampaign.
type AssociatedCampaign struct {
	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// CampaignName The campaign name.
	CampaignName string `json:"campaignName"`

	// RuleStatus The budget rule evaluation status for this campaign. Read-only.
	RuleStatus string `json:"ruleStatus"`
}

// BudgetChangeType The value by which to update the budget of the budget rule.
type BudgetChangeType string

// BudgetRuleError The Error Response Object.
type BudgetRuleError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// BudgetRuleResponse defines model for BudgetRuleResponse.
type BudgetRuleResponse struct {
	AssociatedCampaignIds *[]string `json:"associatedCampaignIds,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// BudgetUsageCampaign defines model for BudgetUsageCampaign.
type BudgetUsageCampaign struct {
	// Budget Budget amount of resource requested
	Budget *float32 `json:"budget,omitempty"`

	// BudgetUsagePercent Budget usage percentage (spend / available budget) for the given budget policy.
	BudgetUsagePercent *float32 `json:"budgetUsagePercent,omitempty"`

	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`

	// UsageUpdatedTimestamp Last evaluation time for budget usage
	UsageUpdatedTimestamp *time.Time `json:"usageUpdatedTimestamp,omitempty"`
}

// BudgetUsageCampaignBatchError defines model for BudgetUsageCampaignBatchError.
type BudgetUsageCampaignBatchError struct {
	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`
}

// BudgetUsageCampaignRequest defines model for BudgetUsageCampaignRequest.
type BudgetUsageCampaignRequest struct {
	// CampaignIds A list of campaign IDs
	CampaignIds *[]string `json:"campaignIds,omitempty"`
}

// BudgetUsageCampaignResponse defines model for BudgetUsageCampaignResponse.
type BudgetUsageCampaignResponse struct {
	// Error List of budget usage percentages that failed to pull
	Error *[]BudgetUsageCampaignBatchError `json:"error,omitempty"`

	// Success List of budget usage percentages that were successfully pulled
	Success *[]BudgetUsageCampaign `json:"success,omitempty"`
}

// BudgetUsageError The Error Response Object.
type BudgetUsageError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// ComparisonOperator The comparison operator.
type ComparisonOperator string

// CreateAssociatedBudgetRulesRequest defines model for CreateAssociatedBudgetRulesRequest.
type CreateAssociatedBudgetRulesRequest struct {
	// BudgetRuleIds A list of budget rule identifiers.
	BudgetRuleIds *[]string `json:"budgetRuleIds,omitempty"`
}

// CreateAssociatedBudgetRulesResponse defines model for CreateAssociatedBudgetRulesResponse.
type CreateAssociatedBudgetRulesResponse struct {
	Responses *[]AssociatedBudgetRuleResponse `json:"responses,omitempty"`
}

// CreateBudgetRulesResponse defines model for CreateBudgetRulesResponse.
type CreateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// CreateSDBudgetRulesRequest defines model for CreateSDBudgetRulesRequest.
type CreateSDBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SDBudgetRuleDetails `json:"budgetRulesDetails,omitempty"`
}

// DateRangeTypeRuleDuration Object representing date range type rule duration.
type DateRangeTypeRuleDuration struct {
	// EndDate The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.
	EndDate *string `json:"endDate,omitempty"`

	// StartDate The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
	StartDate string `json:"startDate"`
}

// DayOfWeek The day of the week.
type DayOfWeek string

// DisassociateAssociatedBudgetRuleResponse defines model for DisassociateAssociatedBudgetRuleResponse.
type DisassociateAssociatedBudgetRuleResponse = map[string]interface{}

// EventTypeRuleDuration Object representing event type rule duration.
type EventTypeRuleDuration struct {
	// EndDate The event end date in YYYYMMDD format. Read-only.
	EndDate *string `json:"endDate,omitempty"`

	// EventId The event identifier. This value is available from the budget rules recommendation API.
	EventId string `json:"eventId"`

	// EventName The event name. Read-only.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.
	StartDate *string `json:"startDate,omitempty"`
}

// GetSDBudgetRuleResponse defines model for GetSDBudgetRuleResponse.
type GetSDBudgetRuleResponse struct {
	BudgetRule *SDBudgetRule `json:"budgetRule,omitempty"`
}

// GetSDBudgetRulesForAdvertiserResponse defines model for GetSDBudgetRulesForAdvertiserResponse.
type GetSDBudgetRulesForAdvertiserResponse struct {
	// BudgetRulesForAdvertiserResponse A list of rules created by the advertiser.
	BudgetRulesForAdvertiserResponse *[]SDBudgetRule `json:"budgetRulesForAdvertiserResponse,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// PerformanceMeasureCondition defines model for PerformanceMeasureCondition.
type PerformanceMeasureCondition struct {
	// ComparisonOperator The comparison operator.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator"`

	// MetricName The advertising performance metric.
	MetricName PerformanceMetric `json:"metricName"`

	// Threshold The performance threshold value.
	Threshold float64 `json:"threshold"`
}

// PerformanceMetric The advertising performance metric.
type PerformanceMetric string

// PerformanceMetricValue An object giving the name of the performance metric and its value when the rule was evaluated
type PerformanceMetricValue struct {
	// Name Name of the performance metric
	Name *string `json:"name,omitempty"`

	// Value Value of the performance metric
	Value *float64 `json:"value,omitempty"`
}

// RecommendedHeadline Recommended Headline in response object. Recommended headline will be locale specific, i.e. for an asin input in ES, Recommended headline will be in ES.
type RecommendedHeadline struct {
	// Headline String that contains Recommended headline.
	Headline *string `json:"headline,omitempty"`

	// HeadlineId Unique Id of Recommended headline.
	HeadlineId *string `json:"headlineId,omitempty"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {
	// DaysOfWeek Object representing days of the week for weekly type rule. It is not required for daily recurrence type
	DaysOfWeek *[]DayOfWeek `json:"daysOfWeek,omitempty"`

	// Type depicts the type of recurrence
	Type *RecurrenceType `json:"type,omitempty"`
}

// RecurrenceType depicts the type of recurrence
type RecurrenceType string

// RuleDuration defines model for RuleDuration.
type RuleDuration struct {
	// DateRangeTypeRuleDuration Object representing date range type rule duration.
	DateRangeTypeRuleDuration *DateRangeTypeRuleDuration `json:"dateRangeTypeRuleDuration,omitempty"`

	// EventTypeRuleDuration Object representing event type rule duration.
	EventTypeRuleDuration *EventTypeRuleDuration `json:"eventTypeRuleDuration,omitempty"`
}

// SDAPIError The error response object.
type SDAPIError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SDASIN Amazon Standard Identification Number
type SDASIN = string

// SDAudience The audience identifier
type SDAudience = string

// SDAudienceCategory An audience category determines the goal of the audience such as In-market, Interest and Lifestyle
type SDAudienceCategory string

// SDAudienceCategoryRecommendations List of recommended standard Amazon audience targets of a specific audience category
type SDAudienceCategoryRecommendations struct {
	// Audiences List of recommended standard Amazon audience targets
	Audiences *[]SDAudienceRecommendation `json:"audiences,omitempty"`

	// Category An audience category determines the goal of the audience such as In-market, Interest and Lifestyle
	Category *SDAudienceCategory `json:"category,omitempty"`
}

// SDAudienceRecommendation A recommended standard Amazon audience to target ads on
type SDAudienceRecommendation struct {
	// Audience The audience identifier
	Audience *SDAudience `json:"audience,omitempty"`

	// Name The Amazon audience name
	Name *string `json:"name,omitempty"`

	// Rank A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
	Rank *int `json:"rank,omitempty"`
}

// SDAudienceRecommendations defines model for SDAudienceRecommendations.
type SDAudienceRecommendations struct {
	// Audiences List of recommended audience targets, broken down by audience category
	Audiences *[]SDAudienceCategoryRecommendations `json:"audiences,omitempty"`
}

// SDBidOptimizationV32 Determines what the recommended bids will be optimized for.
//
// |Name|CostType|Supported Tactics|Description|
// |----|----------|-----------|-----------|
// |clicks|cpc|T00020 T00030|Optimize for page visits|
// |conversions|cpc|T00020 T00030|Optimize for conversion|
// |reach|vcpm|T00020 T00030|Optimize for viewable impressions|
type SDBidOptimizationV32 string

// SDBidRecommendationV31 A recommended bid range to use for a target.
type SDBidRecommendationV31 struct {
	// RangeLower The lowest recommended bid to use to win an ad placement for this target.
	RangeLower float32 `json:"rangeLower"`

	// RangeUpper The highest recommended bid to use to win an ad placement for this target.
	RangeUpper float32 `json:"rangeUpper"`

	// Recommended The recommended bid to use to win an ad placement for this target.
	Recommended float32 `json:"recommended"`
}

// SDBrandSafetyDenyListDomain defines model for SDBrandSafetyDenyListDomain.
type SDBrandSafetyDenyListDomain struct {
	// Name The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)
	Name string `json:"name"`

	// Type The domain type.
	Type SDBrandSafetyDenyListDomainType `json:"type"`
}

// SDBrandSafetyDenyListDomainState The state of the domain.
type SDBrandSafetyDenyListDomainState string

// SDBrandSafetyDenyListDomainType The domain type.
type SDBrandSafetyDenyListDomainType string

// SDBrandSafetyDenyListDomainUpdateResultStatus The state of the domain.
type SDBrandSafetyDenyListDomainUpdateResultStatus string

// SDBrandSafetyDenyListProcessedDomain defines model for SDBrandSafetyDenyListProcessedDomain.
type SDBrandSafetyDenyListProcessedDomain struct {
	// CreatedAt The date time the domain was created at. Format: YYYY-MM-ddT:HH:mm:ssZ
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DomainId The identifier of the Brand Safety List domain.
	DomainId *int64 `json:"domainId,omitempty"`

	// LastModified The date time the domain was last modified. Format: YYYY-MM-ddT:HH:mm:ssZ
	LastModified *time.Time `json:"lastModified,omitempty"`

	// Name The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)
	Name *string `json:"name,omitempty"`

	// State The state of the domain.
	State *SDBrandSafetyDenyListDomainState `json:"state,omitempty"`

	// Type The domain type.
	Type *SDBrandSafetyDenyListDomainType `json:"type,omitempty"`
}

// SDBrandSafetyGetResponse Response for Brand Safety Deny List GET requests
type SDBrandSafetyGetResponse struct {
	// Domains List of Brand Safety Deny List Domains
	Domains *[]SDBrandSafetyDenyListProcessedDomain `json:"domains,omitempty"`

	// Pagination Response pagination info for Brand Safety Deny List GET requests
	Pagination *SDBrandSafetyGetResponsePagination `json:"pagination,omitempty"`
}

// SDBrandSafetyGetResponsePagination Response pagination info for Brand Safety Deny List GET requests
type SDBrandSafetyGetResponsePagination struct {
	// Limit The maximum number of deny list domains returned from GET request.
	Limit *int `json:"limit,omitempty"`

	// Offset The number of deny list domains skipped.
	Offset *int `json:"offset,omitempty"`

	// Total The total number of deny list domains created by the advertiser.
	Total *int `json:"total,omitempty"`
}

// SDBrandSafetyListRequestStatusResponse List of all requests' status.
type SDBrandSafetyListRequestStatusResponse struct {
	// RequestStatusList List of all requests' status.
	RequestStatusList *[]SDBrandSafetyRequestStatus `json:"requestStatusList,omitempty"`
}

// SDBrandSafetyPostRequest POST Request for Brand Safety
type SDBrandSafetyPostRequest struct {
	Domains []SDBrandSafetyDenyListDomain `json:"domains"`
}

// SDBrandSafetyRequestResult defines model for SDBrandSafetyRequestResult.
type SDBrandSafetyRequestResult struct {
	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`

	// DomainId The identifier of the Brand Safety Deny List Domain.
	DomainId *int64 `json:"domainId,omitempty"`

	// Name The website or app identifier.
	Name *string `json:"name,omitempty"`

	// Status The state of the domain.
	Status *SDBrandSafetyDenyListDomainUpdateResultStatus `json:"status,omitempty"`
}

// SDBrandSafetyRequestResultsResponse defines model for SDBrandSafetyRequestResultsResponse.
type SDBrandSafetyRequestResultsResponse struct {
	// Results A list of results for the given requestId
	Results *[]SDBrandSafetyRequestResult `json:"results,omitempty"`
}

// SDBrandSafetyRequestStatus defines model for SDBrandSafetyRequestStatus.
type SDBrandSafetyRequestStatus struct {
	// RequestId Request ID
	RequestId *string `json:"requestId,omitempty"`

	// Status The status of the request
	Status *SDBrandSafetyRequestStatusStatus `json:"status,omitempty"`

	// StatusDetails Details related to the request status
	StatusDetails *string `json:"statusDetails,omitempty"`

	// Timestamp Request timestamp
	Timestamp *string `json:"timestamp,omitempty"`
}

// SDBrandSafetyRequestStatusStatus The status of the request
type SDBrandSafetyRequestStatusStatus string

// SDBrandSafetyRequestStatusResponse The status of the request.
type SDBrandSafetyRequestStatusResponse struct {
	RequestStatus *SDBrandSafetyRequestStatus `json:"requestStatus,omitempty"`
}

// SDBrandSafetyUpdateResponse Response for Brand Safety POST and DELETE requests
type SDBrandSafetyUpdateResponse struct {
	// RequestId The identifier of the request
	RequestId *string `json:"requestId,omitempty"`
}

// SDBudgetHistory defines model for SDBudgetHistory.
type SDBudgetHistory struct {
	History *[]SDRuleBasedBudget `json:"history,omitempty"`
}

// SDBudgetRecommendation defines model for SDBudgetRecommendation.
type SDBudgetRecommendation struct {
	// CampaignId Campaign id.
	CampaignId string `json:"campaignId"`

	// Index Correlate the recommendation to the campaign index in the request. Zero-based.
	Index                        int                            `json:"index"`
	SevenDaysMissedOpportunities SDSevenDaysMissedOpportunities `json:"sevenDaysMissedOpportunities"`

	// SuggestedBudget Recommended budget for the campaign. This will be in local currency.
	SuggestedBudget float32 `json:"suggestedBudget"`
}

// SDBudgetRecommendationError defines model for SDBudgetRecommendationError.
type SDBudgetRecommendationError struct {
	// CampaignId Campaign id.
	CampaignId string `json:"campaignId"`

	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`

	// Index Correlate the recommendation to the campaign index in the request. Zero-based.
	Index int `json:"index"`
}

// SDBudgetRecommendationsRequest Request for budget recommendations.
type SDBudgetRecommendationsRequest struct {
	// CampaignIds A list of campaign ids for which to get budget recommendations and missed opportunities.
	CampaignIds []string `json:"campaignIds"`
}

// SDBudgetRecommendationsResponse defines model for SDBudgetRecommendationsResponse.
type SDBudgetRecommendationsResponse struct {
	// BudgetRecommendationsErrorResults List of errors that occurred when generating budget recommendation.
	BudgetRecommendationsErrorResults []SDBudgetRecommendationError `json:"budgetRecommendationsErrorResults"`

	// BudgetRecommendationsSuccessResults List of successful budget recommendation for campaigns.
	BudgetRecommendationsSuccessResults []SDBudgetRecommendation `json:"budgetRecommendationsSuccessResults"`
}

// SDBudgetRule defines model for SDBudgetRule.
type SDBudgetRule struct {
	// CreatedDate Epoch time of budget rule creation. Read-only.
	CreatedDate *int64 `json:"createdDate,omitempty"`

	// LastUpdatedDate Epoch time of budget rule update. Read-only.
	LastUpdatedDate *int64 `json:"lastUpdatedDate,omitempty"`

	// RuleDetails Object representing details of a budget rule for SD campaign
	RuleDetails *SDBudgetRuleDetails `json:"ruleDetails,omitempty"`

	// RuleId The budget rule identifier.
	RuleId string `json:"ruleId"`

	// RuleState The budget rule state.
	RuleState *State `json:"ruleState,omitempty"`

	// RuleStatus The budget rule status. Read-only.
	RuleStatus *string `json:"ruleStatus,omitempty"`
}

// SDBudgetRuleDetails Object representing details of a budget rule for SD campaign
type SDBudgetRuleDetails struct {
	BudgetIncreaseBy *BudgetIncreaseBy `json:"budgetIncreaseBy,omitempty"`
	Duration         *RuleDuration     `json:"duration,omitempty"`

	// Name The budget rule name. Required to be unique within a campaign.
	Name                        *string                      `json:"name,omitempty"`
	PerformanceMeasureCondition *PerformanceMeasureCondition `json:"performanceMeasureCondition,omitempty"`
	Recurrence                  *Recurrence                  `json:"recurrence,omitempty"`

	// RuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
	RuleType *SDRuleType `json:"ruleType,omitempty"`
}

// SDCategory The category identifier
type SDCategory = int64

// SDCategoryRecommendation A recommended category to target ads on
type SDCategoryRecommendation struct {
	// Category The category identifier
	Category *SDCategory `json:"category,omitempty"`

	// Name The category name
	Name *string `json:"name,omitempty"`

	// Path The path of the category within the category catalogue
	Path *[]string `json:"path,omitempty"`

	// Rank A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
	Rank *int `json:"rank,omitempty"`

	// TargetableAsinCountRange The range of ASINs available within the category catalogue
	TargetableAsinCountRange *struct {
		RangeLower *int `json:"rangeLower,omitempty"`
		RangeUpper *int `json:"rangeUpper,omitempty"`
	} `json:"targetableAsinCountRange,omitempty"`
}

// SDCategoryRecommendationV33 A recommended category to target ads on
type SDCategoryRecommendationV33 struct {
	// Category The category identifier
	Category *SDCategory `json:"category,omitempty"`

	// Name The category name
	Name *string `json:"name,omitempty"`

	// Path The path of the category within the category catalogue
	Path *[]string `json:"path,omitempty"`

	// Rank A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
	Rank *int `json:"rank,omitempty"`

	// TargetableAsinCountRange The range of ASINs available within the category catalogue
	TargetableAsinCountRange *struct {
		RangeLower *int `json:"rangeLower,omitempty"`
		RangeUpper *int `json:"rangeUpper,omitempty"`
	} `json:"targetableAsinCountRange,omitempty"`

	// TranslatedName The translated category name by requested locale, field will not be provided if locale is not provided or campaign localization service is down
	TranslatedName *string `json:"translatedName,omitempty"`

	// TranslatedPath The translated path of the category within the category catalogue by requested locale, field will not be provided if locale is not provided or campaign localization is down
	TranslatedPath *[]string `json:"translatedPath,omitempty"`
}

// SDCategoryRecommendations defines model for SDCategoryRecommendations.
type SDCategoryRecommendations struct {
	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendation `json:"categories,omitempty"`
}

// SDCategoryRecommendationsV33 defines model for SDCategoryRecommendationsV33.
type SDCategoryRecommendationsV33 struct {
	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendationV33 `json:"categories,omitempty"`
}

// SDCostTypeV31 Determines what performance metric the bid recommendations will be optimized for.
// |Name|Supported Tactics|Description|
// |----|----------|-----------|
// |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|
// |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
type SDCostTypeV31 string

// SDCreativeType The type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. Only supports one type (VIDEO or IMAGE) at a time.
type SDCreativeType string

// SDErrorResponse defines model for SDErrorResponse.
type SDErrorResponse struct {
	// Code The HTTP status code of the response
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SDGetAssociatedCampaignsResponse defines model for SDGetAssociatedCampaignsResponse.
type SDGetAssociatedCampaignsResponse struct {
	// AssociatedCampaigns A list of campaigns that are associated to this budget rule.
	AssociatedCampaigns *[]AssociatedCampaign `json:"associatedCampaigns,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SDGoalProduct A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
type SDGoalProduct struct {
	// Asin Amazon Standard Identification Number
	Asin SDASIN `json:"asin"`
}

// SDHeadlineRecommendationAccessDeniedException defines model for SDHeadlineRecommendationAccessDeniedException.
type SDHeadlineRecommendationAccessDeniedException struct {
	// Code AccessDeniedErrorCode.
	Code *SDHeadlineRecommendationAccessDeniedExceptionCode `json:"code,omitempty"`

	// Details A human-readable description of the error response.
	Details *string `json:"details,omitempty"`
}

// SDHeadlineRecommendationAccessDeniedExceptionCode AccessDeniedErrorCode.
type SDHeadlineRecommendationAccessDeniedExceptionCode string

// SDHeadlineRecommendationIdentifierNotfoundException defines model for SDHeadlineRecommendationIdentifierNotfoundException.
type SDHeadlineRecommendationIdentifierNotfoundException struct {
	// Code IdentiferNotFoundErrorCode.
	Code *SDHeadlineRecommendationIdentifierNotfoundExceptionCode `json:"code,omitempty"`

	// Details A human-readable description of the error response.
	Details *string `json:"details,omitempty"`
}

// SDHeadlineRecommendationIdentifierNotfoundExceptionCode IdentiferNotFoundErrorCode.
type SDHeadlineRecommendationIdentifierNotfoundExceptionCode string

// SDHeadlineRecommendationInternalServerException defines model for SDHeadlineRecommendationInternalServerException.
type SDHeadlineRecommendationInternalServerException struct {
	// Code InternalErrorCode.
	Code *SDHeadlineRecommendationInternalServerExceptionCode `json:"code,omitempty"`

	// Details A human-readable description of the error response.
	Details *string `json:"details,omitempty"`
}

// SDHeadlineRecommendationInternalServerExceptionCode InternalErrorCode.
type SDHeadlineRecommendationInternalServerExceptionCode string

// SDHeadlineRecommendationMarsThrottlingException defines model for SDHeadlineRecommendationMarsThrottlingException.
type SDHeadlineRecommendationMarsThrottlingException struct {
	// Code ThrottledErrorCode.
	Code *SDHeadlineRecommendationMarsThrottlingExceptionCode `json:"code,omitempty"`

	// Details A human-readable description of the error response.
	Details *string `json:"details,omitempty"`
}

// SDHeadlineRecommendationMarsThrottlingExceptionCode ThrottledErrorCode.
type SDHeadlineRecommendationMarsThrottlingExceptionCode string

// SDHeadlineRecommendationRequest Request structure of SD headline recommendation API.
type SDHeadlineRecommendationRequest struct {
	AdFormat *SDHeadlineRecommendationRequestAdFormat `json:"adFormat,omitempty"`

	// Asins An array of ASINs associated with the creative.
	Asins *[]string `json:"asins,omitempty"`

	// MaxNumRecommendations Maximum number of recommendations that API should return. Response will [0, maxNumRecommendations] recommendations (recommendations are not guaranteed as there can be instances where the ML model can not generate policy compliant headlines for the given set of asins).
	MaxNumRecommendations *float32 `json:"maxNumRecommendations,omitempty"`
}

// SDHeadlineRecommendationRequestAdFormat defines model for SDHeadlineRecommendationRequest.AdFormat.
type SDHeadlineRecommendationRequestAdFormat string

// SDHeadlineRecommendationResponse Response structure of SD headline recommendation API.
type SDHeadlineRecommendationResponse struct {
	// Recommendations Recommendations are sorted, i.e., more suitable headline has lesser array index value.
	Recommendations *[]RecommendedHeadline `json:"recommendations,omitempty"`

	// RequestId An identifier for request made which is generated by server.
	RequestId *string `json:"requestId,omitempty"`
}

// SDHeadlineRecommendationSchemaValidationException defines model for SDHeadlineRecommendationSchemaValidationException.
type SDHeadlineRecommendationSchemaValidationException struct {
	// Code InvalidArgumentErrorCode.
	Code *SDHeadlineRecommendationSchemaValidationExceptionCode `json:"code,omitempty"`

	// Details A human-readable description of the error response.
	Details *string `json:"details,omitempty"`
}

// SDHeadlineRecommendationSchemaValidationExceptionCode InvalidArgumentErrorCode.
type SDHeadlineRecommendationSchemaValidationExceptionCode string

// SDListAssociatedBudgetRulesResponse defines model for SDListAssociatedBudgetRulesResponse.
type SDListAssociatedBudgetRulesResponse struct {
	// AssociatedRules A list of associated budget rules.
	AssociatedRules *[]SDBudgetRule `json:"associatedRules,omitempty"`
}

// SDLocale List of supported locales
type SDLocale string

// SDProductRecommendation A recommended product to target ads on
type SDProductRecommendation struct {
	// Asin Amazon Standard Identification Number
	Asin *SDASIN `json:"asin,omitempty"`

	// Rank A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
	Rank *int `json:"rank,omitempty"`
}

// SDProductRecommendationV32 A recommended product to target ads on
type SDProductRecommendationV32 struct {
	// AdvertisedAsins The top advertised products this recommendation is made for.
	AdvertisedAsins *[]SDASIN `json:"advertisedAsins,omitempty"`

	// Asin Amazon Standard Identification Number
	Asin *SDASIN `json:"asin,omitempty"`

	// Rank A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
	Rank *int `json:"rank,omitempty"`
}

// SDProductRecommendationsV31 defines model for SDProductRecommendationsV31.
type SDProductRecommendationsV31 struct {
	// Products List of recommended product targets
	Products *[]SDProductRecommendation `json:"products,omitempty"`
}

// SDProductRecommendationsV32 defines model for SDProductRecommendationsV32.
type SDProductRecommendationsV32 struct {
	// Products List of recommended product targets
	Products *[]SDProductRecommendationV32 `json:"products,omitempty"`
}

// SDProductTargetingRecommendationsSuccess Recommendation results for product targeting.
type SDProductTargetingRecommendationsSuccess struct {
	// Code HTTP status code 200 indicating a successful response for product recommendations.
	Code *string `json:"code,omitempty"`

	// Name The theme name specified in the request.
	Name *string `json:"name,omitempty"`

	// Recommendations A list of recommended products.
	Recommendations *[]SDProductRecommendationV32 `json:"recommendations,omitempty"`
}

// SDProductTargetingRecommendationsSuccessV34 Recommendation results for product targeting.
type SDProductTargetingRecommendationsSuccessV34 struct {
	// Code HTTP status code 200 indicating a successful response for product recommendations.
	Code *string `json:"code,omitempty"`

	// Expression A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions.
	// For example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations
	// which are both with greater price and less review rating compared to the goal products.
	// Note: currently the service only support one item in the array.
	Expression *[]SDProductTargetingThemeExpression `json:"expression,omitempty"`

	// Name The theme name specified in the request.
	Name *string `json:"name,omitempty"`

	// Recommendations A list of recommended products.
	Recommendations *[]SDProductRecommendationV32 `json:"recommendations,omitempty"`
}

// SDProductTargetingTheme Product targeting theme definitions.
type SDProductTargetingTheme struct {
	// Expression A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions.
	// For example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations
	// which are both with greater price and less review rating compared to the goal products.
	// Note: currently the service only support one item in the array.
	Expression []SDProductTargetingThemeExpression `json:"expression"`

	// Name This is the meaningful theme name which will be used as a unique identifier across various themes in the same request.
	// This identifier will also be used to map the recommendations back to the theme in the response body.
	// Note: the value for this field cannot be "default" as that's a reserved keyword in the system.
	Name string `json:"name"`
}

// SDProductTargetingThemeExpression The expression used to define the product targeting theme.
type SDProductTargetingThemeExpression struct {
	// Type The product targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.
	Type SDProductTargetingThemeExpressionType `json:"type"`
}

// SDProductTargetingThemeExpressionType The product targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.
type SDProductTargetingThemeExpressionType string

// SDProductThemeRecommendations A list of product targeting theme recommendations.
type SDProductThemeRecommendations = []SDProductThemeRecommendations_Item

// SDProductThemeRecommendations_Item defines model for SDProductThemeRecommendations.Item.
type SDProductThemeRecommendations_Item struct {
	union json.RawMessage
}

// SDProductThemeRecommendationsV34 A list of product targeting theme recommendations.
type SDProductThemeRecommendationsV34 = []SDProductThemeRecommendationsV34_Item

// SDProductThemeRecommendationsV34_Item defines model for SDProductThemeRecommendationsV34.Item.
type SDProductThemeRecommendationsV34_Item struct {
	union json.RawMessage
}

// SDRecommendationType Signifies a type of recommendation
type SDRecommendationType string

// SDRecommendationTypeV31 Signifies a type of recommendation
type SDRecommendationTypeV31 string

// SDRecommendationTypeV32 Signifies a type of recommendation
type SDRecommendationTypeV32 string

// SDRuleBasedBudget defines model for SDRuleBasedBudget.
type SDRuleBasedBudget struct {
	AppliedRule *SDBudgetRule `json:"appliedRule,omitempty"`

	// DailyBudgetValue The daily budget value.
	DailyBudgetValue *float32 `json:"dailyBudgetValue,omitempty"`

	// ExecutionTime Epoch time of budget rule execution.
	ExecutionTime *int64 `json:"executionTime,omitempty"`

	// PerformanceMetric An object giving the name of the performance metric and its value when the rule was evaluated
	PerformanceMetric *PerformanceMetricValue `json:"performanceMetric,omitempty"`

	// RuleBasedBudgetValue The budget value.
	RuleBasedBudgetValue *float32 `json:"ruleBasedBudgetValue,omitempty"`
}

// SDRuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
type SDRuleType string

// SDSevenDaysMissedOpportunities defines model for SDSevenDaysMissedOpportunities.
type SDSevenDaysMissedOpportunities struct {
	// EndDate End date of the missed opportunities date range (YYYY-MM-DD).
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// EstimatedMissedClicksLower Lower bound of the estimated missed clicks.
	EstimatedMissedClicksLower *int `json:"estimatedMissedClicksLower,omitempty"`

	// EstimatedMissedClicksUpper Upper bound of the estimated missed clicks.
	EstimatedMissedClicksUpper *int `json:"estimatedMissedClicksUpper,omitempty"`

	// EstimatedMissedImpressionsLower Lower bound of the estimated missed impressions.
	EstimatedMissedImpressionsLower *int `json:"estimatedMissedImpressionsLower,omitempty"`

	// EstimatedMissedImpressionsUpper Upper bound of the estimated missed impressions.
	EstimatedMissedImpressionsUpper *int `json:"estimatedMissedImpressionsUpper,omitempty"`

	// EstimatedMissedSalesLower Lower bound of the estimated missed sales. This will be in local currency.
	EstimatedMissedSalesLower *float32 `json:"estimatedMissedSalesLower,omitempty"`

	// EstimatedMissedSalesUpper Upper bound of the estimated missed sales. This will be in local currency.
	EstimatedMissedSalesUpper *float32 `json:"estimatedMissedSalesUpper,omitempty"`

	// EstimatedMissedViewableImpressionsLower Lower bound of the estimated missed viewable impressions for vCPM campaigns.
	EstimatedMissedViewableImpressionsLower *int `json:"estimatedMissedViewableImpressionsLower,omitempty"`

	// EstimatedMissedViewableImpressionsUpper Upper bound of the estimated missed viewable impressions for vCPM campaigns.
	EstimatedMissedViewableImpressionsUpper *int `json:"estimatedMissedViewableImpressionsUpper,omitempty"`

	// PercentTimeInBudget Percentage of time the campaign is active with a budget.
	PercentTimeInBudget *float32 `json:"percentTimeInBudget,omitempty"`

	// StartDate Start date of the missed opportunities date range (YYYY-MM-DD).
	StartDate *openapi_types.Date `json:"startDate,omitempty"`
}

// SDTactic The advertising tactic associated with the campaign. The following table lists available tactic names:
//
// |Tactic Name|Type|Description|
// |-----------|-----|-----------|
// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
type SDTactic string

// SDTacticV31 The advertising tactic associated with the campaign. The following table lists available tactic names:
// |Tactic Name|Type|Description|
// |-----------|-----|-----------|
// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
// |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
type SDTacticV31 string

// SDTargetExpressionV31 defines model for SDTargetExpressionV31.
type SDTargetExpressionV31 struct {
	union json.RawMessage
}

// SDTargetingBidRecommendationsRequestV31 Request for targeting bid recommendations.
type SDTargetingBidRecommendationsRequestV31 struct {
	// Products A list of products to tailor bid recommendations for category and audience based targeting clauses.
	Products *[]SDGoalProduct `json:"products,omitempty"`

	// TargetingClauses A list of targeting clauses to receive bid recommendations for.
	TargetingClauses []struct {
		// TargetingClause The targeting clause
		TargetingClause SDTargetingClauseV31 `json:"targetingClause"`
	} `json:"targetingClauses"`
}

// SDTargetingBidRecommendationsRequestV32 Request for targeting bid recommendations.
type SDTargetingBidRecommendationsRequestV32 struct {
	// BidOptimization Determines what the recommended bids will be optimized for.
	//
	// |Name|CostType|Supported Tactics|Description|
	// |----|----------|-----------|-----------|
	// |clicks|cpc|T00020 T00030|Optimize for page visits|
	// |conversions|cpc|T00020 T00030|Optimize for conversion|
	// |reach|vcpm|T00020 T00030|Optimize for viewable impressions|
	BidOptimization SDBidOptimizationV32 `json:"bidOptimization"`

	// CostType Determines what performance metric the bid recommendations will be optimized for.
	// |Name|Supported Tactics|Description|
	// |----|----------|-----------|
	// |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|
	// |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
	CostType SDCostTypeV31 `json:"costType"`

	// Products A list of products to tailor bid recommendations for category and audience based targeting clauses.
	Products *[]SDGoalProduct `json:"products,omitempty"`

	// TargetingClauses A list of targeting clauses to receive bid recommendations for.
	TargetingClauses []struct {
		// TargetingClause The targeting clause
		TargetingClause SDTargetingClauseV31 `json:"targetingClause"`
	} `json:"targetingClauses"`
}

// SDTargetingBidRecommendationsRequestV33 Request for targeting bid recommendations.
type SDTargetingBidRecommendationsRequestV33 struct {
	// BidOptimization Determines what the recommended bids will be optimized for.
	//
	// |Name|CostType|Supported Tactics|Description|
	// |----|----------|-----------|-----------|
	// |clicks|cpc|T00020 T00030|Optimize for page visits|
	// |conversions|cpc|T00020 T00030|Optimize for conversion|
	// |reach|vcpm|T00020 T00030|Optimize for viewable impressions|
	BidOptimization SDBidOptimizationV32 `json:"bidOptimization"`

	// CostType Determines what performance metric the bid recommendations will be optimized for.
	// |Name|Supported Tactics|Description|
	// |----|----------|-----------|
	// |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|
	// |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
	CostType SDCostTypeV31 `json:"costType"`

	// CreativeType The type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. Only supports one type (VIDEO or IMAGE) at a time.
	CreativeType *SDCreativeType `json:"creativeType"`

	// Products A list of products to tailor bid recommendations for category and audience based targeting clauses.
	Products *[]SDGoalProduct `json:"products,omitempty"`

	// TargetingClauses A list of targeting clauses to receive bid recommendations for.
	TargetingClauses []struct {
		// TargetingClause The targeting clause
		TargetingClause SDTargetingClauseV31 `json:"targetingClause"`
	} `json:"targetingClauses"`
}

// SDTargetingBidRecommendationsResponseItemFailureV31 Failed bid recommendation response.
type SDTargetingBidRecommendationsResponseItemFailureV31 struct {
	// Code The HTTP status code of this item.
	Code string `json:"code"`

	// Details A human-readable description of this item on error.
	Details string `json:"details"`
}

// SDTargetingBidRecommendationsResponseItemSuccessV31 defines model for SDTargetingBidRecommendationsResponseItemSuccessV31.
type SDTargetingBidRecommendationsResponseItemSuccessV31 struct {
	// Code The HTTP status code of this item.
	Code *string `json:"code,omitempty"`

	// RangeLower The lowest recommended bid to use to win an ad placement for this target.
	RangeLower float32 `json:"rangeLower"`

	// RangeUpper The highest recommended bid to use to win an ad placement for this target.
	RangeUpper float32 `json:"rangeUpper"`

	// Recommended The recommended bid to use to win an ad placement for this target.
	Recommended float32 `json:"recommended"`
}

// SDTargetingBidRecommendationsResponseV31 Response to a request for targeting bid recommendations.
type SDTargetingBidRecommendationsResponseV31 struct {
	BidRecommendations interface{} `json:"bidRecommendations"`

	// CostType Determines what performance metric the bid recommendations will be optimized for.
	// |Name|Supported Tactics|Description|
	// |----|----------|-----------|
	// |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|
	// |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
	CostType SDCostTypeV31 `json:"costType"`
}

// SDTargetingBidRecommendationsResponseV32 Response to a request for targeting bid recommendations.
type SDTargetingBidRecommendationsResponseV32 struct {
	// BidOptimization Determines what the recommended bids will be optimized for.
	//
	// |Name|CostType|Supported Tactics|Description|
	// |----|----------|-----------|-----------|
	// |clicks|cpc|T00020 T00030|Optimize for page visits|
	// |conversions|cpc|T00020 T00030|Optimize for conversion|
	// |reach|vcpm|T00020 T00030|Optimize for viewable impressions|
	BidOptimization    SDBidOptimizationV32 `json:"bidOptimization"`
	BidRecommendations interface{}          `json:"bidRecommendations"`

	// CostType Determines what performance metric the bid recommendations will be optimized for.
	// |Name|Supported Tactics|Description|
	// |----|----------|-----------|
	// |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|
	// |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
	CostType SDCostTypeV31 `json:"costType"`
}

// SDTargetingClauseV31 The targeting clause
type SDTargetingClauseV31 struct {
	// Expression The targeting expression to match against.
	//
	// ------- Applicable to Product targeting (T00020) -------
	// * A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.
	// * Expressions must specify either a category predicate or an ASIN predicate, but never both.
	// * Only one category may be specified per targeting expression.
	// * Only one brand may be specified per targeting expression.
	// * Only one asin may be specified per targeting expression.
	// * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.
	//
	// ------- Applicable to Audience targeting (T00030) -------
	// * A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.
	// * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.
	// * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
	Expression SDTargetingExpressionV31 `json:"expression"`

	// ExpressionType Tactic T00020 ad groups only allow manual targeting.
	ExpressionType SDTargetingClauseV31ExpressionType `json:"expressionType"`
}

// SDTargetingClauseV31ExpressionType Tactic T00020 ad groups only allow manual targeting.
type SDTargetingClauseV31ExpressionType string

// SDTargetingExpressionV31 The targeting expression to match against.
//
// ------- Applicable to Product targeting (T00020) -------
// * A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.
// * Expressions must specify either a category predicate or an ASIN predicate, but never both.
// * Only one category may be specified per targeting expression.
// * Only one brand may be specified per targeting expression.
// * Only one asin may be specified per targeting expression.
// * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.
//
// ------- Applicable to Audience targeting (T00030) -------
// * A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.
// * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.
// * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
type SDTargetingExpressionV31 = []SDTargetExpressionV31

// SDTargetingPredicateBaseV31 A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).
//
// * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system.
// * Brand, price, and review predicates are optional and may only be specified if category is also specified.
// * Review predicates accept numbers between 0 and 5 and are inclusive.
// * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.
// * The exactProduct, similarProduct, relatedProduct, and negative types do not utilize the value field.
// * The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.
// * **Future** A 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
type SDTargetingPredicateBaseV31 struct {
	Type SDTargetingPredicateBaseV31Type `json:"type"`

	// Value The value to be targeted.
	Value *string `json:"value,omitempty"`
}

// SDTargetingPredicateBaseV31Type defines model for SDTargetingPredicateBaseV31.Type.
type SDTargetingPredicateBaseV31Type string

// SDTargetingPredicateNestedV31 A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).
//
// * For auto ASIN-grain targeting, the value array must contain only 'exactProduct' and 'lookback' TargetingPredicateBase components.
// * For manual ASIN-grain targeting, the value array must contain only 'similarProduct' and 'lookback' TargetingPredicateBase components.
// * For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements.
// * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.
// * **Future** For manual Category-grain targeting, adding a 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
type SDTargetingPredicateNestedV31 struct {
	Type  SDTargetingPredicateNestedV31Type `json:"type"`
	Value []SDTargetingPredicateBaseV31     `json:"value"`
}

// SDTargetingPredicateNestedV31Type defines model for SDTargetingPredicateNestedV31.Type.
type SDTargetingPredicateNestedV31Type string

// SDTargetingPredicateV31 A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).
//
// * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system.
// * Brand, price, and review predicates are optional and may only be specified if category is also specified.
// * Review predicates accept numbers between 0 and 5 and are inclusive.
// * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.
type SDTargetingPredicateV31 struct {
	Type SDTargetingPredicateV31Type `json:"type"`

	// Value The value to be targeted.
	Value *string `json:"value,omitempty"`
}

// SDTargetingPredicateV31Type defines model for SDTargetingPredicateV31.Type.
type SDTargetingPredicateV31Type string

// SDTargetingRecommendations A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
type SDTargetingRecommendations struct {
	// Products List of recommended product targets
	Products *[]SDProductRecommendation `json:"products,omitempty"`
}

// SDTargetingRecommendationsFailure A targeting recommendation failure record.
type SDTargetingRecommendationsFailure struct {
	// Code HTTP status code indicating a failure response for targeting recomendations.
	Code *string `json:"code,omitempty"`

	// ErrorMessage A human friendly error message indicating the failure reasons.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Name The theme name specified in the request. If the themes field is not provided in the request,
	// the value of this field will be set to default.
	Name *string `json:"name,omitempty"`
}

// SDTargetingRecommendationsFailureV34 A targeting recommendation failure record.
type SDTargetingRecommendationsFailureV34 struct {
	// Code HTTP status code indicating a failure response for targeting recomendations.
	Code *string `json:"code,omitempty"`

	// ErrorMessage A human friendly error message indicating the failure reasons.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Expression A list of expressions that failed to be applied in the product targeting theme.
	Expression *[]SDProductTargetingThemeExpression `json:"expression,omitempty"`

	// Name The theme name specified in the request. If the themes field is not provided in the request,
	// the value of this field will be set to default.
	Name *string `json:"name,omitempty"`
}

// SDTargetingRecommendationsProducts A list of products for which to get targeting recommendations
type SDTargetingRecommendationsProducts = []SDGoalProduct

// SDTargetingRecommendationsRequest Request for targeting recommendations
type SDTargetingRecommendationsRequest struct {
	// Products A list of products for which to get targeting recommendations
	Products []SDGoalProduct `json:"products"`

	// Tactic The advertising tactic associated with the campaign. The following table lists available tactic names:
	//
	// |Tactic Name|Type|Description|
	// |-----------|-----|-----------|
	// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
	// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
	Tactic SDTactic `json:"tactic"`

	// TypeFilter A filter to indicate which types of recommendations to request.
	TypeFilter []SDRecommendationType `json:"typeFilter"`
}

// SDTargetingRecommendationsRequestV31 Request for targeting recommendations
type SDTargetingRecommendationsRequestV31 struct {
	// Products A list of products for which to get targeting recommendations
	Products SDTargetingRecommendationsProducts `json:"products"`

	// Tactic The advertising tactic associated with the campaign. The following table lists available tactic names:
	// |Tactic Name|Type|Description|
	// |-----------|-----|-----------|
	// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
	// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
	// |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
	Tactic SDTacticV31 `json:"tactic"`

	// TypeFilter A filter to indicate which types of recommendations to request.
	TypeFilter SDTargetingRecommendationsTypeFilterV31 `json:"typeFilter"`
}

// SDTargetingRecommendationsRequestV32 Request for targeting recommendations
type SDTargetingRecommendationsRequestV32 struct {
	// Products A list of products for which to get targeting recommendations
	Products SDTargetingRecommendationsProducts `json:"products"`

	// Tactic The advertising tactic associated with the campaign. The following table lists available tactic names:
	// |Tactic Name|Type|Description|
	// |-----------|-----|-----------|
	// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
	// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
	// |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
	Tactic SDTacticV31 `json:"tactic"`

	// Themes The themes used to refine the recommendations. Currently only product targeting themes are supported.
	Themes *SDTargetingRecommendationsThemes `json:"themes,omitempty"`

	// TypeFilter A filter to indicate which types of recommendations to request.
	TypeFilter SDTargetingRecommendationsTypeFilterV31 `json:"typeFilter"`
}

// SDTargetingRecommendationsRequestV33 Request for targeting recommendations
type SDTargetingRecommendationsRequestV33 struct {
	// Products A list of products for which to get targeting recommendations
	Products SDTargetingRecommendationsProducts `json:"products"`

	// Tactic The advertising tactic associated with the campaign. The following table lists available tactic names:
	// |Tactic Name|Type|Description|
	// |-----------|-----|-----------|
	// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
	// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
	// |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
	Tactic SDTacticV31 `json:"tactic"`

	// Themes The themes used to refine the recommendations. Currently only product targeting themes are supported.
	Themes *SDTargetingRecommendationsThemes `json:"themes,omitempty"`

	// TypeFilter A filter to indicate which types of recommendations to request.
	TypeFilter SDTargetingRecommendationsTypeFilterV32 `json:"typeFilter"`
}

// SDTargetingRecommendationsRequestV34 Request for targeting recommendations
type SDTargetingRecommendationsRequestV34 struct {
	// Products A list of products for which to get targeting recommendations
	Products SDTargetingRecommendationsProducts `json:"products"`

	// Tactic The advertising tactic associated with the campaign. The following table lists available tactic names:
	// |Tactic Name|Type|Description|
	// |-----------|-----|-----------|
	// |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|
	// |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|
	// |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
	// |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
	Tactic SDTacticV31 `json:"tactic"`

	// Themes The themes used to refine the recommendations. Currently only product targeting themes are supported.
	Themes *SDTargetingRecommendationsThemes `json:"themes,omitempty"`

	// TypeFilter A filter to indicate which types of recommendations to request.
	TypeFilter SDTargetingRecommendationsTypeFilterV32 `json:"typeFilter"`
}

// SDTargetingRecommendationsResponse Response to a request for targeting recommendations
type SDTargetingRecommendationsResponse struct {
	// Recommendations A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
	Recommendations *SDTargetingRecommendations `json:"recommendations,omitempty"`
}

// SDTargetingRecommendationsResponseV31 Response to a request for targeting recommendations
type SDTargetingRecommendationsResponseV31 struct {
	// Recommendations A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
	Recommendations *SDTargetingRecommendationsV31 `json:"recommendations,omitempty"`
}

// SDTargetingRecommendationsResponseV32 Response body for targeting recommendations v3.2.
type SDTargetingRecommendationsResponseV32 struct {
	// Recommendations For v3.2 the service will continue to return the recommendations returned for v3.1 in products field,
	// and return recommendations for product targeting themes in themes field.
	Recommendations *SDTargetingRecommendationsV32 `json:"recommendations,omitempty"`
}

// SDTargetingRecommendationsResponseV33 Response to a request for targeting recommendations
type SDTargetingRecommendationsResponseV33 struct {
	// Recommendations A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
	Recommendations *SDTargetingRecommendationsV33 `json:"recommendations,omitempty"`
}

// SDTargetingRecommendationsResponseV34 Response to a request for targeting recommendations
type SDTargetingRecommendationsResponseV34 struct {
	// Recommendations A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
	Recommendations *SDTargetingRecommendationsV34 `json:"recommendations,omitempty"`
}

// SDTargetingRecommendationsThemes The themes used to refine the recommendations. Currently only product targeting themes are supported.
type SDTargetingRecommendationsThemes struct {
	// Product A list of themes for product targeting recommendations. If this list is empty, the service will return
	// all the current available theme recommendations. Recommendations will be returned for each theme.
	// If specified, each theme should only include unique expressions.
	Product *[]SDProductTargetingTheme `json:"product,omitempty"`
}

// SDTargetingRecommendationsTypeFilterV31 A filter to indicate which types of recommendations to request.
type SDTargetingRecommendationsTypeFilterV31 = []SDRecommendationTypeV31

// SDTargetingRecommendationsTypeFilterV32 A filter to indicate which types of recommendations to request.
type SDTargetingRecommendationsTypeFilterV32 = []SDRecommendationTypeV32

// SDTargetingRecommendationsV31 defines model for SDTargetingRecommendationsV31.
type SDTargetingRecommendationsV31 struct {
	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendation `json:"categories,omitempty"`

	// Products List of recommended product targets
	Products *[]SDProductRecommendation `json:"products,omitempty"`
}

// SDTargetingRecommendationsV32 defines model for SDTargetingRecommendationsV32.
type SDTargetingRecommendationsV32 struct {
	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendation `json:"categories,omitempty"`

	// Products List of recommended product targets
	Products *[]SDProductRecommendationV32 `json:"products,omitempty"`
	Themes   *SDThemeRecommendations       `json:"themes,omitempty"`
}

// SDTargetingRecommendationsV33 defines model for SDTargetingRecommendationsV33.
type SDTargetingRecommendationsV33 struct {
	// Audiences List of recommended audience targets, broken down by audience category
	Audiences *[]SDAudienceCategoryRecommendations `json:"audiences,omitempty"`

	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendationV33 `json:"categories,omitempty"`

	// Products List of recommended product targets
	Products *[]SDProductRecommendationV32 `json:"products,omitempty"`
	Themes   *SDThemeRecommendations       `json:"themes,omitempty"`
}

// SDTargetingRecommendationsV34 A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
type SDTargetingRecommendationsV34 struct {
	// Audiences List of recommended audience targets, broken down by audience category
	Audiences *[]SDAudienceCategoryRecommendations `json:"audiences,omitempty"`

	// Categories List of recommended category targets
	Categories *[]SDCategoryRecommendationV33 `json:"categories,omitempty"`

	// Products List of recommended product targets
	Products *[]SDProductRecommendationV32 `json:"products,omitempty"`
	Themes   *SDThemeRecommendationsV34    `json:"themes,omitempty"`
}

// SDThemeRecommendations defines model for SDThemeRecommendations.
type SDThemeRecommendations struct {
	// Products A list of product targeting theme recommendations.
	Products *SDProductThemeRecommendations `json:"products,omitempty"`
}

// SDThemeRecommendationsV34 defines model for SDThemeRecommendationsV34.
type SDThemeRecommendationsV34 struct {
	// Products A list of product targeting theme recommendations.
	Products *SDProductThemeRecommendationsV34 `json:"products,omitempty"`
}

// SdDefaultError The error response object
type SdDefaultError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SnapshotRequest defines model for SnapshotRequest.
type SnapshotRequest struct {
	// StateFilter Optional. Restricts results to entities with state within the specified comma-separated list. The stateFilter not presenting or passing `null` or `""` would be treated as default behavior is to include enabled and paused.
	StateFilter *SnapshotRequestStateFilter `json:"stateFilter,omitempty"`

	// TacticFilter Optional. Restricts results to entities with the advertising tactic associated with the campaign within the specified comma-separated list. The tacticFilter not presenting or passing `null` or `""` would be treated as default behavior is to return entities for all tactics.
	TacticFilter *SnapshotRequestTacticFilter `json:"tacticFilter,omitempty"`
}

// SnapshotRequestStateFilter Optional. Restricts results to entities with state within the specified comma-separated list. The stateFilter not presenting or passing `null` or `""` would be treated as default behavior is to include enabled and paused.
type SnapshotRequestStateFilter string

// SnapshotRequestTacticFilter Optional. Restricts results to entities with the advertising tactic associated with the campaign within the specified comma-separated list. The tacticFilter not presenting or passing `null` or `""` would be treated as default behavior is to return entities for all tactics.
type SnapshotRequestTacticFilter string

// SnapshotResponse defines model for SnapshotResponse.
type SnapshotResponse struct {
	// Expiration The epoch time for expiration of the snapshot file. It's only available if status is SUCCESS.
	Expiration *float32 `json:"expiration,omitempty"`

	// FileSize The size of the snapshot file in bytes. It's only available if status is SUCCESS.
	FileSize *float32 `json:"fileSize,omitempty"`

	// Location The URI for the snapshot. It's only available if status is SUCCESS.
	Location *string `json:"location,omitempty"`

	// RecordType The record type of the snapshot file.
	RecordType *SnapshotResponseRecordType `json:"recordType,omitempty"`

	// SnapshotId The identifier of the snapshot that was requested.
	SnapshotId *string `json:"snapshotId,omitempty"`

	// Status The status of the generation of the snapshot.
	Status *SnapshotResponseStatus `json:"status,omitempty"`

	// StatusDetails Status information of the call if SUCCESS or FAILURE status, optional for IN_PROCESS.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// SnapshotResponseRecordType The record type of the snapshot file.
type SnapshotResponseRecordType string

// SnapshotResponseStatus The status of the generation of the snapshot.
type SnapshotResponseStatus string

// UpdateBudgetRulesResponse defines model for UpdateBudgetRulesResponse.
type UpdateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// UpdateSDBudgetRulesRequest Request object for updating budget rule for SD campaign
type UpdateSDBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SDBudgetRule `json:"budgetRulesDetails,omitempty"`
}

// BudgetIncreaseBy defines model for budgetIncreaseBy.
type BudgetIncreaseBy struct {
	// Type The value by which to update the budget of the budget rule.
	Type BudgetChangeType `json:"type"`

	// Value The budget value.
	Value float64 `json:"value"`
}

// State The budget rule state.
type State string

// SDBrandSafetyClientHeader defines model for SDBrandSafetyClientHeader.
type SDBrandSafetyClientHeader = string

// SDBrandSafetyProfileHeader defines model for SDBrandSafetyProfileHeader.
type SDBrandSafetyProfileHeader = string

// SDClientHeader defines model for SDClientHeader.
type SDClientHeader = string

// SDProfileHeader defines model for SDProfileHeader.
type SDProfileHeader = string

// SDRequestedLocale List of supported locales
type SDRequestedLocale = SDLocale

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// DeleteBrandSafetyDenyListParams defines parameters for DeleteBrandSafetyDenyList.
type DeleteBrandSafetyDenyListParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListDomainsParams defines parameters for ListDomains.
type ListDomainsParams struct {
	// StartIndex Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex=0 and count=1000. To return the next 1000 domains, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateBrandSafetyDenyListDomainsParams defines parameters for CreateBrandSafetyDenyListDomains.
type CreateBrandSafetyDenyListDomainsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListRequestStatusParams defines parameters for ListRequestStatus.
type ListRequestStatusParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetRequestResultsParams defines parameters for GetRequestResults.
type GetRequestResultsParams struct {
	// StartIndex Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex=0 and count=1000. To return the next 1000 results, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetRequestStatusParams defines parameters for GetRequestStatus.
type GetRequestStatusParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDBrandSafetyClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDBrandSafetyProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSDBudgetRulesForAdvertiserParams defines parameters for GetSDBudgetRulesForAdvertiser.
type GetSDBudgetRulesForAdvertiserParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateBudgetRulesForSDCampaignsParams defines parameters for CreateBudgetRulesForSDCampaigns.
type CreateBudgetRulesForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateBudgetRulesForSDCampaignsParams defines parameters for UpdateBudgetRulesForSDCampaigns.
type UpdateBudgetRulesForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRuleByRuleIdForSDCampaignsParams defines parameters for GetBudgetRuleByRuleIdForSDCampaigns.
type GetBudgetRuleByRuleIdForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignsAssociatedWithSDBudgetRuleParams defines parameters for GetCampaignsAssociatedWithSDBudgetRule.
type GetCampaignsAssociatedWithSDBudgetRuleParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SdCampaignsBudgetUsageParams defines parameters for SdCampaignsBudgetUsage.
type SdCampaignsBudgetUsageParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId interface{} `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope interface{} `json:"Amazon-Advertising-API-Scope"`
}

// GetSDBudgetRecommendationsParams defines parameters for GetSDBudgetRecommendations.
type GetSDBudgetRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to
	// list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListAssociatedBudgetRulesForSDCampaignsParams defines parameters for ListAssociatedBudgetRulesForSDCampaigns.
type ListAssociatedBudgetRulesForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateAssociatedBudgetRulesForSDCampaignsParams defines parameters for CreateAssociatedBudgetRulesForSDCampaigns.
type CreateAssociatedBudgetRulesForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetRuleBasedBudgetHistoryForSDCampaignsParams defines parameters for GetRuleBasedBudgetHistoryForSDCampaigns.
type GetRuleBasedBudgetHistoryForSDCampaignsParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// StartDate The start date of the budget history in YYYYMMDD format.
	StartDate string `form:"startDate" json:"startDate"`

	// EndDate The end date of the budget history in YYYYMMDD format.
	EndDate string `form:"endDate" json:"endDate"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DisassociateAssociatedBudgetRuleForSDCampaignsParams defines parameters for DisassociateAssociatedBudgetRuleForSDCampaigns.
type DisassociateAssociatedBudgetRuleForSDCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetHeadlineRecommendationsForSDParams defines parameters for GetHeadlineRecommendationsForSD.
type GetHeadlineRecommendationsForSDParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSnapshotByIdParams defines parameters for GetSnapshotById.
type GetSnapshotByIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DownloadSnapshotByIdParams defines parameters for DownloadSnapshotById.
type DownloadSnapshotByIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetTargetBidRecommendationsParams defines parameters for GetTargetBidRecommendations.
type GetTargetBidRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to
	// list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetTargetRecommendationsParams defines parameters for GetTargetRecommendations.
type GetTargetRecommendationsParams struct {
	// Locale The requested locale from query parameter
	Locale *SDRequestedLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId SDClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to
	// list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope SDProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSnapshotParamsRecordType defines parameters for CreateSnapshot.
type CreateSnapshotParamsRecordType string

// CreateBrandSafetyDenyListDomainsJSONRequestBody defines body for CreateBrandSafetyDenyListDomains for application/json ContentType.
type CreateBrandSafetyDenyListDomainsJSONRequestBody = SDBrandSafetyPostRequest

// CreateBudgetRulesForSDCampaignsJSONRequestBody defines body for CreateBudgetRulesForSDCampaigns for application/json ContentType.
type CreateBudgetRulesForSDCampaignsJSONRequestBody = CreateSDBudgetRulesRequest

// UpdateBudgetRulesForSDCampaignsJSONRequestBody defines body for UpdateBudgetRulesForSDCampaigns for application/json ContentType.
type UpdateBudgetRulesForSDCampaignsJSONRequestBody = UpdateSDBudgetRulesRequest

// SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody defines body for SdCampaignsBudgetUsage for application/vnd.sdcampaignbudgetusage.v1+json ContentType.
type SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody = BudgetUsageCampaignRequest

// GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody defines body for GetSDBudgetRecommendations for application/vnd.sdbudgetrecommendations.v3+json ContentType.
type GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody = SDBudgetRecommendationsRequest

// CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody defines body for CreateAssociatedBudgetRulesForSDCampaigns for application/json ContentType.
type CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody = CreateAssociatedBudgetRulesRequest

// GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody defines body for GetHeadlineRecommendationsForSD for application/vnd.sdheadlinerecommendationrequest.v4.0+json ContentType.
type GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody = SDHeadlineRecommendationRequest

// GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody defines body for GetTargetBidRecommendations for application/vnd.sdtargetingrecommendations.v3.1+json ContentType.
type GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody = SDTargetingBidRecommendationsRequestV31

// GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody defines body for GetTargetBidRecommendations for application/vnd.sdtargetingrecommendations.v3.2+json ContentType.
type GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody = SDTargetingBidRecommendationsRequestV32

// GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody defines body for GetTargetBidRecommendations for application/vnd.sdtargetingrecommendations.v3.3+json ContentType.
type GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody = SDTargetingBidRecommendationsRequestV33

// GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody defines body for GetTargetRecommendations for application/vnd.sdtargetingrecommendations.v3.0+json ContentType.
type GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody = SDTargetingRecommendationsRequest

// GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody defines body for GetTargetRecommendations for application/vnd.sdtargetingrecommendations.v3.1+json ContentType.
type GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody = SDTargetingRecommendationsRequestV31

// GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody defines body for GetTargetRecommendations for application/vnd.sdtargetingrecommendations.v3.2+json ContentType.
type GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody = SDTargetingRecommendationsRequestV32

// GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody defines body for GetTargetRecommendations for application/vnd.sdtargetingrecommendations.v3.3+json ContentType.
type GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody = SDTargetingRecommendationsRequestV33

// GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody defines body for GetTargetRecommendations for application/vnd.sdtargetingrecommendations.v3.4+json ContentType.
type GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody = SDTargetingRecommendationsRequestV34

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = SnapshotRequest

// AsSDProductTargetingRecommendationsSuccess returns the union data inside the SDProductThemeRecommendations_Item as a SDProductTargetingRecommendationsSuccess
func (t SDProductThemeRecommendations_Item) AsSDProductTargetingRecommendationsSuccess() (SDProductTargetingRecommendationsSuccess, error) {
	var body SDProductTargetingRecommendationsSuccess
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDProductTargetingRecommendationsSuccess overwrites any union data inside the SDProductThemeRecommendations_Item as the provided SDProductTargetingRecommendationsSuccess
func (t *SDProductThemeRecommendations_Item) FromSDProductTargetingRecommendationsSuccess(v SDProductTargetingRecommendationsSuccess) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDProductTargetingRecommendationsSuccess performs a merge with any union data inside the SDProductThemeRecommendations_Item, using the provided SDProductTargetingRecommendationsSuccess
func (t *SDProductThemeRecommendations_Item) MergeSDProductTargetingRecommendationsSuccess(v SDProductTargetingRecommendationsSuccess) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSDTargetingRecommendationsFailure returns the union data inside the SDProductThemeRecommendations_Item as a SDTargetingRecommendationsFailure
func (t SDProductThemeRecommendations_Item) AsSDTargetingRecommendationsFailure() (SDTargetingRecommendationsFailure, error) {
	var body SDTargetingRecommendationsFailure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDTargetingRecommendationsFailure overwrites any union data inside the SDProductThemeRecommendations_Item as the provided SDTargetingRecommendationsFailure
func (t *SDProductThemeRecommendations_Item) FromSDTargetingRecommendationsFailure(v SDTargetingRecommendationsFailure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDTargetingRecommendationsFailure performs a merge with any union data inside the SDProductThemeRecommendations_Item, using the provided SDTargetingRecommendationsFailure
func (t *SDProductThemeRecommendations_Item) MergeSDTargetingRecommendationsFailure(v SDTargetingRecommendationsFailure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SDProductThemeRecommendations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SDProductThemeRecommendations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSDProductTargetingRecommendationsSuccessV34 returns the union data inside the SDProductThemeRecommendationsV34_Item as a SDProductTargetingRecommendationsSuccessV34
func (t SDProductThemeRecommendationsV34_Item) AsSDProductTargetingRecommendationsSuccessV34() (SDProductTargetingRecommendationsSuccessV34, error) {
	var body SDProductTargetingRecommendationsSuccessV34
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDProductTargetingRecommendationsSuccessV34 overwrites any union data inside the SDProductThemeRecommendationsV34_Item as the provided SDProductTargetingRecommendationsSuccessV34
func (t *SDProductThemeRecommendationsV34_Item) FromSDProductTargetingRecommendationsSuccessV34(v SDProductTargetingRecommendationsSuccessV34) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDProductTargetingRecommendationsSuccessV34 performs a merge with any union data inside the SDProductThemeRecommendationsV34_Item, using the provided SDProductTargetingRecommendationsSuccessV34
func (t *SDProductThemeRecommendationsV34_Item) MergeSDProductTargetingRecommendationsSuccessV34(v SDProductTargetingRecommendationsSuccessV34) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSDTargetingRecommendationsFailureV34 returns the union data inside the SDProductThemeRecommendationsV34_Item as a SDTargetingRecommendationsFailureV34
func (t SDProductThemeRecommendationsV34_Item) AsSDTargetingRecommendationsFailureV34() (SDTargetingRecommendationsFailureV34, error) {
	var body SDTargetingRecommendationsFailureV34
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDTargetingRecommendationsFailureV34 overwrites any union data inside the SDProductThemeRecommendationsV34_Item as the provided SDTargetingRecommendationsFailureV34
func (t *SDProductThemeRecommendationsV34_Item) FromSDTargetingRecommendationsFailureV34(v SDTargetingRecommendationsFailureV34) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDTargetingRecommendationsFailureV34 performs a merge with any union data inside the SDProductThemeRecommendationsV34_Item, using the provided SDTargetingRecommendationsFailureV34
func (t *SDProductThemeRecommendationsV34_Item) MergeSDTargetingRecommendationsFailureV34(v SDTargetingRecommendationsFailureV34) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SDProductThemeRecommendationsV34_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SDProductThemeRecommendationsV34_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSDTargetingPredicateV31 returns the union data inside the SDTargetExpressionV31 as a SDTargetingPredicateV31
func (t SDTargetExpressionV31) AsSDTargetingPredicateV31() (SDTargetingPredicateV31, error) {
	var body SDTargetingPredicateV31
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDTargetingPredicateV31 overwrites any union data inside the SDTargetExpressionV31 as the provided SDTargetingPredicateV31
func (t *SDTargetExpressionV31) FromSDTargetingPredicateV31(v SDTargetingPredicateV31) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDTargetingPredicateV31 performs a merge with any union data inside the SDTargetExpressionV31, using the provided SDTargetingPredicateV31
func (t *SDTargetExpressionV31) MergeSDTargetingPredicateV31(v SDTargetingPredicateV31) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSDTargetingPredicateNestedV31 returns the union data inside the SDTargetExpressionV31 as a SDTargetingPredicateNestedV31
func (t SDTargetExpressionV31) AsSDTargetingPredicateNestedV31() (SDTargetingPredicateNestedV31, error) {
	var body SDTargetingPredicateNestedV31
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSDTargetingPredicateNestedV31 overwrites any union data inside the SDTargetExpressionV31 as the provided SDTargetingPredicateNestedV31
func (t *SDTargetExpressionV31) FromSDTargetingPredicateNestedV31(v SDTargetingPredicateNestedV31) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSDTargetingPredicateNestedV31 performs a merge with any union data inside the SDTargetExpressionV31, using the provided SDTargetingPredicateNestedV31
func (t *SDTargetExpressionV31) MergeSDTargetingPredicateNestedV31(v SDTargetingPredicateNestedV31) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SDTargetExpressionV31) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SDTargetExpressionV31) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteBrandSafetyDenyList request
	DeleteBrandSafetyDenyList(ctx context.Context, params *DeleteBrandSafetyDenyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDomains request
	ListDomains(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBrandSafetyDenyListDomainsWithBody request with any body
	CreateBrandSafetyDenyListDomainsWithBody(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBrandSafetyDenyListDomains(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, body CreateBrandSafetyDenyListDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRequestStatus request
	ListRequestStatus(ctx context.Context, params *ListRequestStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestResults request
	GetRequestResults(ctx context.Context, requestId string, params *GetRequestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestStatus request
	GetRequestStatus(ctx context.Context, requestId string, params *GetRequestStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDBudgetRulesForAdvertiser request
	GetSDBudgetRulesForAdvertiser(ctx context.Context, params *GetSDBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBudgetRulesForSDCampaignsWithBody request with any body
	CreateBudgetRulesForSDCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBudgetRulesForSDCampaigns(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, body CreateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBudgetRulesForSDCampaignsWithBody request with any body
	UpdateBudgetRulesForSDCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBudgetRulesForSDCampaigns(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, body UpdateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBudgetRuleByRuleIdForSDCampaigns request
	GetBudgetRuleByRuleIdForSDCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsAssociatedWithSDBudgetRule request
	GetCampaignsAssociatedWithSDBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSDBudgetRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SdCampaignsBudgetUsageWithBody request with any body
	SdCampaignsBudgetUsageWithBody(ctx context.Context, params *SdCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SdCampaignsBudgetUsageWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SdCampaignsBudgetUsageParams, body SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDBudgetRecommendationsWithBody request with any body
	GetSDBudgetRecommendationsWithBody(ctx context.Context, params *GetSDBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSDBudgetRecommendationsWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody(ctx context.Context, params *GetSDBudgetRecommendationsParams, body GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAssociatedBudgetRulesForSDCampaigns request
	ListAssociatedBudgetRulesForSDCampaigns(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssociatedBudgetRulesForSDCampaignsWithBody request with any body
	CreateAssociatedBudgetRulesForSDCampaignsWithBody(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAssociatedBudgetRulesForSDCampaigns(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, body CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuleBasedBudgetHistoryForSDCampaigns request
	GetRuleBasedBudgetHistoryForSDCampaigns(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisassociateAssociatedBudgetRuleForSDCampaigns request
	DisassociateAssociatedBudgetRuleForSDCampaigns(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeadlineRecommendationsForSDWithBody request with any body
	GetHeadlineRecommendationsForSDWithBody(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHeadlineRecommendationsForSDWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, body GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotById request
	GetSnapshotById(ctx context.Context, snapshotId string, params *GetSnapshotByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadSnapshotById request
	DownloadSnapshotById(ctx context.Context, snapshotId string, params *DownloadSnapshotByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetBidRecommendationsWithBody request with any body
	GetTargetBidRecommendationsWithBody(ctx context.Context, params *GetTargetBidRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetRecommendationsWithBody request with any body
	GetTargetRecommendationsWithBody(ctx context.Context, params *GetTargetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSnapshotWithBody request with any body
	CreateSnapshotWithBody(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSnapshot(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteBrandSafetyDenyList(ctx context.Context, params *DeleteBrandSafetyDenyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBrandSafetyDenyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomains(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBrandSafetyDenyListDomainsWithBody(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrandSafetyDenyListDomainsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBrandSafetyDenyListDomains(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, body CreateBrandSafetyDenyListDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrandSafetyDenyListDomainsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRequestStatus(ctx context.Context, params *ListRequestStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequestStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestResults(ctx context.Context, requestId string, params *GetRequestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestResultsRequest(c.Server, requestId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestStatus(ctx context.Context, requestId string, params *GetRequestStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestStatusRequest(c.Server, requestId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDBudgetRulesForAdvertiser(ctx context.Context, params *GetSDBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDBudgetRulesForAdvertiserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBudgetRulesForSDCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSDCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBudgetRulesForSDCampaigns(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, body CreateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSDCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBudgetRulesForSDCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSDCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBudgetRulesForSDCampaigns(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, body UpdateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSDCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBudgetRuleByRuleIdForSDCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBudgetRuleByRuleIdForSDCampaignsRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsAssociatedWithSDBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSDBudgetRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsAssociatedWithSDBudgetRuleRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SdCampaignsBudgetUsageWithBody(ctx context.Context, params *SdCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSdCampaignsBudgetUsageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SdCampaignsBudgetUsageWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SdCampaignsBudgetUsageParams, body SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSdCampaignsBudgetUsageRequestWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDBudgetRecommendationsWithBody(ctx context.Context, params *GetSDBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDBudgetRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDBudgetRecommendationsWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody(ctx context.Context, params *GetSDBudgetRecommendationsParams, body GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDBudgetRecommendationsRequestWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAssociatedBudgetRulesForSDCampaigns(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAssociatedBudgetRulesForSDCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociatedBudgetRulesForSDCampaignsWithBody(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSDCampaignsRequestWithBody(c.Server, campaignId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociatedBudgetRulesForSDCampaigns(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, body CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSDCampaignsRequest(c.Server, campaignId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuleBasedBudgetHistoryForSDCampaigns(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuleBasedBudgetHistoryForSDCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateAssociatedBudgetRuleForSDCampaigns(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSDCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateAssociatedBudgetRuleForSDCampaignsRequest(c.Server, campaignId, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadlineRecommendationsForSDWithBody(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadlineRecommendationsForSDRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadlineRecommendationsForSDWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, body GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadlineRecommendationsForSDRequestWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotById(ctx context.Context, snapshotId string, params *GetSnapshotByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotByIdRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadSnapshotById(ctx context.Context, snapshotId string, params *DownloadSnapshotByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadSnapshotByIdRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetBidRecommendationsWithBody(ctx context.Context, params *GetTargetBidRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetBidRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithBody(ctx context.Context, params *GetTargetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshotWithBody(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotRequestWithBody(c.Server, recordType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshot(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotRequest(c.Server, recordType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteBrandSafetyDenyListRequest generates requests for DeleteBrandSafetyDenyList
func NewDeleteBrandSafetyDenyListRequest(server string, params *DeleteBrandSafetyDenyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/deny")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListDomainsRequest generates requests for ListDomains
func NewListDomainsRequest(server string, params *ListDomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/deny")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateBrandSafetyDenyListDomainsRequest calls the generic CreateBrandSafetyDenyListDomains builder with application/json body
func NewCreateBrandSafetyDenyListDomainsRequest(server string, params *CreateBrandSafetyDenyListDomainsParams, body CreateBrandSafetyDenyListDomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBrandSafetyDenyListDomainsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBrandSafetyDenyListDomainsRequestWithBody generates requests for CreateBrandSafetyDenyListDomains with any type of body
func NewCreateBrandSafetyDenyListDomainsRequestWithBody(server string, params *CreateBrandSafetyDenyListDomainsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/deny")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListRequestStatusRequest generates requests for ListRequestStatus
func NewListRequestStatusRequest(server string, params *ListRequestStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRequestResultsRequest generates requests for GetRequestResults
func NewGetRequestResultsRequest(server string, requestId string, params *GetRequestResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/%s/results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRequestStatusRequest generates requests for GetRequestStatus
func NewGetRequestStatusRequest(server string, requestId string, params *GetRequestStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/brandSafety/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSDBudgetRulesForAdvertiserRequest generates requests for GetSDBudgetRulesForAdvertiser
func NewGetSDBudgetRulesForAdvertiserRequest(server string, params *GetSDBudgetRulesForAdvertiserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateBudgetRulesForSDCampaignsRequest calls the generic CreateBudgetRulesForSDCampaigns builder with application/json body
func NewCreateBudgetRulesForSDCampaignsRequest(server string, params *CreateBudgetRulesForSDCampaignsParams, body CreateBudgetRulesForSDCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBudgetRulesForSDCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBudgetRulesForSDCampaignsRequestWithBody generates requests for CreateBudgetRulesForSDCampaigns with any type of body
func NewCreateBudgetRulesForSDCampaignsRequestWithBody(server string, params *CreateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateBudgetRulesForSDCampaignsRequest calls the generic UpdateBudgetRulesForSDCampaigns builder with application/json body
func NewUpdateBudgetRulesForSDCampaignsRequest(server string, params *UpdateBudgetRulesForSDCampaignsParams, body UpdateBudgetRulesForSDCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBudgetRulesForSDCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateBudgetRulesForSDCampaignsRequestWithBody generates requests for UpdateBudgetRulesForSDCampaigns with any type of body
func NewUpdateBudgetRulesForSDCampaignsRequestWithBody(server string, params *UpdateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRuleByRuleIdForSDCampaignsRequest generates requests for GetBudgetRuleByRuleIdForSDCampaigns
func NewGetBudgetRuleByRuleIdForSDCampaignsRequest(server string, budgetRuleId string, params *GetBudgetRuleByRuleIdForSDCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/budgetRules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignsAssociatedWithSDBudgetRuleRequest generates requests for GetCampaignsAssociatedWithSDBudgetRule
func NewGetCampaignsAssociatedWithSDBudgetRuleRequest(server string, budgetRuleId string, params *GetCampaignsAssociatedWithSDBudgetRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/budgetRules/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSdCampaignsBudgetUsageRequestWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody calls the generic SdCampaignsBudgetUsage builder with application/vnd.sdcampaignbudgetusage.v1+json body
func NewSdCampaignsBudgetUsageRequestWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody(server string, params *SdCampaignsBudgetUsageParams, body SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSdCampaignsBudgetUsageRequestWithBody(server, params, "application/vnd.sdcampaignbudgetusage.v1+json", bodyReader)
}

// NewSdCampaignsBudgetUsageRequestWithBody generates requests for SdCampaignsBudgetUsage with any type of body
func NewSdCampaignsBudgetUsageRequestWithBody(server string, params *SdCampaignsBudgetUsageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/budget/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSDBudgetRecommendationsRequestWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody calls the generic GetSDBudgetRecommendations builder with application/vnd.sdbudgetrecommendations.v3+json body
func NewGetSDBudgetRecommendationsRequestWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody(server string, params *GetSDBudgetRecommendationsParams, body GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSDBudgetRecommendationsRequestWithBody(server, params, "application/vnd.sdbudgetrecommendations.v3+json", bodyReader)
}

// NewGetSDBudgetRecommendationsRequestWithBody generates requests for GetSDBudgetRecommendations with any type of body
func NewGetSDBudgetRecommendationsRequestWithBody(server string, params *GetSDBudgetRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/budgetRecommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAssociatedBudgetRulesForSDCampaignsRequest generates requests for ListAssociatedBudgetRulesForSDCampaigns
func NewListAssociatedBudgetRulesForSDCampaignsRequest(server string, campaignId int64, params *ListAssociatedBudgetRulesForSDCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateAssociatedBudgetRulesForSDCampaignsRequest calls the generic CreateAssociatedBudgetRulesForSDCampaigns builder with application/json body
func NewCreateAssociatedBudgetRulesForSDCampaignsRequest(server string, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, body CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssociatedBudgetRulesForSDCampaignsRequestWithBody(server, campaignId, params, "application/json", bodyReader)
}

// NewCreateAssociatedBudgetRulesForSDCampaignsRequestWithBody generates requests for CreateAssociatedBudgetRulesForSDCampaigns with any type of body
func NewCreateAssociatedBudgetRulesForSDCampaignsRequestWithBody(server string, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRuleBasedBudgetHistoryForSDCampaignsRequest generates requests for GetRuleBasedBudgetHistoryForSDCampaigns
func NewGetRuleBasedBudgetHistoryForSDCampaignsRequest(server string, campaignId int64, params *GetRuleBasedBudgetHistoryForSDCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/%s/budgetRules/budgetHistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDisassociateAssociatedBudgetRuleForSDCampaignsRequest generates requests for DisassociateAssociatedBudgetRuleForSDCampaigns
func NewDisassociateAssociatedBudgetRuleForSDCampaignsRequest(server string, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSDCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/campaigns/%s/budgetRules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetHeadlineRecommendationsForSDRequestWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody calls the generic GetHeadlineRecommendationsForSD builder with application/vnd.sdheadlinerecommendationrequest.v4.0+json body
func NewGetHeadlineRecommendationsForSDRequestWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody(server string, params *GetHeadlineRecommendationsForSDParams, body GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHeadlineRecommendationsForSDRequestWithBody(server, params, "application/vnd.sdheadlinerecommendationrequest.v4.0+json", bodyReader)
}

// NewGetHeadlineRecommendationsForSDRequestWithBody generates requests for GetHeadlineRecommendationsForSD with any type of body
func NewGetHeadlineRecommendationsForSDRequestWithBody(server string, params *GetHeadlineRecommendationsForSDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/recommendations/creative/headline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSnapshotByIdRequest generates requests for GetSnapshotById
func NewGetSnapshotByIdRequest(server string, snapshotId string, params *GetSnapshotByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDownloadSnapshotByIdRequest generates requests for DownloadSnapshotById
func NewDownloadSnapshotByIdRequest(server string, snapshotId string, params *DownloadSnapshotByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/snapshots/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody calls the generic GetTargetBidRecommendations builder with application/vnd.sdtargetingrecommendations.v3.1+json body
func NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(server string, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetBidRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.1+json", bodyReader)
}

// NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody calls the generic GetTargetBidRecommendations builder with application/vnd.sdtargetingrecommendations.v3.2+json body
func NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(server string, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetBidRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.2+json", bodyReader)
}

// NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody calls the generic GetTargetBidRecommendations builder with application/vnd.sdtargetingrecommendations.v3.3+json body
func NewGetTargetBidRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(server string, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetBidRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.3+json", bodyReader)
}

// NewGetTargetBidRecommendationsRequestWithBody generates requests for GetTargetBidRecommendations with any type of body
func NewGetTargetBidRecommendationsRequestWithBody(server string, params *GetTargetBidRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/targets/bid/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody calls the generic GetTargetRecommendations builder with application/vnd.sdtargetingrecommendations.v3.0+json body
func NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody(server string, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.0+json", bodyReader)
}

// NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody calls the generic GetTargetRecommendations builder with application/vnd.sdtargetingrecommendations.v3.1+json body
func NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(server string, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.1+json", bodyReader)
}

// NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody calls the generic GetTargetRecommendations builder with application/vnd.sdtargetingrecommendations.v3.2+json body
func NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(server string, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.2+json", bodyReader)
}

// NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody calls the generic GetTargetRecommendations builder with application/vnd.sdtargetingrecommendations.v3.3+json body
func NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(server string, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.3+json", bodyReader)
}

// NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody calls the generic GetTargetRecommendations builder with application/vnd.sdtargetingrecommendations.v3.4+json body
func NewGetTargetRecommendationsRequestWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody(server string, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetRecommendationsRequestWithBody(server, params, "application/vnd.sdtargetingrecommendations.v3.4+json", bodyReader)
}

// NewGetTargetRecommendationsRequestWithBody generates requests for GetTargetRecommendations with any type of body
func NewGetTargetRecommendationsRequestWithBody(server string, params *GetTargetRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/targets/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSnapshotRequest calls the generic CreateSnapshot builder with application/json body
func NewCreateSnapshotRequest(server string, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, body CreateSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSnapshotRequestWithBody(server, recordType, params, "application/json", bodyReader)
}

// NewCreateSnapshotRequestWithBody generates requests for CreateSnapshot with any type of body
func NewCreateSnapshotRequestWithBody(server string, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recordType", runtime.ParamLocationPath, recordType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sd/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteBrandSafetyDenyListWithResponse request
	DeleteBrandSafetyDenyListWithResponse(ctx context.Context, params *DeleteBrandSafetyDenyListParams, reqEditors ...RequestEditorFn) (*DeleteBrandSafetyDenyListResp, error)

	// ListDomainsWithResponse request
	ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResp, error)

	// CreateBrandSafetyDenyListDomainsWithBodyWithResponse request with any body
	CreateBrandSafetyDenyListDomainsWithBodyWithResponse(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrandSafetyDenyListDomainsResp, error)

	CreateBrandSafetyDenyListDomainsWithResponse(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, body CreateBrandSafetyDenyListDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrandSafetyDenyListDomainsResp, error)

	// ListRequestStatusWithResponse request
	ListRequestStatusWithResponse(ctx context.Context, params *ListRequestStatusParams, reqEditors ...RequestEditorFn) (*ListRequestStatusResp, error)

	// GetRequestResultsWithResponse request
	GetRequestResultsWithResponse(ctx context.Context, requestId string, params *GetRequestResultsParams, reqEditors ...RequestEditorFn) (*GetRequestResultsResp, error)

	// GetRequestStatusWithResponse request
	GetRequestStatusWithResponse(ctx context.Context, requestId string, params *GetRequestStatusParams, reqEditors ...RequestEditorFn) (*GetRequestStatusResp, error)

	// GetSDBudgetRulesForAdvertiserWithResponse request
	GetSDBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSDBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*GetSDBudgetRulesForAdvertiserResp, error)

	// CreateBudgetRulesForSDCampaignsWithBodyWithResponse request with any body
	CreateBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSDCampaignsResp, error)

	CreateBudgetRulesForSDCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, body CreateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSDCampaignsResp, error)

	// UpdateBudgetRulesForSDCampaignsWithBodyWithResponse request with any body
	UpdateBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSDCampaignsResp, error)

	UpdateBudgetRulesForSDCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, body UpdateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSDCampaignsResp, error)

	// GetBudgetRuleByRuleIdForSDCampaignsWithResponse request
	GetBudgetRuleByRuleIdForSDCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSDCampaignsParams, reqEditors ...RequestEditorFn) (*GetBudgetRuleByRuleIdForSDCampaignsResp, error)

	// GetCampaignsAssociatedWithSDBudgetRuleWithResponse request
	GetCampaignsAssociatedWithSDBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSDBudgetRuleParams, reqEditors ...RequestEditorFn) (*GetCampaignsAssociatedWithSDBudgetRuleResp, error)

	// SdCampaignsBudgetUsageWithBodyWithResponse request with any body
	SdCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SdCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SdCampaignsBudgetUsageResp, error)

	SdCampaignsBudgetUsageWithApplicationVndSdcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SdCampaignsBudgetUsageParams, body SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SdCampaignsBudgetUsageResp, error)

	// GetSDBudgetRecommendationsWithBodyWithResponse request with any body
	GetSDBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetSDBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSDBudgetRecommendationsResp, error)

	GetSDBudgetRecommendationsWithApplicationVndSdbudgetrecommendationsV3PlusJSONBodyWithResponse(ctx context.Context, params *GetSDBudgetRecommendationsParams, body GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSDBudgetRecommendationsResp, error)

	// ListAssociatedBudgetRulesForSDCampaignsWithResponse request
	ListAssociatedBudgetRulesForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSDCampaignsParams, reqEditors ...RequestEditorFn) (*ListAssociatedBudgetRulesForSDCampaignsResp, error)

	// CreateAssociatedBudgetRulesForSDCampaignsWithBodyWithResponse request with any body
	CreateAssociatedBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSDCampaignsResp, error)

	CreateAssociatedBudgetRulesForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, body CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSDCampaignsResp, error)

	// GetRuleBasedBudgetHistoryForSDCampaignsWithResponse request
	GetRuleBasedBudgetHistoryForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSDCampaignsParams, reqEditors ...RequestEditorFn) (*GetRuleBasedBudgetHistoryForSDCampaignsResp, error)

	// DisassociateAssociatedBudgetRuleForSDCampaignsWithResponse request
	DisassociateAssociatedBudgetRuleForSDCampaignsWithResponse(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSDCampaignsParams, reqEditors ...RequestEditorFn) (*DisassociateAssociatedBudgetRuleForSDCampaignsResp, error)

	// GetHeadlineRecommendationsForSDWithBodyWithResponse request with any body
	GetHeadlineRecommendationsForSDWithBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsForSDResp, error)

	GetHeadlineRecommendationsForSDWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, body GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsForSDResp, error)

	// GetSnapshotByIdWithResponse request
	GetSnapshotByIdWithResponse(ctx context.Context, snapshotId string, params *GetSnapshotByIdParams, reqEditors ...RequestEditorFn) (*GetSnapshotByIdResp, error)

	// DownloadSnapshotByIdWithResponse request
	DownloadSnapshotByIdWithResponse(ctx context.Context, snapshotId string, params *DownloadSnapshotByIdParams, reqEditors ...RequestEditorFn) (*DownloadSnapshotByIdResp, error)

	// GetTargetBidRecommendationsWithBodyWithResponse request with any body
	GetTargetBidRecommendationsWithBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error)

	GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error)

	// GetTargetRecommendationsWithBodyWithResponse request with any body
	GetTargetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV34PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error)

	// CreateSnapshotWithBodyWithResponse request with any body
	CreateSnapshotWithBodyWithResponse(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotResp, error)

	CreateSnapshotWithResponse(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotResp, error)
}

type DeleteBrandSafetyDenyListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SDBrandSafetyUpdateResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r DeleteBrandSafetyDenyListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBrandSafetyDenyListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDBrandSafetyGetResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r ListDomainsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBrandSafetyDenyListDomainsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SDBrandSafetyUpdateResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r CreateBrandSafetyDenyListDomainsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBrandSafetyDenyListDomainsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRequestStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDBrandSafetyListRequestStatusResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r ListRequestStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRequestStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestResultsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDBrandSafetyRequestResultsResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r GetRequestResultsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestResultsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDBrandSafetyRequestStatusResponse
	JSON400      *SDAPIError
	JSON401      *SDAPIError
	JSON403      *SDAPIError
	JSON422      *SDAPIError
	JSON429      *SDAPIError
	JSON500      *SDAPIError
}

// Status returns HTTPResponse.Status
func (r GetRequestStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDBudgetRulesForAdvertiserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSDBudgetRulesForAdvertiserResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetSDBudgetRulesForAdvertiserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDBudgetRulesForAdvertiserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBudgetRulesForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateBudgetRulesForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBudgetRulesForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBudgetRulesForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *UpdateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r UpdateBudgetRulesForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBudgetRulesForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRuleByRuleIdForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSDBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetBudgetRuleByRuleIdForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRuleByRuleIdForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsAssociatedWithSDBudgetRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDGetAssociatedCampaignsResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetCampaignsAssociatedWithSDBudgetRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsAssociatedWithSDBudgetRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SdCampaignsBudgetUsageResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndSdcampaignbudgetusageV1JSON207 *BudgetUsageCampaignResponse
	JSON400                                      *BudgetUsageError
	JSON401                                      *BudgetUsageError
	JSON403                                      *BudgetUsageError
	JSON422                                      *BudgetUsageError
	JSON429                                      *BudgetUsageError
	JSON500                                      *BudgetUsageError
}

// Status returns HTTPResponse.Status
func (r SdCampaignsBudgetUsageResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SdCampaignsBudgetUsageResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDBudgetRecommendationsResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndSdbudgetrecommendationsV3JSON207 *SDBudgetRecommendationsResponse
	JSON400                                        *SDErrorResponse
	JSON401                                        *SDErrorResponse
	JSON403                                        *SDErrorResponse
	JSON415                                        *SDErrorResponse
	JSON429                                        *SDErrorResponse
	JSON500                                        *SDErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSDBudgetRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDBudgetRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAssociatedBudgetRulesForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDListAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r ListAssociatedBudgetRulesForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssociatedBudgetRulesForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssociatedBudgetRulesForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateAssociatedBudgetRulesForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssociatedBudgetRulesForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleBasedBudgetHistoryForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SDBudgetHistory
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetRuleBasedBudgetHistoryForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleBasedBudgetHistoryForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateAssociatedBudgetRuleForSDCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisassociateAssociatedBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r DisassociateAssociatedBudgetRuleForSDCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateAssociatedBudgetRuleForSDCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeadlineRecommendationsForSDResp struct {
	Body                                                                        []byte
	HTTPResponse                                                                *http.Response
	ApplicationvndSdheadlinerecommendationresponseV40JSON200                    *SDHeadlineRecommendationResponse
	ApplicationvndSdheadlinerecommendationschemavalidationexceptionV40JSON400   *SDHeadlineRecommendationSchemaValidationException
	ApplicationvndSdheadlinerecommendationaccessdeniedexceptionV40JSON403       *SDHeadlineRecommendationAccessDeniedException
	ApplicationvndSdheadlinerecommendationidentifiernotfoundexceptionV40JSON404 *SDHeadlineRecommendationIdentifierNotfoundException
	ApplicationvndSdheadlinerecommendationthrottlingexceptionV40JSON429         *SDHeadlineRecommendationMarsThrottlingException
	ApplicationvndSdheadlinerecommendationinternalserverexceptionV40JSON500     *SDHeadlineRecommendationInternalServerException
}

// Status returns HTTPResponse.Status
func (r GetHeadlineRecommendationsForSDResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeadlineRecommendationsForSDResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotByIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SnapshotResponse
	JSON400      *SdDefaultError
	JSON401      *SdDefaultError
	JSON403      *SdDefaultError
	JSON429      *SdDefaultError
	JSON500      *SdDefaultError
}

// Status returns HTTPResponse.Status
func (r GetSnapshotByIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotByIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadSnapshotByIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SnapshotResponse
	JSON400      *SdDefaultError
	JSON401      *SdDefaultError
	JSON403      *SdDefaultError
	JSON429      *SdDefaultError
	JSON500      *SdDefaultError
}

// Status returns HTTPResponse.Status
func (r DownloadSnapshotByIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadSnapshotByIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetBidRecommendationsResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndSdtargetingrecommendationsV31JSON207 *SDTargetingBidRecommendationsResponseV31
	ApplicationvndSdtargetingrecommendationsV32JSON207 *SDTargetingBidRecommendationsResponseV32
	ApplicationvndSdtargetingrecommendationsV33JSON207 *SDTargetingBidRecommendationsResponseV32
	JSON400                                            *SDErrorResponse
	JSON401                                            *SDErrorResponse
	JSON403                                            *SDErrorResponse
	JSON415                                            *SDErrorResponse
	JSON429                                            *SDErrorResponse
	JSON500                                            *SDErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetBidRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetBidRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetRecommendationsResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndSdtargetingrecommendationsV30JSON200 *SDTargetingRecommendationsResponse
	ApplicationvndSdtargetingrecommendationsV31JSON200 *SDTargetingRecommendationsResponseV31
	ApplicationvndSdtargetingrecommendationsV32JSON200 *SDTargetingRecommendationsResponseV32
	ApplicationvndSdtargetingrecommendationsV33JSON200 *SDTargetingRecommendationsResponseV33
	ApplicationvndSdtargetingrecommendationsV34JSON200 *SDTargetingRecommendationsResponseV34
	JSON400                                            *SDErrorResponse
	JSON401                                            *SDErrorResponse
	JSON403                                            *SDErrorResponse
	JSON415                                            *SDErrorResponse
	JSON429                                            *SDErrorResponse
	JSON500                                            *SDErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnapshotResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SnapshotResponse
	JSON400      *SdDefaultError
	JSON401      *SdDefaultError
	JSON403      *SdDefaultError
	JSON429      *SdDefaultError
	JSON500      *SdDefaultError
}

// Status returns HTTPResponse.Status
func (r CreateSnapshotResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnapshotResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteBrandSafetyDenyListWithResponse request returning *DeleteBrandSafetyDenyListResp
func (c *ClientWithResponses) DeleteBrandSafetyDenyListWithResponse(ctx context.Context, params *DeleteBrandSafetyDenyListParams, reqEditors ...RequestEditorFn) (*DeleteBrandSafetyDenyListResp, error) {
	rsp, err := c.DeleteBrandSafetyDenyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBrandSafetyDenyListResp(rsp)
}

// ListDomainsWithResponse request returning *ListDomainsResp
func (c *ClientWithResponses) ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResp, error) {
	rsp, err := c.ListDomains(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDomainsResp(rsp)
}

// CreateBrandSafetyDenyListDomainsWithBodyWithResponse request with arbitrary body returning *CreateBrandSafetyDenyListDomainsResp
func (c *ClientWithResponses) CreateBrandSafetyDenyListDomainsWithBodyWithResponse(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrandSafetyDenyListDomainsResp, error) {
	rsp, err := c.CreateBrandSafetyDenyListDomainsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrandSafetyDenyListDomainsResp(rsp)
}

func (c *ClientWithResponses) CreateBrandSafetyDenyListDomainsWithResponse(ctx context.Context, params *CreateBrandSafetyDenyListDomainsParams, body CreateBrandSafetyDenyListDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrandSafetyDenyListDomainsResp, error) {
	rsp, err := c.CreateBrandSafetyDenyListDomains(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrandSafetyDenyListDomainsResp(rsp)
}

// ListRequestStatusWithResponse request returning *ListRequestStatusResp
func (c *ClientWithResponses) ListRequestStatusWithResponse(ctx context.Context, params *ListRequestStatusParams, reqEditors ...RequestEditorFn) (*ListRequestStatusResp, error) {
	rsp, err := c.ListRequestStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRequestStatusResp(rsp)
}

// GetRequestResultsWithResponse request returning *GetRequestResultsResp
func (c *ClientWithResponses) GetRequestResultsWithResponse(ctx context.Context, requestId string, params *GetRequestResultsParams, reqEditors ...RequestEditorFn) (*GetRequestResultsResp, error) {
	rsp, err := c.GetRequestResults(ctx, requestId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestResultsResp(rsp)
}

// GetRequestStatusWithResponse request returning *GetRequestStatusResp
func (c *ClientWithResponses) GetRequestStatusWithResponse(ctx context.Context, requestId string, params *GetRequestStatusParams, reqEditors ...RequestEditorFn) (*GetRequestStatusResp, error) {
	rsp, err := c.GetRequestStatus(ctx, requestId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestStatusResp(rsp)
}

// GetSDBudgetRulesForAdvertiserWithResponse request returning *GetSDBudgetRulesForAdvertiserResp
func (c *ClientWithResponses) GetSDBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSDBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*GetSDBudgetRulesForAdvertiserResp, error) {
	rsp, err := c.GetSDBudgetRulesForAdvertiser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDBudgetRulesForAdvertiserResp(rsp)
}

// CreateBudgetRulesForSDCampaignsWithBodyWithResponse request with arbitrary body returning *CreateBudgetRulesForSDCampaignsResp
func (c *ClientWithResponses) CreateBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSDCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSDCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateBudgetRulesForSDCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSDCampaignsParams, body CreateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSDCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSDCampaignsResp(rsp)
}

// UpdateBudgetRulesForSDCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateBudgetRulesForSDCampaignsResp
func (c *ClientWithResponses) UpdateBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSDCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSDCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateBudgetRulesForSDCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSDCampaignsParams, body UpdateBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSDCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSDCampaignsResp(rsp)
}

// GetBudgetRuleByRuleIdForSDCampaignsWithResponse request returning *GetBudgetRuleByRuleIdForSDCampaignsResp
func (c *ClientWithResponses) GetBudgetRuleByRuleIdForSDCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSDCampaignsParams, reqEditors ...RequestEditorFn) (*GetBudgetRuleByRuleIdForSDCampaignsResp, error) {
	rsp, err := c.GetBudgetRuleByRuleIdForSDCampaigns(ctx, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRuleByRuleIdForSDCampaignsResp(rsp)
}

// GetCampaignsAssociatedWithSDBudgetRuleWithResponse request returning *GetCampaignsAssociatedWithSDBudgetRuleResp
func (c *ClientWithResponses) GetCampaignsAssociatedWithSDBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSDBudgetRuleParams, reqEditors ...RequestEditorFn) (*GetCampaignsAssociatedWithSDBudgetRuleResp, error) {
	rsp, err := c.GetCampaignsAssociatedWithSDBudgetRule(ctx, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsAssociatedWithSDBudgetRuleResp(rsp)
}

// SdCampaignsBudgetUsageWithBodyWithResponse request with arbitrary body returning *SdCampaignsBudgetUsageResp
func (c *ClientWithResponses) SdCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SdCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SdCampaignsBudgetUsageResp, error) {
	rsp, err := c.SdCampaignsBudgetUsageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSdCampaignsBudgetUsageResp(rsp)
}

func (c *ClientWithResponses) SdCampaignsBudgetUsageWithApplicationVndSdcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SdCampaignsBudgetUsageParams, body SdCampaignsBudgetUsageApplicationVndSdcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SdCampaignsBudgetUsageResp, error) {
	rsp, err := c.SdCampaignsBudgetUsageWithApplicationVndSdcampaignbudgetusageV1PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSdCampaignsBudgetUsageResp(rsp)
}

// GetSDBudgetRecommendationsWithBodyWithResponse request with arbitrary body returning *GetSDBudgetRecommendationsResp
func (c *ClientWithResponses) GetSDBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetSDBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSDBudgetRecommendationsResp, error) {
	rsp, err := c.GetSDBudgetRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDBudgetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetSDBudgetRecommendationsWithApplicationVndSdbudgetrecommendationsV3PlusJSONBodyWithResponse(ctx context.Context, params *GetSDBudgetRecommendationsParams, body GetSDBudgetRecommendationsApplicationVndSdbudgetrecommendationsV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSDBudgetRecommendationsResp, error) {
	rsp, err := c.GetSDBudgetRecommendationsWithApplicationVndSdbudgetrecommendationsV3PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDBudgetRecommendationsResp(rsp)
}

// ListAssociatedBudgetRulesForSDCampaignsWithResponse request returning *ListAssociatedBudgetRulesForSDCampaignsResp
func (c *ClientWithResponses) ListAssociatedBudgetRulesForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSDCampaignsParams, reqEditors ...RequestEditorFn) (*ListAssociatedBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.ListAssociatedBudgetRulesForSDCampaigns(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAssociatedBudgetRulesForSDCampaignsResp(rsp)
}

// CreateAssociatedBudgetRulesForSDCampaignsWithBodyWithResponse request with arbitrary body returning *CreateAssociatedBudgetRulesForSDCampaignsResp
func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSDCampaignsWithBodyWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSDCampaignsWithBody(ctx, campaignId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSDCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSDCampaignsParams, body CreateAssociatedBudgetRulesForSDCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSDCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSDCampaigns(ctx, campaignId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSDCampaignsResp(rsp)
}

// GetRuleBasedBudgetHistoryForSDCampaignsWithResponse request returning *GetRuleBasedBudgetHistoryForSDCampaignsResp
func (c *ClientWithResponses) GetRuleBasedBudgetHistoryForSDCampaignsWithResponse(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSDCampaignsParams, reqEditors ...RequestEditorFn) (*GetRuleBasedBudgetHistoryForSDCampaignsResp, error) {
	rsp, err := c.GetRuleBasedBudgetHistoryForSDCampaigns(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleBasedBudgetHistoryForSDCampaignsResp(rsp)
}

// DisassociateAssociatedBudgetRuleForSDCampaignsWithResponse request returning *DisassociateAssociatedBudgetRuleForSDCampaignsResp
func (c *ClientWithResponses) DisassociateAssociatedBudgetRuleForSDCampaignsWithResponse(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSDCampaignsParams, reqEditors ...RequestEditorFn) (*DisassociateAssociatedBudgetRuleForSDCampaignsResp, error) {
	rsp, err := c.DisassociateAssociatedBudgetRuleForSDCampaigns(ctx, campaignId, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateAssociatedBudgetRuleForSDCampaignsResp(rsp)
}

// GetHeadlineRecommendationsForSDWithBodyWithResponse request with arbitrary body returning *GetHeadlineRecommendationsForSDResp
func (c *ClientWithResponses) GetHeadlineRecommendationsForSDWithBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsForSDResp, error) {
	rsp, err := c.GetHeadlineRecommendationsForSDWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadlineRecommendationsForSDResp(rsp)
}

func (c *ClientWithResponses) GetHeadlineRecommendationsForSDWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsForSDParams, body GetHeadlineRecommendationsForSDApplicationVndSdheadlinerecommendationrequestV40PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsForSDResp, error) {
	rsp, err := c.GetHeadlineRecommendationsForSDWithApplicationVndSdheadlinerecommendationrequestV40PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadlineRecommendationsForSDResp(rsp)
}

// GetSnapshotByIdWithResponse request returning *GetSnapshotByIdResp
func (c *ClientWithResponses) GetSnapshotByIdWithResponse(ctx context.Context, snapshotId string, params *GetSnapshotByIdParams, reqEditors ...RequestEditorFn) (*GetSnapshotByIdResp, error) {
	rsp, err := c.GetSnapshotById(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotByIdResp(rsp)
}

// DownloadSnapshotByIdWithResponse request returning *DownloadSnapshotByIdResp
func (c *ClientWithResponses) DownloadSnapshotByIdWithResponse(ctx context.Context, snapshotId string, params *DownloadSnapshotByIdParams, reqEditors ...RequestEditorFn) (*DownloadSnapshotByIdResp, error) {
	rsp, err := c.DownloadSnapshotById(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadSnapshotByIdResp(rsp)
}

// GetTargetBidRecommendationsWithBodyWithResponse request with arbitrary body returning *GetTargetBidRecommendationsResp
func (c *ClientWithResponses) GetTargetBidRecommendationsWithBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error) {
	rsp, err := c.GetTargetBidRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetBidRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error) {
	rsp, err := c.GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetBidRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error) {
	rsp, err := c.GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetBidRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetBidRecommendationsParams, body GetTargetBidRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetBidRecommendationsResp, error) {
	rsp, err := c.GetTargetBidRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetBidRecommendationsResp(rsp)
}

// GetTargetRecommendationsWithBodyWithResponse request with arbitrary body returning *GetTargetRecommendationsResp
func (c *ClientWithResponses) GetTargetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV30PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV30PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV31PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV31PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV32PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV32PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV33PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV33PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV34PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetRecommendationsParams, body GetTargetRecommendationsApplicationVndSdtargetingrecommendationsV34PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTargetRecommendationsResp, error) {
	rsp, err := c.GetTargetRecommendationsWithApplicationVndSdtargetingrecommendationsV34PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetRecommendationsResp(rsp)
}

// CreateSnapshotWithBodyWithResponse request with arbitrary body returning *CreateSnapshotResp
func (c *ClientWithResponses) CreateSnapshotWithBodyWithResponse(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotResp, error) {
	rsp, err := c.CreateSnapshotWithBody(ctx, recordType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotResp(rsp)
}

func (c *ClientWithResponses) CreateSnapshotWithResponse(ctx context.Context, recordType CreateSnapshotParamsRecordType, params *CreateSnapshotParams, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotResp, error) {
	rsp, err := c.CreateSnapshot(ctx, recordType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotResp(rsp)
}

// ParseDeleteBrandSafetyDenyListResp parses an HTTP response from a DeleteBrandSafetyDenyListWithResponse call
func ParseDeleteBrandSafetyDenyListResp(rsp *http.Response) (*DeleteBrandSafetyDenyListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBrandSafetyDenyListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SDBrandSafetyUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDomainsResp parses an HTTP response from a ListDomainsWithResponse call
func ParseListDomainsResp(rsp *http.Response) (*ListDomainsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDomainsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDBrandSafetyGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateBrandSafetyDenyListDomainsResp parses an HTTP response from a CreateBrandSafetyDenyListDomainsWithResponse call
func ParseCreateBrandSafetyDenyListDomainsResp(rsp *http.Response) (*CreateBrandSafetyDenyListDomainsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBrandSafetyDenyListDomainsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SDBrandSafetyUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRequestStatusResp parses an HTTP response from a ListRequestStatusWithResponse call
func ParseListRequestStatusResp(rsp *http.Response) (*ListRequestStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRequestStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDBrandSafetyListRequestStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestResultsResp parses an HTTP response from a GetRequestResultsWithResponse call
func ParseGetRequestResultsResp(rsp *http.Response) (*GetRequestResultsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestResultsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDBrandSafetyRequestResultsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestStatusResp parses an HTTP response from a GetRequestStatusWithResponse call
func ParseGetRequestStatusResp(rsp *http.Response) (*GetRequestStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDBrandSafetyRequestStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSDBudgetRulesForAdvertiserResp parses an HTTP response from a GetSDBudgetRulesForAdvertiserWithResponse call
func ParseGetSDBudgetRulesForAdvertiserResp(rsp *http.Response) (*GetSDBudgetRulesForAdvertiserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDBudgetRulesForAdvertiserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSDBudgetRulesForAdvertiserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateBudgetRulesForSDCampaignsResp parses an HTTP response from a CreateBudgetRulesForSDCampaignsWithResponse call
func ParseCreateBudgetRulesForSDCampaignsResp(rsp *http.Response) (*CreateBudgetRulesForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBudgetRulesForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateBudgetRulesForSDCampaignsResp parses an HTTP response from a UpdateBudgetRulesForSDCampaignsWithResponse call
func ParseUpdateBudgetRulesForSDCampaignsResp(rsp *http.Response) (*UpdateBudgetRulesForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBudgetRulesForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRuleByRuleIdForSDCampaignsResp parses an HTTP response from a GetBudgetRuleByRuleIdForSDCampaignsWithResponse call
func ParseGetBudgetRuleByRuleIdForSDCampaignsResp(rsp *http.Response) (*GetBudgetRuleByRuleIdForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRuleByRuleIdForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSDBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignsAssociatedWithSDBudgetRuleResp parses an HTTP response from a GetCampaignsAssociatedWithSDBudgetRuleWithResponse call
func ParseGetCampaignsAssociatedWithSDBudgetRuleResp(rsp *http.Response) (*GetCampaignsAssociatedWithSDBudgetRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsAssociatedWithSDBudgetRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDGetAssociatedCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSdCampaignsBudgetUsageResp parses an HTTP response from a SdCampaignsBudgetUsageWithResponse call
func ParseSdCampaignsBudgetUsageResp(rsp *http.Response) (*SdCampaignsBudgetUsageResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SdCampaignsBudgetUsageResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BudgetUsageCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdcampaignbudgetusageV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSDBudgetRecommendationsResp parses an HTTP response from a GetSDBudgetRecommendationsWithResponse call
func ParseGetSDBudgetRecommendationsResp(rsp *http.Response) (*GetSDBudgetRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDBudgetRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SDBudgetRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdbudgetrecommendationsV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAssociatedBudgetRulesForSDCampaignsResp parses an HTTP response from a ListAssociatedBudgetRulesForSDCampaignsWithResponse call
func ParseListAssociatedBudgetRulesForSDCampaignsResp(rsp *http.Response) (*ListAssociatedBudgetRulesForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssociatedBudgetRulesForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDListAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAssociatedBudgetRulesForSDCampaignsResp parses an HTTP response from a CreateAssociatedBudgetRulesForSDCampaignsWithResponse call
func ParseCreateAssociatedBudgetRulesForSDCampaignsResp(rsp *http.Response) (*CreateAssociatedBudgetRulesForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssociatedBudgetRulesForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRuleBasedBudgetHistoryForSDCampaignsResp parses an HTTP response from a GetRuleBasedBudgetHistoryForSDCampaignsWithResponse call
func ParseGetRuleBasedBudgetHistoryForSDCampaignsResp(rsp *http.Response) (*GetRuleBasedBudgetHistoryForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleBasedBudgetHistoryForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDBudgetHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDisassociateAssociatedBudgetRuleForSDCampaignsResp parses an HTTP response from a DisassociateAssociatedBudgetRuleForSDCampaignsWithResponse call
func ParseDisassociateAssociatedBudgetRuleForSDCampaignsResp(rsp *http.Response) (*DisassociateAssociatedBudgetRuleForSDCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateAssociatedBudgetRuleForSDCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisassociateAssociatedBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHeadlineRecommendationsForSDResp parses an HTTP response from a GetHeadlineRecommendationsForSDWithResponse call
func ParseGetHeadlineRecommendationsForSDResp(rsp *http.Response) (*GetHeadlineRecommendationsForSDResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeadlineRecommendationsForSDResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDHeadlineRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationresponseV40JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDHeadlineRecommendationSchemaValidationException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationschemavalidationexceptionV40JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDHeadlineRecommendationAccessDeniedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationaccessdeniedexceptionV40JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SDHeadlineRecommendationIdentifierNotfoundException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationidentifiernotfoundexceptionV40JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDHeadlineRecommendationMarsThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationthrottlingexceptionV40JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDHeadlineRecommendationInternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdheadlinerecommendationinternalserverexceptionV40JSON500 = &dest

	}

	return response, nil
}

// ParseGetSnapshotByIdResp parses an HTTP response from a GetSnapshotByIdWithResponse call
func ParseGetSnapshotByIdResp(rsp *http.Response) (*GetSnapshotByIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotByIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SnapshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadSnapshotByIdResp parses an HTTP response from a DownloadSnapshotByIdWithResponse call
func ParseDownloadSnapshotByIdResp(rsp *http.Response) (*DownloadSnapshotByIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadSnapshotByIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SnapshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetBidRecommendationsResp parses an HTTP response from a GetTargetBidRecommendationsWithResponse call
func ParseGetTargetBidRecommendationsResp(rsp *http.Response) (*GetTargetBidRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetBidRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.1+json" && rsp.StatusCode == 207:
		var dest SDTargetingBidRecommendationsResponseV31
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV31JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.2+json" && rsp.StatusCode == 207:
		var dest SDTargetingBidRecommendationsResponseV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV32JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.3+json" && rsp.StatusCode == 207:
		var dest SDTargetingBidRecommendationsResponseV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV33JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetRecommendationsResp parses an HTTP response from a GetTargetRecommendationsWithResponse call
func ParseGetTargetRecommendationsResp(rsp *http.Response) (*GetTargetRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.0+json" && rsp.StatusCode == 200:
		var dest SDTargetingRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV30JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.1+json" && rsp.StatusCode == 200:
		var dest SDTargetingRecommendationsResponseV31
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV31JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.2+json" && rsp.StatusCode == 200:
		var dest SDTargetingRecommendationsResponseV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV32JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.3+json" && rsp.StatusCode == 200:
		var dest SDTargetingRecommendationsResponseV33
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV33JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sdtargetingrecommendations.v3.4+json" && rsp.StatusCode == 200:
		var dest SDTargetingRecommendationsResponseV34
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSdtargetingrecommendationsV34JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SDErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSnapshotResp parses an HTTP response from a CreateSnapshotWithResponse call
func ParseCreateSnapshotResp(rsp *http.Response) (*CreateSnapshotResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSnapshotResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SnapshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SdDefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
