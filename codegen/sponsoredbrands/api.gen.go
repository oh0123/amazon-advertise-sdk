// Package sponsoredbrands provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package sponsoredbrands

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AcceptHeader.
const (
	ApplicationvndSbAdCreativeResourceV4Json                  AcceptHeader = "application/vnd.sbAdCreativeResource.v4+json"
	ApplicationvndSbCreativeImageRecommendationResourceV4Json AcceptHeader = "application/vnd.sbCreativeImageRecommendationResource.v4+json"
	ApplicationvndSbCreativeRecommendationResourceV4Json      AcceptHeader = "application/vnd.sbCreativeRecommendationResource.v4+json"
)

// Defines values for AccessDeniedErrorCode.
const (
	ACCESSDENIED AccessDeniedErrorCode = "ACCESS_DENIED"
)

// Defines values for AdGroupServingStatus.
const (
	AdGroupServingStatusADGROUPARCHIVED                 AdGroupServingStatus = "AD_GROUP_ARCHIVED"
	AdGroupServingStatusADGROUPINCOMPLETE               AdGroupServingStatus = "AD_GROUP_INCOMPLETE"
	AdGroupServingStatusADGROUPLOWBID                   AdGroupServingStatus = "AD_GROUP_LOW_BID"
	AdGroupServingStatusADGROUPPAUSED                   AdGroupServingStatus = "AD_GROUP_PAUSED"
	AdGroupServingStatusADGROUPPOLICINGCREATIVEREJECTED AdGroupServingStatus = "AD_GROUP_POLICING_CREATIVE_REJECTED"
	AdGroupServingStatusADGROUPPOLICINGPENDINGREVIEW    AdGroupServingStatus = "AD_GROUP_POLICING_PENDING_REVIEW"
	AdGroupServingStatusADGROUPSTATUSENABLED            AdGroupServingStatus = "AD_GROUP_STATUS_ENABLED"
	AdGroupServingStatusADVERTISERACCOUNTOUTOFBUDGET    AdGroupServingStatus = "ADVERTISER_ACCOUNT_OUT_OF_BUDGET"
	AdGroupServingStatusADVERTISERARCHIVED              AdGroupServingStatus = "ADVERTISER_ARCHIVED"
	AdGroupServingStatusADVERTISEREXCEEDSPENDSLIMIT     AdGroupServingStatus = "ADVERTISER_EXCEED_SPENDS_LIMIT"
	AdGroupServingStatusADVERTISEROUTOFPREPAYBALANCE    AdGroupServingStatus = "ADVERTISER_OUT_OF_PREPAY_BALANCE"
	AdGroupServingStatusADVERTISERPAUSED                AdGroupServingStatus = "ADVERTISER_PAUSED"
	AdGroupServingStatusADVERTISERPAYMENTFAILURE        AdGroupServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	AdGroupServingStatusADVERTISERPOLICINGPENDINGREVIEW AdGroupServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	AdGroupServingStatusADVERTISERPOLICINGSUSPENDED     AdGroupServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	AdGroupServingStatusADVERTISERSTATUSENABLED         AdGroupServingStatus = "ADVERTISER_STATUS_ENABLED"
	AdGroupServingStatusCAMPAIGNARCHIVED                AdGroupServingStatus = "CAMPAIGN_ARCHIVED"
	AdGroupServingStatusCAMPAIGNINCOMPLETE              AdGroupServingStatus = "CAMPAIGN_INCOMPLETE"
	AdGroupServingStatusCAMPAIGNOUTOFBUDGET             AdGroupServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	AdGroupServingStatusCAMPAIGNPAUSED                  AdGroupServingStatus = "CAMPAIGN_PAUSED"
	AdGroupServingStatusCAMPAIGNSTATUSENABLED           AdGroupServingStatus = "CAMPAIGN_STATUS_ENABLED"
	AdGroupServingStatusELIGIBLE                        AdGroupServingStatus = "ELIGIBLE"
	AdGroupServingStatusENDED                           AdGroupServingStatus = "ENDED"
	AdGroupServingStatusINELIGIBLE                      AdGroupServingStatus = "INELIGIBLE"
	AdGroupServingStatusPENDINGREVIEW                   AdGroupServingStatus = "PENDING_REVIEW"
	AdGroupServingStatusPENDINGSTARTDATE                AdGroupServingStatus = "PENDING_START_DATE"
	AdGroupServingStatusPORTFOLIOARCHIVED               AdGroupServingStatus = "PORTFOLIO_ARCHIVED"
	AdGroupServingStatusPORTFOLIOENDED                  AdGroupServingStatus = "PORTFOLIO_ENDED"
	AdGroupServingStatusPORTFOLIOOUTOFBUDGET            AdGroupServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	AdGroupServingStatusPORTFOLIOPAUSED                 AdGroupServingStatus = "PORTFOLIO_PAUSED"
	AdGroupServingStatusPORTFOLIOPENDINGSTARTDATE       AdGroupServingStatus = "PORTFOLIO_PENDING_START_DATE"
	AdGroupServingStatusPORTFOLIOSTATUSENABLED          AdGroupServingStatus = "PORTFOLIO_STATUS_ENABLED"
	AdGroupServingStatusREJECTED                        AdGroupServingStatus = "REJECTED"
	AdGroupServingStatusUNKNOWN                         AdGroupServingStatus = "UNKNOWN"
)

// Defines values for AdServingStatus.
const (
	AdServingStatusADARCHIVED                      AdServingStatus = "AD_ARCHIVED"
	AdServingStatusADGROUPARCHIVED                 AdServingStatus = "AD_GROUP_ARCHIVED"
	AdServingStatusADGROUPINCOMPLETE               AdServingStatus = "AD_GROUP_INCOMPLETE"
	AdServingStatusADGROUPLOWBID                   AdServingStatus = "AD_GROUP_LOW_BID"
	AdServingStatusADGROUPPAUSED                   AdServingStatus = "AD_GROUP_PAUSED"
	AdServingStatusADGROUPPOLICINGCREATIVEREJECTED AdServingStatus = "AD_GROUP_POLICING_CREATIVE_REJECTED"
	AdServingStatusADGROUPPOLICINGPENDINGREVIEW    AdServingStatus = "AD_GROUP_POLICING_PENDING_REVIEW"
	AdServingStatusADGROUPSTATUSENABLED            AdServingStatus = "AD_GROUP_STATUS_ENABLED"
	AdServingStatusADPAUSED                        AdServingStatus = "AD_PAUSED"
	AdServingStatusADPOLICINGPENDINGREVIEW         AdServingStatus = "AD_POLICING_PENDING_REVIEW"
	AdServingStatusADPOLICINGSUSPENDED             AdServingStatus = "AD_POLICING_SUSPENDED"
	AdServingStatusADSTATUSLIVE                    AdServingStatus = "AD_STATUS_LIVE"
	AdServingStatusADVERTISERACCOUNTOUTOFBUDGET    AdServingStatus = "ADVERTISER_ACCOUNT_OUT_OF_BUDGET"
	AdServingStatusADVERTISERARCHIVED              AdServingStatus = "ADVERTISER_ARCHIVED"
	AdServingStatusADVERTISEREXCEEDSPENDSLIMIT     AdServingStatus = "ADVERTISER_EXCEED_SPENDS_LIMIT"
	AdServingStatusADVERTISEROUTOFPREPAYBALANCE    AdServingStatus = "ADVERTISER_OUT_OF_PREPAY_BALANCE"
	AdServingStatusADVERTISERPAUSED                AdServingStatus = "ADVERTISER_PAUSED"
	AdServingStatusADVERTISERPAYMENTFAILURE        AdServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	AdServingStatusADVERTISERPOLICINGPENDINGREVIEW AdServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	AdServingStatusADVERTISERPOLICINGSUSPENDED     AdServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	AdServingStatusADVERTISERSTATUSENABLED         AdServingStatus = "ADVERTISER_STATUS_ENABLED"
	AdServingStatusCAMPAIGNARCHIVED                AdServingStatus = "CAMPAIGN_ARCHIVED"
	AdServingStatusCAMPAIGNINCOMPLETE              AdServingStatus = "CAMPAIGN_INCOMPLETE"
	AdServingStatusCAMPAIGNOUTOFBUDGET             AdServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	AdServingStatusCAMPAIGNPAUSED                  AdServingStatus = "CAMPAIGN_PAUSED"
	AdServingStatusCAMPAIGNSTATUSENABLED           AdServingStatus = "CAMPAIGN_STATUS_ENABLED"
	AdServingStatusELIGIBLE                        AdServingStatus = "ELIGIBLE"
	AdServingStatusENDED                           AdServingStatus = "ENDED"
	AdServingStatusINELIGIBLE                      AdServingStatus = "INELIGIBLE"
	AdServingStatusPENDINGREVIEW                   AdServingStatus = "PENDING_REVIEW"
	AdServingStatusPENDINGSTARTDATE                AdServingStatus = "PENDING_START_DATE"
	AdServingStatusPORTFOLIOARCHIVED               AdServingStatus = "PORTFOLIO_ARCHIVED"
	AdServingStatusPORTFOLIOENDED                  AdServingStatus = "PORTFOLIO_ENDED"
	AdServingStatusPORTFOLIOOUTOFBUDGET            AdServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	AdServingStatusPORTFOLIOPAUSED                 AdServingStatus = "PORTFOLIO_PAUSED"
	AdServingStatusPORTFOLIOPENDINGSTARTDATE       AdServingStatus = "PORTFOLIO_PENDING_START_DATE"
	AdServingStatusPORTFOLIOSTATUSENABLED          AdServingStatus = "PORTFOLIO_STATUS_ENABLED"
	AdServingStatusREJECTED                        AdServingStatus = "REJECTED"
	AdServingStatusUNKNOWN                         AdServingStatus = "UNKNOWN"
)

// Defines values for BidOptimizationStrategy.
const (
	MAXIMIZEIMMEDIATESALES      BidOptimizationStrategy = "MAXIMIZE_IMMEDIATE_SALES"
	MAXIMIZENEWTOBRANDCUSTOMERS BidOptimizationStrategy = "MAXIMIZE_NEW_TO_BRAND_CUSTOMERS"
)

// Defines values for BudgetChangeType.
const (
	PERCENT BudgetChangeType = "PERCENT"
)

// Defines values for BudgetType.
const (
	BudgetTypeDAILY    BudgetType = "DAILY"
	BudgetTypeLIFETIME BudgetType = "LIFETIME"
)

// Defines values for CampaignServingStatus.
const (
	CampaignServingStatusADVERTISERACCOUNTOUTOFBUDGET    CampaignServingStatus = "ADVERTISER_ACCOUNT_OUT_OF_BUDGET"
	CampaignServingStatusADVERTISERARCHIVED              CampaignServingStatus = "ADVERTISER_ARCHIVED"
	CampaignServingStatusADVERTISEREXCEEDSPENDSLIMIT     CampaignServingStatus = "ADVERTISER_EXCEED_SPENDS_LIMIT"
	CampaignServingStatusADVERTISEROUTOFPREPAYBALANCE    CampaignServingStatus = "ADVERTISER_OUT_OF_PREPAY_BALANCE"
	CampaignServingStatusADVERTISERPAUSED                CampaignServingStatus = "ADVERTISER_PAUSED"
	CampaignServingStatusADVERTISERPAYMENTFAILURE        CampaignServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	CampaignServingStatusADVERTISERPOLICINGPENDINGREVIEW CampaignServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	CampaignServingStatusADVERTISERPOLICINGSUSPENDED     CampaignServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	CampaignServingStatusADVERTISERSTATUSENABLED         CampaignServingStatus = "ADVERTISER_STATUS_ENABLED"
	CampaignServingStatusCAMPAIGNARCHIVED                CampaignServingStatus = "CAMPAIGN_ARCHIVED"
	CampaignServingStatusCAMPAIGNINCOMPLETE              CampaignServingStatus = "CAMPAIGN_INCOMPLETE"
	CampaignServingStatusCAMPAIGNOUTOFBUDGET             CampaignServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	CampaignServingStatusCAMPAIGNPAUSED                  CampaignServingStatus = "CAMPAIGN_PAUSED"
	CampaignServingStatusCAMPAIGNSTATUSENABLED           CampaignServingStatus = "CAMPAIGN_STATUS_ENABLED"
	CampaignServingStatusELIGIBLE                        CampaignServingStatus = "ELIGIBLE"
	CampaignServingStatusENDED                           CampaignServingStatus = "ENDED"
	CampaignServingStatusINELIGIBLE                      CampaignServingStatus = "INELIGIBLE"
	CampaignServingStatusPENDINGREVIEW                   CampaignServingStatus = "PENDING_REVIEW"
	CampaignServingStatusPENDINGSTARTDATE                CampaignServingStatus = "PENDING_START_DATE"
	CampaignServingStatusPORTFOLIOARCHIVED               CampaignServingStatus = "PORTFOLIO_ARCHIVED"
	CampaignServingStatusPORTFOLIOENDED                  CampaignServingStatus = "PORTFOLIO_ENDED"
	CampaignServingStatusPORTFOLIOOUTOFBUDGET            CampaignServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	CampaignServingStatusPORTFOLIOPAUSED                 CampaignServingStatus = "PORTFOLIO_PAUSED"
	CampaignServingStatusPORTFOLIOPENDINGSTARTDATE       CampaignServingStatus = "PORTFOLIO_PENDING_START_DATE"
	CampaignServingStatusPORTFOLIOSTATUSENABLED          CampaignServingStatus = "PORTFOLIO_STATUS_ENABLED"
	CampaignServingStatusREJECTED                        CampaignServingStatus = "REJECTED"
	CampaignServingStatusUNKNOWN                         CampaignServingStatus = "UNKNOWN"
)

// Defines values for ComparisonOperator.
const (
	GREATERTHAN          ComparisonOperator = "GREATER_THAN"
	GREATERTHANOREQUALTO ComparisonOperator = "GREATER_THAN_OR_EQUAL_TO"
	LESSTHAN             ComparisonOperator = "LESS_THAN"
	LESSTHANOREQUALTO    ComparisonOperator = "LESS_THAN_OR_EQUAL_TO"
)

// Defines values for ConflictStateErrorCode.
const (
	CONFLICTSTATE ConflictStateErrorCode = "CONFLICT_STATE"
)

// Defines values for CreateOrUpdateEntityState.
const (
	CreateOrUpdateEntityStateENABLED CreateOrUpdateEntityState = "ENABLED"
	CreateOrUpdateEntityStatePAUSED  CreateOrUpdateEntityState = "PAUSED"
)

// Defines values for CreativeLandingPageType.
const (
	CreativeLandingPageTypeADLANDINGPREVIEW       CreativeLandingPageType = "AD_LANDING_PREVIEW"
	CreativeLandingPageTypeADVERTISINGLANDINGPAGE CreativeLandingPageType = "ADVERTISING_LANDING_PAGE"
	CreativeLandingPageTypeBROWSE                 CreativeLandingPageType = "BROWSE"
	CreativeLandingPageTypeCUSTOMURL              CreativeLandingPageType = "CUSTOM_URL"
	CreativeLandingPageTypeDETAILPAGE             CreativeLandingPageType = "DETAIL_PAGE"
	CreativeLandingPageTypePRODUCTLIST            CreativeLandingPageType = "PRODUCT_LIST"
	CreativeLandingPageTypeSEARCH                 CreativeLandingPageType = "SEARCH"
	CreativeLandingPageTypeSTORE                  CreativeLandingPageType = "STORE"
	CreativeLandingPageTypeUNKNOWN                CreativeLandingPageType = "UNKNOWN"
)

// Defines values for CreativeStatus.
const (
	APPROVEDBYMODERATION    CreativeStatus = "APPROVED_BY_MODERATION"
	PENDINGMODERATIONREVIEW CreativeStatus = "PENDING_MODERATION_REVIEW"
	PENDINGTRANSLATION      CreativeStatus = "PENDING_TRANSLATION"
	PUBLISHED               CreativeStatus = "PUBLISHED"
	REJECTEDBYMODERATION    CreativeStatus = "REJECTED_BY_MODERATION"
	SUBMITTEDFORMODERATION  CreativeStatus = "SUBMITTED_FOR_MODERATION"
)

// Defines values for CreativeType.
const (
	CreativeTypeBRANDVIDEO        CreativeType = "BRAND_VIDEO"
	CreativeTypePRODUCTCOLLECTION CreativeType = "PRODUCT_COLLECTION"
	CreativeTypeSTORESPOTLIGHT    CreativeType = "STORE_SPOTLIGHT"
	CreativeTypeVIDEO             CreativeType = "VIDEO"
)

// Defines values for DayOfWeek.
const (
	FRIDAY    DayOfWeek = "FRIDAY"
	MONDAY    DayOfWeek = "MONDAY"
	SATURDAY  DayOfWeek = "SATURDAY"
	SUNDAY    DayOfWeek = "SUNDAY"
	THURSDAY  DayOfWeek = "THURSDAY"
	TUESDAY   DayOfWeek = "TUESDAY"
	WEDNESDAY DayOfWeek = "WEDNESDAY"
)

// Defines values for EntityState.
const (
	EntityStateARCHIVED EntityState = "ARCHIVED"
	EntityStateENABLED  EntityState = "ENABLED"
	EntityStatePAUSED   EntityState = "PAUSED"
)

// Defines values for HeadlineSuggestionRequestAdFormat.
const (
	SPONSOREDBRANDS          HeadlineSuggestionRequestAdFormat = "SPONSORED_BRANDS"
	SPONSOREDBRANDSSPOTLIGHT HeadlineSuggestionRequestAdFormat = "SPONSORED_BRANDS_SPOTLIGHT"
)

// Defines values for InternalErrorErrorCode.
const (
	INTERNALERROR InternalErrorErrorCode = "INTERNAL_ERROR"
)

// Defines values for InvalidArgumentErrorCode.
const (
	INVALIDARGUMENT InvalidArgumentErrorCode = "INVALID_ARGUMENT"
)

// Defines values for LandingPageType.
const (
	LandingPageTypeCUSTOMURL   LandingPageType = "CUSTOM_URL"
	LandingPageTypeDETAILPAGE  LandingPageType = "DETAIL_PAGE"
	LandingPageTypePRODUCTLIST LandingPageType = "PRODUCT_LIST"
	LandingPageTypeSTORE       LandingPageType = "STORE"
)

// Defines values for NotFoundErrorCode.
const (
	NOTFOUND NotFoundErrorCode = "NOT_FOUND"
)

// Defines values for PerformanceMetricForSB.
const (
	IS   PerformanceMetricForSB = "IS"
	NTB  PerformanceMetricForSB = "NTB"
	ROAS PerformanceMetricForSB = "ROAS"
)

// Defines values for Placement.
const (
	PlacementDETAILPAGE Placement = "DETAIL_PAGE"
	PlacementHOME       Placement = "HOME"
	PlacementOTHER      Placement = "OTHER"
)

// Defines values for ProductLocation.
const (
	NOTSOLDONAMAZON ProductLocation = "NOT_SOLD_ON_AMAZON"
	SOLDONAMAZON    ProductLocation = "SOLD_ON_AMAZON"
	SOLDONDTC       ProductLocation = "SOLD_ON_DTC"
)

// Defines values for QueryTermMatchType.
const (
	BROADMATCH QueryTermMatchType = "BROAD_MATCH"
	EXACTMATCH QueryTermMatchType = "EXACT_MATCH"
)

// Defines values for RecurrenceType.
const (
	RecurrenceTypeDAILY  RecurrenceType = "DAILY"
	RecurrenceTypeWEEKLY RecurrenceType = "WEEKLY"
)

// Defines values for SBInsightsAdFormat.
const (
	SBInsightsAdFormatBRANDVIDEO        SBInsightsAdFormat = "BRAND_VIDEO"
	SBInsightsAdFormatPRODUCTCOLLECTION SBInsightsAdFormat = "PRODUCT_COLLECTION"
	SBInsightsAdFormatSTORESPOTLIGHT    SBInsightsAdFormat = "STORE_SPOTLIGHT"
	SBInsightsAdFormatVIDEO             SBInsightsAdFormat = "VIDEO"
)

// Defines values for SBInsightsKeywordAlertType.
const (
	LOWBID            SBInsightsKeywordAlertType = "LOW_BID"
	LOWKEYWORDTRAFFIC SBInsightsKeywordAlertType = "LOW_KEYWORD_TRAFFIC"
)

// Defines values for SBInsightsMatchType.
const (
	BROAD  SBInsightsMatchType = "BROAD"
	EXACT  SBInsightsMatchType = "EXACT"
	PHRASE SBInsightsMatchType = "PHRASE"
)

// Defines values for SBKeywordRecommendationCreativeType.
const (
	AUTHORCOLLECTION  SBKeywordRecommendationCreativeType = "AUTHOR_COLLECTION"
	BRANDVIDEO        SBKeywordRecommendationCreativeType = "BRAND_VIDEO"
	PRODUCTCOLLECTION SBKeywordRecommendationCreativeType = "PRODUCT_COLLECTION"
	STORESPOTLIGHT    SBKeywordRecommendationCreativeType = "STORE_SPOTLIGHT"
	VIDEO             SBKeywordRecommendationCreativeType = "VIDEO"
)

// Defines values for SBKeywordRecommendationMatchType.
const (
	Broad  SBKeywordRecommendationMatchType = "broad"
	Exact  SBKeywordRecommendationMatchType = "exact"
	Phrase SBKeywordRecommendationMatchType = "phrase"
)

// Defines values for SBKeywordRecommendationOutcome.
const (
	BRANDIMPRESSIONSHARE SBKeywordRecommendationOutcome = "BRAND_IMPRESSION_SHARE"
	PAGEVISIT            SBKeywordRecommendationOutcome = "PAGE_VISIT"
)

// Defines values for SBKeywordRecommendationType.
const (
	AddKeyword SBKeywordRecommendationType = "addKeyword"
)

// Defines values for SBRuleType.
const (
	PERFORMANCE SBRuleType = "PERFORMANCE"
	SCHEDULE    SBRuleType = "SCHEDULE"
)

// Defines values for SBTargetingLocale.
const (
	ArAE SBTargetingLocale = "ar_AE"
	DeDE SBTargetingLocale = "de_DE"
	EnAE SBTargetingLocale = "en_AE"
	EnAU SBTargetingLocale = "en_AU"
	EnCA SBTargetingLocale = "en_CA"
	EnGB SBTargetingLocale = "en_GB"
	EnIN SBTargetingLocale = "en_IN"
	EnSG SBTargetingLocale = "en_SG"
	EnUS SBTargetingLocale = "en_US"
	EsES SBTargetingLocale = "es_ES"
	EsMX SBTargetingLocale = "es_MX"
	FrCA SBTargetingLocale = "fr_CA"
	FrFR SBTargetingLocale = "fr_FR"
	HiIN SBTargetingLocale = "hi_IN"
	ItIT SBTargetingLocale = "it_IT"
	JaJP SBTargetingLocale = "ja_JP"
	KoKR SBTargetingLocale = "ko_KR"
	NlNL SBTargetingLocale = "nl_NL"
	PlPL SBTargetingLocale = "pl_PL"
	PtBR SBTargetingLocale = "pt_BR"
	SvSE SBTargetingLocale = "sv_SE"
	TaIN SBTargetingLocale = "ta_IN"
	ThTH SBTargetingLocale = "th_TH"
	TrTR SBTargetingLocale = "tr_TR"
	ViVN SBTargetingLocale = "vi_VN"
	ZhCN SBTargetingLocale = "zh_CN"
)

// Defines values for SBTargetingSupplySource.
const (
	AMAZON         SBTargetingSupplySource = "AMAZON"
	STREAMINGVIDEO SBTargetingSupplySource = "STREAMING_VIDEO"
)

// Defines values for ShopperSegment.
const (
	NEWTOBRANDPURCHASE ShopperSegment = "NEW_TO_BRAND_PURCHASE"
)

// Defines values for ThrottledErrorCode.
const (
	THROTTLED ThrottledErrorCode = "THROTTLED"
)

// Defines values for UnauthorizedErrorCode.
const (
	UNAUTHORIZED UnauthorizedErrorCode = "UNAUTHORIZED"
)

// Defines values for State.
const (
	ACTIVE State = "ACTIVE"
	PAUSED State = "PAUSED"
)

// AcceptHeader Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
type AcceptHeader string

// AccessDeniedErrorCode defines model for AccessDeniedErrorCode.
type AccessDeniedErrorCode string

// AccessDeniedExceptionResponseContent defines model for AccessDeniedExceptionResponseContent.
type AccessDeniedExceptionResponseContent struct {
	Code AccessDeniedErrorCode `json:"code"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// Ad defines model for Ad.
type Ad struct {
	// AdGroupId The adGroup identifier.
	AdGroupId string `json:"adGroupId"`

	// AdId The ad identifier. Note: Ads created using version 3/non-multi ad group campaigns do not have an associated adId. [Learn more](https://advertising.amazon.com/API/docs/en-us/sponsored-brands/campaigns/managing-multi-ad-group-campaigns#ads).
	AdId *string `json:"adId,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId   string          `json:"campaignId"`
	Creative     *Creative       `json:"creative,omitempty"`
	ExtendedData *AdExtendedData `json:"extendedData,omitempty"`
	LandingPage  *LandingPage    `json:"landingPage,omitempty"`

	// Name The name of the ad. Note: Ads created using version 3/non-multi ad group campaigns do not have an associated name. [Learn more](https://advertising.amazon.com/API/docs/en-us/sponsored-brands/campaigns/managing-multi-ad-group-campaigns#ads).
	Name *string `json:"name,omitempty"`

	// State The current resource state.
	State EntityState `json:"state"`
}

// AdExtendedData defines model for AdExtendedData.
type AdExtendedData struct {
	// CreationDate Creation date in epoch time.
	CreationDate *float32 `json:"creationDate,omitempty"`

	// LastUpdateDate Date of last update in epoch time.
	LastUpdateDate *float32 `json:"lastUpdateDate,omitempty"`

	// ServingStatus The ad serving status determined by system.
	// - AD_STATUS_LIVE - Ad's status is enabled.
	// - AD_POLICING_PENDING_REVIEW - Ad is pending review because of policing reason.
	// - AD_POLICING_SUSPENDED - Ad is suspended review because of policing reason.
	// - AD_PAUSED - Ad's status is paused.
	// - AD_ARCHIVED - Ad's status is archived.
	//
	// - AD_GROUP_STATUS_ENABLED - Ad group's (parent) status is enabled.
	// - AD_GROUP_PAUSED - Ad group's (parent) status is paused.
	// - AD_GROUP_ARCHIVED - Ad group's (parent) status is archived.
	// - AD_GROUP_INCOMPLETE - Ad group (parent) does not contain any ads or targeting clauses.
	// - AD_GROUP_POLICING_PENDING_REVIEW - Ad group is pending review because of policing reason
	// - AD_GROUP_POLICING_CREATIVE_REJECTED - Ad group is rejected due to creative because of policing reason
	// - AD_GROUP_LOW_BID - Ad group is less than the minimum allowed bid in its marketplace
	//
	// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
	// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
	// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
	// - ADVERTISER_PAUSED - Advertiser's status is paused
	// - ADVERTISER_ARCHIVED - Advertiser's status is archived
	// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
	// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
	// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
	// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
	//
	// - CAMPAIGN_STATUS_ENABLED - Campaign's (parent) status is enabled.
	// - CAMPAIGN_PAUSED - Campaign's (parent) status is paused.
	// - CAMPAIGN_ARCHIVED - Campaign's (parent) status is archived.
	// - CAMPAIGN_INCOMPLETE - Campaign (parent) does not contain any ads or targeting clauses.
	// - CAMPAIGN_OUT_OF_BUDGET - Campaign (parent) is out of budget.
	//
	// - PORTFOLIO_STATUS_ENABLED - Portfolio's (parent) status is enabled
	// - PORTFOLIO_PAUSED - Portfolio's (parent) status is paused
	// - PORTFOLIO_ARCHIVED - Portfolio's (parent) status is archived
	// - PORTFOLIO_OUT_OF_BUDGET - Portfolio (parent) is out of budget
	// - PORTFOLIO_PENDING_START_DATE - Portfolio's (parent) start date is in the future
	// - PORTFOLIO_ENDED - Portfolio's (parent) end date is in the past.
	//
	// - INELIGIBLE - Ad is ineligible.
	// - ELIGIBLE  - Ad is eligible.
	// - ENDED - Campaign's (parent) end date is in the past.
	// - PENDING_REVIEW - Campaign (parent) is pending review.
	// - PENDING_START_DATE - Campaign's (parent) start date is in the future.
	// - REJECTED - Campaign (parent) is rejected by moderation process.
	// - UNKNOWN - Serving status is unknown. Please contact us for support.
	ServingStatus *AdServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Ad.
	ServingStatusDetails *[]string `json:"servingStatusDetails,omitempty"`
}

// AdFailureResponseItem defines model for AdFailureResponseItem.
type AdFailureResponseItem struct {
	// Errors A list of validation errors.
	Errors *[]AdMutationError `json:"errors,omitempty"`

	// Index the index of the ad in the array from the request body.
	Index float32 `json:"index"`
}

// AdGroup defines model for AdGroup.
type AdGroup struct {
	// AdGroupId The identifier of the keyword.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId   string               `json:"campaignId"`
	ExtendedData *AdGroupExtendedData `json:"extendedData,omitempty"`

	// Name The name of the ad group.
	Name string `json:"name"`

	// State The current resource state.
	State EntityState `json:"state"`
}

// AdGroupExtendedData defines model for AdGroupExtendedData.
type AdGroupExtendedData struct {
	// CreationDate Creation date in epoch time.
	CreationDate *float32 `json:"creationDate,omitempty"`

	// LastUpdateDate Date of last update in epoch time.
	LastUpdateDate *float32 `json:"lastUpdateDate,omitempty"`

	// ServingStatus `Notice: the servingStatus enums have not been finalized yet.`
	// The ad group serving status determined by system.
	// - AD_GROUP_STATUS_ENABLED - Ad group's status is enabled.
	// - AD_GROUP_PAUSED - Ad group's status is paused.
	// - AD_GROUP_ARCHIVED - Ad group's status is archived.
	// - AD_GROUP_INCOMPLETE - Ad group does not contain any ads or targeting clauses.
	// - AD_GROUP_POLICING_PENDING_REVIEW - Ad group is pending review because of policing reason
	// - AD_GROUP_POLICING_CREATIVE_REJECTED - Ad group is rejected due to creative because of policing reason
	// - AD_GROUP_LOW_BID - Ad group is less than the minimum allowed bid in its marketplace
	//
	// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
	// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
	// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
	// - ADVERTISER_PAUSED - Advertiser's status is paused
	// - ADVERTISER_ARCHIVED - Advertiser's status is archived
	// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
	// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
	// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
	// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
	//
	// - CAMPAIGN_STATUS_ENABLED - Campaign's (parent) status is enabled.
	// - CAMPAIGN_PAUSED - Campaign's (parent) status is paused.
	// - CAMPAIGN_ARCHIVED - Campaign's (parent) status is archived.
	// - CAMPAIGN_INCOMPLETE - Campaign (parent) does not contain any ads or targeting clauses.
	// - CAMPAIGN_OUT_OF_BUDGET - Campaign (parent) is out of budget.
	//
	// - PORTFOLIO_STATUS_ENABLED - Portfolio's (parent) status is enabled
	// - PORTFOLIO_PAUSED - Portfolio's (parent) status is paused
	// - PORTFOLIO_ARCHIVED - Portfolio's (parent) status is archived
	// - PORTFOLIO_OUT_OF_BUDGET - Portfolio (parent) is out of budget
	// - PORTFOLIO_PENDING_START_DATE - Portfolio's (parent) start date is in the future
	// - PORTFOLIO_ENDED - Portfolio's (parent) end date is in the past.
	//
	// - INELIGIBLE - Ad group is ineligible.
	// - ELIGIBLE - Ad group is eligible.
	// - ENDED - Campaign's (parent) end date is in the past.
	// - PENDING_REVIEW - Campaign (parent) is pending review.
	// - PENDING_START_DATE - Campaign's (parent) start date is in the future.
	// - REJECTED - Campaign (parent) is rejected by moderation process.
	// - UNKNOWN - Serving status is unknown. Please contact us for support.
	ServingStatus *AdGroupServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Ad Group.
	ServingStatusDetails *[]string `json:"servingStatusDetails,omitempty"`
}

// AdGroupFailureResponseItem defines model for AdGroupFailureResponseItem.
type AdGroupFailureResponseItem struct {
	// Errors A list of validation errors.
	Errors *[]AdGroupMutationError `json:"errors,omitempty"`

	// Index the index of the adGroup in the array from the request body.
	Index float32 `json:"index"`
}

// AdGroupMutationError defines model for AdGroupMutationError.
type AdGroupMutationError struct {
	// ErrorType The type of the error.
	ErrorType  string                       `json:"errorType"`
	ErrorValue AdGroupMutationErrorSelector `json:"errorValue"`
}

// AdGroupMutationErrorSelector defines model for AdGroupMutationErrorSelector.
type AdGroupMutationErrorSelector struct {
	// BiddingError Errors related to bids.
	BiddingError *BiddingError `json:"biddingError,omitempty"`

	// DateError Errors related to dates.
	DateError *DateError `json:"dateError,omitempty"`

	// OtherError Errors not related to any of the other error types.
	OtherError *OtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations.
	RangeError *RangeError `json:"rangeError,omitempty"`
}

// AdGroupServingStatus `Notice: the servingStatus enums have not been finalized yet.`
// The ad group serving status determined by system.
// - AD_GROUP_STATUS_ENABLED - Ad group's status is enabled.
// - AD_GROUP_PAUSED - Ad group's status is paused.
// - AD_GROUP_ARCHIVED - Ad group's status is archived.
// - AD_GROUP_INCOMPLETE - Ad group does not contain any ads or targeting clauses.
// - AD_GROUP_POLICING_PENDING_REVIEW - Ad group is pending review because of policing reason
// - AD_GROUP_POLICING_CREATIVE_REJECTED - Ad group is rejected due to creative because of policing reason
// - AD_GROUP_LOW_BID - Ad group is less than the minimum allowed bid in its marketplace
//
// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
// - ADVERTISER_PAUSED - Advertiser's status is paused
// - ADVERTISER_ARCHIVED - Advertiser's status is archived
// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
//
// - CAMPAIGN_STATUS_ENABLED - Campaign's (parent) status is enabled.
// - CAMPAIGN_PAUSED - Campaign's (parent) status is paused.
// - CAMPAIGN_ARCHIVED - Campaign's (parent) status is archived.
// - CAMPAIGN_INCOMPLETE - Campaign (parent) does not contain any ads or targeting clauses.
// - CAMPAIGN_OUT_OF_BUDGET - Campaign (parent) is out of budget.
//
// - PORTFOLIO_STATUS_ENABLED - Portfolio's (parent) status is enabled
// - PORTFOLIO_PAUSED - Portfolio's (parent) status is paused
// - PORTFOLIO_ARCHIVED - Portfolio's (parent) status is archived
// - PORTFOLIO_OUT_OF_BUDGET - Portfolio (parent) is out of budget
// - PORTFOLIO_PENDING_START_DATE - Portfolio's (parent) start date is in the future
// - PORTFOLIO_ENDED - Portfolio's (parent) end date is in the past.
//
// - INELIGIBLE - Ad group is ineligible.
// - ELIGIBLE - Ad group is eligible.
// - ENDED - Campaign's (parent) end date is in the past.
// - PENDING_REVIEW - Campaign (parent) is pending review.
// - PENDING_START_DATE - Campaign's (parent) start date is in the future.
// - REJECTED - Campaign (parent) is rejected by moderation process.
// - UNKNOWN - Serving status is unknown. Please contact us for support.
type AdGroupServingStatus string

// AdGroupSuccessResponseItem defines model for AdGroupSuccessResponseItem.
type AdGroupSuccessResponseItem struct {
	AdGroup *AdGroup `json:"adGroup,omitempty"`

	// AdGroupId the adGroup ID.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// Index the index of the adGroup in the array from the request body.
	Index float32 `json:"index"`
}

// AdMutationError defines model for AdMutationError.
type AdMutationError struct {
	// ErrorType The type of the error.
	ErrorType  string                  `json:"errorType"`
	ErrorValue AdMutationErrorSelector `json:"errorValue"`
}

// AdMutationErrorSelector defines model for AdMutationErrorSelector.
type AdMutationErrorSelector struct {
	// OtherError Errors not related to any of the other error types.
	OtherError *OtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations.
	RangeError *RangeError `json:"rangeError,omitempty"`
}

// AdServingStatus The ad serving status determined by system.
// - AD_STATUS_LIVE - Ad's status is enabled.
// - AD_POLICING_PENDING_REVIEW - Ad is pending review because of policing reason.
// - AD_POLICING_SUSPENDED - Ad is suspended review because of policing reason.
// - AD_PAUSED - Ad's status is paused.
// - AD_ARCHIVED - Ad's status is archived.
//
// - AD_GROUP_STATUS_ENABLED - Ad group's (parent) status is enabled.
// - AD_GROUP_PAUSED - Ad group's (parent) status is paused.
// - AD_GROUP_ARCHIVED - Ad group's (parent) status is archived.
// - AD_GROUP_INCOMPLETE - Ad group (parent) does not contain any ads or targeting clauses.
// - AD_GROUP_POLICING_PENDING_REVIEW - Ad group is pending review because of policing reason
// - AD_GROUP_POLICING_CREATIVE_REJECTED - Ad group is rejected due to creative because of policing reason
// - AD_GROUP_LOW_BID - Ad group is less than the minimum allowed bid in its marketplace
//
// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
// - ADVERTISER_PAUSED - Advertiser's status is paused
// - ADVERTISER_ARCHIVED - Advertiser's status is archived
// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
//
// - CAMPAIGN_STATUS_ENABLED - Campaign's (parent) status is enabled.
// - CAMPAIGN_PAUSED - Campaign's (parent) status is paused.
// - CAMPAIGN_ARCHIVED - Campaign's (parent) status is archived.
// - CAMPAIGN_INCOMPLETE - Campaign (parent) does not contain any ads or targeting clauses.
// - CAMPAIGN_OUT_OF_BUDGET - Campaign (parent) is out of budget.
//
// - PORTFOLIO_STATUS_ENABLED - Portfolio's (parent) status is enabled
// - PORTFOLIO_PAUSED - Portfolio's (parent) status is paused
// - PORTFOLIO_ARCHIVED - Portfolio's (parent) status is archived
// - PORTFOLIO_OUT_OF_BUDGET - Portfolio (parent) is out of budget
// - PORTFOLIO_PENDING_START_DATE - Portfolio's (parent) start date is in the future
// - PORTFOLIO_ENDED - Portfolio's (parent) end date is in the past.
//
// - INELIGIBLE - Ad is ineligible.
// - ELIGIBLE  - Ad is eligible.
// - ENDED - Campaign's (parent) end date is in the past.
// - PENDING_REVIEW - Campaign (parent) is pending review.
// - PENDING_START_DATE - Campaign's (parent) start date is in the future.
// - REJECTED - Campaign (parent) is rejected by moderation process.
// - UNKNOWN - Serving status is unknown. Please contact us for support.
type AdServingStatus string

// AdSuccessResponseItem defines model for AdSuccessResponseItem.
type AdSuccessResponseItem struct {
	Ad *MultiAdGroupAd `json:"ad,omitempty"`

	// AdId the Ad ID.
	AdId *string `json:"adId,omitempty"`

	// Index The index in the original list from the request.
	Index float32 `json:"index"`
}

// AssetCrop Asset cropping attributes
type AssetCrop struct {
	// Height The number of pixels to crop down from the value specified as top
	Height *float32 `json:"height,omitempty"`

	// Left The leftmost pixel from which to begin cropping
	Left *float32 `json:"left,omitempty"`

	// Top The highest pixel from which to begin cropping
	Top *float32 `json:"top,omitempty"`

	// Width The number of pixels to crop rightwards from the value specified as left
	Width *float32 `json:"width,omitempty"`
}

// AssociatedBudgetRuleResponse defines model for AssociatedBudgetRuleResponse.
type AssociatedBudgetRuleResponse struct {
	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The budget rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// AssociatedCampaign defines model for AssociatedCampaign.
type AssociatedCampaign struct {
	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// CampaignName The campaign name.
	CampaignName string `json:"campaignName"`

	// RuleStatus The budget rule evaluation status for this campaign. Read-only.
	RuleStatus string `json:"ruleStatus"`
}

// BidAdjustmentByPlacement defines model for BidAdjustmentByPlacement.
type BidAdjustmentByPlacement struct {
	Percentage *float32 `json:"percentage,omitempty"`

	// Placement List of bid adjustments for placements.
	// - HOME - The Amazon home page https://www.amazon.com.
	// - PAGE - A product detail page is where a customer discovers a unique product sold on Amazon.
	// - OTHER - Other placement groups. Such as search page.
	Placement *Placement `json:"placement,omitempty"`
}

// BidAdjustmentByShopperSegment defines model for BidAdjustmentByShopperSegment.
type BidAdjustmentByShopperSegment struct {
	Percentage *float32 `json:"percentage,omitempty"`

	// ShopperSegment List of bid adjustments for shopper segments.
	// - NEW_TO_BRAND_PURCHASE - The shopper segment where shopper has not purchased product from the brand.
	ShopperSegment *ShopperSegment `json:"shopperSegment,omitempty"`
}

// BidOptimizationStrategy The bid optimization strategy.
// - MAXIMIZE_IMMEDIATE_SALES - The default bidding strategy. The campaign is optimized to maximize sale.
// - MAXIMIZE_NEW_TO_BRAND_CUSTOMERS - The campaign is optimized to acquire more new-to-brand customers.
type BidOptimizationStrategy string

// Bidding defines model for Bidding.
type Bidding struct {
	// BidAdjustmentsByPlacement Placement level bid adjustment. Note that this field can only be set when 'bidOptimization' is set to false.
	BidAdjustmentsByPlacement *[]BidAdjustmentByPlacement `json:"bidAdjustmentsByPlacement,omitempty"`

	// BidAdjustmentsByShopperSegment Shopper segment level bid adjustment. When both bidAdjustmentsByPlacement and bidAdjustmentsByShopperSegment are specified, the adjustment will be multiplicative.
	BidAdjustmentsByShopperSegment *[]BidAdjustmentByShopperSegment `json:"bidAdjustmentsByShopperSegment,omitempty"`

	// BidOptimization Whether to use automatic placement level bid optimization. If set to true, Amazon will automatically set the right placement adjustment and the bidAdjustmentsByPlacement field is ignored. If set to false, the bidAdjustmentsByPlacement field will be used to adjust bid on different placements.
	// If this field is changed from false to true, the bidAdjustmentsByPlacement field will be reset to null.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy The bid optimization strategy.
	// - MAXIMIZE_IMMEDIATE_SALES - The default bidding strategy. The campaign is optimized to maximize sale.
	// - MAXIMIZE_NEW_TO_BRAND_CUSTOMERS - The campaign is optimized to acquire more new-to-brand customers.
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`
}

// BiddingError Errors related to bids.
type BiddingError struct {
	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause      ErrorCause `json:"cause"`
	LowerLimit *string    `json:"lowerLimit,omitempty"`

	// Message Human readable error message.
	Message string `json:"message"`

	// Reason Exact error reason.
	Reason     string  `json:"reason"`
	UpperLimit *string `json:"upperLimit,omitempty"`
}

// BillingError Errors related to billing.
type BillingError struct {
	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause ErrorCause `json:"cause"`

	// Message Human readable error message.
	Message string `json:"message"`

	// Reason Exact error reason.
	Reason string `json:"reason"`
}

// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
type BrandLogoCrop struct {
	Height *float32 `json:"height,omitempty"`
	Left   *float32 `json:"left,omitempty"`
	Top    *float32 `json:"top,omitempty"`
	Width  *float32 `json:"width,omitempty"`
}

// BrandVideoCreative defines model for BrandVideoCreative.
type BrandVideoCreative struct {
	// Asins An array of ASINs associated with the creative.
	Asins []string `json:"asins"`

	// BrandLogoAssetId The identifier of the [brand logo](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#brandlogo) image from the brand store's asset library.
	// Note that for campaigns created in the Amazon Advertising console prior to release of the brand store's assets library, responses will not include a value for this field.
	BrandLogoAssetId string `json:"brandLogoAssetId"`

	// BrandLogoCrop Asset cropping attributes
	BrandLogoCrop *AssetCrop `json:"brandLogoCrop,omitempty"`

	// BrandName The displayed brand name in the ad headline.
	// Maximum length is 30 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	BrandName string `json:"brandName"`

	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language.
	// If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool `json:"consentToTranslate,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	Headline string `json:"headline"`

	// VideoAssetIds The assetIds of the original videos submitted by the advertiser.
	// If 'consentToTranslate' is set to true and translation is SUCCESSFUL then 'videoAssetIds' will return translated video assetId whereas `originalVideoAssetIds` will return the original video assetId. In all other cases, `videoAssetIds` will return original video assetId.
	VideoAssetIds []string `json:"videoAssetIds"`
}

// BudgetChangeType The value by which to update the budget of the budget rule.
type BudgetChangeType string

// BudgetError defines model for BudgetError.
type BudgetError struct {
	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause      ErrorCause `json:"cause"`
	LowerLimit *string    `json:"lowerLimit,omitempty"`

	// Message Human readable error message.
	Message    string  `json:"message"`
	Reason     string  `json:"reason"`
	UpperLimit *string `json:"upperLimit,omitempty"`
}

// BudgetRecommendation Budget recomendation for campagins.
type BudgetRecommendation struct {
	// CampaignId The identifier of a campaign.
	CampaignId string `json:"campaignId"`

	// Index Correlate the recommendation to the campaign index in the request. Zero-based.
	Index float32 `json:"index"`

	// SevenDaysMissedOpportunities Missed Opportunities in the trailing seven days.
	SevenDaysMissedOpportunities SevenDaysMissedOpportunities `json:"sevenDaysMissedOpportunities"`

	// SuggestedBudget Recommended budget for the campaign.
	SuggestedBudget float64 `json:"suggestedBudget"`
}

// BudgetRecommendationError Error that occurred when generating budget recommendations.
type BudgetRecommendationError struct {
	// CampaignId The identifier of a campaign.
	CampaignId string `json:"campaignId"`

	// Code A human-readable description of the enumerated response code in the `code` field.
	Code string `json:"code"`

	// Details An enumerated response code.
	Details string `json:"details"`

	// Index Correlate the recommendation to the campaign index in the request. Zero-based.
	Index float32 `json:"index"`
}

// BudgetRuleError The Error Response Object.
type BudgetRuleError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// BudgetRuleResponse defines model for BudgetRuleResponse.
type BudgetRuleResponse struct {
	AssociatedCampaignIds *[]string `json:"associatedCampaignIds,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// BudgetType For the lifetime budget type, `startDate` and `endDate` must be specified.
type BudgetType string

// BudgetUsageCampaign defines model for BudgetUsageCampaign.
type BudgetUsageCampaign struct {
	// Budget Budget amount of resource requested
	Budget *float32 `json:"budget,omitempty"`

	// BudgetUsagePercent Budget usage percentage (spend / available budget) for the given budget policy.
	BudgetUsagePercent *float32 `json:"budgetUsagePercent,omitempty"`

	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`

	// UsageUpdatedTimestamp Last evaluation time for budget usage
	UsageUpdatedTimestamp *time.Time `json:"usageUpdatedTimestamp,omitempty"`
}

// BudgetUsageCampaignBatchError defines model for BudgetUsageCampaignBatchError.
type BudgetUsageCampaignBatchError struct {
	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`
}

// BudgetUsageCampaignRequest defines model for BudgetUsageCampaignRequest.
type BudgetUsageCampaignRequest struct {
	// CampaignIds A list of campaign IDs
	CampaignIds *[]string `json:"campaignIds,omitempty"`
}

// BudgetUsageCampaignResponse defines model for BudgetUsageCampaignResponse.
type BudgetUsageCampaignResponse struct {
	// Error List of budget usage percentages that failed to pull
	Error *[]BudgetUsageCampaignBatchError `json:"error,omitempty"`

	// Success List of budget usage percentages that were successfully pulled
	Success *[]BudgetUsageCampaign `json:"success,omitempty"`
}

// BudgetUsageError The Error Response Object.
type BudgetUsageError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// BulkAdGroupOperationResponse defines model for BulkAdGroupOperationResponse.
type BulkAdGroupOperationResponse struct {
	Error   *[]AdGroupFailureResponseItem `json:"error,omitempty"`
	Success *[]AdGroupSuccessResponseItem `json:"success,omitempty"`
}

// BulkAdOperationResponse defines model for BulkAdOperationResponse.
type BulkAdOperationResponse struct {
	Error   *[]AdFailureResponseItem `json:"error,omitempty"`
	Success *[]AdSuccessResponseItem `json:"success,omitempty"`
}

// BulkCampaignOperationResponse defines model for BulkCampaignOperationResponse.
type BulkCampaignOperationResponse struct {
	Error   *[]CampaignMutationFailureResponseItem `json:"error,omitempty"`
	Success *[]CampaignMutationSuccessResponseItem `json:"success,omitempty"`
}

// Campaign defines model for Campaign.
type Campaign struct {
	Bidding       *Bidding `json:"bidding,omitempty"`
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        float64  `json:"budget"`

	// BudgetType For the lifetime budget type, `startDate` and `endDate` must be specified.
	BudgetType BudgetType `json:"budgetType"`

	// CampaignId The identifier of the campaign.
	CampaignId string `json:"campaignId"`

	// CostType This parameter is only available in the US marketplace. The costType can be set to determines how the campaign will bid and charge. To view the bid maximums and minimums by geography and costType, see https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace
	// - CPC [Default] - Cost per click. The performance of this campaign is measured by the clicks triggered by the ad.
	// - VCPM - Cost per 1000 viewable impressions. The performance of this campaign is measured by the viewable impressions triggered by the ad.
	CostType *string `json:"costType,omitempty"`

	// EndDate The format of the date is YYYY-MM-DD.
	EndDate *string `json:"endDate,omitempty"`

	// ExtendedData CampaignExtendedData can only be retrieved via the list API. It won't be available in the response during update/create.
	ExtendedData *CampaignExtendedData `json:"extendedData,omitempty"`

	// Goal This parameter is only available in the US marketplace. Goal will allow you to set goal type to help drive your campaign performance. If no goal is selected then it will default to PAGE_VISIT.
	// The goal type of the campaign.
	// - BRAND_IMPRESSION_SHARE - This goal will allow you grown your brand impression share on top of search placements
	// - PAGE_VISIT [DEFAULT] - This goal drives traffic to your landing and detail pages through all placements.
	Goal                   *string `json:"goal,omitempty"`
	IsMultiAdGroupsEnabled *bool   `json:"isMultiAdGroupsEnabled,omitempty"`

	// Name The name of the campaign.
	Name string `json:"name"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId,omitempty"`

	// ProductLocation The product location of the campaign.
	// - SOLD_ON_AMAZON - For products sold on Amazon websites.
	// - NOT_SOLD_ON_AMAZON - For products not sold on Amazon websites.
	// - SOLD_ON_DTC - Deprecated (For products sold on DTC websites).
	ProductLocation *ProductLocation `json:"productLocation,omitempty"`
	RuleBasedBudget *RuleBasedBudget `json:"ruleBasedBudget,omitempty"`

	// SmartDefault This parameter is only available in the US marketplace. The smartDefault specifies a list of the smart default options for the campaign.
	//
	// `smartDefault` is optional for create campaign requests. `smartDefault` are applicable to all applicable child entities of the campaign and are not editable once the campaign is created. When using ["TARGETING"], targets will be automatically added based on the goal selected.  When ["MANUAL"] is selected, you will still be required to manually add targets.
	//
	// If you don't specify `smartDefault`, default value will be applied based on `goal` . If campaign's `goal` is selected, `smartDefault` will be set to ["TARGETING"].  Otherwise, a campaign's `smartDefault` will be set to ["MANUAL"].
	//
	// Each element in smartDefault can be set to determines which default strategy to be used
	// - MANUAL - Manual settings, no smart default be applied to the campaign, if MANUAL is added in the list, no other items are allowed in the list (the list must contains only one item)
	// - TARGETING - Smart Default Targeting creation, will automatically creating targetings when create ad group
	//
	// Example: ["TARGETING"]
	SmartDefault *[]string `json:"smartDefault,omitempty"`

	// StartDate The format of the date is YYYY-MM-DD.
	StartDate *string `json:"startDate,omitempty"`

	// State The current resource state.
	State EntityState `json:"state"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *Tags `json:"tags,omitempty"`
}

// CampaignExtendedData CampaignExtendedData can only be retrieved via the list API. It won't be available in the response during update/create.
type CampaignExtendedData struct {
	// CreationDate Creation date in epoch time.
	CreationDate *float32 `json:"creationDate,omitempty"`

	// LastUpdateDate Date of last update in epoch time.
	LastUpdateDate *float32 `json:"lastUpdateDate,omitempty"`

	// ServingStatus `Notice: the servingStatus enums have not been finalized yet.`
	// The campaign serving status determined by system.
	// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
	// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
	// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
	// - ADVERTISER_PAUSED - Advertiser's status is paused
	// - ADVERTISER_ARCHIVED - Advertiser's status is archived
	// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
	// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
	// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
	// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
	//
	// - CAMPAIGN_STATUS_ENABLED - Campaign's status is enabled.
	// - CAMPAIGN_PAUSED - Campaign's status is paused.
	// - CAMPAIGN_ARCHIVED - Campaign's status is archived.
	// - CAMPAIGN_INCOMPLETE - Campaign does not contain any ads or targeting clauses.
	// - CAMPAIGN_OUT_OF_BUDGET - Campaign is out of budget.
	//
	// - PORTFOLIO_STATUS_ENABLED - Portfolio's status is enabled
	// - PORTFOLIO_PAUSED - Portfolio's status is paused
	// - PORTFOLIO_ARCHIVED - Portfolio's status is archived
	// - PORTFOLIO_OUT_OF_BUDGET - Portfolio is out of budget
	// - PORTFOLIO_PENDING_START_DATE - Portfolio's start date is in the future
	// - PORTFOLIO_ENDED - Portfolio's end date is in the past.
	//
	// - INELIGIBLE - Ad Offer is ineligible
	// - ELIGIBLE - Ad Offer is eligible
	// - ENDED - Campaign's end date is in the past.
	// - PENDING_REVIEW - Campaign is pending review.
	// - PENDING_START_DATE - Campaign's start date is in the future.
	// - REJECTED - Campaign is rejected by moderation process.
	// - UNKNOWN - Serving status is unknown. Please contact us for support.
	ServingStatus *CampaignServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Campaign.
	ServingStatusDetails *[]string `json:"servingStatusDetails,omitempty"`
}

// CampaignMutationError defines model for CampaignMutationError.
type CampaignMutationError struct {
	// ErrorType The type of the error.
	ErrorType  string                        `json:"errorType"`
	ErrorValue CampaignMutationErrorSelector `json:"errorValue"`
}

// CampaignMutationErrorSelector defines model for CampaignMutationErrorSelector.
type CampaignMutationErrorSelector struct {
	// BiddingError Errors related to bids.
	BiddingError *BiddingError `json:"biddingError,omitempty"`

	// BillingError Errors related to billing.
	BillingError *BillingError `json:"billingError,omitempty"`
	BudgetError  *BudgetError  `json:"budgetError,omitempty"`

	// DateError Errors related to dates.
	DateError *DateError `json:"dateError,omitempty"`

	// OtherError Errors not related to any of the other error types.
	OtherError *OtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations.
	RangeError *RangeError `json:"rangeError,omitempty"`
}

// CampaignMutationFailureResponseItem defines model for CampaignMutationFailureResponseItem.
type CampaignMutationFailureResponseItem struct {
	// Errors A list of validation errors.
	Errors *[]CampaignMutationError `json:"errors,omitempty"`

	// Index the index of the campaign in the array from the request body.
	Index float32 `json:"index"`
}

// CampaignMutationSuccessResponseItem defines model for CampaignMutationSuccessResponseItem.
type CampaignMutationSuccessResponseItem struct {
	Campaign *Campaign `json:"campaign,omitempty"`

	// CampaignId The campaign ID.
	CampaignId *string `json:"campaignId,omitempty"`

	// Index The index of the campaign in the array from the request body.
	Index float32 `json:"index"`
}

// CampaignServingStatus `Notice: the servingStatus enums have not been finalized yet.`
// The campaign serving status determined by system.
// - ADVERTISER_STATUS_ENABLED - Advertiser's status is enabled
// - ADVERTISER_POLICING_PENDING_REVIEW - Avertiser is pending review because of policing reason
// - ADVERTISER_POLICING_SUSPENDED - Advertiser's status is suspended because of policing reason
// - ADVERTISER_PAUSED - Advertiser's status is paused
// - ADVERTISER_ARCHIVED - Advertiser's status is archived
// - ADVERTISER_PAYMENT_FAILURE - Advertiser's internal status is suspended
// - ADVERTISER_ACCOUNT_OUT_OF_BUDGET - Advertiser is out of budget for all Sponsored Ads campaigns
// - ADVERTISER_OUT_OF_PREPAY_BALANCE - Advertiser is out of prepay balance for all Sponsored Ads campaigns
// - ADVERTISER_EXCEED_SPENDS_LIMIT - Advertiser spends over the daily limit
//
// - CAMPAIGN_STATUS_ENABLED - Campaign's status is enabled.
// - CAMPAIGN_PAUSED - Campaign's status is paused.
// - CAMPAIGN_ARCHIVED - Campaign's status is archived.
// - CAMPAIGN_INCOMPLETE - Campaign does not contain any ads or targeting clauses.
// - CAMPAIGN_OUT_OF_BUDGET - Campaign is out of budget.
//
// - PORTFOLIO_STATUS_ENABLED - Portfolio's status is enabled
// - PORTFOLIO_PAUSED - Portfolio's status is paused
// - PORTFOLIO_ARCHIVED - Portfolio's status is archived
// - PORTFOLIO_OUT_OF_BUDGET - Portfolio is out of budget
// - PORTFOLIO_PENDING_START_DATE - Portfolio's start date is in the future
// - PORTFOLIO_ENDED - Portfolio's end date is in the past.
//
// - INELIGIBLE - Ad Offer is ineligible
// - ELIGIBLE - Ad Offer is eligible
// - ENDED - Campaign's end date is in the past.
// - PENDING_REVIEW - Campaign is pending review.
// - PENDING_START_DATE - Campaign's start date is in the future.
// - REJECTED - Campaign is rejected by moderation process.
// - UNKNOWN - Serving status is unknown. Please contact us for support.
type CampaignServingStatus string

// ComparisonOperator The comparison operator.
type ComparisonOperator string

// ConflictStateErrorCode defines model for ConflictStateErrorCode.
type ConflictStateErrorCode string

// ConflictStateExceptionResponseContent defines model for ConflictStateExceptionResponseContent.
type ConflictStateExceptionResponseContent struct {
	Code    ConflictStateErrorCode `json:"code"`
	Message string                 `json:"message"`
}

// CreateAdGroup defines model for CreateAdGroup.
type CreateAdGroup struct {
	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// Name The name of the ad group.
	Name string `json:"name"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`
}

// CreateAssociatedBudgetRulesRequest defines model for CreateAssociatedBudgetRulesRequest.
type CreateAssociatedBudgetRulesRequest struct {
	// BudgetRuleIds A list of budget rule identifiers.
	BudgetRuleIds *[]string `json:"budgetRuleIds,omitempty"`
}

// CreateAssociatedBudgetRulesResponse defines model for CreateAssociatedBudgetRulesResponse.
type CreateAssociatedBudgetRulesResponse struct {
	Responses *[]AssociatedBudgetRuleResponse `json:"responses,omitempty"`
}

// CreateBrandVideoAd defines model for CreateBrandVideoAd.
type CreateBrandVideoAd struct {
	// AdGroupId The adGroup identifier.
	AdGroupId   string                   `json:"adGroupId"`
	Creative    CreateBrandVideoCreative `json:"creative"`
	LandingPage LandingPage              `json:"landingPage"`

	// Name The name of the ad.
	Name string `json:"name"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`
}

// CreateBrandVideoCreative defines model for CreateBrandVideoCreative.
type CreateBrandVideoCreative struct {
	Asins            *[]string `json:"asins,omitempty"`
	BrandLogoAssetID *string   `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop *BrandLogoCrop `json:"brandLogoCrop,omitempty"`
	BrandName     *string        `json:"brandName,omitempty"`

	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language. If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool `json:"consentToTranslate,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline      *string   `json:"headline,omitempty"`
	VideoAssetIds *[]string `json:"videoAssetIds,omitempty"`
}

// CreateBrandVideoCreativeRequestContent defines model for CreateBrandVideoCreativeRequestContent.
type CreateBrandVideoCreativeRequestContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId     string             `json:"adId"`
	Creative BrandVideoCreative `json:"creative"`
}

// CreateBrandVideoCreativeResponseContent Create creative response
type CreateBrandVideoCreativeResponseContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId *string `json:"adId,omitempty"`

	// CreativeVersion The version identifier that helps you keep track of multiple versions of a submitted (non-draft) Sponsored Brands creative.
	CreativeVersion *string `json:"creativeVersion,omitempty"`
}

// CreateBudgetRulesResponse defines model for CreateBudgetRulesResponse.
type CreateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// CreateCampaign defines model for CreateCampaign.
type CreateCampaign struct {
	Bidding       *Bidding `json:"bidding,omitempty"`
	BrandEntityId *string  `json:"brandEntityId,omitempty"`

	// Budget The budget of the campaign.
	Budget float64 `json:"budget"`

	// BudgetType For the lifetime budget type, `startDate` and `endDate` must be specified.
	BudgetType BudgetType `json:"budgetType"`

	// CostType This parameter is only available in the US marketplace. The costType can be set to determines how the campaign will bid and charge. To view the bid maximums and minimums by geography and costType, see https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace
	// - CPC [Default] - Cost per click. The performance of this campaign is measured by the clicks triggered by the ad.
	// - VCPM - Cost per 1000 viewable impressions. The performance of this campaign is measured by the viewable impressions triggered by the ad.
	CostType *string `json:"costType,omitempty"`

	// EndDate endDate is optional. If endDate is specified, startDate must be specified as well.
	EndDate *string `json:"endDate,omitempty"`

	// Goal This parameter is only available in the US marketplace. Goal will allow you to set goal type to help drive your campaign performance. If no goal is selected then it will default to PAGE_VISIT.
	// The goal type of the campaign.
	// - BRAND_IMPRESSION_SHARE - This goal will allow you grown your brand impression share on top of search placement
	// - PAGE_VISIT [DEFAULT] - This goal drives traffic to your landing and detail pages through all placements.
	Goal *string `json:"goal,omitempty"`

	// Name The name of the campaign.
	Name string `json:"name"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId,omitempty"`

	// ProductLocation The product location of the campaign.
	// - SOLD_ON_AMAZON - For products sold on Amazon websites.
	// - NOT_SOLD_ON_AMAZON - For products not sold on Amazon websites.
	// - SOLD_ON_DTC - Deprecated (For products sold on DTC websites).
	ProductLocation *ProductLocation `json:"productLocation,omitempty"`

	// SmartDefault This parameter is only available in the US marketplace. The smartDefault specifies a list of the smart default options for the campaign.
	//
	// `smartDefault` is optional for create campaign requests. `smartDefault` are applicable to all applicable child entities of the campaign and are not editable once the campaign is created. When using ["TARGETING"], targets will be automatically added based on the goal selected.  When ["MANUAL"] is selected, you will still be required to manually add targets.
	//
	// If you don't specify `smartDefault`, default value will be applied based on `goal` . If campaign's `goal` is selected, `smartDefault` will be set to ["TARGETING"].  Otherwise, a campaign's `smartDefault` will be set to ["MANUAL"].
	//
	// Each element in smartDefault can be set to determines which default strategy to be used
	// - MANUAL - Manual settings, no smart default be applied to the campaign, if MANUAL is added in the list, no other items are allowed in the list (the list must contains only one item)
	// - TARGETING - Smart Default Targeting creation, will automatically creating targetings when create ad group
	//
	// Example: ["TARGETING"]
	SmartDefault *[]string `json:"smartDefault,omitempty"`

	// StartDate startDate is optional. If startDate is not specified, current date will be used.
	StartDate *string `json:"startDate,omitempty"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *Tags `json:"tags,omitempty"`
}

// CreateOrUpdateEntityState Entity state for create or update operation.
type CreateOrUpdateEntityState string

// CreateProductCollectionAd defines model for CreateProductCollectionAd.
type CreateProductCollectionAd struct {
	// AdGroupId The adGroup identifier.
	AdGroupId   string                          `json:"adGroupId"`
	Creative    CreateProductCollectionCreative `json:"creative"`
	LandingPage LandingPage                     `json:"landingPage"`

	// Name The name of the ad.
	Name string `json:"name"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`
}

// CreateProductCollectionCreative defines model for CreateProductCollectionCreative.
type CreateProductCollectionCreative struct {
	Asins            *[]string `json:"asins,omitempty"`
	BrandLogoAssetID *string   `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop      *BrandLogoCrop `json:"brandLogoCrop,omitempty"`
	BrandName          *string        `json:"brandName,omitempty"`
	CustomImageAssetId *string        `json:"customImageAssetId,omitempty"`

	// CustomImageCrop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted to the whole image.
	CustomImageCrop *CustomImageCrop `json:"customImageCrop,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`
}

// CreateProductCollectionCreativeRequestContent defines model for CreateProductCollectionCreativeRequestContent.
type CreateProductCollectionCreativeRequestContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId     string                    `json:"adId"`
	Creative ProductCollectionCreative `json:"creative"`
}

// CreateProductCollectionCreativeResponseContent Create creative response
type CreateProductCollectionCreativeResponseContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId *string `json:"adId,omitempty"`

	// CreativeVersion The version identifier that helps you keep track of multiple versions of a submitted (non-draft) Sponsored Brands creative.
	CreativeVersion *string `json:"creativeVersion,omitempty"`
}

// CreateSBBudgetRulesRequest defines model for CreateSBBudgetRulesRequest.
type CreateSBBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SBBudgetRuleDetails `json:"budgetRulesDetails,omitempty"`
}

// CreateSponsoredBrandStoreSpotlightAdsRequestContent defines model for CreateSponsoredBrandStoreSpotlightAdsRequestContent.
type CreateSponsoredBrandStoreSpotlightAdsRequestContent struct {
	Ads []CreateStoreSpotlightAd `json:"ads"`
}

// CreateSponsoredBrandStoreSpotlightAdsResponseContent defines model for CreateSponsoredBrandStoreSpotlightAdsResponseContent.
type CreateSponsoredBrandStoreSpotlightAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// CreateSponsoredBrandsAdGroupsRequestContent defines model for CreateSponsoredBrandsAdGroupsRequestContent.
type CreateSponsoredBrandsAdGroupsRequestContent struct {
	AdGroups []CreateAdGroup `json:"adGroups"`
}

// CreateSponsoredBrandsAdGroupsResponseContent defines model for CreateSponsoredBrandsAdGroupsResponseContent.
type CreateSponsoredBrandsAdGroupsResponseContent struct {
	AdGroups *BulkAdGroupOperationResponse `json:"adGroups,omitempty"`
}

// CreateSponsoredBrandsBrandVideoAdsRequestContent defines model for CreateSponsoredBrandsBrandVideoAdsRequestContent.
type CreateSponsoredBrandsBrandVideoAdsRequestContent struct {
	Ads []CreateBrandVideoAd `json:"ads"`
}

// CreateSponsoredBrandsBrandVideoAdsResponseContent defines model for CreateSponsoredBrandsBrandVideoAdsResponseContent.
type CreateSponsoredBrandsBrandVideoAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// CreateSponsoredBrandsCampaignsRequestContent defines model for CreateSponsoredBrandsCampaignsRequestContent.
type CreateSponsoredBrandsCampaignsRequestContent struct {
	Campaigns []CreateCampaign `json:"campaigns"`
}

// CreateSponsoredBrandsCampaignsResponseContent defines model for CreateSponsoredBrandsCampaignsResponseContent.
type CreateSponsoredBrandsCampaignsResponseContent struct {
	Campaigns *BulkCampaignOperationResponse `json:"campaigns,omitempty"`
}

// CreateSponsoredBrandsProductCollectionAdsRequestContent defines model for CreateSponsoredBrandsProductCollectionAdsRequestContent.
type CreateSponsoredBrandsProductCollectionAdsRequestContent struct {
	Ads []CreateProductCollectionAd `json:"ads"`
}

// CreateSponsoredBrandsProductCollectionAdsResponseContent defines model for CreateSponsoredBrandsProductCollectionAdsResponseContent.
type CreateSponsoredBrandsProductCollectionAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// CreateSponsoredBrandsVideoAdsRequestContent defines model for CreateSponsoredBrandsVideoAdsRequestContent.
type CreateSponsoredBrandsVideoAdsRequestContent struct {
	Ads []CreateVideoAd `json:"ads"`
}

// CreateSponsoredBrandsVideoAdsResponseContent defines model for CreateSponsoredBrandsVideoAdsResponseContent.
type CreateSponsoredBrandsVideoAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// CreateStoreSpotlightAd defines model for CreateStoreSpotlightAd.
type CreateStoreSpotlightAd struct {
	// AdGroupId The adGroup identifier.
	AdGroupId   string                       `json:"adGroupId"`
	Creative    CreateStoreSpotlightCreative `json:"creative"`
	LandingPage LandingPage                  `json:"landingPage"`

	// Name The name of the ad.
	Name string `json:"name"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`
}

// CreateStoreSpotlightCreative defines model for CreateStoreSpotlightCreative.
type CreateStoreSpotlightCreative struct {
	BrandLogoAssetID *string `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop *BrandLogoCrop `json:"brandLogoCrop,omitempty"`
	BrandName     *string        `json:"brandName,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string    `json:"headline,omitempty"`
	Subpages *[]Subpage `json:"subpages,omitempty"`
}

// CreateStoreSpotlightCreativeRequestContent defines model for CreateStoreSpotlightCreativeRequestContent.
type CreateStoreSpotlightCreativeRequestContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId     string                 `json:"adId"`
	Creative StoreSpotlightCreative `json:"creative"`
}

// CreateStoreSpotlightCreativeResponseContent Create creative response
type CreateStoreSpotlightCreativeResponseContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId *string `json:"adId,omitempty"`

	// CreativeVersion The version identifier that helps you keep track of multiple versions of a submitted (non-draft) Sponsored Brands creative.
	CreativeVersion *string `json:"creativeVersion,omitempty"`
}

// CreateVideoAd defines model for CreateVideoAd.
type CreateVideoAd struct {
	// AdGroupId The adGroup identifier.
	AdGroupId string              `json:"adGroupId"`
	Creative  CreateVideoCreative `json:"creative"`

	// Name The name of the ad.
	Name string `json:"name"`

	// State Entity state for create or update operation.
	State CreateOrUpdateEntityState `json:"state"`
}

// CreateVideoCreative defines model for CreateVideoCreative.
type CreateVideoCreative struct {
	Asins *[]string `json:"asins,omitempty"`

	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language. If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool `json:"consentToTranslate,omitempty"`

	// VideoAssetIds In SB API V4, `videoMediaIds` is replaced by `videoAssetIds`.
	// `videoAssetIds` will only allow Asset Library identifiers for ad creation, but responses can include mediaIds for v1 campaigns and API V3 operations.
	// At a future state, existing mediaIds will be added to Asset library for use in SB campaigns.
	VideoAssetIds *[]string `json:"videoAssetIds,omitempty"`
}

// CreateVideoCreativeRequestContent defines model for CreateVideoCreativeRequestContent.
type CreateVideoCreativeRequestContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId     string        `json:"adId"`
	Creative VideoCreative `json:"creative"`
}

// CreateVideoCreativeResponseContent Create creative response
type CreateVideoCreativeResponseContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId *string `json:"adId,omitempty"`

	// CreativeVersion The version identifier that helps you keep track of multiple versions of a submitted (non-draft) Sponsored Brands creative.
	CreativeVersion *string `json:"creativeVersion,omitempty"`
}

// Creative defines model for Creative.
type Creative struct {
	Asins            *[]string `json:"asins,omitempty"`
	BrandLogoAssetID *string   `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop *BrandLogoCrop `json:"brandLogoCrop,omitempty"`
	BrandLogoUrl  *string        `json:"brandLogoUrl,omitempty"`
	BrandName     *string        `json:"brandName,omitempty"`

	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language. If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool   `json:"consentToTranslate,omitempty"`
	CustomImageAssetId *string `json:"customImageAssetId,omitempty"`

	// CustomImageCrop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted to the whole image.
	CustomImageCrop *CustomImageCrop `json:"customImageCrop,omitempty"`
	CustomImageUrl  *string          `json:"customImageUrl,omitempty"`
	CustomImages    *[]CustomImage   `json:"customImages,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`

	// OriginalVideoAssetIds The assetIds of the original videos submitted by the advertiser.
	// If 'consentToTranslate' is set to true and translation is SUCCESSFUL then `originalVideoAssetIds` will return the original video assetId whereas `videoAssetIds` will return translated video assetId. In all other cases, 'originalVideoAssetIds' and `videoAssetIds` both will return original video assetId.
	OriginalVideoAssetIds *[]string  `json:"originalVideoAssetIds,omitempty"`
	Subpages              *[]Subpage `json:"subpages,omitempty"`

	// Type The creative type of SB ad.
	Type *CreativeType `json:"type,omitempty"`

	// VideoAssetIds In SB API V4, `videoMediaIds` is replaced by `videoAssetIds`.
	// `videoAssetIds` will only allow Asset Library identifiers for ad creation, but responses can include mediaIds for v1 campaigns and API V3 operations.
	// At a future state, existing mediaIds will be added to Asset library for use in SB campaigns.
	VideoAssetIds *[]string `json:"videoAssetIds,omitempty"`
}

// CreativeLandingPage Landing page.
type CreativeLandingPage struct {
	// Type Landing page type
	Type  *CreativeLandingPageType `json:"type,omitempty"`
	Value *string                  `json:"value,omitempty"`
}

// CreativeLandingPageType Landing page type
type CreativeLandingPageType string

// CreativeProperties Creative properties
type CreativeProperties struct {
	// Asins -----------------------------------------------
	// List types
	// -----------------------------------------------
	// A list of ASINs
	Asins *[]string `json:"asins,omitempty"`

	// BrandLogoAssetId The identifier of image/video asset from the store's asset library
	BrandLogoAssetId *string `json:"brandLogoAssetId,omitempty"`

	// BrandLogoCrop Asset cropping attributes
	BrandLogoCrop *AssetCrop `json:"brandLogoCrop,omitempty"`
	BrandLogoUrl  *string    `json:"brandLogoUrl,omitempty"`

	// BrandName The displayed brand name in the ad headline.
	// Maximum length is 30 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	BrandName *string `json:"brandName,omitempty"`

	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language. If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool `json:"consentToTranslate,omitempty"`

	// CustomImageAssetId The identifier of image/video asset from the store's asset library
	CustomImageAssetId *string `json:"customImageAssetId,omitempty"`

	// CustomImageCrop Asset cropping attributes
	CustomImageCrop *AssetCrop `json:"customImageCrop,omitempty"`
	CustomImageUrl  *string    `json:"customImageUrl,omitempty"`

	// CustomImages An array of customImages associated with the creative.
	CustomImages *[]CustomImage `json:"customImages,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	Headline *string `json:"headline,omitempty"`

	// LandingPage Landing page.
	LandingPage *CreativeLandingPage `json:"landingPage,omitempty"`

	// OriginalVideoAssetIds The assetIds of the original videos submitted by the advertiser.
	// If 'consentToTranslate' is set to true and translation is SUCCESSFUL then `originalVideoAssetIds` will return the original video assetId whereas `videoAssetIds` will return translated video assetId. In all other cases, 'originalVideoAssetIds' and `videoAssetIds` both will return original video assetId.
	OriginalVideoAssetIds *[]string `json:"originalVideoAssetIds,omitempty"`

	// Subpages An array of subpages
	Subpages *[]Subpage `json:"subpages,omitempty"`

	// VideoAssetIds The assetIds of the original videos submitted by the advertiser.
	// If 'consentToTranslate' is set to true and translation is SUCCESSFUL then 'videoAssetIds' will return translated video assetId whereas `originalVideoAssetIds` will return the original video assetId. In all other cases, `videoAssetIds` will return original video assetId.
	VideoAssetIds *[]string `json:"videoAssetIds,omitempty"`
}

// CreativeStatus The lifecycle status of a creative
type CreativeStatus string

// CreativeType The creative type of SB ad.
type CreativeType string

// CustomImage defines model for CustomImage.
type CustomImage struct {
	AssetId *string `json:"assetId,omitempty"`

	// Crop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted to the whole image.
	Crop *CustomImageCrop `json:"crop,omitempty"`
	Url  *string          `json:"url,omitempty"`
}

// CustomImageCrop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted to the whole image.
type CustomImageCrop struct {
	Height *float32 `json:"height,omitempty"`
	Left   *float32 `json:"left,omitempty"`
	Top    *float32 `json:"top,omitempty"`
	Width  *float32 `json:"width,omitempty"`
}

// DateError Errors related to dates.
type DateError struct {
	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause ErrorCause `json:"cause"`

	// Message Human readable error message.
	Message string `json:"message"`

	// Reason Exact error reason..
	Reason string `json:"reason"`
}

// DateRangeTypeRuleDuration Object representing date range type rule duration.
type DateRangeTypeRuleDuration struct {
	// EndDate The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.
	EndDate *string `json:"endDate,omitempty"`

	// StartDate The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
	StartDate string `json:"startDate"`
}

// DayOfWeek The day of the week.
type DayOfWeek string

// DeleteSponsoredBrandsAdGroupsRequestContent defines model for DeleteSponsoredBrandsAdGroupsRequestContent.
type DeleteSponsoredBrandsAdGroupsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds.
	AdGroupIdFilter *ObjectIdFilter `json:"adGroupIdFilter,omitempty"`
}

// DeleteSponsoredBrandsAdGroupsResponseContent defines model for DeleteSponsoredBrandsAdGroupsResponseContent.
type DeleteSponsoredBrandsAdGroupsResponseContent struct {
	AdGroups *BulkAdGroupOperationResponse `json:"adGroups,omitempty"`
}

// DeleteSponsoredBrandsAdsRequestContent defines model for DeleteSponsoredBrandsAdsRequestContent.
type DeleteSponsoredBrandsAdsRequestContent struct {
	// AdIdFilter Filter entities by the list of objectIds.
	AdIdFilter *ObjectIdFilter `json:"adIdFilter,omitempty"`
}

// DeleteSponsoredBrandsAdsResponseContent defines model for DeleteSponsoredBrandsAdsResponseContent.
type DeleteSponsoredBrandsAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// DeleteSponsoredBrandsCampaignsRequestContent defines model for DeleteSponsoredBrandsCampaignsRequestContent.
type DeleteSponsoredBrandsCampaignsRequestContent struct {
	// CampaignIdFilter Filter entities by the list of objectIds.
	CampaignIdFilter *ObjectIdFilter `json:"campaignIdFilter,omitempty"`
}

// DeleteSponsoredBrandsCampaignsResponseContent defines model for DeleteSponsoredBrandsCampaignsResponseContent.
type DeleteSponsoredBrandsCampaignsResponseContent struct {
	Campaigns *BulkCampaignOperationResponse `json:"campaigns,omitempty"`
}

// DisassociateAssociatedBudgetRuleResponse defines model for DisassociateAssociatedBudgetRuleResponse.
type DisassociateAssociatedBudgetRuleResponse = map[string]interface{}

// EntityState The current resource state.
type EntityState string

// EntityStateFilter Filter entities by state.
type EntityStateFilter struct {
	Include *[]EntityState `json:"include,omitempty"`
}

// ErrorCause Structure describing error cause - location in the payload and data causing error.
type ErrorCause struct {
	// Location Error location, JSON Path expression specifying element of API payload causing error.
	Location string `json:"location"`

	// Trigger Optional value causing error.
	Trigger *string `json:"trigger,omitempty"`
}

// EventTypeRuleDuration Object representing event type rule duration.
type EventTypeRuleDuration struct {
	// EndDate The event end date in YYYYMMDD format. Read-only.
	EndDate *string `json:"endDate,omitempty"`

	// EventId The event identifier. This value is available from the budget rules recommendation API.
	EventId string `json:"eventId"`

	// EventName The event name. Read-only.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.
	StartDate *string `json:"startDate,omitempty"`
}

// GetBudgetRecommendationsRequestContent defines model for GetBudgetRecommendationsRequestContent.
type GetBudgetRecommendationsRequestContent struct {
	// CampaignIds List of CampaignIds
	CampaignIds []string `json:"campaignIds"`
}

// GetBudgetRecommendationsResponseContent defines model for GetBudgetRecommendationsResponseContent.
type GetBudgetRecommendationsResponseContent struct {
	// Error List of errors that occurred when generating budget recommendations.
	Error []BudgetRecommendationError `json:"error"`

	// Success List of successful budget recommendations for campaigns.
	Success []BudgetRecommendation `json:"success"`
}

// GetSBBudgetRuleResponse defines model for GetSBBudgetRuleResponse.
type GetSBBudgetRuleResponse struct {
	BudgetRule *SBBudgetRule `json:"budgetRule,omitempty"`
}

// GetSBBudgetRulesForAdvertiserResponse defines model for GetSBBudgetRulesForAdvertiserResponse.
type GetSBBudgetRulesForAdvertiserResponse struct {
	// BudgetRulesForAdvertiserResponse A list of rules created by the advertiser.
	BudgetRulesForAdvertiserResponse *[]SBBudgetRule `json:"budgetRulesForAdvertiserResponse,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// GoalTypeFilter Filter entities by goal type.
type GoalTypeFilter struct {
	Include *[]string `json:"include,omitempty"`
}

// HeadlineSuggestionRequest Request structure of headline suggestion API.
type HeadlineSuggestionRequest struct {
	AdFormat *HeadlineSuggestionRequestAdFormat `json:"adFormat,omitempty"`

	// Asins An array of ASINs associated with the creative. Note do not pass an empty array, this results in an error.
	Asins *[]string `json:"asins,omitempty"`

	// MaxNumSuggestions Maximum number of suggestions that API should return. Response will [0, maxNumSuggestions] suggestions (suggestions are not guaranteed).
	MaxNumSuggestions *float32 `json:"maxNumSuggestions,omitempty"`

	// StorePages An array of Store Pages associated with SB Spotlight Creative.
	StorePages *[]StorePage `json:"storePages,omitempty"`
}

// HeadlineSuggestionRequestAdFormat defines model for HeadlineSuggestionRequest.AdFormat.
type HeadlineSuggestionRequestAdFormat string

// HeadlineSuggestionResponse Response structure of headline suggestion API.
type HeadlineSuggestionResponse struct {
	// RequestId An identifier for request made which is generated by server.
	RequestId *string `json:"requestId,omitempty"`

	// Suggestions Suggestions are sorted, i.e., more suitable headline has lesser array index value
	Suggestions *[]SuggestedHeadline `json:"suggestions,omitempty"`
}

// InternalErrorErrorCode defines model for InternalErrorErrorCode.
type InternalErrorErrorCode string

// InternalServerExceptionResponseContent defines model for InternalServerExceptionResponseContent.
type InternalServerExceptionResponseContent struct {
	Code InternalErrorErrorCode `json:"code"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// InvalidArgumentError defines model for InvalidArgumentError.
type InvalidArgumentError struct {
	// ErrorType The type of the error
	ErrorType  string                       `json:"errorType"`
	ErrorValue InvalidArgumentErrorSelector `json:"errorValue"`
}

// InvalidArgumentErrorCode defines model for InvalidArgumentErrorCode.
type InvalidArgumentErrorCode string

// InvalidArgumentErrorSelector defines model for InvalidArgumentErrorSelector.
type InvalidArgumentErrorSelector struct {
	// OtherError Errors not related to any of the other error types.
	OtherError *OtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations.
	RangeError *RangeError `json:"rangeError,omitempty"`
}

// InvalidArgumentExceptionResponseContent defines model for InvalidArgumentExceptionResponseContent.
type InvalidArgumentExceptionResponseContent struct {
	Code   InvalidArgumentErrorCode `json:"code"`
	Errors *[]InvalidArgumentError  `json:"errors,omitempty"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// LandingPage defines model for LandingPage.
type LandingPage struct {
	Asins *[]string `json:"asins,omitempty"`

	// PageType The type of landing page, such as store page, product list (simple landing page), custom url.
	PageType *LandingPageType `json:"pageType,omitempty"`

	// Url URL of an existing simple landing page or Store page. Vendors may also specify the URL of a custom landing page.
	// If a custom URL is specified, the landing page must include the ASINs of at least three products that are
	// advertised as part of the campaign. Do not include this property in the request if the asins property is also
	// included, these properties are mutually exclusive.
	// Note that brandVideo ads only support Store page as landing page and does not allow asins property.
	Url *string `json:"url,omitempty"`
}

// LandingPageType The type of landing page, such as store page, product list (simple landing page), custom url.
type LandingPageType string

// ListCreativesRequestContent defines model for ListCreativesRequestContent.
type ListCreativesRequestContent struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId string `json:"adId"`

	// CreativeStatusFilter Filters creatives by optional creative status.
	// By default, you can list all creative versions regardless of creative status.
	CreativeStatusFilter *[]CreativeStatus `json:"creativeStatusFilter,omitempty"`

	// CreativeTypeFilter Filters creatives by optional creative type.
	// By default, you can list all creative versions regardless of creative type.
	CreativeTypeFilter *[]CreativeType `json:"creativeTypeFilter,omitempty"`

	// CreativeVersionFilter Filters creatives by optional creative version.
	// This means you can either list all creative versions without specific creative version filter, all just retrieve a single creative version by providing a specific version identifier.
	CreativeVersionFilter *[]string `json:"creativeVersionFilter,omitempty"`

	// MaxResults Set a limit on the number of results returned by an operation.
	MaxResults *float32 `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field.
	// To retrieve the next page of results, call the same operation and specify this token in the request.
	// If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// ListCreativesResponseContent defines model for ListCreativesResponseContent.
type ListCreativesResponseContent struct {
	// Creatives A list of creatives
	Creatives *[]ListCreativesResultEntry `json:"creatives,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field.
	// To retrieve the next page of results, call the same operation and specify this token in the request.
	// If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of results returned by an operation.
	TotalResults *float32 `json:"totalResults,omitempty"`
}

// ListCreativesResultEntry -----------------------------------------------
// Structure types
// -----------------------------------------------
// Creative
type ListCreativesResultEntry struct {
	// AdId The unique ID of a Sponsored Brands ad.
	AdId         *string  `json:"adId,omitempty"`
	CreationTime *float64 `json:"creationTime,omitempty"`

	// CreativeProperties Creative properties
	CreativeProperties *CreativeProperties `json:"creativeProperties,omitempty"`

	// CreativeStatus The lifecycle status of a creative
	CreativeStatus *CreativeStatus `json:"creativeStatus,omitempty"`

	// CreativeType The creative type of SB ad.
	CreativeType *CreativeType `json:"creativeType,omitempty"`

	// CreativeVersion The version identifier that helps you keep track of multiple versions of a submitted (non-draft) Sponsored Brands creative.
	CreativeVersion *string  `json:"creativeVersion,omitempty"`
	LastUpdateTime  *float64 `json:"lastUpdateTime,omitempty"`
}

// ListSponsoredBrandsAdGroupsRequestContent defines model for ListSponsoredBrandsAdGroupsRequestContent.
type ListSponsoredBrandsAdGroupsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds.
	AdGroupIdFilter *ObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds.
	CampaignIdFilter *ObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Setting to true will slow down performance because the API needs to retrieve extra information for each campaign.
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API.
	MaxResults *float32 `json:"maxResults,omitempty"`

	// NameFilter Filter entities by name.
	NameFilter *NameFilter `json:"nameFilter,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state.
	StateFilter *EntityStateFilter `json:"stateFilter,omitempty"`
}

// ListSponsoredBrandsAdGroupsResponseContent defines model for ListSponsoredBrandsAdGroupsResponseContent.
type ListSponsoredBrandsAdGroupsResponseContent struct {
	AdGroups *[]AdGroup `json:"adGroups,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities.
	TotalResults *float32 `json:"totalResults,omitempty"`
}

// ListSponsoredBrandsAdsRequestContent defines model for ListSponsoredBrandsAdsRequestContent.
type ListSponsoredBrandsAdsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds.
	AdGroupIdFilter *ObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// AdIdFilter Filter entities by the list of objectIds.
	AdIdFilter *ObjectIdFilter `json:"adIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds.
	CampaignIdFilter *ObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API.
	MaxResults *float32 `json:"maxResults,omitempty"`

	// NameFilter Filter entities by name.
	NameFilter *NameFilter `json:"nameFilter,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state.
	StateFilter *EntityStateFilter `json:"stateFilter,omitempty"`
}

// ListSponsoredBrandsAdsResponseContent defines model for ListSponsoredBrandsAdsResponseContent.
type ListSponsoredBrandsAdsResponseContent struct {
	Ads *[]Ad `json:"ads,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities.
	TotalResults *float32 `json:"totalResults,omitempty"`
}

// ListSponsoredBrandsCampaignsRequestContent defines model for ListSponsoredBrandsCampaignsRequestContent.
type ListSponsoredBrandsCampaignsRequestContent struct {
	// CampaignIdFilter Filter entities by the list of objectIds.
	CampaignIdFilter *ObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// GoalTypeFilter Filter entities by goal type.
	GoalTypeFilter *GoalTypeFilter `json:"goalTypeFilter,omitempty"`

	// IncludeExtendedDataFields Setting to true will slow down performance because the API needs to retrieve extra information for each campaign.
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API.
	MaxResults *float32 `json:"maxResults,omitempty"`

	// NameFilter Filter entities by name.
	NameFilter *NameFilter `json:"nameFilter,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// PortfolioIdFilter Filter entities by the list of objectIds.
	PortfolioIdFilter *ObjectIdFilter `json:"portfolioIdFilter,omitempty"`

	// StateFilter Filter entities by state.
	StateFilter *EntityStateFilter `json:"stateFilter,omitempty"`
}

// ListSponsoredBrandsCampaignsResponseContent defines model for ListSponsoredBrandsCampaignsResponseContent.
type ListSponsoredBrandsCampaignsResponseContent struct {
	Campaigns *[]Campaign `json:"campaigns,omitempty"`

	// NextToken Token value allowing to navigate to the next response page.
	NextToken *string `json:"nextToken,omitempty"`

	// TotalCount The total number of entities.
	TotalCount *float32 `json:"totalCount,omitempty"`
}

// ModerationError The Error Response Object.
type ModerationError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// MultiAdGroupAd defines model for MultiAdGroupAd.
type MultiAdGroupAd struct {
	// AdGroupId The adGroup identifier.
	AdGroupId string `json:"adGroupId"`

	// AdId The ad identifier.
	AdId string `json:"adId"`

	// CampaignId The campaign identifier.
	CampaignId   string          `json:"campaignId"`
	Creative     *Creative       `json:"creative,omitempty"`
	ExtendedData *AdExtendedData `json:"extendedData,omitempty"`
	LandingPage  *LandingPage    `json:"landingPage,omitempty"`

	// Name The name of the ad.
	Name string `json:"name"`

	// State The current resource state.
	State EntityState `json:"state"`
}

// NameFilter Filter entities by name.
type NameFilter struct {
	Include *[]string `json:"include,omitempty"`

	// QueryTermMatchType Defines how would the string resource field (e.g. campaign name, ad group name) be matched with the query term in filter.
	QueryTermMatchType *QueryTermMatchType `json:"queryTermMatchType,omitempty"`
}

// NotFoundErrorCode defines model for NotFoundErrorCode.
type NotFoundErrorCode string

// NotFoundExceptionResponseContent defines model for NotFoundExceptionResponseContent.
type NotFoundExceptionResponseContent struct {
	Code    NotFoundErrorCode `json:"code"`
	Message string            `json:"message"`
}

// ObjectIdFilter Filter entities by the list of objectIds.
type ObjectIdFilter struct {
	Include *[]string `json:"include,omitempty"`
}

// OtherError Errors not related to any of the other error types.
type OtherError struct {
	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause ErrorCause `json:"cause"`

	// Message Human readable error message.
	Message string `json:"message"`
	Reason  string `json:"reason"`
}

// PerformanceMeasureConditionForSB defines model for PerformanceMeasureConditionForSB.
type PerformanceMeasureConditionForSB struct {
	// ComparisonOperator The comparison operator.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator"`

	// MetricName The advertising performance metric.
	MetricName PerformanceMetricForSB `json:"metricName"`

	// Threshold The performance threshold value.
	Threshold float64 `json:"threshold"`
}

// PerformanceMetricForSB The advertising performance metric.
type PerformanceMetricForSB string

// PerformanceMetricValue An object giving the name of the performance metric and its value when the rule was evaluated
type PerformanceMetricValue struct {
	// Name Name of the performance metric
	Name *string `json:"name,omitempty"`

	// Value Value of the performance metric
	Value *float64 `json:"value,omitempty"`
}

// Placement List of bid adjustments for placements.
// - HOME - The Amazon home page https://www.amazon.com.
// - PAGE - A product detail page is where a customer discovers a unique product sold on Amazon.
// - OTHER - Other placement groups. Such as search page.
type Placement string

// ProductCollectionCreative defines model for ProductCollectionCreative.
type ProductCollectionCreative struct {
	// Asins An array of ASINs associated with the creative.
	Asins []string `json:"asins"`

	// BrandLogoAssetId The identifier of the [brand logo](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#brandlogo) image from the brand store's asset library.
	// Note that for campaigns created in the Amazon Advertising console prior to release of the brand store's assets library, responses will not include a value for this field.
	BrandLogoAssetId string `json:"brandLogoAssetId"`

	// BrandLogoCrop Asset cropping attributes
	BrandLogoCrop *AssetCrop `json:"brandLogoCrop,omitempty"`

	// BrandName The displayed brand name in the ad headline.
	// Maximum length is 30 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	BrandName string `json:"brandName"`

	// CustomImageAssetId The identifier of the Custom image from the Store assets library.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#customimage) for more information on what constitutes a valid Custom image.
	CustomImageAssetId *string `json:"customImageAssetId,omitempty"`

	// CustomImageCrop Asset cropping attributes
	CustomImageCrop *AssetCrop `json:"customImageCrop,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	Headline string `json:"headline"`
}

// ProductLocation The product location of the campaign.
// - SOLD_ON_AMAZON - For products sold on Amazon websites.
// - NOT_SOLD_ON_AMAZON - For products not sold on Amazon websites.
// - SOLD_ON_DTC - Deprecated (For products sold on DTC websites).
type ProductLocation string

// QueryTermMatchType Defines how would the string resource field (e.g. campaign name, ad group name) be matched with the query term in filter.
type QueryTermMatchType string

// RangeError Errors related to range constraints violations.
type RangeError struct {
	// Allowed Allowed values.
	Allowed *[]string `json:"allowed,omitempty"`

	// Cause Structure describing error cause - location in the payload and data causing error.
	Cause ErrorCause `json:"cause"`

	// LowerLimit Optional lower limit.
	LowerLimit *string `json:"lowerLimit,omitempty"`

	// Message Human readable error message.
	Message string `json:"message"`
	Reason  string `json:"reason"`

	// UpperLimit Optional upper limit.
	UpperLimit *string `json:"upperLimit,omitempty"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {
	// DaysOfWeek Object representing days of the week for weekly type rule. It is not required for daily recurrence type
	DaysOfWeek *[]DayOfWeek `json:"daysOfWeek,omitempty"`

	// Type depicts the type of recurrence
	Type *RecurrenceType `json:"type,omitempty"`
}

// RecurrenceType depicts the type of recurrence
type RecurrenceType string

// RuleBasedBudget defines model for RuleBasedBudget.
type RuleBasedBudget struct {
	ApplicableRuleId   *string  `json:"applicableRuleId,omitempty"`
	ApplicableRuleName *string  `json:"applicableRuleName,omitempty"`
	IsProcessing       *bool    `json:"isProcessing,omitempty"`
	Value              *float64 `json:"value,omitempty"`
}

// RuleDuration defines model for RuleDuration.
type RuleDuration struct {
	// DateRangeTypeRuleDuration Object representing date range type rule duration.
	DateRangeTypeRuleDuration *DateRangeTypeRuleDuration `json:"dateRangeTypeRuleDuration,omitempty"`

	// EventTypeRuleDuration Object representing event type rule duration.
	EventTypeRuleDuration *EventTypeRuleDuration `json:"eventTypeRuleDuration,omitempty"`
}

// SBBudgetHistory defines model for SBBudgetHistory.
type SBBudgetHistory struct {
	History *[]SBRuleBasedBudget `json:"history,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBBudgetRule defines model for SBBudgetRule.
type SBBudgetRule struct {
	// CreatedDate Epoch time of budget rule creation. Read-only.
	CreatedDate *int64 `json:"createdDate,omitempty"`

	// LastUpdatedDate Epoch time of budget rule update. Read-only.
	LastUpdatedDate *int64               `json:"lastUpdatedDate,omitempty"`
	RuleDetails     *SBBudgetRuleDetails `json:"ruleDetails,omitempty"`

	// RuleId The budget rule identifier.
	RuleId string `json:"ruleId"`

	// RuleState The budget rule state.
	RuleState *State `json:"ruleState,omitempty"`

	// RuleStatus The budget rule status. Read-only.
	RuleStatus *string `json:"ruleStatus,omitempty"`
}

// SBBudgetRuleDetails defines model for SBBudgetRuleDetails.
type SBBudgetRuleDetails struct {
	BudgetIncreaseBy *BudgetIncreaseBy `json:"budgetIncreaseBy,omitempty"`
	Duration         *RuleDuration     `json:"duration,omitempty"`

	// Name The budget rule name. Required to be unique within a campaign.
	Name                        *string                           `json:"name,omitempty"`
	PerformanceMeasureCondition *PerformanceMeasureConditionForSB `json:"performanceMeasureCondition,omitempty"`
	Recurrence                  *Recurrence                       `json:"recurrence,omitempty"`

	// RuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
	RuleType *SBRuleType `json:"ruleType,omitempty"`
}

// SBBudgetRulesRecommendationError The Error Response Object.
type SBBudgetRulesRecommendationError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SBBudgetRulesRecommendationEvent defines model for SBBudgetRulesRecommendationEvent.
type SBBudgetRulesRecommendationEvent struct {
	// EndDate The end date in YYYYMMDD format.
	EndDate *string `json:"endDate,omitempty"`

	// EventId The event identifier.
	EventId *string `json:"eventId,omitempty"`

	// EventName The event name.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The start date in YYYYMMDD format.
	StartDate *string `json:"startDate,omitempty"`

	// SuggestedBudgetIncreasePercent The suggested budget increase expressed as a percent.
	SuggestedBudgetIncreasePercent *float32 `json:"suggestedBudgetIncreasePercent,omitempty"`
}

// SBBudgetRulesRecommendationEventRequest defines model for SBBudgetRulesRecommendationEventRequest.
type SBBudgetRulesRecommendationEventRequest struct {
	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`
}

// SBBudgetRulesRecommendationEventResponse Special events with date range and suggested budget increase.
type SBBudgetRulesRecommendationEventResponse struct {
	// RecommendedBudgetRuleEvents A list of recommended special events with date range and suggested budget increase.
	RecommendedBudgetRuleEvents *[]SBBudgetRulesRecommendationEvent `json:"recommendedBudgetRuleEvents,omitempty"`
}

// SBCampaignBudgetRule defines model for SBCampaignBudgetRule.
type SBCampaignBudgetRule struct {
	// CreatedDate Epoch time of budget rule creation. Read-only.
	CreatedDate *int64 `json:"createdDate,omitempty"`

	// LastUpdatedDate Epoch time of budget rule update. Read-only.
	LastUpdatedDate *int64               `json:"lastUpdatedDate,omitempty"`
	RuleDetails     *SBBudgetRuleDetails `json:"ruleDetails,omitempty"`

	// RuleId The budget rule identifier.
	RuleId string `json:"ruleId"`

	// RuleState The budget rule state.
	RuleState *State `json:"ruleState,omitempty"`

	// RuleStatus The budget rule evaluation status. Read-only.
	RuleStatus *string `json:"ruleStatus,omitempty"`
}

// SBGetAssociatedCampaignsResponse defines model for SBGetAssociatedCampaignsResponse.
type SBGetAssociatedCampaignsResponse struct {
	// AssociatedCampaigns A list of campaigns that are associated to this budget rule.
	AssociatedCampaigns *[]AssociatedCampaign `json:"associatedCampaigns,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBInsightsAdFormat Type of Ad format.
type SBInsightsAdFormat string

// SBInsightsAdGroup The ad group settings.
type SBInsightsAdGroup struct {
	// AdFormat Type of Ad format.
	AdFormat SBInsightsAdFormat   `json:"adFormat"`
	Keywords *[]SBInsightsKeyword `json:"keywords,omitempty"`
}

// SBInsightsBadRequestExceptionResponseContent Returns information about a BadRequestException.
type SBInsightsBadRequestExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBInsightsCampaignInsightsRequestContent defines model for SBInsightsCampaignInsightsRequestContent.
type SBInsightsCampaignInsightsRequestContent struct {
	AdGroups []SBInsightsAdGroup `json:"adGroups"`
}

// SBInsightsCampaignInsightsResponseContent Response object for /sb/campaigns/insights containing a list of insights for the campaign.
type SBInsightsCampaignInsightsResponseContent struct {
	Insights *[]SBInsightsObject `json:"insights,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBInsightsInternalServerExceptionResponseContent Returns information about an InternalServerException.
type SBInsightsInternalServerExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBInsightsKeyword Keyword associated with the campaign.
type SBInsightsKeyword struct {
	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid float64 `json:"bid"`

	// KeywordText The keyword text. Maximum of 10 words.
	KeywordText string `json:"keywordText"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.
	MatchType SBInsightsMatchType `json:"matchType"`
}

// SBInsightsKeywordAlertType Keyword alert insights associated with the selected keyword targets and bids.
// LOW_KEYWORD_TRAFFIC is provided if the keyword has very low traffic and is available in all marketplaces.
// LOW_BID is provided if the selected bid is low compared to the historical bids for this keyword
// and is only available in the following marketplaces: US, CA, MX, BR, UK, DE, FR, ES, IT, IN, AE, NL, SE, JP, AU, SG.
type SBInsightsKeywordAlertType string

// SBInsightsKeywordInsight Insights for keywords selected for targeting.
type SBInsightsKeywordInsight struct {
	// AdGroupIndex Correlates the ad group to the ad group array index specified in the request. Zero-based.
	AdGroupIndex *int                          `json:"adGroupIndex,omitempty"`
	Alerts       *[]SBInsightsKeywordAlertType `json:"alerts,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *float64 `json:"bid,omitempty"`

	// KeywordIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
	KeywordIndex *int `json:"keywordIndex,omitempty"`

	// KeywordText The keyword text. Maximum of 10 words.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.
	MatchType *SBInsightsMatchType `json:"matchType,omitempty"`

	// SearchTermImpressionRank The account-level ad-attributed impression rank for the search-term / keyword.
	// Provides the [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 7 days.
	// It tells an advertiser how many advertisers had higher share of ad impressions.
	// This information is only available for keywords the advertiser targeted with ad impressions.
	// Only available in the following marketplaces: US, CA, MX, UK, DE, FR, ES, IT, IN, JP.
	SearchTermImpressionRank *int `json:"searchTermImpressionRank,omitempty"`

	// SearchTermImpressionShare The account-level ad-attributed impression share for the search-term / keyword.
	// Provides percentage share of all ad impressions the advertiser has for the keyword in the last 7 days.
	// This metric helps advertisers identify potential opportunities based on their share of relevant keywords.
	// This information is only available for keywords the advertiser targeted with ad impressions.
	// Only available in the following marketplaces: US, CA, MX, UK, DE, FR, ES, IT, IN, JP.
	SearchTermImpressionShare *float64 `json:"searchTermImpressionShare,omitempty"`
}

// SBInsightsMatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.
type SBInsightsMatchType string

// SBInsightsObject defines model for SBInsightsObject.
type SBInsightsObject struct {
	union json.RawMessage
}

// SBInsightsObject0 defines model for .
type SBInsightsObject0 struct {
	// KeywordInsight Insights for keywords selected for targeting.
	KeywordInsight SBInsightsKeywordInsight `json:"keywordInsight"`
}

// SBInsightsThrottlingExceptionResponseContent Returns information about a ThrottlingException.
type SBInsightsThrottlingExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBInsightsUnauthorizedExceptionResponseContent Returns information about an UnauthorizedException.
type SBInsightsUnauthorizedExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBInsightsUnprocessableEntityExceptionResponseContent Returns information about an UnprocessableEntityException.
type SBInsightsUnprocessableEntityExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBKeywordRecommendationCreativeType Optional SB creative type used for generating static or video generated keyword recommendations.  Inferred by asins if not included.
// |Identifier|Description|Recommendations|
// |----------|-----------|-----------|
// |PRODUCT_COLLECTION| Showcase multiple products within a branded shopping experience|Static|
// |AUTHOR_COLLECTION| Showcase books under your name that direct to your Book Brand landing page|Static|
// |STORE_SPOTLIGHT| Showcase your brand logo, headline, and up to 3 product categories or sub-pages|Static|
// |VIDEO| Display a video ad promoting a product that redirects to its landing page|Video|
// |BRAND_VIDEO| Display a branded video ad that redirects shoppers to your Brand Store landing page|Video|
// <br/>
type SBKeywordRecommendationCreativeType string

// SBKeywordRecommendationError The Error Response Object.
type SBKeywordRecommendationError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SBKeywordRecommendationImpressionRank The account-level ad-attributed impression rank for the search-term / keyword. Provides the [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 7 days. It tells an advertiser how many advertisers had higher share of ad impressions.
type SBKeywordRecommendationImpressionRank = int64

// SBKeywordRecommendationImpressionShare The account-level ad-attributed impression share for the search-term / keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 7 days. This metric helps advertisers identify potential opportunities based on their share of relevant keywords.
type SBKeywordRecommendationImpressionShare = float64

// SBKeywordRecommendationMatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.
type SBKeywordRecommendationMatchType string

// SBKeywordRecommendationOutcome Optionally indicate the desired outcome of your campaign. Different keyword recommendations will be provided depending on your specified outcome.
// |Identifier|Description|
// |----------|-----------|
// |PAGE_VISIT| Boost the visits to your landing page|
// |BRAND_IMPRESSION_SHARE| Facilitate consumers' awareness of your brand|<br/>
type SBKeywordRecommendationOutcome string

// SBKeywordRecommendationRequestAsin defines model for SBKeywordRecommendationRequestAsin.
type SBKeywordRecommendationRequestAsin struct {
	Asins         []string  `json:"asins"`
	CreativeAsins *[]string `json:"creativeAsins,omitempty"`

	// CreativeType Optional SB creative type used for generating static or video generated keyword recommendations.  Inferred by asins if not included.
	// |Identifier|Description|Recommendations|
	// |----------|-----------|-----------|
	// |PRODUCT_COLLECTION| Showcase multiple products within a branded shopping experience|Static|
	// |AUTHOR_COLLECTION| Showcase books under your name that direct to your Book Brand landing page|Static|
	// |STORE_SPOTLIGHT| Showcase your brand logo, headline, and up to 3 product categories or sub-pages|Static|
	// |VIDEO| Display a video ad promoting a product that redirects to its landing page|Video|
	// |BRAND_VIDEO| Display a branded video ad that redirects shoppers to your Brand Store landing page|Video|
	// <br/>
	CreativeType *SBKeywordRecommendationCreativeType `json:"creativeType,omitempty"`

	// Locale Optional locale to request keyword suggestion translations. For example, to request Simplified Chinese translations in US, provide locale “zh_CN”. Response will include both keyword suggestions and their translations. Supported locales include: Simplified Chinese (locale: “zh_CN”) for US, UK and CA. English (locale: “en_GB”) for DE, FR, IT and ES.
	Locale *string `json:"locale,omitempty"`

	// MaxNumSuggestions Maximum number of suggestions to return. Max value is 1000. If not provided, default to 100.
	MaxNumSuggestions *int64 `json:"maxNumSuggestions,omitempty"`

	// Outcome Optionally indicate the desired outcome of your campaign. Different keyword recommendations will be provided depending on your specified outcome.
	// |Identifier|Description|
	// |----------|-----------|
	// |PAGE_VISIT| Boost the visits to your landing page|
	// |BRAND_IMPRESSION_SHARE| Facilitate consumers' awareness of your brand|<br/>
	Outcome *SBKeywordRecommendationOutcome `json:"outcome,omitempty"`
}

// SBKeywordRecommendationRequestUrl defines model for SBKeywordRecommendationRequestUrl.
type SBKeywordRecommendationRequestUrl struct {
	CreativeAsins *[]string `json:"creativeAsins,omitempty"`

	// CreativeType Optional SB creative type used for generating static or video generated keyword recommendations.  Inferred by asins if not included.
	// |Identifier|Description|Recommendations|
	// |----------|-----------|-----------|
	// |PRODUCT_COLLECTION| Showcase multiple products within a branded shopping experience|Static|
	// |AUTHOR_COLLECTION| Showcase books under your name that direct to your Book Brand landing page|Static|
	// |STORE_SPOTLIGHT| Showcase your brand logo, headline, and up to 3 product categories or sub-pages|Static|
	// |VIDEO| Display a video ad promoting a product that redirects to its landing page|Video|
	// |BRAND_VIDEO| Display a branded video ad that redirects shoppers to your Brand Store landing page|Video|
	// <br/>
	CreativeType *SBKeywordRecommendationCreativeType `json:"creativeType,omitempty"`

	// Locale Optional locale to request keyword suggestion translations. For example, to request Simplified Chinese translations in US, provide locale “zh_CN”. Response will include both keyword suggestions and their translations. Supported locales include: Simplified Chinese (locale: “zh_CN”) for US, UK and CA. English (locale: “en_GB”) for DE, FR, IT and ES.
	Locale *string `json:"locale,omitempty"`

	// MaxNumSuggestions Maximum number of suggestions to return. Max value is 1000. If not provided, default to 100.
	MaxNumSuggestions *int64 `json:"maxNumSuggestions,omitempty"`

	// Outcome Optionally indicate the desired outcome of your campaign. Different keyword recommendations will be provided depending on your specified outcome.
	// |Identifier|Description|
	// |----------|-----------|
	// |PAGE_VISIT| Boost the visits to your landing page|
	// |BRAND_IMPRESSION_SHARE| Facilitate consumers' awareness of your brand|<br/>
	Outcome *SBKeywordRecommendationOutcome `json:"outcome,omitempty"`

	// Url The URL of the Stores page, or, Vendors may also specify the URL of a custom landing page.
	Url string `json:"url"`
}

// SBKeywordRecommendationType A recommendation identifier that describes the suggested action for the recommendation.
// |Identifier|Description|
// |----------|-----------|
// |addKeyword|The suggested action is to add the keyword.|
// <br/>
type SBKeywordRecommendationType string

// SBKeywordSuggestion defines model for SBKeywordSuggestion.
type SBKeywordSuggestion struct {
	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.
	MatchType *SBKeywordRecommendationMatchType `json:"matchType,omitempty"`

	// RecommendationId Unique ID for each recommendation.
	RecommendationId *string `json:"recommendationId,omitempty"`

	// SearchTermImpressionRank The account-level ad-attributed impression rank for the search-term / keyword. Provides the [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 7 days. It tells an advertiser how many advertisers had higher share of ad impressions.
	SearchTermImpressionRank *SBKeywordRecommendationImpressionRank `json:"searchTermImpressionRank,omitempty"`

	// SearchTermImpressionShare The account-level ad-attributed impression share for the search-term / keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 7 days. This metric helps advertisers identify potential opportunities based on their share of relevant keywords.
	SearchTermImpressionShare *SBKeywordRecommendationImpressionShare `json:"searchTermImpressionShare,omitempty"`

	// Translation Localized keyword value if locale was specified.
	Translation *string `json:"translation,omitempty"`

	// Type A recommendation identifier that describes the suggested action for the recommendation.
	// |Identifier|Description|
	// |----------|-----------|
	// |addKeyword|The suggested action is to add the keyword.|
	// <br/>
	Type *SBKeywordRecommendationType `json:"type,omitempty"`

	// Value Recommended keyword value.
	Value *string `json:"value,omitempty"`
}

// SBListAssociatedBudgetRulesResponse defines model for SBListAssociatedBudgetRulesResponse.
type SBListAssociatedBudgetRulesResponse struct {
	// AssociatedRules A list of associated budget rules.
	AssociatedRules *[]SBCampaignBudgetRule `json:"associatedRules,omitempty"`
}

// SBRuleBasedBudget defines model for SBRuleBasedBudget.
type SBRuleBasedBudget struct {
	AppliedRule *SBBudgetRule `json:"appliedRule,omitempty"`

	// DailyBudgetValue The daily budget value.
	DailyBudgetValue *float32 `json:"dailyBudgetValue,omitempty"`

	// ExecutionTime Epoch time of budget rule execution.
	ExecutionTime *int64 `json:"executionTime,omitempty"`

	// PerformanceMetric An object giving the name of the performance metric and its value when the rule was evaluated
	PerformanceMetric *PerformanceMetricValue `json:"performanceMetric,omitempty"`

	// RuleBasedBudgetValue The budget value.
	RuleBasedBudgetValue *float32 `json:"ruleBasedBudgetValue,omitempty"`
}

// SBRuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
type SBRuleType string

// SBTargetingAccessDeniedExceptionResponseContent Returns information about an AccessDeniedException.
type SBTargetingAccessDeniedExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBTargetingAgeRange defines model for SBTargetingAgeRange.
type SBTargetingAgeRange struct {
	// AgeRangeRefinementId Id of Age Range. Use /sb/targets/categories/{categoryRefinementId}/refinements to retrieve Age Range Refinement IDs.
	AgeRangeRefinementId string `json:"ageRangeRefinementId"`

	// Name Name of Age Range.
	Name *string `json:"name,omitempty"`

	// TranslatedName Translated name of Age Range based off locale sent in request.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// SBTargetingBadRequestExceptionResponseContent Returns information about a BadRequestException.
type SBTargetingBadRequestExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBTargetingBrand defines model for SBTargetingBrand.
type SBTargetingBrand struct {
	// BrandRefinementId Id of brand. Use /sb/targets/categories/{categoryRefinementId}/refinements to retrieve Brand Refinement IDs.
	BrandRefinementId string `json:"brandRefinementId"`

	// Name Name of brand.
	Name *string `json:"name,omitempty"`
}

// SBTargetingCategory Category details.
type SBTargetingCategory struct {
	AsinCountRange *SBTargetingIntegerRange `json:"asinCountRange,omitempty"`

	// CategoryRefinementId The category refinement id. Please use /sb/targets/categories or /sb/recommendations/targets/category to retrieve category IDs.
	CategoryRefinementId *string                         `json:"categoryRefinementId,omitempty"`
	EstimatedReach       *SBTargetingEstimatedReachRange `json:"estimatedReach,omitempty"`

	// IsTargetable If the category is targetable or not.
	IsTargetable *bool `json:"isTargetable,omitempty"`

	// Name Name of category.
	Name *string `json:"name,omitempty"`

	// ParentCategoryRefinementId The category refinement id of the parent category. Missing parentCategoryRefinementId signifies this is a root category.
	ParentCategoryRefinementId *string `json:"parentCategoryRefinementId,omitempty"`

	// TranslatedName Translated name of the category.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// SBTargetingEstimatedReachRange defines model for SBTargetingEstimatedReachRange.
type SBTargetingEstimatedReachRange struct {
	Max *int `json:"max,omitempty"`
	Min *int `json:"min,omitempty"`
}

// SBTargetingGenre defines model for SBTargetingGenre.
type SBTargetingGenre struct {
	// GenreRefinementId Id of Genre. Use /sb/targets/categories/{categoryRefinementId}/refinements to retrieve Genre Refinement IDs.
	GenreRefinementId string `json:"genreRefinementId"`

	// Name Name of Genre.
	Name *string `json:"name,omitempty"`

	// TranslatedName Translated name of Genre based off locale sent in request.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// SBTargetingGetNegativeBrandsResponseContent Response object for /sb/negativeTargets/brands/recommendations containing list of brands for negative targeting.
type SBTargetingGetNegativeBrandsResponseContent struct {
	// Brands List of Brands.
	Brands *[]SBTargetingBrand `json:"brands,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBTargetingGetRefinementsForCategoryResponseContent Response object for /sb/targets/categories/{categoryRefinementId}/refinements containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
//
//	Response is paginated with pagination occurring for all three arrays at once.
//	Example: If there are 800 brands, 5 age ranges, and 600 genres, the first response will return 500 brands, 5 age ranges, and 500 genres. The next paginated response will return 300 brands, 0 age ranges, and 100 genres.
type SBTargetingGetRefinementsForCategoryResponseContent struct {
	// AgeRanges List of Age Ranges. Use /sb/targets/categories/{categoryRefinementId}/refinements to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
	AgeRanges *[]SBTargetingAgeRange `json:"ageRanges,omitempty"`

	// Brands List of Brands.
	Brands *[]SBTargetingBrand `json:"brands,omitempty"`

	// Genres List of Genres. Use /sb/targets/categories/{categoryRefinementId}/refinements to retrieve Genre Node IDs. Genres are only available for categories related to books.
	Genres *[]SBTargetingGenre `json:"genres,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBTargetingGetTargetableASINCountsRequestContent defines model for SBTargetingGetTargetableASINCountsRequestContent.
type SBTargetingGetTargetableASINCountsRequestContent struct {
	// AgeRanges List of Age Range Refinement Ids.
	AgeRanges *[]string `json:"ageRanges,omitempty"`

	// Brands List of Brand Refinement Ids.
	Brands *[]string `json:"brands,omitempty"`

	// Category The category refinement id. Please use /sb/targets/categories or /sb/recommendations/targets/category to retrieve category IDs.
	Category string `json:"category"`

	// Genres List of Genre Refinement Ids.
	Genres *[]string `json:"genres,omitempty"`

	// IsPrimeShipping Indicates if products have prime shipping. Leave empty to include both prime shipping and non-prime shipping products.
	IsPrimeShipping *bool `json:"isPrimeShipping,omitempty"`

	// PriceRange A range of prices. We use this to retrieve the number of targetable ASINs that falls within this price range.
	PriceRange *SBTargetingPriceRange `json:"priceRange,omitempty"`

	// RatingRange Rating range is restricted to integers between 0 and 5, inclusive. Min must be less than or equal to max. We use this to retrieve the number of targetable ASINs that falls within this rating range.
	RatingRange *SBTargetingRatingRange `json:"ratingRange,omitempty"`
}

// SBTargetingGetTargetableASINCountsResponseContent Response object for /sb/targets/products/count to get number of targetable asins for refinements provided by the user
type SBTargetingGetTargetableASINCountsResponseContent struct {
	AsinCounts *SBTargetingIntegerRange `json:"asinCounts,omitempty"`
}

// SBTargetingGetTargetableCategoriesResponseContent Response object for /sb/targets/categories containing all targetable categories for the advertiser's marketplace.
type SBTargetingGetTargetableCategoriesResponseContent struct {
	// CategoryTree List of categories.
	CategoryTree *[]SBTargetingCategory `json:"categoryTree,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SBTargetingIntegerRange defines model for SBTargetingIntegerRange.
type SBTargetingIntegerRange struct {
	Max *int `json:"max,omitempty"`
	Min *int `json:"min,omitempty"`
}

// SBTargetingInternalServerExceptionResponseContent Returns information about an InternalServerException.
type SBTargetingInternalServerExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBTargetingLocale The locale to which the caller wishes to translate the targetable categories or refinements to. For example, if the caller wishes to receive the targetable categories in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the returned tagetable categories will be in the default language of the marketplace.
type SBTargetingLocale string

// SBTargetingPriceRange A range of prices. We use this to retrieve the number of targetable ASINs that falls within this price range.
type SBTargetingPriceRange struct {
	Max *float64 `json:"max,omitempty"`
	Min *float64 `json:"min,omitempty"`
}

// SBTargetingRatingRange Rating range is restricted to integers between 0 and 5, inclusive. Min must be less than or equal to max. We use this to retrieve the number of targetable ASINs that falls within this rating range.
type SBTargetingRatingRange struct {
	Max *int `json:"max,omitempty"`
	Min *int `json:"min,omitempty"`
}

// SBTargetingSupplySource The supply source where the target will be used. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV.
type SBTargetingSupplySource string

// SBTargetingThrottlingExceptionResponseContent Returns information about a ThrottlingException.
type SBTargetingThrottlingExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBTargetingUnauthorizedExceptionResponseContent Returns information about an UnauthorizedException.
type SBTargetingUnauthorizedExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SBTargetingUnprocessableEntityExceptionResponseContent Returns information about an UnprocessableEntityException.
type SBTargetingUnprocessableEntityExceptionResponseContent struct {
	// Code The HTTP status code of the response.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// SevenDaysMissedOpportunities Missed Opportunities in the trailing seven days.
type SevenDaysMissedOpportunities struct {
	// EndDate End date of the Missed Opportunities date range (YYYY-MM-DD) in local time.
	EndDate *string `json:"endDate,omitempty"`

	// EstimatedMissedClicksLower Lower bound of the estimated Missed Clicks.
	EstimatedMissedClicksLower *float32 `json:"estimatedMissedClicksLower,omitempty"`

	// EstimatedMissedClicksUpper Upper bound of the estimated Missed Clicks.
	EstimatedMissedClicksUpper *float32 `json:"estimatedMissedClicksUpper,omitempty"`

	// EstimatedMissedImpressionsLower Lower bound of the estimated Missed Impressions.
	EstimatedMissedImpressionsLower *float32 `json:"estimatedMissedImpressionsLower,omitempty"`

	// EstimatedMissedImpressionsUpper Upper bound of the estimated Missed Impressions.
	EstimatedMissedImpressionsUpper *float32 `json:"estimatedMissedImpressionsUpper,omitempty"`

	// EstimatedMissedSalesLower Lower bound of the estimated Missed Sales. This will be in local currency.
	EstimatedMissedSalesLower *float64 `json:"estimatedMissedSalesLower,omitempty"`

	// EstimatedMissedSalesUpper Upper bound of the estimated Missed Sales. This will be in local currency.
	EstimatedMissedSalesUpper *float64 `json:"estimatedMissedSalesUpper,omitempty"`

	// PercentTimeInBudget Percentage of time the campaign is active with a budget.
	PercentTimeInBudget *float64 `json:"percentTimeInBudget,omitempty"`

	// StartDate Start date of the Missed Opportunities date range (YYYY-MM-DD) in local time.
	StartDate *string `json:"startDate,omitempty"`
}

// ShopperSegment List of bid adjustments for shopper segments.
// - NEW_TO_BRAND_PURCHASE - The shopper segment where shopper has not purchased product from the brand.
type ShopperSegment string

// StorePage defines model for StorePage.
type StorePage struct {
	// DisplayName Display Name of the store page shown on a store spotlight campaign.
	DisplayName *string `json:"displayName,omitempty"`

	// PrimaryAsin Selected asin from the store page which is displayed on the store spotlight campaign.
	PrimaryAsin *string `json:"primaryAsin,omitempty"`
}

// StoreSpotlightCreative defines model for StoreSpotlightCreative.
type StoreSpotlightCreative struct {
	// BrandLogoAssetId The identifier of the [brand logo](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#brandlogo) image from the brand store's asset library.
	// Note that for campaigns created in the Amazon Advertising console prior to release of the brand store's assets library, responses will not include a value for this field.
	BrandLogoAssetId string `json:"brandLogoAssetId"`

	// BrandLogoCrop Asset cropping attributes
	BrandLogoCrop *AssetCrop `json:"brandLogoCrop,omitempty"`

	// BrandName The displayed brand name in the ad headline.
	// Maximum length is 30 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	BrandName string `json:"brandName"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	// See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#headlines) for headline requirements.
	Headline string `json:"headline"`

	// Subpages An array of subpages
	Subpages []Subpage `json:"subpages"`
}

// Subpage defines model for Subpage.
type Subpage struct {
	Asin      *string `json:"asin,omitempty"`
	PageTitle *string `json:"pageTitle,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// SuggestedHeadline Suggested Headline in response object.
type SuggestedHeadline struct {
	// Headline String that contains suggested headline.
	Headline *string `json:"headline,omitempty"`

	// HeadlineId Unique Id of suggested headline.
	HeadlineId *string `json:"headlineId,omitempty"`
}

// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
type Tags map[string]string

// ThrottledErrorCode defines model for ThrottledErrorCode.
type ThrottledErrorCode string

// ThrottlingExceptionResponseContent defines model for ThrottlingExceptionResponseContent.
type ThrottlingExceptionResponseContent struct {
	Code ThrottledErrorCode `json:"code"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// UnauthorizedErrorCode defines model for UnauthorizedErrorCode.
type UnauthorizedErrorCode string

// UnauthorizedExceptionResponseContent defines model for UnauthorizedExceptionResponseContent.
type UnauthorizedExceptionResponseContent struct {
	Code UnauthorizedErrorCode `json:"code"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// UnsupportedMediaTypeExceptionResponseContent defines model for UnsupportedMediaTypeExceptionResponseContent.
type UnsupportedMediaTypeExceptionResponseContent struct {
	// Code A human-readable description of the enumerated response code in the `code` field.
	Code string `json:"code"`

	// Details An enumerated response code.
	Details string `json:"details"`
}

// UpdateAd defines model for UpdateAd.
type UpdateAd struct {
	// AdId The product ad identifier.
	AdId string `json:"adId"`

	// Name The name of the ad.
	Name *string `json:"name,omitempty"`

	// State Entity state for create or update operation.
	State *CreateOrUpdateEntityState `json:"state,omitempty"`
}

// UpdateAdGroup defines model for UpdateAdGroup.
type UpdateAdGroup struct {
	// AdGroupId The identifier of the keyword.
	AdGroupId string `json:"adGroupId"`

	// Name The name of the ad group.
	Name *string `json:"name,omitempty"`

	// State Entity state for create or update operation.
	State *CreateOrUpdateEntityState `json:"state,omitempty"`
}

// UpdateBudgetRulesResponse defines model for UpdateBudgetRulesResponse.
type UpdateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// UpdateCampaign defines model for UpdateCampaign.
type UpdateCampaign struct {
	Bidding *Bidding `json:"bidding,omitempty"`

	// Budget The budget of the campaign. See https://advertising.amazon.com/help?entityId=ENTITYJDATFOIA05Q7#GE5QEBS6QRJJAT3A
	Budget *float64 `json:"budget,omitempty"`

	// CampaignId The identifier of the campaign.
	CampaignId string `json:"campaignId"`

	// EndDate endDate is optional. If endDate is specified, startDate must be specified as well.
	EndDate *string `json:"endDate"`

	// Name The name of the campaign.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId"`

	// StartDate startDate can only be changed if the current startDate is in the future.
	StartDate *string `json:"startDate,omitempty"`

	// State Entity state for create or update operation.
	State *CreateOrUpdateEntityState `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *Tags `json:"tags,omitempty"`
}

// UpdateSBBudgetRulesRequest defines model for UpdateSBBudgetRulesRequest.
type UpdateSBBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SBBudgetRule `json:"budgetRulesDetails,omitempty"`
}

// UpdateSponsoredBrandsAdGroupsRequestContent defines model for UpdateSponsoredBrandsAdGroupsRequestContent.
type UpdateSponsoredBrandsAdGroupsRequestContent struct {
	AdGroups []UpdateAdGroup `json:"adGroups"`
}

// UpdateSponsoredBrandsAdGroupsResponseContent defines model for UpdateSponsoredBrandsAdGroupsResponseContent.
type UpdateSponsoredBrandsAdGroupsResponseContent struct {
	AdGroups *BulkAdGroupOperationResponse `json:"adGroups,omitempty"`
}

// UpdateSponsoredBrandsAdsRequestContent defines model for UpdateSponsoredBrandsAdsRequestContent.
type UpdateSponsoredBrandsAdsRequestContent struct {
	Ads []UpdateAd `json:"ads"`
}

// UpdateSponsoredBrandsAdsResponseContent defines model for UpdateSponsoredBrandsAdsResponseContent.
type UpdateSponsoredBrandsAdsResponseContent struct {
	Ads *BulkAdOperationResponse `json:"ads,omitempty"`
}

// UpdateSponsoredBrandsCampaignsRequestContent defines model for UpdateSponsoredBrandsCampaignsRequestContent.
type UpdateSponsoredBrandsCampaignsRequestContent struct {
	Campaigns []UpdateCampaign `json:"campaigns"`
}

// UpdateSponsoredBrandsCampaignsResponseContent defines model for UpdateSponsoredBrandsCampaignsResponseContent.
type UpdateSponsoredBrandsCampaignsResponseContent struct {
	Campaigns *BulkCampaignOperationResponse `json:"campaigns,omitempty"`
}

// VideoCreative defines model for VideoCreative.
type VideoCreative struct {
	// ConsentToTranslate If set to true and video asset is not in the marketplace's default language, Amazon will attempt to translate the video to the marketplace's default language.
	// If Amazon is unable to translate it, the ad will be rejected by moderation. We only support translating videos from English to German, French, Italian, and Spanish. See developer notes for more information.
	ConsentToTranslate *bool `json:"consentToTranslate,omitempty"`

	// VideoAssetIds The assetIds of the original videos submitted by the advertiser.
	// If 'consentToTranslate' is set to true and translation is SUCCESSFUL then 'videoAssetIds' will return translated video assetId whereas `originalVideoAssetIds` will return the original video assetId. In all other cases, `videoAssetIds` will return original video assetId.
	VideoAssetIds []string `json:"videoAssetIds"`
}

// BudgetIncreaseBy defines model for budgetIncreaseBy.
type BudgetIncreaseBy struct {
	// Type The value by which to update the budget of the budget rule.
	Type BudgetChangeType `json:"type"`

	// Value The budget value.
	Value float64 `json:"value"`
}

// State The budget rule state.
type State string

// SBKeywordRecommendationResponse defines model for SBKeywordRecommendationResponse.
type SBKeywordRecommendationResponse = []SBKeywordSuggestion

// CreateBrandVideoCreativeParams defines parameters for CreateBrandVideoCreative.
type CreateBrandVideoCreativeParams struct {
	// Accept Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
	Accept *AcceptHeader `json:"Accept,omitempty"`

	// AmazonAdvertisingAPIClientId -----------------------------------------------
	// Simple types
	// -----------------------------------------------
	// The identifier of a client associated with a "Login with Amazon" account.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account.
	// Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and use profileId from the response to pass as input.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListCreativesParams defines parameters for ListCreatives.
type ListCreativesParams struct {
	// Accept Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
	Accept *AcceptHeader `json:"Accept,omitempty"`

	// AmazonAdvertisingAPIClientId -----------------------------------------------
	// Simple types
	// -----------------------------------------------
	// The identifier of a client associated with a "Login with Amazon" account.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account.
	// Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and use profileId from the response to pass as input.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateProductCollectionCreativeParams defines parameters for CreateProductCollectionCreative.
type CreateProductCollectionCreativeParams struct {
	// Accept Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
	Accept *AcceptHeader `json:"Accept,omitempty"`

	// AmazonAdvertisingAPIClientId -----------------------------------------------
	// Simple types
	// -----------------------------------------------
	// The identifier of a client associated with a "Login with Amazon" account.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account.
	// Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and use profileId from the response to pass as input.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateStoreSpotlightCreativeParams defines parameters for CreateStoreSpotlightCreative.
type CreateStoreSpotlightCreativeParams struct {
	// Accept Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
	Accept *AcceptHeader `json:"Accept,omitempty"`

	// AmazonAdvertisingAPIClientId -----------------------------------------------
	// Simple types
	// -----------------------------------------------
	// The identifier of a client associated with a "Login with Amazon" account.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account.
	// Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and use profileId from the response to pass as input.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateVideoCreativeParams defines parameters for CreateVideoCreative.
type CreateVideoCreativeParams struct {
	// Accept Clients request a specific version of a resource using the Accept request-header field set to the value field of the desired content-type.
	Accept *AcceptHeader `json:"Accept,omitempty"`

	// AmazonAdvertisingAPIClientId -----------------------------------------------
	// Simple types
	// -----------------------------------------------
	// The identifier of a client associated with a "Login with Amazon" account.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account.
	// Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and use profileId from the response to pass as input.
	// This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetSBBudgetRulesForAdvertiserParams defines parameters for GetSBBudgetRulesForAdvertiser.
type GetSBBudgetRulesForAdvertiserParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateBudgetRulesForSBCampaignsParams defines parameters for CreateBudgetRulesForSBCampaigns.
type CreateBudgetRulesForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateBudgetRulesForSBCampaignsParams defines parameters for UpdateBudgetRulesForSBCampaigns.
type UpdateBudgetRulesForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRuleByRuleIdForSBCampaignsParams defines parameters for GetBudgetRuleByRuleIdForSBCampaigns.
type GetBudgetRuleByRuleIdForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignsAssociatedWithSBBudgetRuleParams defines parameters for GetCampaignsAssociatedWithSBBudgetRule.
type GetCampaignsAssociatedWithSBBudgetRuleParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SbCampaignsBudgetUsageParams defines parameters for SbCampaignsBudgetUsage.
type SbCampaignsBudgetUsageParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId interface{} `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope interface{} `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRecommendationsParams defines parameters for GetBudgetRecommendations.
type GetBudgetRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a `Login with Amazon` account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody defines parameters for SBGetBudgetRulesRecommendation.
type SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody struct {
	union json.RawMessage
}

// SBGetBudgetRulesRecommendationParams defines parameters for SBGetBudgetRulesRecommendation.
type SBGetBudgetRulesRecommendationParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBInsightsCampaignInsightsParams defines parameters for SBInsightsCampaignInsights.
type SBInsightsCampaignInsightsParams struct {
	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListAssociatedBudgetRulesForSBCampaignsParams defines parameters for ListAssociatedBudgetRulesForSBCampaigns.
type ListAssociatedBudgetRulesForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateAssociatedBudgetRulesForSBCampaignsParams defines parameters for CreateAssociatedBudgetRulesForSBCampaigns.
type CreateAssociatedBudgetRulesForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetRuleBasedBudgetHistoryForSBCampaignsParams defines parameters for GetRuleBasedBudgetHistoryForSBCampaigns.
type GetRuleBasedBudgetHistoryForSBCampaignsParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// StartDate The start date of the budget history in YYYYMMDD format.
	StartDate string `form:"startDate" json:"startDate"`

	// EndDate The end date of the budget history in YYYYMMDD format.
	EndDate string `form:"endDate" json:"endDate"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DisassociateAssociatedBudgetRuleForSBCampaignsParams defines parameters for DisassociateAssociatedBudgetRuleForSBCampaigns.
type DisassociateAssociatedBudgetRuleForSBCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBTargetingGetNegativeBrandsParams defines parameters for SBTargetingGetNegativeBrands.
type SBTargetingGetNegativeBrandsParams struct {
	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a `Login with Amazon` account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetHeadlineRecommendationsParams defines parameters for GetHeadlineRecommendations.
type GetHeadlineRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONBody defines parameters for GetKeywordRecommendations.
type GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONBody struct {
	union json.RawMessage
}

// GetKeywordRecommendationsParams defines parameters for GetKeywordRecommendations.
type GetKeywordRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBTargetingGetTargetableCategoriesParams defines parameters for SBTargetingGetTargetableCategories.
type SBTargetingGetTargetableCategoriesParams struct {
	// Locale The locale to which the caller wishes to translate the targetable categories or refinements to. For example, if the caller wishes to receive the targetable categories in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the returned tagetable categories will be in the default language of the marketplace.
	Locale *SBTargetingLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// SupplySource The supply source where the target will be used. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV.
	SupplySource SBTargetingSupplySource `form:"supplySource" json:"supplySource"`

	// IncludeOnlyRootCategories Indicates whether to only retun root categories or not.
	IncludeOnlyRootCategories *bool `form:"includeOnlyRootCategories,omitempty" json:"includeOnlyRootCategories,omitempty"`

	// ParentCategoryRefinementId Returns child categories of category.
	ParentCategoryRefinementId *string `form:"parentCategoryRefinementId,omitempty" json:"parentCategoryRefinementId,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a `Login with Amazon` account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBTargetingGetRefinementsForCategoryParams defines parameters for SBTargetingGetRefinementsForCategory.
type SBTargetingGetRefinementsForCategoryParams struct {
	// Locale The locale to which the caller wishes to translate the targetable categories or refinements to. For example, if the caller wishes to receive the targetable categories in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the returned tagetable categories will be in the default language of the marketplace.
	Locale *SBTargetingLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a `Login with Amazon` account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SBTargetingGetTargetableASINCountsParams defines parameters for SBTargetingGetTargetableASINCounts.
type SBTargetingGetTargetableASINCountsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a `Login with Amazon` account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandsAdGroupsParams defines parameters for CreateSponsoredBrandsAdGroups.
type CreateSponsoredBrandsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateSponsoredBrandsAdGroupsParams defines parameters for UpdateSponsoredBrandsAdGroups.
type UpdateSponsoredBrandsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteSponsoredBrandsAdGroupsParams defines parameters for DeleteSponsoredBrandsAdGroups.
type DeleteSponsoredBrandsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredBrandsAdGroupsParams defines parameters for ListSponsoredBrandsAdGroups.
type ListSponsoredBrandsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateSponsoredBrandsAdsParams defines parameters for UpdateSponsoredBrandsAds.
type UpdateSponsoredBrandsAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandsBrandVideoAdsParams defines parameters for CreateSponsoredBrandsBrandVideoAds.
type CreateSponsoredBrandsBrandVideoAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteSponsoredBrandsAdsParams defines parameters for DeleteSponsoredBrandsAds.
type DeleteSponsoredBrandsAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredBrandsAdsParams defines parameters for ListSponsoredBrandsAds.
type ListSponsoredBrandsAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandsProductCollectionAdsParams defines parameters for CreateSponsoredBrandsProductCollectionAds.
type CreateSponsoredBrandsProductCollectionAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandStoreSpotlightAdsParams defines parameters for CreateSponsoredBrandStoreSpotlightAds.
type CreateSponsoredBrandStoreSpotlightAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandsVideoAdsParams defines parameters for CreateSponsoredBrandsVideoAds.
type CreateSponsoredBrandsVideoAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredBrandsCampaignsParams defines parameters for CreateSponsoredBrandsCampaigns.
type CreateSponsoredBrandsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateSponsoredBrandsCampaignsParams defines parameters for UpdateSponsoredBrandsCampaigns.
type UpdateSponsoredBrandsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteSponsoredBrandsCampaignsParams defines parameters for DeleteSponsoredBrandsCampaigns.
type DeleteSponsoredBrandsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredBrandsCampaignsParams defines parameters for ListSponsoredBrandsCampaigns.
type ListSponsoredBrandsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody defines body for CreateBrandVideoCreative for application/vnd.sbAdCreativeResource.v4+json ContentType.
type CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody = CreateBrandVideoCreativeRequestContent

// ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody defines body for ListCreatives for application/vnd.sbAdCreativeResource.v4+json ContentType.
type ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody = ListCreativesRequestContent

// CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody defines body for CreateProductCollectionCreative for application/vnd.sbAdCreativeResource.v4+json ContentType.
type CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody = CreateProductCollectionCreativeRequestContent

// CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody defines body for CreateStoreSpotlightCreative for application/vnd.sbAdCreativeResource.v4+json ContentType.
type CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody = CreateStoreSpotlightCreativeRequestContent

// CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody defines body for CreateVideoCreative for application/vnd.sbAdCreativeResource.v4+json ContentType.
type CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody = CreateVideoCreativeRequestContent

// CreateBudgetRulesForSBCampaignsJSONRequestBody defines body for CreateBudgetRulesForSBCampaigns for application/json ContentType.
type CreateBudgetRulesForSBCampaignsJSONRequestBody = CreateSBBudgetRulesRequest

// UpdateBudgetRulesForSBCampaignsJSONRequestBody defines body for UpdateBudgetRulesForSBCampaigns for application/json ContentType.
type UpdateBudgetRulesForSBCampaignsJSONRequestBody = UpdateSBBudgetRulesRequest

// SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody defines body for SbCampaignsBudgetUsage for application/vnd.sbcampaignbudgetusage.v1+json ContentType.
type SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody = BudgetUsageCampaignRequest

// GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody defines body for GetBudgetRecommendations for application/vnd.sbbudgetrecommendation.v4+json ContentType.
type GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody = GetBudgetRecommendationsRequestContent

// SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody defines body for SBGetBudgetRulesRecommendation for application/vnd.sbbudgetrulesrecommendation.v3+json ContentType.
type SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody

// SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody defines body for SBInsightsCampaignInsights for application/vnd.sbinsights.v4+json ContentType.
type SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody = SBInsightsCampaignInsightsRequestContent

// CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody defines body for CreateAssociatedBudgetRulesForSBCampaigns for application/json ContentType.
type CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody = CreateAssociatedBudgetRulesRequest

// GetHeadlineRecommendationsJSONRequestBody defines body for GetHeadlineRecommendations for application/json ContentType.
type GetHeadlineRecommendationsJSONRequestBody = HeadlineSuggestionRequest

// GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody defines body for GetKeywordRecommendations for application/vnd.sbkeywordrecommendation.v3+json ContentType.
type GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONBody

// SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody defines body for SBTargetingGetTargetableASINCounts for application/vnd.sbtargeting.v4+json ContentType.
type SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody = SBTargetingGetTargetableASINCountsRequestContent

// CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandsAdGroups for application/vnd.sbadgroupresource.v4+json ContentType.
type CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody = CreateSponsoredBrandsAdGroupsRequestContent

// UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody defines body for UpdateSponsoredBrandsAdGroups for application/vnd.sbadgroupresource.v4+json ContentType.
type UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody = UpdateSponsoredBrandsAdGroupsRequestContent

// DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody defines body for DeleteSponsoredBrandsAdGroups for application/vnd.sbadgroupresource.v4+json ContentType.
type DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody = DeleteSponsoredBrandsAdGroupsRequestContent

// ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody defines body for ListSponsoredBrandsAdGroups for application/vnd.sbadgroupresource.v4+json ContentType.
type ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody = ListSponsoredBrandsAdGroupsRequestContent

// UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for UpdateSponsoredBrandsAds for application/vnd.sbadresource.v4+json ContentType.
type UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody = UpdateSponsoredBrandsAdsRequestContent

// CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandsBrandVideoAds for application/vnd.sbadresource.v4+json ContentType.
type CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody = CreateSponsoredBrandsBrandVideoAdsRequestContent

// DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for DeleteSponsoredBrandsAds for application/vnd.sbadresource.v4+json ContentType.
type DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody = DeleteSponsoredBrandsAdsRequestContent

// ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for ListSponsoredBrandsAds for application/vnd.sbadresource.v4+json ContentType.
type ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody = ListSponsoredBrandsAdsRequestContent

// CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandsProductCollectionAds for application/vnd.sbadresource.v4+json ContentType.
type CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody = CreateSponsoredBrandsProductCollectionAdsRequestContent

// CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandStoreSpotlightAds for application/vnd.sbadresource.v4+json ContentType.
type CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody = CreateSponsoredBrandStoreSpotlightAdsRequestContent

// CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandsVideoAds for application/vnd.sbadresource.v4+json ContentType.
type CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody = CreateSponsoredBrandsVideoAdsRequestContent

// CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody defines body for CreateSponsoredBrandsCampaigns for application/vnd.sbcampaignresource.v4+json ContentType.
type CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody = CreateSponsoredBrandsCampaignsRequestContent

// UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody defines body for UpdateSponsoredBrandsCampaigns for application/vnd.sbcampaignresource.v4+json ContentType.
type UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody = UpdateSponsoredBrandsCampaignsRequestContent

// DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody defines body for DeleteSponsoredBrandsCampaigns for application/vnd.sbcampaignresource.v4+json ContentType.
type DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody = DeleteSponsoredBrandsCampaignsRequestContent

// ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody defines body for ListSponsoredBrandsCampaigns for application/vnd.sbcampaignresource.v4+json ContentType.
type ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody = ListSponsoredBrandsCampaignsRequestContent

// AsSBInsightsObject0 returns the union data inside the SBInsightsObject as a SBInsightsObject0
func (t SBInsightsObject) AsSBInsightsObject0() (SBInsightsObject0, error) {
	var body SBInsightsObject0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBInsightsObject0 overwrites any union data inside the SBInsightsObject as the provided SBInsightsObject0
func (t *SBInsightsObject) FromSBInsightsObject0(v SBInsightsObject0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBInsightsObject0 performs a merge with any union data inside the SBInsightsObject, using the provided SBInsightsObject0
func (t *SBInsightsObject) MergeSBInsightsObject0(v SBInsightsObject0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBInsightsObject) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBInsightsObject) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateBrandVideoCreativeWithBody request with any body
	CreateBrandVideoCreativeWithBody(ctx context.Context, params *CreateBrandVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBrandVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateBrandVideoCreativeParams, body CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCreativesWithBody request with any body
	ListCreativesWithBody(ctx context.Context, params *ListCreativesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListCreativesWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *ListCreativesParams, body ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductCollectionCreativeWithBody request with any body
	CreateProductCollectionCreativeWithBody(ctx context.Context, params *CreateProductCollectionCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductCollectionCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateProductCollectionCreativeParams, body CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStoreSpotlightCreativeWithBody request with any body
	CreateStoreSpotlightCreativeWithBody(ctx context.Context, params *CreateStoreSpotlightCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStoreSpotlightCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateStoreSpotlightCreativeParams, body CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVideoCreativeWithBody request with any body
	CreateVideoCreativeWithBody(ctx context.Context, params *CreateVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateVideoCreativeParams, body CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSBBudgetRulesForAdvertiser request
	GetSBBudgetRulesForAdvertiser(ctx context.Context, params *GetSBBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBudgetRulesForSBCampaignsWithBody request with any body
	CreateBudgetRulesForSBCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBudgetRulesForSBCampaigns(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, body CreateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBudgetRulesForSBCampaignsWithBody request with any body
	UpdateBudgetRulesForSBCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBudgetRulesForSBCampaigns(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, body UpdateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBudgetRuleByRuleIdForSBCampaigns request
	GetBudgetRuleByRuleIdForSBCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsAssociatedWithSBBudgetRule request
	GetCampaignsAssociatedWithSBBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSBBudgetRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SbCampaignsBudgetUsageWithBody request with any body
	SbCampaignsBudgetUsageWithBody(ctx context.Context, params *SbCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SbCampaignsBudgetUsageWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SbCampaignsBudgetUsageParams, body SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBudgetRecommendationsWithBody request with any body
	GetBudgetRecommendationsWithBody(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetBudgetRecommendationsWithApplicationVndSbbudgetrecommendationV4PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBGetBudgetRulesRecommendationWithBody request with any body
	SBGetBudgetRulesRecommendationWithBody(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SBGetBudgetRulesRecommendationWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, body SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBInsightsCampaignInsightsWithBody request with any body
	SBInsightsCampaignInsightsWithBody(ctx context.Context, params *SBInsightsCampaignInsightsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SBInsightsCampaignInsightsWithApplicationVndSbinsightsV4PlusJSONBody(ctx context.Context, params *SBInsightsCampaignInsightsParams, body SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAssociatedBudgetRulesForSBCampaigns request
	ListAssociatedBudgetRulesForSBCampaigns(ctx context.Context, campaignId string, params *ListAssociatedBudgetRulesForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssociatedBudgetRulesForSBCampaignsWithBody request with any body
	CreateAssociatedBudgetRulesForSBCampaignsWithBody(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAssociatedBudgetRulesForSBCampaigns(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, body CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuleBasedBudgetHistoryForSBCampaigns request
	GetRuleBasedBudgetHistoryForSBCampaigns(ctx context.Context, campaignId string, params *GetRuleBasedBudgetHistoryForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisassociateAssociatedBudgetRuleForSBCampaigns request
	DisassociateAssociatedBudgetRuleForSBCampaigns(ctx context.Context, campaignId string, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBTargetingGetNegativeBrands request
	SBTargetingGetNegativeBrands(ctx context.Context, params *SBTargetingGetNegativeBrandsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeadlineRecommendationsWithBody request with any body
	GetHeadlineRecommendationsWithBody(ctx context.Context, params *GetHeadlineRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHeadlineRecommendations(ctx context.Context, params *GetHeadlineRecommendationsParams, body GetHeadlineRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeywordRecommendationsWithBody request with any body
	GetKeywordRecommendationsWithBody(ctx context.Context, params *GetKeywordRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetKeywordRecommendationsWithApplicationVndSbkeywordrecommendationV3PlusJSONBody(ctx context.Context, params *GetKeywordRecommendationsParams, body GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBTargetingGetTargetableCategories request
	SBTargetingGetTargetableCategories(ctx context.Context, params *SBTargetingGetTargetableCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBTargetingGetRefinementsForCategory request
	SBTargetingGetRefinementsForCategory(ctx context.Context, categoryRefinementId string, params *SBTargetingGetRefinementsForCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SBTargetingGetTargetableASINCountsWithBody request with any body
	SBTargetingGetTargetableASINCountsWithBody(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SBTargetingGetTargetableASINCountsWithApplicationVndSbtargetingV4PlusJSONBody(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, body SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandsAdGroupsWithBody request with any body
	CreateSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, body CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSponsoredBrandsAdGroupsWithBody request with any body
	UpdateSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, body UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSponsoredBrandsAdGroupsWithBody request with any body
	DeleteSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, body DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSponsoredBrandsAdGroupsWithBody request with any body
	ListSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, body ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSponsoredBrandsAdsWithBody request with any body
	UpdateSponsoredBrandsAdsWithBody(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, body UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandsBrandVideoAdsWithBody request with any body
	CreateSponsoredBrandsBrandVideoAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandsBrandVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, body CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSponsoredBrandsAdsWithBody request with any body
	DeleteSponsoredBrandsAdsWithBody(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, body DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSponsoredBrandsAdsWithBody request with any body
	ListSponsoredBrandsAdsWithBody(ctx context.Context, params *ListSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsAdsParams, body ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandsProductCollectionAdsWithBody request with any body
	CreateSponsoredBrandsProductCollectionAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandsProductCollectionAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, body CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandStoreSpotlightAdsWithBody request with any body
	CreateSponsoredBrandStoreSpotlightAdsWithBody(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandStoreSpotlightAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, body CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandsVideoAdsWithBody request with any body
	CreateSponsoredBrandsVideoAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandsVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, body CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSponsoredBrandsCampaignsWithBody request with any body
	CreateSponsoredBrandsCampaignsWithBody(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, body CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSponsoredBrandsCampaignsWithBody request with any body
	UpdateSponsoredBrandsCampaignsWithBody(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, body UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSponsoredBrandsCampaignsWithBody request with any body
	DeleteSponsoredBrandsCampaignsWithBody(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, body DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSponsoredBrandsCampaignsWithBody request with any body
	ListSponsoredBrandsCampaignsWithBody(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, body ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateBrandVideoCreativeWithBody(ctx context.Context, params *CreateBrandVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrandVideoCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBrandVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateBrandVideoCreativeParams, body CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBrandVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCreativesWithBody(ctx context.Context, params *ListCreativesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCreativesWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *ListCreativesParams, body ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCreativesRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductCollectionCreativeWithBody(ctx context.Context, params *CreateProductCollectionCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductCollectionCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductCollectionCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateProductCollectionCreativeParams, body CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductCollectionCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStoreSpotlightCreativeWithBody(ctx context.Context, params *CreateStoreSpotlightCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStoreSpotlightCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStoreSpotlightCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateStoreSpotlightCreativeParams, body CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStoreSpotlightCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVideoCreativeWithBody(ctx context.Context, params *CreateVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVideoCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx context.Context, params *CreateVideoCreativeParams, body CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSBBudgetRulesForAdvertiser(ctx context.Context, params *GetSBBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSBBudgetRulesForAdvertiserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBudgetRulesForSBCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSBCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBudgetRulesForSBCampaigns(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, body CreateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSBCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBudgetRulesForSBCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSBCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBudgetRulesForSBCampaigns(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, body UpdateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSBCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBudgetRuleByRuleIdForSBCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBudgetRuleByRuleIdForSBCampaignsRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsAssociatedWithSBBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSBBudgetRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsAssociatedWithSBBudgetRuleRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SbCampaignsBudgetUsageWithBody(ctx context.Context, params *SbCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSbCampaignsBudgetUsageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SbCampaignsBudgetUsageWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SbCampaignsBudgetUsageParams, body SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSbCampaignsBudgetUsageRequestWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBudgetRecommendationsWithBody(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBudgetRecommendationsWithApplicationVndSbbudgetrecommendationV4PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationsRequestWithApplicationVndSbbudgetrecommendationV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBGetBudgetRulesRecommendationWithBody(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBGetBudgetRulesRecommendationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBGetBudgetRulesRecommendationWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, body SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBGetBudgetRulesRecommendationRequestWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBInsightsCampaignInsightsWithBody(ctx context.Context, params *SBInsightsCampaignInsightsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBInsightsCampaignInsightsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBInsightsCampaignInsightsWithApplicationVndSbinsightsV4PlusJSONBody(ctx context.Context, params *SBInsightsCampaignInsightsParams, body SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBInsightsCampaignInsightsRequestWithApplicationVndSbinsightsV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAssociatedBudgetRulesForSBCampaigns(ctx context.Context, campaignId string, params *ListAssociatedBudgetRulesForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAssociatedBudgetRulesForSBCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociatedBudgetRulesForSBCampaignsWithBody(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSBCampaignsRequestWithBody(c.Server, campaignId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociatedBudgetRulesForSBCampaigns(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, body CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSBCampaignsRequest(c.Server, campaignId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuleBasedBudgetHistoryForSBCampaigns(ctx context.Context, campaignId string, params *GetRuleBasedBudgetHistoryForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuleBasedBudgetHistoryForSBCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateAssociatedBudgetRuleForSBCampaigns(ctx context.Context, campaignId string, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSBCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateAssociatedBudgetRuleForSBCampaignsRequest(c.Server, campaignId, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBTargetingGetNegativeBrands(ctx context.Context, params *SBTargetingGetNegativeBrandsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBTargetingGetNegativeBrandsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadlineRecommendationsWithBody(ctx context.Context, params *GetHeadlineRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadlineRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadlineRecommendations(ctx context.Context, params *GetHeadlineRecommendationsParams, body GetHeadlineRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadlineRecommendationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeywordRecommendationsWithBody(ctx context.Context, params *GetKeywordRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeywordRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeywordRecommendationsWithApplicationVndSbkeywordrecommendationV3PlusJSONBody(ctx context.Context, params *GetKeywordRecommendationsParams, body GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeywordRecommendationsRequestWithApplicationVndSbkeywordrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBTargetingGetTargetableCategories(ctx context.Context, params *SBTargetingGetTargetableCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBTargetingGetTargetableCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBTargetingGetRefinementsForCategory(ctx context.Context, categoryRefinementId string, params *SBTargetingGetRefinementsForCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBTargetingGetRefinementsForCategoryRequest(c.Server, categoryRefinementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBTargetingGetTargetableASINCountsWithBody(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBTargetingGetTargetableASINCountsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SBTargetingGetTargetableASINCountsWithApplicationVndSbtargetingV4PlusJSONBody(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, body SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSBTargetingGetTargetableASINCountsRequestWithApplicationVndSbtargetingV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, body CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, body UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, body DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsAdGroupsWithBody(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, body ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsAdsWithBody(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, body UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsBrandVideoAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsBrandVideoAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsBrandVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, body CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsBrandVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsAdsWithBody(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, body DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsAdsWithBody(ctx context.Context, params *ListSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsAdsParams, body ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsProductCollectionAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsProductCollectionAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsProductCollectionAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, body CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsProductCollectionAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandStoreSpotlightAdsWithBody(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandStoreSpotlightAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandStoreSpotlightAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, body CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandStoreSpotlightAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsVideoAdsWithBody(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsVideoAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, body CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsCampaignsWithBody(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, body CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsCampaignsWithBody(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, body UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsCampaignsWithBody(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, body DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsCampaignsWithBody(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, body ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateBrandVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody calls the generic CreateBrandVideoCreative builder with application/vnd.sbAdCreativeResource.v4+json body
func NewCreateBrandVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(server string, params *CreateBrandVideoCreativeParams, body CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBrandVideoCreativeRequestWithBody(server, params, "application/vnd.sbAdCreativeResource.v4+json", bodyReader)
}

// NewCreateBrandVideoCreativeRequestWithBody generates requests for CreateBrandVideoCreative with any type of body
func NewCreateBrandVideoCreativeRequestWithBody(server string, params *CreateBrandVideoCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/ads/creatives/brandVideo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

// NewListCreativesRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody calls the generic ListCreatives builder with application/vnd.sbAdCreativeResource.v4+json body
func NewListCreativesRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(server string, params *ListCreativesParams, body ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListCreativesRequestWithBody(server, params, "application/vnd.sbAdCreativeResource.v4+json", bodyReader)
}

// NewListCreativesRequestWithBody generates requests for ListCreatives with any type of body
func NewListCreativesRequestWithBody(server string, params *ListCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/ads/creatives/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

// NewCreateProductCollectionCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody calls the generic CreateProductCollectionCreative builder with application/vnd.sbAdCreativeResource.v4+json body
func NewCreateProductCollectionCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(server string, params *CreateProductCollectionCreativeParams, body CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductCollectionCreativeRequestWithBody(server, params, "application/vnd.sbAdCreativeResource.v4+json", bodyReader)
}

// NewCreateProductCollectionCreativeRequestWithBody generates requests for CreateProductCollectionCreative with any type of body
func NewCreateProductCollectionCreativeRequestWithBody(server string, params *CreateProductCollectionCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/ads/creatives/productCollection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

// NewCreateStoreSpotlightCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody calls the generic CreateStoreSpotlightCreative builder with application/vnd.sbAdCreativeResource.v4+json body
func NewCreateStoreSpotlightCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(server string, params *CreateStoreSpotlightCreativeParams, body CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStoreSpotlightCreativeRequestWithBody(server, params, "application/vnd.sbAdCreativeResource.v4+json", bodyReader)
}

// NewCreateStoreSpotlightCreativeRequestWithBody generates requests for CreateStoreSpotlightCreative with any type of body
func NewCreateStoreSpotlightCreativeRequestWithBody(server string, params *CreateStoreSpotlightCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/ads/creatives/storeSpotlight")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

// NewCreateVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody calls the generic CreateVideoCreative builder with application/vnd.sbAdCreativeResource.v4+json body
func NewCreateVideoCreativeRequestWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(server string, params *CreateVideoCreativeParams, body CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVideoCreativeRequestWithBody(server, params, "application/vnd.sbAdCreativeResource.v4+json", bodyReader)
}

// NewCreateVideoCreativeRequestWithBody generates requests for CreateVideoCreative with any type of body
func NewCreateVideoCreativeRequestWithBody(server string, params *CreateVideoCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/ads/creatives/video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

// NewGetSBBudgetRulesForAdvertiserRequest generates requests for GetSBBudgetRulesForAdvertiser
func NewGetSBBudgetRulesForAdvertiserRequest(server string, params *GetSBBudgetRulesForAdvertiserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateBudgetRulesForSBCampaignsRequest calls the generic CreateBudgetRulesForSBCampaigns builder with application/json body
func NewCreateBudgetRulesForSBCampaignsRequest(server string, params *CreateBudgetRulesForSBCampaignsParams, body CreateBudgetRulesForSBCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBudgetRulesForSBCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBudgetRulesForSBCampaignsRequestWithBody generates requests for CreateBudgetRulesForSBCampaigns with any type of body
func NewCreateBudgetRulesForSBCampaignsRequestWithBody(server string, params *CreateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateBudgetRulesForSBCampaignsRequest calls the generic UpdateBudgetRulesForSBCampaigns builder with application/json body
func NewUpdateBudgetRulesForSBCampaignsRequest(server string, params *UpdateBudgetRulesForSBCampaignsParams, body UpdateBudgetRulesForSBCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBudgetRulesForSBCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateBudgetRulesForSBCampaignsRequestWithBody generates requests for UpdateBudgetRulesForSBCampaigns with any type of body
func NewUpdateBudgetRulesForSBCampaignsRequestWithBody(server string, params *UpdateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRuleByRuleIdForSBCampaignsRequest generates requests for GetBudgetRuleByRuleIdForSBCampaigns
func NewGetBudgetRuleByRuleIdForSBCampaignsRequest(server string, budgetRuleId string, params *GetBudgetRuleByRuleIdForSBCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/budgetRules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignsAssociatedWithSBBudgetRuleRequest generates requests for GetCampaignsAssociatedWithSBBudgetRule
func NewGetCampaignsAssociatedWithSBBudgetRuleRequest(server string, budgetRuleId string, params *GetCampaignsAssociatedWithSBBudgetRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/budgetRules/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSbCampaignsBudgetUsageRequestWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody calls the generic SbCampaignsBudgetUsage builder with application/vnd.sbcampaignbudgetusage.v1+json body
func NewSbCampaignsBudgetUsageRequestWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody(server string, params *SbCampaignsBudgetUsageParams, body SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSbCampaignsBudgetUsageRequestWithBody(server, params, "application/vnd.sbcampaignbudgetusage.v1+json", bodyReader)
}

// NewSbCampaignsBudgetUsageRequestWithBody generates requests for SbCampaignsBudgetUsage with any type of body
func NewSbCampaignsBudgetUsageRequestWithBody(server string, params *SbCampaignsBudgetUsageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/budget/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRecommendationsRequestWithApplicationVndSbbudgetrecommendationV4PlusJSONBody calls the generic GetBudgetRecommendations builder with application/vnd.sbbudgetrecommendation.v4+json body
func NewGetBudgetRecommendationsRequestWithApplicationVndSbbudgetrecommendationV4PlusJSONBody(server string, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBudgetRecommendationsRequestWithBody(server, params, "application/vnd.sbbudgetrecommendation.v4+json", bodyReader)
}

// NewGetBudgetRecommendationsRequestWithBody generates requests for GetBudgetRecommendations with any type of body
func NewGetBudgetRecommendationsRequestWithBody(server string, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/budgetRecommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBGetBudgetRulesRecommendationRequestWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody calls the generic SBGetBudgetRulesRecommendation builder with application/vnd.sbbudgetrulesrecommendation.v3+json body
func NewSBGetBudgetRulesRecommendationRequestWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody(server string, params *SBGetBudgetRulesRecommendationParams, body SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSBGetBudgetRulesRecommendationRequestWithBody(server, params, "application/vnd.sbbudgetrulesrecommendation.v3+json", bodyReader)
}

// NewSBGetBudgetRulesRecommendationRequestWithBody generates requests for SBGetBudgetRulesRecommendation with any type of body
func NewSBGetBudgetRulesRecommendationRequestWithBody(server string, params *SBGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/budgetRules/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBInsightsCampaignInsightsRequestWithApplicationVndSbinsightsV4PlusJSONBody calls the generic SBInsightsCampaignInsights builder with application/vnd.sbinsights.v4+json body
func NewSBInsightsCampaignInsightsRequestWithApplicationVndSbinsightsV4PlusJSONBody(server string, params *SBInsightsCampaignInsightsParams, body SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSBInsightsCampaignInsightsRequestWithBody(server, params, "application/vnd.sbinsights.v4+json", bodyReader)
}

// NewSBInsightsCampaignInsightsRequestWithBody generates requests for SBInsightsCampaignInsights with any type of body
func NewSBInsightsCampaignInsightsRequestWithBody(server string, params *SBInsightsCampaignInsightsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/insights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAssociatedBudgetRulesForSBCampaignsRequest generates requests for ListAssociatedBudgetRulesForSBCampaigns
func NewListAssociatedBudgetRulesForSBCampaignsRequest(server string, campaignId string, params *ListAssociatedBudgetRulesForSBCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateAssociatedBudgetRulesForSBCampaignsRequest calls the generic CreateAssociatedBudgetRulesForSBCampaigns builder with application/json body
func NewCreateAssociatedBudgetRulesForSBCampaignsRequest(server string, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, body CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssociatedBudgetRulesForSBCampaignsRequestWithBody(server, campaignId, params, "application/json", bodyReader)
}

// NewCreateAssociatedBudgetRulesForSBCampaignsRequestWithBody generates requests for CreateAssociatedBudgetRulesForSBCampaigns with any type of body
func NewCreateAssociatedBudgetRulesForSBCampaignsRequestWithBody(server string, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRuleBasedBudgetHistoryForSBCampaignsRequest generates requests for GetRuleBasedBudgetHistoryForSBCampaigns
func NewGetRuleBasedBudgetHistoryForSBCampaignsRequest(server string, campaignId string, params *GetRuleBasedBudgetHistoryForSBCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s/budgetRules/budgetHistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDisassociateAssociatedBudgetRuleForSBCampaignsRequest generates requests for DisassociateAssociatedBudgetRuleForSBCampaigns
func NewDisassociateAssociatedBudgetRuleForSBCampaignsRequest(server string, campaignId string, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSBCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s/budgetRules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBTargetingGetNegativeBrandsRequest generates requests for SBTargetingGetNegativeBrands
func NewSBTargetingGetNegativeBrandsRequest(server string, params *SBTargetingGetNegativeBrandsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets/brands/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetHeadlineRecommendationsRequest calls the generic GetHeadlineRecommendations builder with application/json body
func NewGetHeadlineRecommendationsRequest(server string, params *GetHeadlineRecommendationsParams, body GetHeadlineRecommendationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHeadlineRecommendationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetHeadlineRecommendationsRequestWithBody generates requests for GetHeadlineRecommendations with any type of body
func NewGetHeadlineRecommendationsRequestWithBody(server string, params *GetHeadlineRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/creative/headline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetKeywordRecommendationsRequestWithApplicationVndSbkeywordrecommendationV3PlusJSONBody calls the generic GetKeywordRecommendations builder with application/vnd.sbkeywordrecommendation.v3+json body
func NewGetKeywordRecommendationsRequestWithApplicationVndSbkeywordrecommendationV3PlusJSONBody(server string, params *GetKeywordRecommendationsParams, body GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetKeywordRecommendationsRequestWithBody(server, params, "application/vnd.sbkeywordrecommendation.v3+json", bodyReader)
}

// NewGetKeywordRecommendationsRequestWithBody generates requests for GetKeywordRecommendations with any type of body
func NewGetKeywordRecommendationsRequestWithBody(server string, params *GetKeywordRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/keyword")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBTargetingGetTargetableCategoriesRequest generates requests for SBTargetingGetTargetableCategories
func NewSBTargetingGetTargetableCategoriesRequest(server string, params *SBTargetingGetTargetableCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supplySource", runtime.ParamLocationQuery, params.SupplySource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeOnlyRootCategories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeOnlyRootCategories", runtime.ParamLocationQuery, *params.IncludeOnlyRootCategories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentCategoryRefinementId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentCategoryRefinementId", runtime.ParamLocationQuery, *params.ParentCategoryRefinementId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBTargetingGetRefinementsForCategoryRequest generates requests for SBTargetingGetRefinementsForCategory
func NewSBTargetingGetRefinementsForCategoryRequest(server string, categoryRefinementId string, params *SBTargetingGetRefinementsForCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryRefinementId", runtime.ParamLocationPath, categoryRefinementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/categories/%s/refinements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSBTargetingGetTargetableASINCountsRequestWithApplicationVndSbtargetingV4PlusJSONBody calls the generic SBTargetingGetTargetableASINCounts builder with application/vnd.sbtargeting.v4+json body
func NewSBTargetingGetTargetableASINCountsRequestWithApplicationVndSbtargetingV4PlusJSONBody(server string, params *SBTargetingGetTargetableASINCountsParams, body SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSBTargetingGetTargetableASINCountsRequestWithBody(server, params, "application/vnd.sbtargeting.v4+json", bodyReader)
}

// NewSBTargetingGetTargetableASINCountsRequestWithBody generates requests for SBTargetingGetTargetableASINCounts with any type of body
func NewSBTargetingGetTargetableASINCountsRequestWithBody(server string, params *SBTargetingGetTargetableASINCountsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/products/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody calls the generic CreateSponsoredBrandsAdGroups builder with application/vnd.sbadgroupresource.v4+json body
func NewCreateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandsAdGroupsParams, body CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandsAdGroupsRequestWithBody(server, params, "application/vnd.sbadgroupresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandsAdGroupsRequestWithBody generates requests for CreateSponsoredBrandsAdGroups with any type of body
func NewCreateSponsoredBrandsAdGroupsRequestWithBody(server string, params *CreateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/adGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody calls the generic UpdateSponsoredBrandsAdGroups builder with application/vnd.sbadgroupresource.v4+json body
func NewUpdateSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(server string, params *UpdateSponsoredBrandsAdGroupsParams, body UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredBrandsAdGroupsRequestWithBody(server, params, "application/vnd.sbadgroupresource.v4+json", bodyReader)
}

// NewUpdateSponsoredBrandsAdGroupsRequestWithBody generates requests for UpdateSponsoredBrandsAdGroups with any type of body
func NewUpdateSponsoredBrandsAdGroupsRequestWithBody(server string, params *UpdateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/adGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody calls the generic DeleteSponsoredBrandsAdGroups builder with application/vnd.sbadgroupresource.v4+json body
func NewDeleteSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(server string, params *DeleteSponsoredBrandsAdGroupsParams, body DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredBrandsAdGroupsRequestWithBody(server, params, "application/vnd.sbadgroupresource.v4+json", bodyReader)
}

// NewDeleteSponsoredBrandsAdGroupsRequestWithBody generates requests for DeleteSponsoredBrandsAdGroups with any type of body
func NewDeleteSponsoredBrandsAdGroupsRequestWithBody(server string, params *DeleteSponsoredBrandsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/adGroups/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody calls the generic ListSponsoredBrandsAdGroups builder with application/vnd.sbadgroupresource.v4+json body
func NewListSponsoredBrandsAdGroupsRequestWithApplicationVndSbadgroupresourceV4PlusJSONBody(server string, params *ListSponsoredBrandsAdGroupsParams, body ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredBrandsAdGroupsRequestWithBody(server, params, "application/vnd.sbadgroupresource.v4+json", bodyReader)
}

// NewListSponsoredBrandsAdGroupsRequestWithBody generates requests for ListSponsoredBrandsAdGroups with any type of body
func NewListSponsoredBrandsAdGroupsRequestWithBody(server string, params *ListSponsoredBrandsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/adGroups/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic UpdateSponsoredBrandsAds builder with application/vnd.sbadresource.v4+json body
func NewUpdateSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *UpdateSponsoredBrandsAdsParams, body UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredBrandsAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewUpdateSponsoredBrandsAdsRequestWithBody generates requests for UpdateSponsoredBrandsAds with any type of body
func NewUpdateSponsoredBrandsAdsRequestWithBody(server string, params *UpdateSponsoredBrandsAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandsBrandVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic CreateSponsoredBrandsBrandVideoAds builder with application/vnd.sbadresource.v4+json body
func NewCreateSponsoredBrandsBrandVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandsBrandVideoAdsParams, body CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandsBrandVideoAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandsBrandVideoAdsRequestWithBody generates requests for CreateSponsoredBrandsBrandVideoAds with any type of body
func NewCreateSponsoredBrandsBrandVideoAdsRequestWithBody(server string, params *CreateSponsoredBrandsBrandVideoAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/brandVideo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic DeleteSponsoredBrandsAds builder with application/vnd.sbadresource.v4+json body
func NewDeleteSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *DeleteSponsoredBrandsAdsParams, body DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredBrandsAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewDeleteSponsoredBrandsAdsRequestWithBody generates requests for DeleteSponsoredBrandsAds with any type of body
func NewDeleteSponsoredBrandsAdsRequestWithBody(server string, params *DeleteSponsoredBrandsAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic ListSponsoredBrandsAds builder with application/vnd.sbadresource.v4+json body
func NewListSponsoredBrandsAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *ListSponsoredBrandsAdsParams, body ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredBrandsAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewListSponsoredBrandsAdsRequestWithBody generates requests for ListSponsoredBrandsAds with any type of body
func NewListSponsoredBrandsAdsRequestWithBody(server string, params *ListSponsoredBrandsAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandsProductCollectionAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic CreateSponsoredBrandsProductCollectionAds builder with application/vnd.sbadresource.v4+json body
func NewCreateSponsoredBrandsProductCollectionAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandsProductCollectionAdsParams, body CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandsProductCollectionAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandsProductCollectionAdsRequestWithBody generates requests for CreateSponsoredBrandsProductCollectionAds with any type of body
func NewCreateSponsoredBrandsProductCollectionAdsRequestWithBody(server string, params *CreateSponsoredBrandsProductCollectionAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/productCollection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandStoreSpotlightAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic CreateSponsoredBrandStoreSpotlightAds builder with application/vnd.sbadresource.v4+json body
func NewCreateSponsoredBrandStoreSpotlightAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandStoreSpotlightAdsParams, body CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandStoreSpotlightAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandStoreSpotlightAdsRequestWithBody generates requests for CreateSponsoredBrandStoreSpotlightAds with any type of body
func NewCreateSponsoredBrandStoreSpotlightAdsRequestWithBody(server string, params *CreateSponsoredBrandStoreSpotlightAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/storeSpotlight")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandsVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody calls the generic CreateSponsoredBrandsVideoAds builder with application/vnd.sbadresource.v4+json body
func NewCreateSponsoredBrandsVideoAdsRequestWithApplicationVndSbadresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandsVideoAdsParams, body CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandsVideoAdsRequestWithBody(server, params, "application/vnd.sbadresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandsVideoAdsRequestWithBody generates requests for CreateSponsoredBrandsVideoAds with any type of body
func NewCreateSponsoredBrandsVideoAdsRequestWithBody(server string, params *CreateSponsoredBrandsVideoAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/ads/video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody calls the generic CreateSponsoredBrandsCampaigns builder with application/vnd.sbcampaignresource.v4+json body
func NewCreateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(server string, params *CreateSponsoredBrandsCampaignsParams, body CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredBrandsCampaignsRequestWithBody(server, params, "application/vnd.sbcampaignresource.v4+json", bodyReader)
}

// NewCreateSponsoredBrandsCampaignsRequestWithBody generates requests for CreateSponsoredBrandsCampaigns with any type of body
func NewCreateSponsoredBrandsCampaignsRequestWithBody(server string, params *CreateSponsoredBrandsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody calls the generic UpdateSponsoredBrandsCampaigns builder with application/vnd.sbcampaignresource.v4+json body
func NewUpdateSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(server string, params *UpdateSponsoredBrandsCampaignsParams, body UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredBrandsCampaignsRequestWithBody(server, params, "application/vnd.sbcampaignresource.v4+json", bodyReader)
}

// NewUpdateSponsoredBrandsCampaignsRequestWithBody generates requests for UpdateSponsoredBrandsCampaigns with any type of body
func NewUpdateSponsoredBrandsCampaignsRequestWithBody(server string, params *UpdateSponsoredBrandsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody calls the generic DeleteSponsoredBrandsCampaigns builder with application/vnd.sbcampaignresource.v4+json body
func NewDeleteSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(server string, params *DeleteSponsoredBrandsCampaignsParams, body DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredBrandsCampaignsRequestWithBody(server, params, "application/vnd.sbcampaignresource.v4+json", bodyReader)
}

// NewDeleteSponsoredBrandsCampaignsRequestWithBody generates requests for DeleteSponsoredBrandsCampaigns with any type of body
func NewDeleteSponsoredBrandsCampaignsRequestWithBody(server string, params *DeleteSponsoredBrandsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/campaigns/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody calls the generic ListSponsoredBrandsCampaigns builder with application/vnd.sbcampaignresource.v4+json body
func NewListSponsoredBrandsCampaignsRequestWithApplicationVndSbcampaignresourceV4PlusJSONBody(server string, params *ListSponsoredBrandsCampaignsParams, body ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredBrandsCampaignsRequestWithBody(server, params, "application/vnd.sbcampaignresource.v4+json", bodyReader)
}

// NewListSponsoredBrandsCampaignsRequestWithBody generates requests for ListSponsoredBrandsCampaigns with any type of body
func NewListSponsoredBrandsCampaignsRequestWithBody(server string, params *ListSponsoredBrandsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/v4/campaigns/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateBrandVideoCreativeWithBodyWithResponse request with any body
	CreateBrandVideoCreativeWithBodyWithResponse(ctx context.Context, params *CreateBrandVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrandVideoCreativeResp, error)

	CreateBrandVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateBrandVideoCreativeParams, body CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrandVideoCreativeResp, error)

	// ListCreativesWithBodyWithResponse request with any body
	ListCreativesWithBodyWithResponse(ctx context.Context, params *ListCreativesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCreativesResp, error)

	ListCreativesWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListCreativesParams, body ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCreativesResp, error)

	// CreateProductCollectionCreativeWithBodyWithResponse request with any body
	CreateProductCollectionCreativeWithBodyWithResponse(ctx context.Context, params *CreateProductCollectionCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductCollectionCreativeResp, error)

	CreateProductCollectionCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateProductCollectionCreativeParams, body CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductCollectionCreativeResp, error)

	// CreateStoreSpotlightCreativeWithBodyWithResponse request with any body
	CreateStoreSpotlightCreativeWithBodyWithResponse(ctx context.Context, params *CreateStoreSpotlightCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStoreSpotlightCreativeResp, error)

	CreateStoreSpotlightCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateStoreSpotlightCreativeParams, body CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStoreSpotlightCreativeResp, error)

	// CreateVideoCreativeWithBodyWithResponse request with any body
	CreateVideoCreativeWithBodyWithResponse(ctx context.Context, params *CreateVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVideoCreativeResp, error)

	CreateVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateVideoCreativeParams, body CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVideoCreativeResp, error)

	// GetSBBudgetRulesForAdvertiserWithResponse request
	GetSBBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSBBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*GetSBBudgetRulesForAdvertiserResp, error)

	// CreateBudgetRulesForSBCampaignsWithBodyWithResponse request with any body
	CreateBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSBCampaignsResp, error)

	CreateBudgetRulesForSBCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, body CreateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSBCampaignsResp, error)

	// UpdateBudgetRulesForSBCampaignsWithBodyWithResponse request with any body
	UpdateBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSBCampaignsResp, error)

	UpdateBudgetRulesForSBCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, body UpdateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSBCampaignsResp, error)

	// GetBudgetRuleByRuleIdForSBCampaignsWithResponse request
	GetBudgetRuleByRuleIdForSBCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSBCampaignsParams, reqEditors ...RequestEditorFn) (*GetBudgetRuleByRuleIdForSBCampaignsResp, error)

	// GetCampaignsAssociatedWithSBBudgetRuleWithResponse request
	GetCampaignsAssociatedWithSBBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSBBudgetRuleParams, reqEditors ...RequestEditorFn) (*GetCampaignsAssociatedWithSBBudgetRuleResp, error)

	// SbCampaignsBudgetUsageWithBodyWithResponse request with any body
	SbCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SbCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SbCampaignsBudgetUsageResp, error)

	SbCampaignsBudgetUsageWithApplicationVndSbcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SbCampaignsBudgetUsageParams, body SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SbCampaignsBudgetUsageResp, error)

	// GetBudgetRecommendationsWithBodyWithResponse request with any body
	GetBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBudgetRecommendationsResp, error)

	GetBudgetRecommendationsWithApplicationVndSbbudgetrecommendationV4PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBudgetRecommendationsResp, error)

	// SBGetBudgetRulesRecommendationWithBodyWithResponse request with any body
	SBGetBudgetRulesRecommendationWithBodyWithResponse(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBGetBudgetRulesRecommendationResp, error)

	SBGetBudgetRulesRecommendationWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, body SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBGetBudgetRulesRecommendationResp, error)

	// SBInsightsCampaignInsightsWithBodyWithResponse request with any body
	SBInsightsCampaignInsightsWithBodyWithResponse(ctx context.Context, params *SBInsightsCampaignInsightsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBInsightsCampaignInsightsResp, error)

	SBInsightsCampaignInsightsWithApplicationVndSbinsightsV4PlusJSONBodyWithResponse(ctx context.Context, params *SBInsightsCampaignInsightsParams, body SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBInsightsCampaignInsightsResp, error)

	// ListAssociatedBudgetRulesForSBCampaignsWithResponse request
	ListAssociatedBudgetRulesForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *ListAssociatedBudgetRulesForSBCampaignsParams, reqEditors ...RequestEditorFn) (*ListAssociatedBudgetRulesForSBCampaignsResp, error)

	// CreateAssociatedBudgetRulesForSBCampaignsWithBodyWithResponse request with any body
	CreateAssociatedBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSBCampaignsResp, error)

	CreateAssociatedBudgetRulesForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, body CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSBCampaignsResp, error)

	// GetRuleBasedBudgetHistoryForSBCampaignsWithResponse request
	GetRuleBasedBudgetHistoryForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *GetRuleBasedBudgetHistoryForSBCampaignsParams, reqEditors ...RequestEditorFn) (*GetRuleBasedBudgetHistoryForSBCampaignsResp, error)

	// DisassociateAssociatedBudgetRuleForSBCampaignsWithResponse request
	DisassociateAssociatedBudgetRuleForSBCampaignsWithResponse(ctx context.Context, campaignId string, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSBCampaignsParams, reqEditors ...RequestEditorFn) (*DisassociateAssociatedBudgetRuleForSBCampaignsResp, error)

	// SBTargetingGetNegativeBrandsWithResponse request
	SBTargetingGetNegativeBrandsWithResponse(ctx context.Context, params *SBTargetingGetNegativeBrandsParams, reqEditors ...RequestEditorFn) (*SBTargetingGetNegativeBrandsResp, error)

	// GetHeadlineRecommendationsWithBodyWithResponse request with any body
	GetHeadlineRecommendationsWithBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsResp, error)

	GetHeadlineRecommendationsWithResponse(ctx context.Context, params *GetHeadlineRecommendationsParams, body GetHeadlineRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsResp, error)

	// GetKeywordRecommendationsWithBodyWithResponse request with any body
	GetKeywordRecommendationsWithBodyWithResponse(ctx context.Context, params *GetKeywordRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetKeywordRecommendationsResp, error)

	GetKeywordRecommendationsWithApplicationVndSbkeywordrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetKeywordRecommendationsParams, body GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetKeywordRecommendationsResp, error)

	// SBTargetingGetTargetableCategoriesWithResponse request
	SBTargetingGetTargetableCategoriesWithResponse(ctx context.Context, params *SBTargetingGetTargetableCategoriesParams, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableCategoriesResp, error)

	// SBTargetingGetRefinementsForCategoryWithResponse request
	SBTargetingGetRefinementsForCategoryWithResponse(ctx context.Context, categoryRefinementId string, params *SBTargetingGetRefinementsForCategoryParams, reqEditors ...RequestEditorFn) (*SBTargetingGetRefinementsForCategoryResp, error)

	// SBTargetingGetTargetableASINCountsWithBodyWithResponse request with any body
	SBTargetingGetTargetableASINCountsWithBodyWithResponse(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableASINCountsResp, error)

	SBTargetingGetTargetableASINCountsWithApplicationVndSbtargetingV4PlusJSONBodyWithResponse(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, body SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableASINCountsResp, error)

	// CreateSponsoredBrandsAdGroupsWithBodyWithResponse request with any body
	CreateSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsAdGroupsResp, error)

	CreateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, body CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsAdGroupsResp, error)

	// UpdateSponsoredBrandsAdGroupsWithBodyWithResponse request with any body
	UpdateSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdGroupsResp, error)

	UpdateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, body UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdGroupsResp, error)

	// DeleteSponsoredBrandsAdGroupsWithBodyWithResponse request with any body
	DeleteSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdGroupsResp, error)

	DeleteSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, body DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdGroupsResp, error)

	// ListSponsoredBrandsAdGroupsWithBodyWithResponse request with any body
	ListSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdGroupsResp, error)

	ListSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, body ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdGroupsResp, error)

	// UpdateSponsoredBrandsAdsWithBodyWithResponse request with any body
	UpdateSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdsResp, error)

	UpdateSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, body UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdsResp, error)

	// CreateSponsoredBrandsBrandVideoAdsWithBodyWithResponse request with any body
	CreateSponsoredBrandsBrandVideoAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsBrandVideoAdsResp, error)

	CreateSponsoredBrandsBrandVideoAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, body CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsBrandVideoAdsResp, error)

	// DeleteSponsoredBrandsAdsWithBodyWithResponse request with any body
	DeleteSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdsResp, error)

	DeleteSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, body DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdsResp, error)

	// ListSponsoredBrandsAdsWithBodyWithResponse request with any body
	ListSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdsResp, error)

	ListSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdsParams, body ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdsResp, error)

	// CreateSponsoredBrandsProductCollectionAdsWithBodyWithResponse request with any body
	CreateSponsoredBrandsProductCollectionAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsProductCollectionAdsResp, error)

	CreateSponsoredBrandsProductCollectionAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, body CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsProductCollectionAdsResp, error)

	// CreateSponsoredBrandStoreSpotlightAdsWithBodyWithResponse request with any body
	CreateSponsoredBrandStoreSpotlightAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandStoreSpotlightAdsResp, error)

	CreateSponsoredBrandStoreSpotlightAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, body CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandStoreSpotlightAdsResp, error)

	// CreateSponsoredBrandsVideoAdsWithBodyWithResponse request with any body
	CreateSponsoredBrandsVideoAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsVideoAdsResp, error)

	CreateSponsoredBrandsVideoAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, body CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsVideoAdsResp, error)

	// CreateSponsoredBrandsCampaignsWithBodyWithResponse request with any body
	CreateSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsCampaignsResp, error)

	CreateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, body CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsCampaignsResp, error)

	// UpdateSponsoredBrandsCampaignsWithBodyWithResponse request with any body
	UpdateSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsCampaignsResp, error)

	UpdateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, body UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsCampaignsResp, error)

	// DeleteSponsoredBrandsCampaignsWithBodyWithResponse request with any body
	DeleteSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsCampaignsResp, error)

	DeleteSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, body DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsCampaignsResp, error)

	// ListSponsoredBrandsCampaignsWithBodyWithResponse request with any body
	ListSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsCampaignsResp, error)

	ListSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, body ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsCampaignsResp, error)
}

type CreateBrandVideoCreativeResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbAdCreativeResourceV4JSON200 *CreateBrandVideoCreativeResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON409 *ConflictStateExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateBrandVideoCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBrandVideoCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCreativesResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbAdCreativeResourceV4JSON200 *ListCreativesResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON404 *NotFoundExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductCollectionCreativeResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbAdCreativeResourceV4JSON200 *CreateProductCollectionCreativeResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON409 *ConflictStateExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateProductCollectionCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductCollectionCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStoreSpotlightCreativeResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbAdCreativeResourceV4JSON200 *CreateStoreSpotlightCreativeResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON409 *ConflictStateExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateStoreSpotlightCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStoreSpotlightCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVideoCreativeResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbAdCreativeResourceV4JSON200 *CreateVideoCreativeResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON409 *ConflictStateExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbAdCreativeResourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateVideoCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVideoCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSBBudgetRulesForAdvertiserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSBBudgetRulesForAdvertiserResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetSBBudgetRulesForAdvertiserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSBBudgetRulesForAdvertiserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBudgetRulesForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateBudgetRulesForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBudgetRulesForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBudgetRulesForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *UpdateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r UpdateBudgetRulesForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBudgetRulesForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRuleByRuleIdForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSBBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetBudgetRuleByRuleIdForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRuleByRuleIdForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsAssociatedWithSBBudgetRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SBGetAssociatedCampaignsResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetCampaignsAssociatedWithSBBudgetRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsAssociatedWithSBBudgetRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SbCampaignsBudgetUsageResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndSbcampaignbudgetusageV1JSON207 *BudgetUsageCampaignResponse
	JSON400                                      *BudgetUsageError
	JSON401                                      *BudgetUsageError
	JSON403                                      *BudgetUsageError
	JSON422                                      *BudgetUsageError
	JSON429                                      *BudgetUsageError
	JSON500                                      *BudgetUsageError
}

// Status returns HTTPResponse.Status
func (r SbCampaignsBudgetUsageResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SbCampaignsBudgetUsageResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRecommendationsResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndSbbudgetrecommendationV4JSON207 *GetBudgetRecommendationsResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON415 *UnsupportedMediaTypeExceptionResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON422 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbbudgetrecommendationV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r GetBudgetRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBGetBudgetRulesRecommendationResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndSbbudgetrulesrecommendationV3JSON200 *SBBudgetRulesRecommendationEventResponse
	ApplicationvndSbbudgetrulesrecommendationV3JSON400 *SBBudgetRulesRecommendationError
	ApplicationvndSbbudgetrulesrecommendationV3JSON429 *SBBudgetRulesRecommendationError
	ApplicationvndSbbudgetrulesrecommendationV3JSON500 *SBBudgetRulesRecommendationError
}

// Status returns HTTPResponse.Status
func (r SBGetBudgetRulesRecommendationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBGetBudgetRulesRecommendationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBInsightsCampaignInsightsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSbinsightsV4JSON200 *SBInsightsCampaignInsightsResponseContent
	ApplicationvndSbinsightsV4JSON400 *SBInsightsBadRequestExceptionResponseContent
	ApplicationvndSbinsightsV4JSON401 *SBInsightsUnauthorizedExceptionResponseContent
	ApplicationvndSbinsightsV4JSON422 *SBInsightsUnprocessableEntityExceptionResponseContent
	ApplicationvndSbinsightsV4JSON429 *SBInsightsThrottlingExceptionResponseContent
	ApplicationvndSbinsightsV4JSON500 *SBInsightsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r SBInsightsCampaignInsightsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBInsightsCampaignInsightsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAssociatedBudgetRulesForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SBListAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r ListAssociatedBudgetRulesForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssociatedBudgetRulesForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssociatedBudgetRulesForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateAssociatedBudgetRulesForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssociatedBudgetRulesForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleBasedBudgetHistoryForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SBBudgetHistory
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetRuleBasedBudgetHistoryForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleBasedBudgetHistoryForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateAssociatedBudgetRuleForSBCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisassociateAssociatedBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r DisassociateAssociatedBudgetRuleForSBCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateAssociatedBudgetRuleForSBCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBTargetingGetNegativeBrandsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSbtargetingV4JSON200 *SBTargetingGetNegativeBrandsResponseContent
	ApplicationvndSbtargetingV4JSON400 *SBTargetingBadRequestExceptionResponseContent
	ApplicationvndSbtargetingV4JSON401 *SBTargetingUnauthorizedExceptionResponseContent
	ApplicationvndSbtargetingV4JSON403 *SBTargetingAccessDeniedExceptionResponseContent
	ApplicationvndSbtargetingV4JSON429 *SBTargetingThrottlingExceptionResponseContent
	ApplicationvndSbtargetingV4JSON500 *SBTargetingInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r SBTargetingGetNegativeBrandsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBTargetingGetNegativeBrandsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeadlineRecommendationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HeadlineSuggestionResponse
	JSON400      *ModerationError
	JSON401      *ModerationError
	JSON422      *ModerationError
	JSON429      *ModerationError
	JSON500      *ModerationError
}

// Status returns HTTPResponse.Status
func (r GetHeadlineRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeadlineRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeywordRecommendationsResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndSbkeywordrecommendationV3JSON200 *SBKeywordRecommendationResponse
	ApplicationvndSbkeywordrecommendationV3JSON400 *SBKeywordRecommendationError
	ApplicationvndSbkeywordrecommendationV3JSON429 *SBKeywordRecommendationError
	ApplicationvndSbkeywordrecommendationV3JSON500 *SBKeywordRecommendationError
}

// Status returns HTTPResponse.Status
func (r GetKeywordRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeywordRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBTargetingGetTargetableCategoriesResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSbtargetingV4JSON200 *SBTargetingGetTargetableCategoriesResponseContent
	ApplicationvndSbtargetingV4JSON400 *SBTargetingBadRequestExceptionResponseContent
	ApplicationvndSbtargetingV4JSON401 *SBTargetingUnauthorizedExceptionResponseContent
	ApplicationvndSbtargetingV4JSON429 *SBTargetingThrottlingExceptionResponseContent
	ApplicationvndSbtargetingV4JSON500 *SBTargetingInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r SBTargetingGetTargetableCategoriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBTargetingGetTargetableCategoriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBTargetingGetRefinementsForCategoryResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSbtargetingV4JSON200 *SBTargetingGetRefinementsForCategoryResponseContent
	ApplicationvndSbtargetingV4JSON400 *SBTargetingBadRequestExceptionResponseContent
	ApplicationvndSbtargetingV4JSON401 *SBTargetingUnauthorizedExceptionResponseContent
	ApplicationvndSbtargetingV4JSON429 *SBTargetingThrottlingExceptionResponseContent
	ApplicationvndSbtargetingV4JSON500 *SBTargetingInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r SBTargetingGetRefinementsForCategoryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBTargetingGetRefinementsForCategoryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SBTargetingGetTargetableASINCountsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSbtargetingV4JSON200 *SBTargetingGetTargetableASINCountsResponseContent
	ApplicationvndSbtargetingV4JSON400 *SBTargetingBadRequestExceptionResponseContent
	ApplicationvndSbtargetingV4JSON401 *SBTargetingUnauthorizedExceptionResponseContent
	ApplicationvndSbtargetingV4JSON422 *SBTargetingUnprocessableEntityExceptionResponseContent
	ApplicationvndSbtargetingV4JSON429 *SBTargetingThrottlingExceptionResponseContent
	ApplicationvndSbtargetingV4JSON500 *SBTargetingInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r SBTargetingGetTargetableASINCountsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SBTargetingGetTargetableASINCountsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandsAdGroupsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbadgroupresourceV4JSON207 *CreateSponsoredBrandsAdGroupsResponseContent
	ApplicationvndSbadgroupresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredBrandsAdGroupsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbadgroupresourceV4JSON207 *UpdateSponsoredBrandsAdGroupsResponseContent
	ApplicationvndSbadgroupresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredBrandsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredBrandsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredBrandsAdGroupsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbadgroupresourceV4JSON207 *DeleteSponsoredBrandsAdGroupsResponseContent
	ApplicationvndSbadgroupresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredBrandsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredBrandsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredBrandsAdGroupsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbadgroupresourceV4JSON200 *ListSponsoredBrandsAdGroupsResponseContent
	ApplicationvndSbadgroupresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadgroupresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredBrandsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredBrandsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredBrandsAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *UpdateSponsoredBrandsAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredBrandsAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredBrandsAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandsBrandVideoAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *CreateSponsoredBrandsBrandVideoAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandsBrandVideoAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandsBrandVideoAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredBrandsAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *DeleteSponsoredBrandsAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredBrandsAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredBrandsAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredBrandsAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON200 *ListSponsoredBrandsAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredBrandsAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredBrandsAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandsProductCollectionAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *CreateSponsoredBrandsProductCollectionAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandsProductCollectionAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandsProductCollectionAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandStoreSpotlightAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *CreateSponsoredBrandStoreSpotlightAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandStoreSpotlightAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandStoreSpotlightAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandsVideoAdsResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbadresourceV4JSON207 *CreateSponsoredBrandsVideoAdsResponseContent
	ApplicationvndSbadresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbadresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbadresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbadresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandsVideoAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandsVideoAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredBrandsCampaignsResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndSbcampaignresourceV4JSON207 *CreateSponsoredBrandsCampaignsResponseContent
	ApplicationvndSbcampaignresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredBrandsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredBrandsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredBrandsCampaignsResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndSbcampaignresourceV4JSON207 *UpdateSponsoredBrandsCampaignsResponseContent
	ApplicationvndSbcampaignresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredBrandsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredBrandsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredBrandsCampaignsResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndSbcampaignresourceV4JSON207 *DeleteSponsoredBrandsCampaignsResponseContent
	ApplicationvndSbcampaignresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredBrandsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredBrandsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredBrandsCampaignsResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndSbcampaignresourceV4JSON200 *ListSponsoredBrandsCampaignsResponseContent
	ApplicationvndSbcampaignresourceV4JSON400 *InvalidArgumentExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON401 *UnauthorizedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON403 *AccessDeniedExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON429 *ThrottlingExceptionResponseContent
	ApplicationvndSbcampaignresourceV4JSON500 *InternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredBrandsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredBrandsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateBrandVideoCreativeWithBodyWithResponse request with arbitrary body returning *CreateBrandVideoCreativeResp
func (c *ClientWithResponses) CreateBrandVideoCreativeWithBodyWithResponse(ctx context.Context, params *CreateBrandVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBrandVideoCreativeResp, error) {
	rsp, err := c.CreateBrandVideoCreativeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrandVideoCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateBrandVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateBrandVideoCreativeParams, body CreateBrandVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBrandVideoCreativeResp, error) {
	rsp, err := c.CreateBrandVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBrandVideoCreativeResp(rsp)
}

// ListCreativesWithBodyWithResponse request with arbitrary body returning *ListCreativesResp
func (c *ClientWithResponses) ListCreativesWithBodyWithResponse(ctx context.Context, params *ListCreativesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCreativesResp, error) {
	rsp, err := c.ListCreativesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCreativesResp(rsp)
}

func (c *ClientWithResponses) ListCreativesWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListCreativesParams, body ListCreativesApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCreativesResp, error) {
	rsp, err := c.ListCreativesWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCreativesResp(rsp)
}

// CreateProductCollectionCreativeWithBodyWithResponse request with arbitrary body returning *CreateProductCollectionCreativeResp
func (c *ClientWithResponses) CreateProductCollectionCreativeWithBodyWithResponse(ctx context.Context, params *CreateProductCollectionCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductCollectionCreativeResp, error) {
	rsp, err := c.CreateProductCollectionCreativeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductCollectionCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateProductCollectionCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateProductCollectionCreativeParams, body CreateProductCollectionCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductCollectionCreativeResp, error) {
	rsp, err := c.CreateProductCollectionCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductCollectionCreativeResp(rsp)
}

// CreateStoreSpotlightCreativeWithBodyWithResponse request with arbitrary body returning *CreateStoreSpotlightCreativeResp
func (c *ClientWithResponses) CreateStoreSpotlightCreativeWithBodyWithResponse(ctx context.Context, params *CreateStoreSpotlightCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStoreSpotlightCreativeResp, error) {
	rsp, err := c.CreateStoreSpotlightCreativeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStoreSpotlightCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateStoreSpotlightCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateStoreSpotlightCreativeParams, body CreateStoreSpotlightCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStoreSpotlightCreativeResp, error) {
	rsp, err := c.CreateStoreSpotlightCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStoreSpotlightCreativeResp(rsp)
}

// CreateVideoCreativeWithBodyWithResponse request with arbitrary body returning *CreateVideoCreativeResp
func (c *ClientWithResponses) CreateVideoCreativeWithBodyWithResponse(ctx context.Context, params *CreateVideoCreativeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVideoCreativeResp, error) {
	rsp, err := c.CreateVideoCreativeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVideoCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateVideoCreativeParams, body CreateVideoCreativeApplicationVndSbAdCreativeResourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVideoCreativeResp, error) {
	rsp, err := c.CreateVideoCreativeWithApplicationVndSbAdCreativeResourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVideoCreativeResp(rsp)
}

// GetSBBudgetRulesForAdvertiserWithResponse request returning *GetSBBudgetRulesForAdvertiserResp
func (c *ClientWithResponses) GetSBBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSBBudgetRulesForAdvertiserParams, reqEditors ...RequestEditorFn) (*GetSBBudgetRulesForAdvertiserResp, error) {
	rsp, err := c.GetSBBudgetRulesForAdvertiser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSBBudgetRulesForAdvertiserResp(rsp)
}

// CreateBudgetRulesForSBCampaignsWithBodyWithResponse request with arbitrary body returning *CreateBudgetRulesForSBCampaignsResp
func (c *ClientWithResponses) CreateBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSBCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSBCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateBudgetRulesForSBCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSBCampaignsParams, body CreateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSBCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSBCampaignsResp(rsp)
}

// UpdateBudgetRulesForSBCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateBudgetRulesForSBCampaignsResp
func (c *ClientWithResponses) UpdateBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSBCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSBCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateBudgetRulesForSBCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSBCampaignsParams, body UpdateBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSBCampaigns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSBCampaignsResp(rsp)
}

// GetBudgetRuleByRuleIdForSBCampaignsWithResponse request returning *GetBudgetRuleByRuleIdForSBCampaignsResp
func (c *ClientWithResponses) GetBudgetRuleByRuleIdForSBCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSBCampaignsParams, reqEditors ...RequestEditorFn) (*GetBudgetRuleByRuleIdForSBCampaignsResp, error) {
	rsp, err := c.GetBudgetRuleByRuleIdForSBCampaigns(ctx, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRuleByRuleIdForSBCampaignsResp(rsp)
}

// GetCampaignsAssociatedWithSBBudgetRuleWithResponse request returning *GetCampaignsAssociatedWithSBBudgetRuleResp
func (c *ClientWithResponses) GetCampaignsAssociatedWithSBBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSBBudgetRuleParams, reqEditors ...RequestEditorFn) (*GetCampaignsAssociatedWithSBBudgetRuleResp, error) {
	rsp, err := c.GetCampaignsAssociatedWithSBBudgetRule(ctx, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsAssociatedWithSBBudgetRuleResp(rsp)
}

// SbCampaignsBudgetUsageWithBodyWithResponse request with arbitrary body returning *SbCampaignsBudgetUsageResp
func (c *ClientWithResponses) SbCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SbCampaignsBudgetUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SbCampaignsBudgetUsageResp, error) {
	rsp, err := c.SbCampaignsBudgetUsageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSbCampaignsBudgetUsageResp(rsp)
}

func (c *ClientWithResponses) SbCampaignsBudgetUsageWithApplicationVndSbcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SbCampaignsBudgetUsageParams, body SbCampaignsBudgetUsageApplicationVndSbcampaignbudgetusageV1PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SbCampaignsBudgetUsageResp, error) {
	rsp, err := c.SbCampaignsBudgetUsageWithApplicationVndSbcampaignbudgetusageV1PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSbCampaignsBudgetUsageResp(rsp)
}

// GetBudgetRecommendationsWithBodyWithResponse request with arbitrary body returning *GetBudgetRecommendationsResp
func (c *ClientWithResponses) GetBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetBudgetRecommendationsResp, error) {
	rsp, err := c.GetBudgetRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetBudgetRecommendationsWithApplicationVndSbbudgetrecommendationV4PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndSbbudgetrecommendationV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetBudgetRecommendationsResp, error) {
	rsp, err := c.GetBudgetRecommendationsWithApplicationVndSbbudgetrecommendationV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationsResp(rsp)
}

// SBGetBudgetRulesRecommendationWithBodyWithResponse request with arbitrary body returning *SBGetBudgetRulesRecommendationResp
func (c *ClientWithResponses) SBGetBudgetRulesRecommendationWithBodyWithResponse(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBGetBudgetRulesRecommendationResp, error) {
	rsp, err := c.SBGetBudgetRulesRecommendationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBGetBudgetRulesRecommendationResp(rsp)
}

func (c *ClientWithResponses) SBGetBudgetRulesRecommendationWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *SBGetBudgetRulesRecommendationParams, body SBGetBudgetRulesRecommendationApplicationVndSbbudgetrulesrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBGetBudgetRulesRecommendationResp, error) {
	rsp, err := c.SBGetBudgetRulesRecommendationWithApplicationVndSbbudgetrulesrecommendationV3PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBGetBudgetRulesRecommendationResp(rsp)
}

// SBInsightsCampaignInsightsWithBodyWithResponse request with arbitrary body returning *SBInsightsCampaignInsightsResp
func (c *ClientWithResponses) SBInsightsCampaignInsightsWithBodyWithResponse(ctx context.Context, params *SBInsightsCampaignInsightsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBInsightsCampaignInsightsResp, error) {
	rsp, err := c.SBInsightsCampaignInsightsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBInsightsCampaignInsightsResp(rsp)
}

func (c *ClientWithResponses) SBInsightsCampaignInsightsWithApplicationVndSbinsightsV4PlusJSONBodyWithResponse(ctx context.Context, params *SBInsightsCampaignInsightsParams, body SBInsightsCampaignInsightsApplicationVndSbinsightsV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBInsightsCampaignInsightsResp, error) {
	rsp, err := c.SBInsightsCampaignInsightsWithApplicationVndSbinsightsV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBInsightsCampaignInsightsResp(rsp)
}

// ListAssociatedBudgetRulesForSBCampaignsWithResponse request returning *ListAssociatedBudgetRulesForSBCampaignsResp
func (c *ClientWithResponses) ListAssociatedBudgetRulesForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *ListAssociatedBudgetRulesForSBCampaignsParams, reqEditors ...RequestEditorFn) (*ListAssociatedBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.ListAssociatedBudgetRulesForSBCampaigns(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAssociatedBudgetRulesForSBCampaignsResp(rsp)
}

// CreateAssociatedBudgetRulesForSBCampaignsWithBodyWithResponse request with arbitrary body returning *CreateAssociatedBudgetRulesForSBCampaignsResp
func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSBCampaignsWithBodyWithResponse(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSBCampaignsWithBody(ctx, campaignId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSBCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *CreateAssociatedBudgetRulesForSBCampaignsParams, body CreateAssociatedBudgetRulesForSBCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociatedBudgetRulesForSBCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSBCampaigns(ctx, campaignId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSBCampaignsResp(rsp)
}

// GetRuleBasedBudgetHistoryForSBCampaignsWithResponse request returning *GetRuleBasedBudgetHistoryForSBCampaignsResp
func (c *ClientWithResponses) GetRuleBasedBudgetHistoryForSBCampaignsWithResponse(ctx context.Context, campaignId string, params *GetRuleBasedBudgetHistoryForSBCampaignsParams, reqEditors ...RequestEditorFn) (*GetRuleBasedBudgetHistoryForSBCampaignsResp, error) {
	rsp, err := c.GetRuleBasedBudgetHistoryForSBCampaigns(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleBasedBudgetHistoryForSBCampaignsResp(rsp)
}

// DisassociateAssociatedBudgetRuleForSBCampaignsWithResponse request returning *DisassociateAssociatedBudgetRuleForSBCampaignsResp
func (c *ClientWithResponses) DisassociateAssociatedBudgetRuleForSBCampaignsWithResponse(ctx context.Context, campaignId string, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSBCampaignsParams, reqEditors ...RequestEditorFn) (*DisassociateAssociatedBudgetRuleForSBCampaignsResp, error) {
	rsp, err := c.DisassociateAssociatedBudgetRuleForSBCampaigns(ctx, campaignId, budgetRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateAssociatedBudgetRuleForSBCampaignsResp(rsp)
}

// SBTargetingGetNegativeBrandsWithResponse request returning *SBTargetingGetNegativeBrandsResp
func (c *ClientWithResponses) SBTargetingGetNegativeBrandsWithResponse(ctx context.Context, params *SBTargetingGetNegativeBrandsParams, reqEditors ...RequestEditorFn) (*SBTargetingGetNegativeBrandsResp, error) {
	rsp, err := c.SBTargetingGetNegativeBrands(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBTargetingGetNegativeBrandsResp(rsp)
}

// GetHeadlineRecommendationsWithBodyWithResponse request with arbitrary body returning *GetHeadlineRecommendationsResp
func (c *ClientWithResponses) GetHeadlineRecommendationsWithBodyWithResponse(ctx context.Context, params *GetHeadlineRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsResp, error) {
	rsp, err := c.GetHeadlineRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadlineRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetHeadlineRecommendationsWithResponse(ctx context.Context, params *GetHeadlineRecommendationsParams, body GetHeadlineRecommendationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHeadlineRecommendationsResp, error) {
	rsp, err := c.GetHeadlineRecommendations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadlineRecommendationsResp(rsp)
}

// GetKeywordRecommendationsWithBodyWithResponse request with arbitrary body returning *GetKeywordRecommendationsResp
func (c *ClientWithResponses) GetKeywordRecommendationsWithBodyWithResponse(ctx context.Context, params *GetKeywordRecommendationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetKeywordRecommendationsResp, error) {
	rsp, err := c.GetKeywordRecommendationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeywordRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetKeywordRecommendationsWithApplicationVndSbkeywordrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetKeywordRecommendationsParams, body GetKeywordRecommendationsApplicationVndSbkeywordrecommendationV3PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetKeywordRecommendationsResp, error) {
	rsp, err := c.GetKeywordRecommendationsWithApplicationVndSbkeywordrecommendationV3PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeywordRecommendationsResp(rsp)
}

// SBTargetingGetTargetableCategoriesWithResponse request returning *SBTargetingGetTargetableCategoriesResp
func (c *ClientWithResponses) SBTargetingGetTargetableCategoriesWithResponse(ctx context.Context, params *SBTargetingGetTargetableCategoriesParams, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableCategoriesResp, error) {
	rsp, err := c.SBTargetingGetTargetableCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBTargetingGetTargetableCategoriesResp(rsp)
}

// SBTargetingGetRefinementsForCategoryWithResponse request returning *SBTargetingGetRefinementsForCategoryResp
func (c *ClientWithResponses) SBTargetingGetRefinementsForCategoryWithResponse(ctx context.Context, categoryRefinementId string, params *SBTargetingGetRefinementsForCategoryParams, reqEditors ...RequestEditorFn) (*SBTargetingGetRefinementsForCategoryResp, error) {
	rsp, err := c.SBTargetingGetRefinementsForCategory(ctx, categoryRefinementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBTargetingGetRefinementsForCategoryResp(rsp)
}

// SBTargetingGetTargetableASINCountsWithBodyWithResponse request with arbitrary body returning *SBTargetingGetTargetableASINCountsResp
func (c *ClientWithResponses) SBTargetingGetTargetableASINCountsWithBodyWithResponse(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableASINCountsResp, error) {
	rsp, err := c.SBTargetingGetTargetableASINCountsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBTargetingGetTargetableASINCountsResp(rsp)
}

func (c *ClientWithResponses) SBTargetingGetTargetableASINCountsWithApplicationVndSbtargetingV4PlusJSONBodyWithResponse(ctx context.Context, params *SBTargetingGetTargetableASINCountsParams, body SBTargetingGetTargetableASINCountsApplicationVndSbtargetingV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*SBTargetingGetTargetableASINCountsResp, error) {
	rsp, err := c.SBTargetingGetTargetableASINCountsWithApplicationVndSbtargetingV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSBTargetingGetTargetableASINCountsResp(rsp)
}

// CreateSponsoredBrandsAdGroupsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandsAdGroupsResp
func (c *ClientWithResponses) CreateSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.CreateSponsoredBrandsAdGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsAdGroupsParams, body CreateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.CreateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsAdGroupsResp(rsp)
}

// UpdateSponsoredBrandsAdGroupsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredBrandsAdGroupsResp
func (c *ClientWithResponses) UpdateSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsAdGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdGroupsParams, body UpdateSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsAdGroupsResp(rsp)
}

// DeleteSponsoredBrandsAdGroupsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredBrandsAdGroupsResp
func (c *ClientWithResponses) DeleteSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsAdGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdGroupsParams, body DeleteSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsAdGroupsResp(rsp)
}

// ListSponsoredBrandsAdGroupsWithBodyWithResponse request with arbitrary body returning *ListSponsoredBrandsAdGroupsResp
func (c *ClientWithResponses) ListSponsoredBrandsAdGroupsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.ListSponsoredBrandsAdGroupsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdGroupsParams, body ListSponsoredBrandsAdGroupsApplicationVndSbadgroupresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdGroupsResp, error) {
	rsp, err := c.ListSponsoredBrandsAdGroupsWithApplicationVndSbadgroupresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsAdGroupsResp(rsp)
}

// UpdateSponsoredBrandsAdsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredBrandsAdsResp
func (c *ClientWithResponses) UpdateSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsAdsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsAdsParams, body UpdateSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsAdsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsAdsResp(rsp)
}

// CreateSponsoredBrandsBrandVideoAdsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandsBrandVideoAdsResp
func (c *ClientWithResponses) CreateSponsoredBrandsBrandVideoAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsBrandVideoAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsBrandVideoAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsBrandVideoAdsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandsBrandVideoAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsBrandVideoAdsParams, body CreateSponsoredBrandsBrandVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsBrandVideoAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsBrandVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsBrandVideoAdsResp(rsp)
}

// DeleteSponsoredBrandsAdsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredBrandsAdsResp
func (c *ClientWithResponses) DeleteSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsAdsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsAdsParams, body DeleteSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsAdsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsAdsResp(rsp)
}

// ListSponsoredBrandsAdsWithBodyWithResponse request with arbitrary body returning *ListSponsoredBrandsAdsResp
func (c *ClientWithResponses) ListSponsoredBrandsAdsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdsResp, error) {
	rsp, err := c.ListSponsoredBrandsAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsAdsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsAdsParams, body ListSponsoredBrandsAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsAdsResp, error) {
	rsp, err := c.ListSponsoredBrandsAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsAdsResp(rsp)
}

// CreateSponsoredBrandsProductCollectionAdsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandsProductCollectionAdsResp
func (c *ClientWithResponses) CreateSponsoredBrandsProductCollectionAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsProductCollectionAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsProductCollectionAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsProductCollectionAdsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandsProductCollectionAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsProductCollectionAdsParams, body CreateSponsoredBrandsProductCollectionAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsProductCollectionAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsProductCollectionAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsProductCollectionAdsResp(rsp)
}

// CreateSponsoredBrandStoreSpotlightAdsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandStoreSpotlightAdsResp
func (c *ClientWithResponses) CreateSponsoredBrandStoreSpotlightAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandStoreSpotlightAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandStoreSpotlightAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandStoreSpotlightAdsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandStoreSpotlightAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandStoreSpotlightAdsParams, body CreateSponsoredBrandStoreSpotlightAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandStoreSpotlightAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandStoreSpotlightAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandStoreSpotlightAdsResp(rsp)
}

// CreateSponsoredBrandsVideoAdsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandsVideoAdsResp
func (c *ClientWithResponses) CreateSponsoredBrandsVideoAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsVideoAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsVideoAdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsVideoAdsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandsVideoAdsWithApplicationVndSbadresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsVideoAdsParams, body CreateSponsoredBrandsVideoAdsApplicationVndSbadresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsVideoAdsResp, error) {
	rsp, err := c.CreateSponsoredBrandsVideoAdsWithApplicationVndSbadresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsVideoAdsResp(rsp)
}

// CreateSponsoredBrandsCampaignsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredBrandsCampaignsResp
func (c *ClientWithResponses) CreateSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.CreateSponsoredBrandsCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredBrandsCampaignsParams, body CreateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.CreateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredBrandsCampaignsResp(rsp)
}

// UpdateSponsoredBrandsCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredBrandsCampaignsResp
func (c *ClientWithResponses) UpdateSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredBrandsCampaignsParams, body UpdateSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.UpdateSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredBrandsCampaignsResp(rsp)
}

// DeleteSponsoredBrandsCampaignsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredBrandsCampaignsResp
func (c *ClientWithResponses) DeleteSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsCampaignsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredBrandsCampaignsParams, body DeleteSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.DeleteSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredBrandsCampaignsResp(rsp)
}

// ListSponsoredBrandsCampaignsWithBodyWithResponse request with arbitrary body returning *ListSponsoredBrandsCampaignsResp
func (c *ClientWithResponses) ListSponsoredBrandsCampaignsWithBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.ListSponsoredBrandsCampaignsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsCampaignsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredBrandsCampaignsParams, body ListSponsoredBrandsCampaignsApplicationVndSbcampaignresourceV4PlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSponsoredBrandsCampaignsResp, error) {
	rsp, err := c.ListSponsoredBrandsCampaignsWithApplicationVndSbcampaignresourceV4PlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredBrandsCampaignsResp(rsp)
}

// ParseCreateBrandVideoCreativeResp parses an HTTP response from a CreateBrandVideoCreativeWithResponse call
func ParseCreateBrandVideoCreativeResp(rsp *http.Response) (*CreateBrandVideoCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBrandVideoCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateBrandVideoCreativeResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictStateExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseListCreativesResp parses an HTTP response from a ListCreativesWithResponse call
func ParseListCreativesResp(rsp *http.Response) (*ListCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreativesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProductCollectionCreativeResp parses an HTTP response from a CreateProductCollectionCreativeWithResponse call
func ParseCreateProductCollectionCreativeResp(rsp *http.Response) (*CreateProductCollectionCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductCollectionCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateProductCollectionCreativeResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictStateExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateStoreSpotlightCreativeResp parses an HTTP response from a CreateStoreSpotlightCreativeWithResponse call
func ParseCreateStoreSpotlightCreativeResp(rsp *http.Response) (*CreateStoreSpotlightCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStoreSpotlightCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateStoreSpotlightCreativeResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictStateExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateVideoCreativeResp parses an HTTP response from a CreateVideoCreativeWithResponse call
func ParseCreateVideoCreativeResp(rsp *http.Response) (*CreateVideoCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVideoCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateVideoCreativeResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictStateExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbAdCreativeResourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseGetSBBudgetRulesForAdvertiserResp parses an HTTP response from a GetSBBudgetRulesForAdvertiserWithResponse call
func ParseGetSBBudgetRulesForAdvertiserResp(rsp *http.Response) (*GetSBBudgetRulesForAdvertiserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSBBudgetRulesForAdvertiserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSBBudgetRulesForAdvertiserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateBudgetRulesForSBCampaignsResp parses an HTTP response from a CreateBudgetRulesForSBCampaignsWithResponse call
func ParseCreateBudgetRulesForSBCampaignsResp(rsp *http.Response) (*CreateBudgetRulesForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBudgetRulesForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateBudgetRulesForSBCampaignsResp parses an HTTP response from a UpdateBudgetRulesForSBCampaignsWithResponse call
func ParseUpdateBudgetRulesForSBCampaignsResp(rsp *http.Response) (*UpdateBudgetRulesForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBudgetRulesForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRuleByRuleIdForSBCampaignsResp parses an HTTP response from a GetBudgetRuleByRuleIdForSBCampaignsWithResponse call
func ParseGetBudgetRuleByRuleIdForSBCampaignsResp(rsp *http.Response) (*GetBudgetRuleByRuleIdForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRuleByRuleIdForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSBBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignsAssociatedWithSBBudgetRuleResp parses an HTTP response from a GetCampaignsAssociatedWithSBBudgetRuleWithResponse call
func ParseGetCampaignsAssociatedWithSBBudgetRuleResp(rsp *http.Response) (*GetCampaignsAssociatedWithSBBudgetRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsAssociatedWithSBBudgetRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBGetAssociatedCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSbCampaignsBudgetUsageResp parses an HTTP response from a SbCampaignsBudgetUsageWithResponse call
func ParseSbCampaignsBudgetUsageResp(rsp *http.Response) (*SbCampaignsBudgetUsageResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SbCampaignsBudgetUsageResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BudgetUsageCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignbudgetusageV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRecommendationsResp parses an HTTP response from a GetBudgetRecommendationsWithResponse call
func ParseGetBudgetRecommendationsResp(rsp *http.Response) (*GetBudgetRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest GetBudgetRecommendationsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrecommendationV4JSON500 = &dest

	}

	return response, nil
}

// ParseSBGetBudgetRulesRecommendationResp parses an HTTP response from a SBGetBudgetRulesRecommendationWithResponse call
func ParseSBGetBudgetRulesRecommendationResp(rsp *http.Response) (*SBGetBudgetRulesRecommendationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBGetBudgetRulesRecommendationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBBudgetRulesRecommendationEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrulesrecommendationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrulesrecommendationV3JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrulesrecommendationV3JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbudgetrulesrecommendationV3JSON500 = &dest

	}

	return response, nil
}

// ParseSBInsightsCampaignInsightsResp parses an HTTP response from a SBInsightsCampaignInsightsWithResponse call
func ParseSBInsightsCampaignInsightsResp(rsp *http.Response) (*SBInsightsCampaignInsightsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBInsightsCampaignInsightsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBInsightsCampaignInsightsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBInsightsBadRequestExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SBInsightsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SBInsightsUnprocessableEntityExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBInsightsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBInsightsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbinsightsV4JSON500 = &dest

	}

	return response, nil
}

// ParseListAssociatedBudgetRulesForSBCampaignsResp parses an HTTP response from a ListAssociatedBudgetRulesForSBCampaignsWithResponse call
func ParseListAssociatedBudgetRulesForSBCampaignsResp(rsp *http.Response) (*ListAssociatedBudgetRulesForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssociatedBudgetRulesForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBListAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAssociatedBudgetRulesForSBCampaignsResp parses an HTTP response from a CreateAssociatedBudgetRulesForSBCampaignsWithResponse call
func ParseCreateAssociatedBudgetRulesForSBCampaignsResp(rsp *http.Response) (*CreateAssociatedBudgetRulesForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssociatedBudgetRulesForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRuleBasedBudgetHistoryForSBCampaignsResp parses an HTTP response from a GetRuleBasedBudgetHistoryForSBCampaignsWithResponse call
func ParseGetRuleBasedBudgetHistoryForSBCampaignsResp(rsp *http.Response) (*GetRuleBasedBudgetHistoryForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleBasedBudgetHistoryForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBBudgetHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDisassociateAssociatedBudgetRuleForSBCampaignsResp parses an HTTP response from a DisassociateAssociatedBudgetRuleForSBCampaignsWithResponse call
func ParseDisassociateAssociatedBudgetRuleForSBCampaignsResp(rsp *http.Response) (*DisassociateAssociatedBudgetRuleForSBCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateAssociatedBudgetRuleForSBCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisassociateAssociatedBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSBTargetingGetNegativeBrandsResp parses an HTTP response from a SBTargetingGetNegativeBrandsWithResponse call
func ParseSBTargetingGetNegativeBrandsResp(rsp *http.Response) (*SBTargetingGetNegativeBrandsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBTargetingGetNegativeBrandsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingGetNegativeBrandsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBTargetingBadRequestExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SBTargetingUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SBTargetingAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBTargetingThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBTargetingInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON500 = &dest

	}

	return response, nil
}

// ParseGetHeadlineRecommendationsResp parses an HTTP response from a GetHeadlineRecommendationsWithResponse call
func ParseGetHeadlineRecommendationsResp(rsp *http.Response) (*GetHeadlineRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeadlineRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeadlineSuggestionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModerationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModerationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ModerationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ModerationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModerationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetKeywordRecommendationsResp parses an HTTP response from a GetKeywordRecommendationsWithResponse call
func ParseGetKeywordRecommendationsResp(rsp *http.Response) (*GetKeywordRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeywordRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBKeywordRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordrecommendationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBKeywordRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordrecommendationV3JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBKeywordRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordrecommendationV3JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBKeywordRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordrecommendationV3JSON500 = &dest

	}

	return response, nil
}

// ParseSBTargetingGetTargetableCategoriesResp parses an HTTP response from a SBTargetingGetTargetableCategoriesWithResponse call
func ParseSBTargetingGetTargetableCategoriesResp(rsp *http.Response) (*SBTargetingGetTargetableCategoriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBTargetingGetTargetableCategoriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingGetTargetableCategoriesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBTargetingBadRequestExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SBTargetingUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBTargetingThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBTargetingInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON500 = &dest

	}

	return response, nil
}

// ParseSBTargetingGetRefinementsForCategoryResp parses an HTTP response from a SBTargetingGetRefinementsForCategoryWithResponse call
func ParseSBTargetingGetRefinementsForCategoryResp(rsp *http.Response) (*SBTargetingGetRefinementsForCategoryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBTargetingGetRefinementsForCategoryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingGetRefinementsForCategoryResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBTargetingBadRequestExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SBTargetingUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBTargetingThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBTargetingInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON500 = &dest

	}

	return response, nil
}

// ParseSBTargetingGetTargetableASINCountsResp parses an HTTP response from a SBTargetingGetTargetableASINCountsWithResponse call
func ParseSBTargetingGetTargetableASINCountsResp(rsp *http.Response) (*SBTargetingGetTargetableASINCountsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SBTargetingGetTargetableASINCountsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingGetTargetableASINCountsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SBTargetingBadRequestExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SBTargetingUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SBTargetingUnprocessableEntityExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SBTargetingThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SBTargetingInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetingV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandsAdGroupsResp parses an HTTP response from a CreateSponsoredBrandsAdGroupsWithResponse call
func ParseCreateSponsoredBrandsAdGroupsResp(rsp *http.Response) (*CreateSponsoredBrandsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredBrandsAdGroupsResp parses an HTTP response from a UpdateSponsoredBrandsAdGroupsWithResponse call
func ParseUpdateSponsoredBrandsAdGroupsResp(rsp *http.Response) (*UpdateSponsoredBrandsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredBrandsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateSponsoredBrandsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredBrandsAdGroupsResp parses an HTTP response from a DeleteSponsoredBrandsAdGroupsWithResponse call
func ParseDeleteSponsoredBrandsAdGroupsResp(rsp *http.Response) (*DeleteSponsoredBrandsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredBrandsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DeleteSponsoredBrandsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredBrandsAdGroupsResp parses an HTTP response from a ListSponsoredBrandsAdGroupsWithResponse call
func ParseListSponsoredBrandsAdGroupsResp(rsp *http.Response) (*ListSponsoredBrandsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredBrandsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSponsoredBrandsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredBrandsAdsResp parses an HTTP response from a UpdateSponsoredBrandsAdsWithResponse call
func ParseUpdateSponsoredBrandsAdsResp(rsp *http.Response) (*UpdateSponsoredBrandsAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredBrandsAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateSponsoredBrandsAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandsBrandVideoAdsResp parses an HTTP response from a CreateSponsoredBrandsBrandVideoAdsWithResponse call
func ParseCreateSponsoredBrandsBrandVideoAdsResp(rsp *http.Response) (*CreateSponsoredBrandsBrandVideoAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandsBrandVideoAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandsBrandVideoAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredBrandsAdsResp parses an HTTP response from a DeleteSponsoredBrandsAdsWithResponse call
func ParseDeleteSponsoredBrandsAdsResp(rsp *http.Response) (*DeleteSponsoredBrandsAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredBrandsAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DeleteSponsoredBrandsAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredBrandsAdsResp parses an HTTP response from a ListSponsoredBrandsAdsWithResponse call
func ParseListSponsoredBrandsAdsResp(rsp *http.Response) (*ListSponsoredBrandsAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredBrandsAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSponsoredBrandsAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandsProductCollectionAdsResp parses an HTTP response from a CreateSponsoredBrandsProductCollectionAdsWithResponse call
func ParseCreateSponsoredBrandsProductCollectionAdsResp(rsp *http.Response) (*CreateSponsoredBrandsProductCollectionAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandsProductCollectionAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandsProductCollectionAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandStoreSpotlightAdsResp parses an HTTP response from a CreateSponsoredBrandStoreSpotlightAdsWithResponse call
func ParseCreateSponsoredBrandStoreSpotlightAdsResp(rsp *http.Response) (*CreateSponsoredBrandStoreSpotlightAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandStoreSpotlightAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandStoreSpotlightAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandsVideoAdsResp parses an HTTP response from a CreateSponsoredBrandsVideoAdsWithResponse call
func ParseCreateSponsoredBrandsVideoAdsResp(rsp *http.Response) (*CreateSponsoredBrandsVideoAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandsVideoAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandsVideoAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredBrandsCampaignsResp parses an HTTP response from a CreateSponsoredBrandsCampaignsWithResponse call
func ParseCreateSponsoredBrandsCampaignsResp(rsp *http.Response) (*CreateSponsoredBrandsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredBrandsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateSponsoredBrandsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredBrandsCampaignsResp parses an HTTP response from a UpdateSponsoredBrandsCampaignsWithResponse call
func ParseUpdateSponsoredBrandsCampaignsResp(rsp *http.Response) (*UpdateSponsoredBrandsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredBrandsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateSponsoredBrandsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredBrandsCampaignsResp parses an HTTP response from a DeleteSponsoredBrandsCampaignsWithResponse call
func ParseDeleteSponsoredBrandsCampaignsResp(rsp *http.Response) (*DeleteSponsoredBrandsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredBrandsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DeleteSponsoredBrandsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredBrandsCampaignsResp parses an HTTP response from a ListSponsoredBrandsCampaignsWithResponse call
func ParseListSponsoredBrandsCampaignsResp(rsp *http.Response) (*ListSponsoredBrandsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredBrandsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSponsoredBrandsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgumentExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignresourceV4JSON500 = &dest

	}

	return response, nil
}
