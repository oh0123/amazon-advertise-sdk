// Package partneropportunities provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package partneropportunities

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value.
const (
	PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2ValuePARTNER                   PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value = "PARTNER"
	PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2ValuePARTNERMANAGEDADBUSINESS  PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value = "PARTNER_MANAGED_AD_BUSINESS"
	PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2ValuePARTNERMANAGEDADVERTISERS PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value = "PARTNER_MANAGED_ADVERTISERS"
)

// Defines values for PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value.
const (
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueADAPIENDPOINTADOPTION  PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "AD_API_ENDPOINT_ADOPTION"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueCAMPAIGNOPTIMIZATION   PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "CAMPAIGN_OPTIMIZATION"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueCATEGORYINSIGHTS       PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "CATEGORY_INSIGHTS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueCLICKCREDITS           PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "CLICK_CREDITS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueDEALS                  PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "DEALS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueMARKETPLACEEXPANSION   PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "MARKETPLACE_EXPANSION"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueNEWTOBRANDINSIGHTS     PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "NEW_TO_BRAND_INSIGHTS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValuePARTNERGROWTH          PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "PARTNER_GROWTH"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValuePATHTOPURCHASEINSIGHTS PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "PATH_TO_PURCHASE_INSIGHTS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueRETAILINSIGHTS         PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "RETAIL_INSIGHTS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueSHAREOFVOICEINSIGHTS   PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "SHARE_OF_VOICE_INSIGHTS"
	PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2ValueUNLAUNCHEDASINS        PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value = "UNLAUNCHED_ASINS"
)

// Defines values for PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value.
const (
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueAMAZONDSP             PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "AMAZON_DSP"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueAMAZONLIVE            PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "AMAZON_LIVE"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValuePOSTS                 PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "POSTS"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSPONSOREDBRANDS       PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "SPONSORED_BRANDS"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSPONSOREDBRANDSVIDEO  PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "SPONSORED_BRANDS_VIDEO"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSPONSOREDDISPLAY      PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "SPONSORED_DISPLAY"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSPONSOREDDISPLAYVIDEO PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "SPONSORED_DISPLAY_VIDEO"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSPONSOREDPRODUCTS     PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesOpportunityProductFilterSummaryV1d2ValueSTORES                PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value = "STORES"
)

// Defines values for PartnerOpportunitiesOpportunityV1Objective.
const (
	PartnerOpportunitiesOpportunityV1ObjectiveAWARENESS       PartnerOpportunitiesOpportunityV1Objective = "AWARENESS"
	PartnerOpportunitiesOpportunityV1ObjectiveBRANDENGAGEMENT PartnerOpportunitiesOpportunityV1Objective = "BRAND_ENGAGEMENT"
	PartnerOpportunitiesOpportunityV1ObjectiveRETENTION       PartnerOpportunitiesOpportunityV1Objective = "RETENTION"
	PartnerOpportunitiesOpportunityV1ObjectiveSALES           PartnerOpportunitiesOpportunityV1Objective = "SALES"
)

// Defines values for PartnerOpportunitiesOpportunityV1Product.
const (
	PartnerOpportunitiesOpportunityV1ProductAMAZONDSP         PartnerOpportunitiesOpportunityV1Product = "AMAZON_DSP"
	PartnerOpportunitiesOpportunityV1ProductAMAZONLIVE        PartnerOpportunitiesOpportunityV1Product = "AMAZON_LIVE"
	PartnerOpportunitiesOpportunityV1ProductPOSTS             PartnerOpportunitiesOpportunityV1Product = "POSTS"
	PartnerOpportunitiesOpportunityV1ProductSPONSOREDBRANDS   PartnerOpportunitiesOpportunityV1Product = "SPONSORED_BRANDS"
	PartnerOpportunitiesOpportunityV1ProductSPONSOREDDISPLAY  PartnerOpportunitiesOpportunityV1Product = "SPONSORED_DISPLAY"
	PartnerOpportunitiesOpportunityV1ProductSPONSOREDPRODUCTS PartnerOpportunitiesOpportunityV1Product = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesOpportunityV1ProductSTORES            PartnerOpportunitiesOpportunityV1Product = "STORES"
	PartnerOpportunitiesOpportunityV1ProductVIDEOADS          PartnerOpportunitiesOpportunityV1Product = "VIDEO_ADS"
)

// Defines values for PartnerOpportunitiesOpportunityV1d1Objective.
const (
	PartnerOpportunitiesOpportunityV1d1ObjectiveAWARENESS       PartnerOpportunitiesOpportunityV1d1Objective = "AWARENESS"
	PartnerOpportunitiesOpportunityV1d1ObjectiveBRANDENGAGEMENT PartnerOpportunitiesOpportunityV1d1Objective = "BRAND_ENGAGEMENT"
	PartnerOpportunitiesOpportunityV1d1ObjectiveRETENTION       PartnerOpportunitiesOpportunityV1d1Objective = "RETENTION"
	PartnerOpportunitiesOpportunityV1d1ObjectiveSALES           PartnerOpportunitiesOpportunityV1d1Objective = "SALES"
)

// Defines values for PartnerOpportunitiesOpportunityV1d1Product.
const (
	PartnerOpportunitiesOpportunityV1d1ProductAMAZONDSP         PartnerOpportunitiesOpportunityV1d1Product = "AMAZON_DSP"
	PartnerOpportunitiesOpportunityV1d1ProductAMAZONLIVE        PartnerOpportunitiesOpportunityV1d1Product = "AMAZON_LIVE"
	PartnerOpportunitiesOpportunityV1d1ProductPOSTS             PartnerOpportunitiesOpportunityV1d1Product = "POSTS"
	PartnerOpportunitiesOpportunityV1d1ProductSPONSOREDBRANDS   PartnerOpportunitiesOpportunityV1d1Product = "SPONSORED_BRANDS"
	PartnerOpportunitiesOpportunityV1d1ProductSPONSOREDDISPLAY  PartnerOpportunitiesOpportunityV1d1Product = "SPONSORED_DISPLAY"
	PartnerOpportunitiesOpportunityV1d1ProductSPONSOREDPRODUCTS PartnerOpportunitiesOpportunityV1d1Product = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesOpportunityV1d1ProductSTORES            PartnerOpportunitiesOpportunityV1d1Product = "STORES"
	PartnerOpportunitiesOpportunityV1d1ProductVIDEOADS          PartnerOpportunitiesOpportunityV1d1Product = "VIDEO_ADS"
)

// Defines values for PartnerOpportunitiesOpportunityV1d2Audience.
const (
	PartnerOpportunitiesOpportunityV1d2AudiencePARTNER                   PartnerOpportunitiesOpportunityV1d2Audience = "PARTNER"
	PartnerOpportunitiesOpportunityV1d2AudiencePARTNERMANAGEDADBUSINESS  PartnerOpportunitiesOpportunityV1d2Audience = "PARTNER_MANAGED_AD_BUSINESS"
	PartnerOpportunitiesOpportunityV1d2AudiencePARTNERMANAGEDADVERTISERS PartnerOpportunitiesOpportunityV1d2Audience = "PARTNER_MANAGED_ADVERTISERS"
)

// Defines values for PartnerOpportunitiesOpportunityV1d2Objective.
const (
	AWARENESS       PartnerOpportunitiesOpportunityV1d2Objective = "AWARENESS"
	BRANDENGAGEMENT PartnerOpportunitiesOpportunityV1d2Objective = "BRAND_ENGAGEMENT"
	RETENTION       PartnerOpportunitiesOpportunityV1d2Objective = "RETENTION"
	SALES           PartnerOpportunitiesOpportunityV1d2Objective = "SALES"
)

// Defines values for PartnerOpportunitiesOpportunityV1d2ObjectiveType.
const (
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeADAPIENDPOINTADOPTION  PartnerOpportunitiesOpportunityV1d2ObjectiveType = "AD_API_ENDPOINT_ADOPTION"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeCAMPAIGNOPTIMIZATION   PartnerOpportunitiesOpportunityV1d2ObjectiveType = "CAMPAIGN_OPTIMIZATION"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeCATEGORYINSIGHTS       PartnerOpportunitiesOpportunityV1d2ObjectiveType = "CATEGORY_INSIGHTS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeCLICKCREDITS           PartnerOpportunitiesOpportunityV1d2ObjectiveType = "CLICK_CREDITS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeDEALS                  PartnerOpportunitiesOpportunityV1d2ObjectiveType = "DEALS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeMARKETPLACEEXPANSION   PartnerOpportunitiesOpportunityV1d2ObjectiveType = "MARKETPLACE_EXPANSION"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeNEWTOBRANDINSIGHTS     PartnerOpportunitiesOpportunityV1d2ObjectiveType = "NEW_TO_BRAND_INSIGHTS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypePARTNERGROWTH          PartnerOpportunitiesOpportunityV1d2ObjectiveType = "PARTNER_GROWTH"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypePATHTOPURCHASEINSIGHTS PartnerOpportunitiesOpportunityV1d2ObjectiveType = "PATH_TO_PURCHASE_INSIGHTS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeRETAILINSIGHTS         PartnerOpportunitiesOpportunityV1d2ObjectiveType = "RETAIL_INSIGHTS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeSHAREOFVOICEINSIGHTS   PartnerOpportunitiesOpportunityV1d2ObjectiveType = "SHARE_OF_VOICE_INSIGHTS"
	PartnerOpportunitiesOpportunityV1d2ObjectiveTypeUNLAUNCHEDASINS        PartnerOpportunitiesOpportunityV1d2ObjectiveType = "UNLAUNCHED_ASINS"
)

// Defines values for PartnerOpportunitiesOpportunityV1d2Product.
const (
	PartnerOpportunitiesOpportunityV1d2ProductAMAZONDSP             PartnerOpportunitiesOpportunityV1d2Product = "AMAZON_DSP"
	PartnerOpportunitiesOpportunityV1d2ProductAMAZONLIVE            PartnerOpportunitiesOpportunityV1d2Product = "AMAZON_LIVE"
	PartnerOpportunitiesOpportunityV1d2ProductPOSTS                 PartnerOpportunitiesOpportunityV1d2Product = "POSTS"
	PartnerOpportunitiesOpportunityV1d2ProductSPONSOREDBRANDS       PartnerOpportunitiesOpportunityV1d2Product = "SPONSORED_BRANDS"
	PartnerOpportunitiesOpportunityV1d2ProductSPONSOREDBRANDSVIDEO  PartnerOpportunitiesOpportunityV1d2Product = "SPONSORED_BRANDS_VIDEO"
	PartnerOpportunitiesOpportunityV1d2ProductSPONSOREDDISPLAY      PartnerOpportunitiesOpportunityV1d2Product = "SPONSORED_DISPLAY"
	PartnerOpportunitiesOpportunityV1d2ProductSPONSOREDDISPLAYVIDEO PartnerOpportunitiesOpportunityV1d2Product = "SPONSORED_DISPLAY_VIDEO"
	PartnerOpportunitiesOpportunityV1d2ProductSPONSOREDPRODUCTS     PartnerOpportunitiesOpportunityV1d2Product = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesOpportunityV1d2ProductSTORES                PartnerOpportunitiesOpportunityV1d2Product = "STORES"
)

// Defines values for PartnerOpportunitiesListOpportunitiesParamsAudience.
const (
	PartnerOpportunitiesListOpportunitiesParamsAudiencePARTNER                   PartnerOpportunitiesListOpportunitiesParamsAudience = "PARTNER"
	PartnerOpportunitiesListOpportunitiesParamsAudiencePARTNERMANAGEDADBUSINESS  PartnerOpportunitiesListOpportunitiesParamsAudience = "PARTNER_MANAGED_AD_BUSINESS"
	PartnerOpportunitiesListOpportunitiesParamsAudiencePARTNERMANAGEDADVERTISERS PartnerOpportunitiesListOpportunitiesParamsAudience = "PARTNER_MANAGED_ADVERTISERS"
)

// Defines values for PartnerOpportunitiesListOpportunitiesParamsObjectiveType.
const (
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeADAPIENDPOINTADOPTION  PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "AD_API_ENDPOINT_ADOPTION"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeCAMPAIGNOPTIMIZATION   PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "CAMPAIGN_OPTIMIZATION"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeCATEGORYINSIGHTS       PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "CATEGORY_INSIGHTS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeCLICKCREDITS           PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "CLICK_CREDITS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeDEALS                  PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "DEALS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeMARKETPLACEEXPANSION   PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "MARKETPLACE_EXPANSION"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeNEWTOBRANDINSIGHTS     PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "NEW_TO_BRAND_INSIGHTS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypePARTNERGROWTH          PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "PARTNER_GROWTH"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypePATHTOPURCHASEINSIGHTS PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "PATH_TO_PURCHASE_INSIGHTS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeRETAILINSIGHTS         PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "RETAIL_INSIGHTS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeSHAREOFVOICEINSIGHTS   PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "SHARE_OF_VOICE_INSIGHTS"
	PartnerOpportunitiesListOpportunitiesParamsObjectiveTypeUNLAUNCHEDASINS        PartnerOpportunitiesListOpportunitiesParamsObjectiveType = "UNLAUNCHED_ASINS"
)

// Defines values for PartnerOpportunitiesListOpportunitiesParamsProduct.
const (
	PartnerOpportunitiesListOpportunitiesParamsProductAMAZONDSP             PartnerOpportunitiesListOpportunitiesParamsProduct = "AMAZON_DSP"
	PartnerOpportunitiesListOpportunitiesParamsProductAMAZONLIVE            PartnerOpportunitiesListOpportunitiesParamsProduct = "AMAZON_LIVE"
	PartnerOpportunitiesListOpportunitiesParamsProductPOSTS                 PartnerOpportunitiesListOpportunitiesParamsProduct = "POSTS"
	PartnerOpportunitiesListOpportunitiesParamsProductSPONSOREDBRANDS       PartnerOpportunitiesListOpportunitiesParamsProduct = "SPONSORED_BRANDS"
	PartnerOpportunitiesListOpportunitiesParamsProductSPONSOREDBRANDSVIDEO  PartnerOpportunitiesListOpportunitiesParamsProduct = "SPONSORED_BRANDS_VIDEO"
	PartnerOpportunitiesListOpportunitiesParamsProductSPONSOREDDISPLAY      PartnerOpportunitiesListOpportunitiesParamsProduct = "SPONSORED_DISPLAY"
	PartnerOpportunitiesListOpportunitiesParamsProductSPONSOREDDISPLAYVIDEO PartnerOpportunitiesListOpportunitiesParamsProduct = "SPONSORED_DISPLAY_VIDEO"
	PartnerOpportunitiesListOpportunitiesParamsProductSPONSOREDPRODUCTS     PartnerOpportunitiesListOpportunitiesParamsProduct = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesListOpportunitiesParamsProductSTORES                PartnerOpportunitiesListOpportunitiesParamsProduct = "STORES"
)

// Defines values for PartnerOpportunitiesListOpportunitiesParamsLocale.
const (
	ArAE PartnerOpportunitiesListOpportunitiesParamsLocale = "ar_AE"
	CsCZ PartnerOpportunitiesListOpportunitiesParamsLocale = "cs_CZ"
	DeDE PartnerOpportunitiesListOpportunitiesParamsLocale = "de_DE"
	EnAU PartnerOpportunitiesListOpportunitiesParamsLocale = "en_AU"
	EnCA PartnerOpportunitiesListOpportunitiesParamsLocale = "en_CA"
	EnGB PartnerOpportunitiesListOpportunitiesParamsLocale = "en_GB"
	EnIN PartnerOpportunitiesListOpportunitiesParamsLocale = "en_IN"
	EnSG PartnerOpportunitiesListOpportunitiesParamsLocale = "en_SG"
	EnUS PartnerOpportunitiesListOpportunitiesParamsLocale = "en_US"
	EsCO PartnerOpportunitiesListOpportunitiesParamsLocale = "es_CO"
	EsES PartnerOpportunitiesListOpportunitiesParamsLocale = "es_ES"
	EsMX PartnerOpportunitiesListOpportunitiesParamsLocale = "es_MX"
	EsUS PartnerOpportunitiesListOpportunitiesParamsLocale = "es_US"
	FrCA PartnerOpportunitiesListOpportunitiesParamsLocale = "fr_CA"
	FrFR PartnerOpportunitiesListOpportunitiesParamsLocale = "fr_FR"
	HeIL PartnerOpportunitiesListOpportunitiesParamsLocale = "he_IL"
	HiIN PartnerOpportunitiesListOpportunitiesParamsLocale = "hi_IN"
	ItIT PartnerOpportunitiesListOpportunitiesParamsLocale = "it_IT"
	JaJP PartnerOpportunitiesListOpportunitiesParamsLocale = "ja_JP"
	KoKR PartnerOpportunitiesListOpportunitiesParamsLocale = "ko_KR"
	NlNL PartnerOpportunitiesListOpportunitiesParamsLocale = "nl_NL"
	PlPL PartnerOpportunitiesListOpportunitiesParamsLocale = "pl_PL"
	PtBR PartnerOpportunitiesListOpportunitiesParamsLocale = "pt_BR"
	SvSE PartnerOpportunitiesListOpportunitiesParamsLocale = "sv_SE"
	TaIN PartnerOpportunitiesListOpportunitiesParamsLocale = "ta_IN"
	ThTH PartnerOpportunitiesListOpportunitiesParamsLocale = "th_TH"
	TrTR PartnerOpportunitiesListOpportunitiesParamsLocale = "tr_TR"
	ViVN PartnerOpportunitiesListOpportunitiesParamsLocale = "vi_VN"
	ZhCN PartnerOpportunitiesListOpportunitiesParamsLocale = "zh_CN"
	ZhTW PartnerOpportunitiesListOpportunitiesParamsLocale = "zh_TW"
)

// Defines values for PartnerOpportunitiesSummarizeOpportunitiesParamsAudience.
const (
	PartnerOpportunitiesSummarizeOpportunitiesParamsAudiencePARTNER                   PartnerOpportunitiesSummarizeOpportunitiesParamsAudience = "PARTNER"
	PartnerOpportunitiesSummarizeOpportunitiesParamsAudiencePARTNERMANAGEDADBUSINESS  PartnerOpportunitiesSummarizeOpportunitiesParamsAudience = "PARTNER_MANAGED_AD_BUSINESS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsAudiencePARTNERMANAGEDADVERTISERS PartnerOpportunitiesSummarizeOpportunitiesParamsAudience = "PARTNER_MANAGED_ADVERTISERS"
)

// Defines values for PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType.
const (
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeADAPIENDPOINTADOPTION  PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "AD_API_ENDPOINT_ADOPTION"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeCAMPAIGNOPTIMIZATION   PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "CAMPAIGN_OPTIMIZATION"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeCATEGORYINSIGHTS       PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "CATEGORY_INSIGHTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeCLICKCREDITS           PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "CLICK_CREDITS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeDEALS                  PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "DEALS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeMARKETPLACEEXPANSION   PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "MARKETPLACE_EXPANSION"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeNEWTOBRANDINSIGHTS     PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "NEW_TO_BRAND_INSIGHTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypePARTNERGROWTH          PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "PARTNER_GROWTH"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypePATHTOPURCHASEINSIGHTS PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "PATH_TO_PURCHASE_INSIGHTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeRETAILINSIGHTS         PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "RETAIL_INSIGHTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeSHAREOFVOICEINSIGHTS   PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "SHARE_OF_VOICE_INSIGHTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveTypeUNLAUNCHEDASINS        PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType = "UNLAUNCHED_ASINS"
)

// Defines values for PartnerOpportunitiesSummarizeOpportunitiesParamsProduct.
const (
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductAMAZONDSP             PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "AMAZON_DSP"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductAMAZONLIVE            PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "AMAZON_LIVE"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductPOSTS                 PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "POSTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSPONSOREDBRANDS       PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "SPONSORED_BRANDS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSPONSOREDBRANDSVIDEO  PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "SPONSORED_BRANDS_VIDEO"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSPONSOREDDISPLAY      PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "SPONSORED_DISPLAY"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSPONSOREDDISPLAYVIDEO PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "SPONSORED_DISPLAY_VIDEO"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSPONSOREDPRODUCTS     PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "SPONSORED_PRODUCTS"
	PartnerOpportunitiesSummarizeOpportunitiesParamsProductSTORES                PartnerOpportunitiesSummarizeOpportunitiesParamsProduct = "STORES"
)

// PartnerOpportunitiesOpportunitiesPageV1 defines model for PartnerOpportunitiesOpportunitiesPageV1.
type PartnerOpportunitiesOpportunitiesPageV1 struct {
	// Opportunities The list of partner opportunities.
	Opportunities []PartnerOpportunitiesOpportunityV1 `json:"opportunities"`
}

// PartnerOpportunitiesOpportunitiesPageV1d1 defines model for PartnerOpportunitiesOpportunitiesPageV1d1.
type PartnerOpportunitiesOpportunitiesPageV1d1 struct {
	// FirstToken Pagination token back to the first page/element.
	FirstToken *string `json:"firstToken,omitempty"`

	// LastToken Pagination token to the last page.
	LastToken *string `json:"lastToken,omitempty"`

	// NextToken Pagination token to the next page.
	NextToken *string `json:"nextToken,omitempty"`

	// Opportunities The list of partner opportunities.
	Opportunities []PartnerOpportunitiesOpportunityV1d1 `json:"opportunities"`

	// PrevToken Pagination token back to the previous page.
	PrevToken *string `json:"prevToken,omitempty"`

	// TotalResults Total results contained in the list of opportunities.
	TotalResults float32 `json:"totalResults"`
}

// PartnerOpportunitiesOpportunitiesPageV1d2 defines model for PartnerOpportunitiesOpportunitiesPageV1d2.
type PartnerOpportunitiesOpportunitiesPageV1d2 struct {
	// FirstToken Pagination token back to the first page/element.
	FirstToken *string `json:"firstToken,omitempty"`

	// LastToken Pagination token to the last page.
	LastToken *string `json:"lastToken,omitempty"`

	// NextToken Pagination token to the next page.
	NextToken *string `json:"nextToken,omitempty"`

	// Opportunities The list of partner opportunities.
	Opportunities []PartnerOpportunitiesOpportunityV1d2 `json:"opportunities"`

	// PrevToken Pagination token back to the previous page.
	PrevToken *string `json:"prevToken,omitempty"`

	// TotalResults Total results contained in the list of opportunities.
	TotalResults float32 `json:"totalResults"`
}

// PartnerOpportunitiesOpportunitiesSummaryV1d1 defines model for PartnerOpportunitiesOpportunitiesSummaryV1d1.
type PartnerOpportunitiesOpportunitiesSummaryV1d1 struct {
	// OpportunitiesCount Total number of opportunities for the partner.
	OpportunitiesCount float32 `json:"opportunitiesCount"`

	// OpportunitiesWithDataCount Number of actionable opportunities with data for the partner.
	OpportunitiesWithDataCount float32 `json:"opportunitiesWithDataCount"`

	// UniqueAdvertiserApproximateCount Approximate number of unique advertisers across all opportunities for the partner.
	UniqueAdvertiserApproximateCount float32 `json:"uniqueAdvertiserApproximateCount"`
}

// PartnerOpportunitiesOpportunitiesSummaryV1d2 defines model for PartnerOpportunitiesOpportunitiesSummaryV1d2.
type PartnerOpportunitiesOpportunitiesSummaryV1d2 struct {
	// AvailableAudiences All available opportunity audience values with the number of opportunities with data for each.
	AvailableAudiences []PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2 `json:"availableAudiences"`

	// AvailableObjectiveTypes All available opportunity objective values with the number of opportunities with data for each.
	AvailableObjectiveTypes []PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2 `json:"availableObjectiveTypes"`

	// AvailableProducts All available opportunity product values with the number of opportunities with data for each.
	AvailableProducts []PartnerOpportunitiesOpportunityProductFilterSummaryV1d2 `json:"availableProducts"`

	// OpportunitiesCount Total number of opportunities for the partner.
	OpportunitiesCount float32 `json:"opportunitiesCount"`

	// OpportunitiesWithDataCount Number of actionable opportunities with data for the partner.
	OpportunitiesWithDataCount float32 `json:"opportunitiesWithDataCount"`

	// UniqueAdvertiserApproximateCount Approximate number of unique advertisers across all opportunities for the partner.
	UniqueAdvertiserApproximateCount float32 `json:"uniqueAdvertiserApproximateCount"`
}

// PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2 defines model for PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2.
type PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2 struct {
	Count float32                                                       `json:"count"`
	Value PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value `json:"value"`
}

// PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value defines model for PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2.Value.
type PartnerOpportunitiesOpportunityAudienceFilterSummaryV1d2Value string

// PartnerOpportunitiesOpportunityDataMetadataV1d1 defines model for PartnerOpportunitiesOpportunityDataMetadataV1d1.
type PartnerOpportunitiesOpportunityDataMetadataV1d1 struct {
	// RowCount Number of rows present in the latest partner opportunity data file.
	RowCount float32 `json:"rowCount"`

	// UpdatedDate Date the opportunity data file was generated/updated, in ISO 8601 format.
	UpdatedDate time.Time `json:"updatedDate"`
}

// PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2 defines model for PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2.
type PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2 struct {
	Count float32                                                            `json:"count"`
	Value PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value `json:"value"`
}

// PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value defines model for PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2.Value.
type PartnerOpportunitiesOpportunityObjectiveTypeFilterSummaryV1d2Value string

// PartnerOpportunitiesOpportunityProductFilterSummaryV1d2 defines model for PartnerOpportunitiesOpportunityProductFilterSummaryV1d2.
type PartnerOpportunitiesOpportunityProductFilterSummaryV1d2 struct {
	Count float32                                                      `json:"count"`
	Value PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value `json:"value"`
}

// PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value defines model for PartnerOpportunitiesOpportunityProductFilterSummaryV1d2.Value.
type PartnerOpportunitiesOpportunityProductFilterSummaryV1d2Value string

// PartnerOpportunitiesOpportunityV1 defines model for PartnerOpportunitiesOpportunityV1.
type PartnerOpportunitiesOpportunityV1 struct {
	// CallToAction An explanation of why it's recommended to take the actions detailed in the opportunity's data file.
	CallToAction string `json:"callToAction"`

	// CreatedDate When the opportunity was created, in ISO 8601 format. This should never change.
	CreatedDate time.Time `json:"createdDate"`

	// DataUrl The URL through which an opportunity's data file (in CSV format) can be downloaded.
	//
	// A simple GET request is all that is necessary, which will automatically redirect to a presigned, short-lived URL.
	//
	// URLs expire in 15 minutes.
	DataUrl string `json:"dataUrl"`

	// Description A detailed description of the opportunity and how it is pertinent to partners. May provide a summary of the underlying data provided in the opportunity data file.
	Description string `json:"description"`

	// Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
	Objective PartnerOpportunitiesOpportunityV1Objective `json:"objective"`

	// PartnerOpportunityId The unique ID for the opportunity.
	PartnerOpportunityId string `json:"partnerOpportunityId"`

	// Product The Amazon Advertising product to which the opportunity corresponds, like Amazon DSP, Video Ads, etc.
	Product PartnerOpportunitiesOpportunityV1Product `json:"product"`

	// Title The title of the opportunity.
	Title string `json:"title"`

	// UpdatedDate When the opportunity was last updated, in ISO 8601 format.
	UpdatedDate time.Time `json:"updatedDate"`
}

// PartnerOpportunitiesOpportunityV1Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
type PartnerOpportunitiesOpportunityV1Objective string

// PartnerOpportunitiesOpportunityV1Product The Amazon Advertising product to which the opportunity corresponds, like Amazon DSP, Video Ads, etc.
type PartnerOpportunitiesOpportunityV1Product string

// PartnerOpportunitiesOpportunityV1d1 defines model for PartnerOpportunitiesOpportunityV1d1.
type PartnerOpportunitiesOpportunityV1d1 struct {
	// CallToAction An explanation of why it's recommended to take the actions detailed in the opportunity's data file.
	CallToAction string `json:"callToAction"`

	// CreatedDate When the opportunity was created, in ISO 8601 format. This should never change.
	CreatedDate time.Time `json:"createdDate"`

	// DataMetadata Contains the most recent data file information for the opportunity.
	//
	// Can be used to track the availability of a partner opportunity data file:
	// if dataMetadata.rowCount > 0.
	DataMetadata PartnerOpportunitiesOpportunityDataMetadataV1d1 `json:"dataMetadata"`

	// DataUrl The URL through which an opportunity's data file (in CSV format) can be downloaded.
	//
	// A simple GET request is all that is necessary, which will automatically redirect to a presigned, short-lived URL.
	//
	// URLs expire in 15 minutes.
	DataUrl string `json:"dataUrl"`

	// Description A detailed description of the opportunity and how it is pertinent to partners. May provide a summary of the underlying data provided in the opportunity data file.
	Description string `json:"description"`

	// Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
	Objective PartnerOpportunitiesOpportunityV1d1Objective `json:"objective"`

	// PartnerOpportunityId The unique ID for the opportunity.
	PartnerOpportunityId string `json:"partnerOpportunityId"`

	// Product The Amazon Advertising product to which the opportunity corresponds, like Amazon DSP, Video Ads, etc.
	Product PartnerOpportunitiesOpportunityV1d1Product `json:"product"`

	// Title The title of the opportunity.
	Title string `json:"title"`

	// UpdatedDate When the opportunity was last updated, in ISO 8601 format.
	UpdatedDate time.Time `json:"updatedDate"`
}

// PartnerOpportunitiesOpportunityV1d1Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
type PartnerOpportunitiesOpportunityV1d1Objective string

// PartnerOpportunitiesOpportunityV1d1Product The Amazon Advertising product to which the opportunity corresponds, like Amazon DSP, Video Ads, etc.
type PartnerOpportunitiesOpportunityV1d1Product string

// PartnerOpportunitiesOpportunityV1d2 defines model for PartnerOpportunitiesOpportunityV1d2.
type PartnerOpportunitiesOpportunityV1d2 struct {
	// Audience The intended audience of the opportunity. For example, it might be targeted towards optimizing partner metrics or the metrics of advertisers that the partner manages.
	Audience PartnerOpportunitiesOpportunityV1d2Audience `json:"audience"`

	// CallToAction An explanation of why it's recommended to take the actions detailed in the opportunity's data file.
	CallToAction string `json:"callToAction"`

	// CreatedDate When the opportunity was created, in ISO 8601 format. This should never change.
	CreatedDate time.Time `json:"createdDate"`

	// DataMetadata Contains the most recent data file information for the opportunity.
	//
	// Can be used to track the availability of a partner opportunity data file:
	// if dataMetadata.rowCount > 0.
	DataMetadata PartnerOpportunitiesOpportunityDataMetadataV1d1 `json:"dataMetadata"`

	// DataUrl The URL through which an opportunity's data file (in CSV format) can be downloaded.
	//
	// A simple GET request is all that is necessary, which will automatically redirect to a presigned, short-lived URL.
	//
	// URLs expire in 15 minutes.
	DataUrl string `json:"dataUrl"`

	// Description A detailed description of the opportunity and how it is pertinent to partners. May provide a summary of the underlying data provided in the opportunity data file.
	Description string `json:"description"`

	// Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
	//
	// Deprecated as of V1.2.
	Objective PartnerOpportunitiesOpportunityV1d2Objective `json:"objective"`

	// ObjectiveType The objective type of the opportunity. For example, an objective type might be around providing the unlaunched ASINs you can optimize or deals you can action on.
	ObjectiveType PartnerOpportunitiesOpportunityV1d2ObjectiveType `json:"objectiveType"`

	// PartnerOpportunityId The unique ID for the opportunity.
	PartnerOpportunityId string `json:"partnerOpportunityId"`

	// Product The Ad Product for the given opportunity. For example, Sponsored Ads or DSP.
	Product PartnerOpportunitiesOpportunityV1d2Product `json:"product"`

	// Title The title of the opportunity.
	Title string `json:"title"`

	// UpdatedDate When the opportunity was last updated, in ISO 8601 format.
	UpdatedDate time.Time `json:"updatedDate"`
}

// PartnerOpportunitiesOpportunityV1d2Audience The intended audience of the opportunity. For example, it might be targeted towards optimizing partner metrics or the metrics of advertisers that the partner manages.
type PartnerOpportunitiesOpportunityV1d2Audience string

// PartnerOpportunitiesOpportunityV1d2Objective The objective of the opportunity. For example, an objective might be to drive sales, raise brand awareness, etc.
//
// Deprecated as of V1.2.
type PartnerOpportunitiesOpportunityV1d2Objective string

// PartnerOpportunitiesOpportunityV1d2ObjectiveType The objective type of the opportunity. For example, an objective type might be around providing the unlaunched ASINs you can optimize or deals you can action on.
type PartnerOpportunitiesOpportunityV1d2ObjectiveType string

// PartnerOpportunitiesOpportunityV1d2Product The Ad Product for the given opportunity. For example, Sponsored Ads or DSP.
type PartnerOpportunitiesOpportunityV1d2Product string

// PartnerOpportunitiesListOpportunitiesParams defines parameters for PartnerOpportunitiesListOpportunities.
type PartnerOpportunitiesListOpportunitiesParams struct {
	// MaxResults The maximum number of results to return in a single page. Supported since V1.1.
	MaxResults *float32 `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// NextToken An obfuscated cursor value that indicates which 'page' of results should be returned next. Supported since V1.1.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// Audience Filter for opportunities with these audience values. Supported since V1.2.
	// * PARTNER_MANAGED_ADVERTISERS - Recommendation relates to advertisers the partner manages.
	// * PARTNER_MANAGED_AD_BUSINESS - Recommendation relates to other partners the partner interacts with.
	// * PARTNER - Recommendation relates to you, the partner.
	Audience *[]PartnerOpportunitiesListOpportunitiesParamsAudience `form:"audience,omitempty" json:"audience,omitempty"`

	// ObjectiveType Filter for opportunities with these objectiveType values. Supported since V1.2.
	// * AD_API_ENDPOINT_ADOPTION - Recommendation relates to adopting a new API endpoint.
	// * CAMPAIGN_OPTIMIZATION - Recommendation relates to optimizing campaigns.
	// * CATEGORY_INSIGHTS - Recommendation relates to advertising insights across product categories..
	// * CLICK_CREDITS - Recommendation relates to available click credits.
	// * DEALS - Recommendation relates to deals.
	// * MARKETPLACE_EXPANSION - Recommendation relates to expanding to new marketplaces.
	// * NEW_TO_BRAND_INSIGHTS - Recommendation relates to new to brand advertising insights.
	// * PARTNER_GROWTH - Recommendation relates to growing your business as a partner.
	// * PATH_TO_PURCHASE_INSIGHTS - Recommendation relates to path to purchase insights.
	// * RETAIL_INSIGHTS - Recommendation related to retail insights about products you manage.
	// * SHARE_OF_VOICE_INSIGHTS - Recommendation relates to share of voice for a particular audience.
	// * UNLAUNCHED_ASINS - Recommendation relates to ASINs you manage that are not enrolled in advertising campaigns.
	ObjectiveType *[]PartnerOpportunitiesListOpportunitiesParamsObjectiveType `form:"objectiveType,omitempty" json:"objectiveType,omitempty"`

	// Product Filter for opportunities with these product values. Supported since V1.2.
	// * AMAZON_DSP - Recommendation relates to the Amazon DSP.
	// * AMAZON_LIVE - Recommendation relates to Amazon's Live Show and Tell program.
	// * POSTS - Recommendation relates to Amazon's social media Posts service.
	// * SPONSORED_BRANDS - Recommendation relates to Sponsored Brands.
	// * SPONSORED_DISPLAY - Recommendation relates to Sponsored Display.
	// * SPONSORED_PRODUCTS - Recommendation relates to Sponsored Products.
	// * SPONSORED_BRANDS_VIDEO - Recommendation relates to Sponsored Brands Video.
	// * SPONSORED_DISPLAY_VIDEO - Recommendation relates to Sponsored Display Video.
	// * STORES - Recommendation relates to building a storefront page on Amazon.
	Product *[]PartnerOpportunitiesListOpportunitiesParamsProduct `form:"product,omitempty" json:"product,omitempty"`

	// Locale The desired locale for opportunity data to be presented in. The `title`, `description`, and `callToAction` fields of the response items support localization. Supported since V1.2.
	Locale *PartnerOpportunitiesListOpportunitiesParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a 'Login with Amazon' account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIManagerAccount 'Partner Network Account ID' which is accessible from Partner Network under the ['User settings'](https://advertising.amazon.com/partner-network/settings) link in the upper right corner.
	AmazonAdvertisingAPIManagerAccount string `json:"Amazon-Advertising-API-Manager-Account"`
}

// PartnerOpportunitiesListOpportunitiesParamsAudience defines parameters for PartnerOpportunitiesListOpportunities.
type PartnerOpportunitiesListOpportunitiesParamsAudience string

// PartnerOpportunitiesListOpportunitiesParamsObjectiveType defines parameters for PartnerOpportunitiesListOpportunities.
type PartnerOpportunitiesListOpportunitiesParamsObjectiveType string

// PartnerOpportunitiesListOpportunitiesParamsProduct defines parameters for PartnerOpportunitiesListOpportunities.
type PartnerOpportunitiesListOpportunitiesParamsProduct string

// PartnerOpportunitiesListOpportunitiesParamsLocale defines parameters for PartnerOpportunitiesListOpportunities.
type PartnerOpportunitiesListOpportunitiesParamsLocale string

// PartnerOpportunitiesSummarizeOpportunitiesParams defines parameters for PartnerOpportunitiesSummarizeOpportunities.
type PartnerOpportunitiesSummarizeOpportunitiesParams struct {
	// Audience Filter for opportunities with these audience values. Supported since V1.2.
	// * PARTNER_MANAGED_ADVERTISERS - Recommendation relates to advertisers the partner manages.
	// * PARTNER_MANAGED_AD_BUSINESS - Recommendation relates to other partners the partner interacts with.
	// * PARTNER - Recommendation relates to you, the partner.
	Audience *[]PartnerOpportunitiesSummarizeOpportunitiesParamsAudience `form:"audience,omitempty" json:"audience,omitempty"`

	// ObjectiveType Filter for opportunities with these objectiveType values. Supported since V1.2.
	// * AD_API_ENDPOINT_ADOPTION - Recommendation relates to adopting a new API endpoint.
	// * CAMPAIGN_OPTIMIZATION - Recommendation relates to optimizing campaigns.
	// * CATEGORY_INSIGHTS - Recommendation relates to advertising insights across product categories..
	// * CLICK_CREDITS - Recommendation relates to available click credits.
	// * DEALS - Recommendation relates to deals.
	// * MARKETPLACE_EXPANSION - Recommendation relates to expanding to new marketplaces.
	// * NEW_TO_BRAND_INSIGHTS - Recommendation relates to new to brand advertising insights.
	// * PARTNER_GROWTH - Recommendation relates to growing your business as a partner.
	// * PATH_TO_PURCHASE_INSIGHTS - Recommendation relates to path to purchase insights.
	// * RETAIL_INSIGHTS - Recommendation related to retail insights about products you manage.
	// * SHARE_OF_VOICE_INSIGHTS - Recommendation relates to share of voice for a particular audience.
	// * UNLAUNCHED_ASINS - Recommendation relates to ASINs you manage that are not enrolled in advertising campaigns.
	ObjectiveType *[]PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType `form:"objectiveType,omitempty" json:"objectiveType,omitempty"`

	// Product Filter for opportunities with these product values. Supported since V1.2.
	// * AMAZON_DSP - Recommendation relates to the Amazon DSP.
	// * AMAZON_LIVE - Recommendation relates to Amazon's Live Show and Tell program.
	// * POSTS - Recommendation relates to Amazon's social media Posts service.
	// * SPONSORED_BRANDS - Recommendation relates to Sponsored Brands.
	// * SPONSORED_DISPLAY - Recommendation relates to Sponsored Display.
	// * SPONSORED_PRODUCTS - Recommendation relates to Sponsored Products.
	// * SPONSORED_BRANDS_VIDEO - Recommendation relates to Sponsored Brands Video.
	// * SPONSORED_DISPLAY_VIDEO - Recommendation relates to Sponsored Display Video.
	// * STORES - Recommendation relates to building a storefront page on Amazon.
	Product *[]PartnerOpportunitiesSummarizeOpportunitiesParamsProduct `form:"product,omitempty" json:"product,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a 'Login with Amazon' account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIManagerAccount 'Partner Network Account ID' which is accessible from Partner Network under the ['User settings'](https://advertising.amazon.com/partner-network/settings) link in the upper right corner.
	AmazonAdvertisingAPIManagerAccount string `json:"Amazon-Advertising-API-Manager-Account"`
}

// PartnerOpportunitiesSummarizeOpportunitiesParamsAudience defines parameters for PartnerOpportunitiesSummarizeOpportunities.
type PartnerOpportunitiesSummarizeOpportunitiesParamsAudience string

// PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType defines parameters for PartnerOpportunitiesSummarizeOpportunities.
type PartnerOpportunitiesSummarizeOpportunitiesParamsObjectiveType string

// PartnerOpportunitiesSummarizeOpportunitiesParamsProduct defines parameters for PartnerOpportunitiesSummarizeOpportunities.
type PartnerOpportunitiesSummarizeOpportunitiesParamsProduct string

// PartnerOpportunitiesGetOpportunityFileParams defines parameters for PartnerOpportunitiesGetOpportunityFile.
type PartnerOpportunitiesGetOpportunityFileParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a 'Login with Amazon' account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIManagerAccount 'Partner Network Account ID' which is accessible from Partner Network under the ['User settings'](https://advertising.amazon.com/partner-network/settings) link in the upper right corner.
	AmazonAdvertisingAPIManagerAccount string `json:"Amazon-Advertising-API-Manager-Account"`
}

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PartnerOpportunitiesListOpportunities request
	PartnerOpportunitiesListOpportunities(ctx context.Context, params *PartnerOpportunitiesListOpportunitiesParams) (*http.Response, error)

	// PartnerOpportunitiesSummarizeOpportunities request
	PartnerOpportunitiesSummarizeOpportunities(ctx context.Context, params *PartnerOpportunitiesSummarizeOpportunitiesParams) (*http.Response, error)

	// PartnerOpportunitiesGetOpportunityFile request
	PartnerOpportunitiesGetOpportunityFile(ctx context.Context, partnerOpportunityId string, params *PartnerOpportunitiesGetOpportunityFileParams) (*http.Response, error)
}

func (c *Client) PartnerOpportunitiesListOpportunities(ctx context.Context, params *PartnerOpportunitiesListOpportunitiesParams) (*http.Response, error) {
	req, err := NewPartnerOpportunitiesListOpportunitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PartnerOpportunitiesSummarizeOpportunities(ctx context.Context, params *PartnerOpportunitiesSummarizeOpportunitiesParams) (*http.Response, error) {
	req, err := NewPartnerOpportunitiesSummarizeOpportunitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PartnerOpportunitiesGetOpportunityFile(ctx context.Context, partnerOpportunityId string, params *PartnerOpportunitiesGetOpportunityFileParams) (*http.Response, error) {
	req, err := NewPartnerOpportunitiesGetOpportunityFileRequest(c.Server, partnerOpportunityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewPartnerOpportunitiesListOpportunitiesRequest generates requests for PartnerOpportunitiesListOpportunities
func NewPartnerOpportunitiesListOpportunitiesRequest(server string, params *PartnerOpportunitiesListOpportunitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partnerOpportunities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Audience != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audience", runtime.ParamLocationQuery, *params.Audience); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.ObjectiveType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectiveType", runtime.ParamLocationQuery, *params.ObjectiveType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Manager-Account", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIManagerAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Manager-Account", headerParam1)

	}

	return req, nil
}

// NewPartnerOpportunitiesSummarizeOpportunitiesRequest generates requests for PartnerOpportunitiesSummarizeOpportunities
func NewPartnerOpportunitiesSummarizeOpportunitiesRequest(server string, params *PartnerOpportunitiesSummarizeOpportunitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partnerOpportunities/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Audience != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "audience", runtime.ParamLocationQuery, *params.Audience); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.ObjectiveType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectiveType", runtime.ParamLocationQuery, *params.ObjectiveType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Manager-Account", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIManagerAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Manager-Account", headerParam1)

	}

	return req, nil
}

// NewPartnerOpportunitiesGetOpportunityFileRequest generates requests for PartnerOpportunitiesGetOpportunityFile
func NewPartnerOpportunitiesGetOpportunityFileRequest(server string, partnerOpportunityId string, params *PartnerOpportunitiesGetOpportunityFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partnerOpportunityId", runtime.ParamLocationPath, partnerOpportunityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partnerOpportunities/%s/file", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Manager-Account", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIManagerAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Manager-Account", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PartnerOpportunitiesListOpportunitiesWithResponse request
	PartnerOpportunitiesListOpportunitiesWithResponse(ctx context.Context, params *PartnerOpportunitiesListOpportunitiesParams) (*PartnerOpportunitiesListOpportunitiesResp, error)

	// PartnerOpportunitiesSummarizeOpportunitiesWithResponse request
	PartnerOpportunitiesSummarizeOpportunitiesWithResponse(ctx context.Context, params *PartnerOpportunitiesSummarizeOpportunitiesParams) (*PartnerOpportunitiesSummarizeOpportunitiesResp, error)

	// PartnerOpportunitiesGetOpportunityFileWithResponse request
	PartnerOpportunitiesGetOpportunityFileWithResponse(ctx context.Context, partnerOpportunityId string, params *PartnerOpportunitiesGetOpportunityFileParams) (*PartnerOpportunitiesGetOpportunityFileResp, error)
}

type PartnerOpportunitiesListOpportunitiesResp struct {
	Body                                       []byte
	HTTPResponse                               *http.Response
	ApplicationvndPartneropportunityV1JSON200  *PartnerOpportunitiesOpportunitiesPageV1
	ApplicationvndPartneropportunityV11JSON200 *PartnerOpportunitiesOpportunitiesPageV1d1
	ApplicationvndPartneropportunityV12JSON200 *PartnerOpportunitiesOpportunitiesPageV1d2
}

// Status returns HTTPResponse.Status
func (r PartnerOpportunitiesListOpportunitiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnerOpportunitiesListOpportunitiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnerOpportunitiesSummarizeOpportunitiesResp struct {
	Body                                       []byte
	HTTPResponse                               *http.Response
	ApplicationvndPartneropportunityV11JSON200 *PartnerOpportunitiesOpportunitiesSummaryV1d1
	ApplicationvndPartneropportunityV12JSON200 *PartnerOpportunitiesOpportunitiesSummaryV1d2
}

// Status returns HTTPResponse.Status
func (r PartnerOpportunitiesSummarizeOpportunitiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnerOpportunitiesSummarizeOpportunitiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnerOpportunitiesGetOpportunityFileResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PartnerOpportunitiesGetOpportunityFileResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnerOpportunitiesGetOpportunityFileResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PartnerOpportunitiesListOpportunitiesWithResponse request returning *PartnerOpportunitiesListOpportunitiesResp
func (c *ClientWithResponses) PartnerOpportunitiesListOpportunitiesWithResponse(ctx context.Context, params *PartnerOpportunitiesListOpportunitiesParams) (*PartnerOpportunitiesListOpportunitiesResp, error) {
	rsp, err := c.PartnerOpportunitiesListOpportunities(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsePartnerOpportunitiesListOpportunitiesResp(rsp)
}

// PartnerOpportunitiesSummarizeOpportunitiesWithResponse request returning *PartnerOpportunitiesSummarizeOpportunitiesResp
func (c *ClientWithResponses) PartnerOpportunitiesSummarizeOpportunitiesWithResponse(ctx context.Context, params *PartnerOpportunitiesSummarizeOpportunitiesParams) (*PartnerOpportunitiesSummarizeOpportunitiesResp, error) {
	rsp, err := c.PartnerOpportunitiesSummarizeOpportunities(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsePartnerOpportunitiesSummarizeOpportunitiesResp(rsp)
}

// PartnerOpportunitiesGetOpportunityFileWithResponse request returning *PartnerOpportunitiesGetOpportunityFileResp
func (c *ClientWithResponses) PartnerOpportunitiesGetOpportunityFileWithResponse(ctx context.Context, partnerOpportunityId string, params *PartnerOpportunitiesGetOpportunityFileParams) (*PartnerOpportunitiesGetOpportunityFileResp, error) {
	rsp, err := c.PartnerOpportunitiesGetOpportunityFile(ctx, partnerOpportunityId, params)
	if err != nil {
		return nil, err
	}
	return ParsePartnerOpportunitiesGetOpportunityFileResp(rsp)
}

// ParsePartnerOpportunitiesListOpportunitiesResp parses an HTTP response from a PartnerOpportunitiesListOpportunitiesWithResponse call
func ParsePartnerOpportunitiesListOpportunitiesResp(rsp *http.Response) (*PartnerOpportunitiesListOpportunitiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnerOpportunitiesListOpportunitiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.partneropportunity.v1+json" && rsp.StatusCode == 200:
		var dest PartnerOpportunitiesOpportunitiesPageV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPartneropportunityV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.partneropportunity.v1.1+json" && rsp.StatusCode == 200:
		var dest PartnerOpportunitiesOpportunitiesPageV1d1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPartneropportunityV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.partneropportunity.v1.2+json" && rsp.StatusCode == 200:
		var dest PartnerOpportunitiesOpportunitiesPageV1d2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPartneropportunityV12JSON200 = &dest

	}

	return response, nil
}

// ParsePartnerOpportunitiesSummarizeOpportunitiesResp parses an HTTP response from a PartnerOpportunitiesSummarizeOpportunitiesWithResponse call
func ParsePartnerOpportunitiesSummarizeOpportunitiesResp(rsp *http.Response) (*PartnerOpportunitiesSummarizeOpportunitiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnerOpportunitiesSummarizeOpportunitiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.partneropportunity.v1.1+json" && rsp.StatusCode == 200:
		var dest PartnerOpportunitiesOpportunitiesSummaryV1d1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPartneropportunityV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.partneropportunity.v1.2+json" && rsp.StatusCode == 200:
		var dest PartnerOpportunitiesOpportunitiesSummaryV1d2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPartneropportunityV12JSON200 = &dest

	}

	return response, nil
}

// ParsePartnerOpportunitiesGetOpportunityFileResp parses an HTTP response from a PartnerOpportunitiesGetOpportunityFileWithResponse call
func ParsePartnerOpportunitiesGetOpportunityFileResp(rsp *http.Response) (*PartnerOpportunitiesGetOpportunityFileResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnerOpportunitiesGetOpportunityFileResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
