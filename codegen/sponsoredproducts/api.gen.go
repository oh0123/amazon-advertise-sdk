// Package sponsoredproducts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package sponsoredproducts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for AdGroupThemeBasedBidRecommendationRequestRecommendationType.
const (
	BIDSFOREXISTINGADGROUP AdGroupThemeBasedBidRecommendationRequestRecommendationType = "BIDS_FOR_EXISTING_AD_GROUP"
)

// Defines values for AsinsThemeBasedBidRecommendationRequestRecommendationType.
const (
	BIDSFORNEWADGROUP AsinsThemeBasedBidRecommendationRequestRecommendationType = "BIDS_FOR_NEW_AD_GROUP"
)

// Defines values for BenchmarkBenchmarkStatus.
const (
	Failed  BenchmarkBenchmarkStatus = "failed"
	Partial BenchmarkBenchmarkStatus = "partial"
	Success BenchmarkBenchmarkStatus = "success"
)

// Defines values for BiddingStrategy.
const (
	BiddingStrategyAUTOFORSALES   BiddingStrategy = "AUTO_FOR_SALES"
	BiddingStrategyLEGACYFORSALES BiddingStrategy = "LEGACY_FOR_SALES"
	BiddingStrategyMANUAL         BiddingStrategy = "MANUAL"
	BiddingStrategyRULEBASED      BiddingStrategy = "RULE_BASED"
)

// Defines values for MyBiddingStrategy.
const (
	MyBiddingStrategyAUTOFORSALES   MyBiddingStrategy = "AUTO_FOR_SALES"
	MyBiddingStrategyLEGACYFORSALES MyBiddingStrategy = "LEGACY_FOR_SALES"
	MyBiddingStrategyMANUAL         MyBiddingStrategy = "MANUAL"
	MyBiddingStrategyRULEBASED      MyBiddingStrategy = "RULE_BASED"
)

// Defines values for BiddingStrategyRecommendationAction.
const (
	BiddingStrategyRecommendationActionUPDATE BiddingStrategyRecommendationAction = "UPDATE"
)

// Defines values for BiddingStrategyRecommendationSuggestedBiddingStrategy.
const (
	BiddingStrategyRecommendationSuggestedBiddingStrategyAUTOFORSALES   BiddingStrategyRecommendationSuggestedBiddingStrategy = "AUTO_FOR_SALES"
	BiddingStrategyRecommendationSuggestedBiddingStrategyLEGACYFORSALES BiddingStrategyRecommendationSuggestedBiddingStrategy = "LEGACY_FOR_SALES"
	BiddingStrategyRecommendationSuggestedBiddingStrategyMANUAL         BiddingStrategyRecommendationSuggestedBiddingStrategy = "MANUAL"
)

// Defines values for BudgetChangeType.
const (
	PERCENT BudgetChangeType = "PERCENT"
)

// Defines values for BudgetRecommendationAction.
const (
	BudgetRecommendationActionDECREASE BudgetRecommendationAction = "DECREASE"
	BudgetRecommendationActionINCREASE BudgetRecommendationAction = "INCREASE"
)

// Defines values for ComparisonOperator.
const (
	EQUALTO              ComparisonOperator = "EQUAL_TO"
	GREATERTHAN          ComparisonOperator = "GREATER_THAN"
	GREATERTHANOREQUALTO ComparisonOperator = "GREATER_THAN_OR_EQUAL_TO"
	LESSTHAN             ComparisonOperator = "LESS_THAN"
	LESSTHANOREQUALTO    ComparisonOperator = "LESS_THAN_OR_EQUAL_TO"
)

// Defines values for DayOfWeek.
const (
	FRIDAY    DayOfWeek = "FRIDAY"
	MONDAY    DayOfWeek = "MONDAY"
	SATURDAY  DayOfWeek = "SATURDAY"
	SUNDAY    DayOfWeek = "SUNDAY"
	THURSDAY  DayOfWeek = "THURSDAY"
	TUESDAY   DayOfWeek = "TUESDAY"
	WEDNESDAY DayOfWeek = "WEDNESDAY"
)

// Defines values for InitialBudgetRecommendationRequestTargetingType.
const (
	Auto   InitialBudgetRecommendationRequestTargetingType = "auto"
	Manual InitialBudgetRecommendationRequestTargetingType = "manual"
)

// Defines values for KeywordBidInfoMatchType.
const (
	KeywordBidInfoMatchTypeBROAD  KeywordBidInfoMatchType = "BROAD"
	KeywordBidInfoMatchTypeEXACT  KeywordBidInfoMatchType = "EXACT"
	KeywordBidInfoMatchTypePHRASE KeywordBidInfoMatchType = "PHRASE"
)

// Defines values for KeywordTargetMatchType.
const (
	KeywordTargetMatchTypeBROAD  KeywordTargetMatchType = "BROAD"
	KeywordTargetMatchTypeEXACT  KeywordTargetMatchType = "EXACT"
	KeywordTargetMatchTypePHRASE KeywordTargetMatchType = "PHRASE"
)

// Defines values for KeywordTargetingRecommendationAction.
const (
	KeywordTargetingRecommendationActionADD      KeywordTargetingRecommendationAction = "ADD"
	KeywordTargetingRecommendationActionDECREASE KeywordTargetingRecommendationAction = "DECREASE"
	KeywordTargetingRecommendationActionINCREASE KeywordTargetingRecommendationAction = "INCREASE"
	KeywordTargetingRecommendationActionREMOVE   KeywordTargetingRecommendationAction = "REMOVE"
	KeywordTargetingRecommendationActionUPDATE   KeywordTargetingRecommendationAction = "UPDATE"
)

// Defines values for KeywordTargetingRecommendationMatchType.
const (
	KeywordTargetingRecommendationMatchTypeBROAD  KeywordTargetingRecommendationMatchType = "BROAD"
	KeywordTargetingRecommendationMatchTypeEXACT  KeywordTargetingRecommendationMatchType = "EXACT"
	KeywordTargetingRecommendationMatchTypePHRASE KeywordTargetingRecommendationMatchType = "PHRASE"
)

// Defines values for PerformanceMetric.
const (
	PerformanceMetricACOS PerformanceMetric = "ACOS"
	PerformanceMetricCTR  PerformanceMetric = "CTR"
	PerformanceMetricCVR  PerformanceMetric = "CVR"
	PerformanceMetricROAS PerformanceMetric = "ROAS"
)

// Defines values for PlacementAdjustmentPredicate.
const (
	PlacementAdjustmentPredicatePLACEMENTPRODUCTPAGE PlacementAdjustmentPredicate = "PLACEMENT_PRODUCT_PAGE"
	PlacementAdjustmentPredicatePLACEMENTTOP         PlacementAdjustmentPredicate = "PLACEMENT_TOP"
)

// Defines values for RecommendationOptionsLocale.
const (
	RecommendationOptionsLocaleArEG RecommendationOptionsLocale = "ar_EG"
	RecommendationOptionsLocaleDeDE RecommendationOptionsLocale = "de_DE"
	RecommendationOptionsLocaleEnAE RecommendationOptionsLocale = "en_AE"
	RecommendationOptionsLocaleEnAU RecommendationOptionsLocale = "en_AU"
	RecommendationOptionsLocaleEnCA RecommendationOptionsLocale = "en_CA"
	RecommendationOptionsLocaleEnGB RecommendationOptionsLocale = "en_GB"
	RecommendationOptionsLocaleEnIN RecommendationOptionsLocale = "en_IN"
	RecommendationOptionsLocaleEnSA RecommendationOptionsLocale = "en_SA"
	RecommendationOptionsLocaleEnSG RecommendationOptionsLocale = "en_SG"
	RecommendationOptionsLocaleEnUS RecommendationOptionsLocale = "en_US"
	RecommendationOptionsLocaleEsES RecommendationOptionsLocale = "es_ES"
	RecommendationOptionsLocaleEsMX RecommendationOptionsLocale = "es_MX"
	RecommendationOptionsLocaleFrFR RecommendationOptionsLocale = "fr_FR"
	RecommendationOptionsLocaleItIT RecommendationOptionsLocale = "it_IT"
	RecommendationOptionsLocaleJaJP RecommendationOptionsLocale = "ja_JP"
	RecommendationOptionsLocaleNlNL RecommendationOptionsLocale = "nl_NL"
	RecommendationOptionsLocalePlPL RecommendationOptionsLocale = "pl_PL"
	RecommendationOptionsLocalePtBR RecommendationOptionsLocale = "pt_BR"
	RecommendationOptionsLocaleSvSE RecommendationOptionsLocale = "sv_SE"
	RecommendationOptionsLocaleTrTR RecommendationOptionsLocale = "tr_TR"
	RecommendationOptionsLocaleZhCN RecommendationOptionsLocale = "zh_CN"
)

// Defines values for RecommendationOptionsSortDimension.
const (
	CLICKS      RecommendationOptionsSortDimension = "CLICKS"
	CONVERSIONS RecommendationOptionsSortDimension = "CONVERSIONS"
	DEFAULT     RecommendationOptionsSortDimension = "DEFAULT"
)

// Defines values for RecurrenceType.
const (
	RecurrenceTypeDAILY RecurrenceType = "DAILY"
)

// Defines values for RuleAction.
const (
	ADOPT RuleAction = "ADOPT"
)

// Defines values for RuleConditionMetric.
const (
	RuleConditionMetricAVERAGEBID RuleConditionMetric = "AVERAGE_BID"
	RuleConditionMetricROAS       RuleConditionMetric = "ROAS"
)

// Defines values for RuleState.
const (
	RuleStateDISABLED RuleState = "DISABLED"
	RuleStateENABLED  RuleState = "ENABLED"
)

// Defines values for RuleStatus.
const (
	RuleStatusACTIVE   RuleStatus = "ACTIVE"
	RuleStatusARCHIVED RuleStatus = "ARCHIVED"
)

// Defines values for RuleType.
const (
	RuleTypeBID     RuleType = "BID"
	RuleTypeKEYWORD RuleType = "KEYWORD"
	RuleTypePRODUCT RuleType = "PRODUCT"
)

// Defines values for SPRuleType.
const (
	PERFORMANCE SPRuleType = "PERFORMANCE"
	SCHEDULE    SPRuleType = "SCHEDULE"
)

// Defines values for SponsoredProductsAccessDeniedErrorCode.
const (
	ACCESSDENIED SponsoredProductsAccessDeniedErrorCode = "ACCESS_DENIED"
)

// Defines values for SponsoredProductsAdEligibilityErrorReason.
const (
	SponsoredProductsAdEligibilityErrorReasonADINELIGIBLE SponsoredProductsAdEligibilityErrorReason = "AD_INELIGIBLE"
)

// Defines values for SponsoredProductsAdGroupServingStatus.
const (
	SponsoredProductsAdGroupServingStatusADGROUPARCHIVED                 SponsoredProductsAdGroupServingStatus = "AD_GROUP_ARCHIVED"
	SponsoredProductsAdGroupServingStatusADGROUPINCOMPLETE               SponsoredProductsAdGroupServingStatus = "AD_GROUP_INCOMPLETE"
	SponsoredProductsAdGroupServingStatusADGROUPLOWBID                   SponsoredProductsAdGroupServingStatus = "AD_GROUP_LOW_BID"
	SponsoredProductsAdGroupServingStatusADGROUPPAUSED                   SponsoredProductsAdGroupServingStatus = "AD_GROUP_PAUSED"
	SponsoredProductsAdGroupServingStatusADGROUPPOLICINGCREATIVEREJECTED SponsoredProductsAdGroupServingStatus = "AD_GROUP_POLICING_CREATIVE_REJECTED"
	SponsoredProductsAdGroupServingStatusADGROUPPOLICINGPENDINGREVIEW    SponsoredProductsAdGroupServingStatus = "AD_GROUP_POLICING_PENDING_REVIEW"
	SponsoredProductsAdGroupServingStatusADGROUPSTATUSENABLED            SponsoredProductsAdGroupServingStatus = "AD_GROUP_STATUS_ENABLED"
	SponsoredProductsAdGroupServingStatusADVERTISERARCHIVED              SponsoredProductsAdGroupServingStatus = "ADVERTISER_ARCHIVED"
	SponsoredProductsAdGroupServingStatusADVERTISEROUTOFBUDGET           SponsoredProductsAdGroupServingStatus = "ADVERTISER_OUT_OF_BUDGET"
	SponsoredProductsAdGroupServingStatusADVERTISERPAUSED                SponsoredProductsAdGroupServingStatus = "ADVERTISER_PAUSED"
	SponsoredProductsAdGroupServingStatusADVERTISERPAYMENTFAILURE        SponsoredProductsAdGroupServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	SponsoredProductsAdGroupServingStatusADVERTISERPOLICINGPENDINGREVIEW SponsoredProductsAdGroupServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	SponsoredProductsAdGroupServingStatusADVERTISERPOLICINGSUSPENDED     SponsoredProductsAdGroupServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	SponsoredProductsAdGroupServingStatusCAMPAIGNARCHIVED                SponsoredProductsAdGroupServingStatus = "CAMPAIGN_ARCHIVED"
	SponsoredProductsAdGroupServingStatusCAMPAIGNINCOMPLETE              SponsoredProductsAdGroupServingStatus = "CAMPAIGN_INCOMPLETE"
	SponsoredProductsAdGroupServingStatusCAMPAIGNOUTOFBUDGET             SponsoredProductsAdGroupServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	SponsoredProductsAdGroupServingStatusCAMPAIGNPAUSED                  SponsoredProductsAdGroupServingStatus = "CAMPAIGN_PAUSED"
	SponsoredProductsAdGroupServingStatusCAMPAIGNSTATUSENABLED           SponsoredProductsAdGroupServingStatus = "CAMPAIGN_STATUS_ENABLED"
	SponsoredProductsAdGroupServingStatusENDED                           SponsoredProductsAdGroupServingStatus = "ENDED"
	SponsoredProductsAdGroupServingStatusOTHER                           SponsoredProductsAdGroupServingStatus = "OTHER"
	SponsoredProductsAdGroupServingStatusPENDINGREVIEW                   SponsoredProductsAdGroupServingStatus = "PENDING_REVIEW"
	SponsoredProductsAdGroupServingStatusPENDINGSTARTDATE                SponsoredProductsAdGroupServingStatus = "PENDING_START_DATE"
	SponsoredProductsAdGroupServingStatusPORTFOLIOARCHIVED               SponsoredProductsAdGroupServingStatus = "PORTFOLIO_ARCHIVED"
	SponsoredProductsAdGroupServingStatusPORTFOLIOENDED                  SponsoredProductsAdGroupServingStatus = "PORTFOLIO_ENDED"
	SponsoredProductsAdGroupServingStatusPORTFOLIOOUTOFBUDGET            SponsoredProductsAdGroupServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	SponsoredProductsAdGroupServingStatusPORTFOLIOPAUSED                 SponsoredProductsAdGroupServingStatus = "PORTFOLIO_PAUSED"
	SponsoredProductsAdGroupServingStatusPORTFOLIOPENDINGSTARTDATE       SponsoredProductsAdGroupServingStatus = "PORTFOLIO_PENDING_START_DATE"
	SponsoredProductsAdGroupServingStatusPORTFOLIOSTATUSENABLED          SponsoredProductsAdGroupServingStatus = "PORTFOLIO_STATUS_ENABLED"
	SponsoredProductsAdGroupServingStatusREJECTED                        SponsoredProductsAdGroupServingStatus = "REJECTED"
)

// Defines values for SponsoredProductsAdGroupServingStatusReason.
const (
	SponsoredProductsAdGroupServingStatusReasonADGROUPARCHIVEDDETAIL                 SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_ARCHIVED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPINCOMPLETEDETAIL               SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_INCOMPLETE_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPLOWBIDDETAIL                   SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_LOW_BID_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPPAUSEDDETAIL                   SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_PAUSED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPPOLICINGCREATIVEREJECTEDDETAIL SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_POLICING_CREATIVE_REJECTED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPPOLICINGPENDINGREVIEWDETAIL    SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADGROUPSTATUSENABLEDDETAIL            SponsoredProductsAdGroupServingStatusReason = "AD_GROUP_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISERARCHIVEDDETAIL              SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_ARCHIVED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISEROUTOFBUDGETDETAIL           SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISERPAUSEDDETAIL                SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_PAUSED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISERPAYMENTFAILUREDETAIL        SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_PAYMENT_FAILURE_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISERPOLICINGPENDINGREVIEWDETAIL SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonADVERTISERPOLICINGSUSPENDEDDETAIL     SponsoredProductsAdGroupServingStatusReason = "ADVERTISER_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonCAMPAIGNARCHIVEDDETAIL                SponsoredProductsAdGroupServingStatusReason = "CAMPAIGN_ARCHIVED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonCAMPAIGNINCOMPLETEDETAIL              SponsoredProductsAdGroupServingStatusReason = "CAMPAIGN_INCOMPLETE_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonCAMPAIGNOUTOFBUDGETDETAIL             SponsoredProductsAdGroupServingStatusReason = "CAMPAIGN_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonCAMPAIGNPAUSEDDETAIL                  SponsoredProductsAdGroupServingStatusReason = "CAMPAIGN_PAUSED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonCAMPAIGNSTATUSENABLEDDETAIL           SponsoredProductsAdGroupServingStatusReason = "CAMPAIGN_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonENDEDDETAIL                           SponsoredProductsAdGroupServingStatusReason = "ENDED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonOTHER                                 SponsoredProductsAdGroupServingStatusReason = "OTHER"
	SponsoredProductsAdGroupServingStatusReasonPENDINGREVIEWDETAIL                   SponsoredProductsAdGroupServingStatusReason = "PENDING_REVIEW_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPENDINGSTARTDATEDETAIL                SponsoredProductsAdGroupServingStatusReason = "PENDING_START_DATE_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOARCHIVEDDETAIL               SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_ARCHIVED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOENDEDDETAIL                  SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_ENDED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOOUTOFBUDGETDETAIL            SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOPAUSEDDETAIL                 SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_PAUSED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOPENDINGSTARTDATEDETAIL       SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_PENDING_START_DATE_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonPORTFOLIOSTATUSENABLEDDETAIL          SponsoredProductsAdGroupServingStatusReason = "PORTFOLIO_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdGroupServingStatusReasonREJECTEDDETAIL                        SponsoredProductsAdGroupServingStatusReason = "REJECTED_DETAIL"
)

// Defines values for SponsoredProductsAdServingStatus.
const (
	SponsoredProductsAdServingStatusACCOUNTOUTOFBUDGET               SponsoredProductsAdServingStatus = "ACCOUNT_OUT_OF_BUDGET"
	SponsoredProductsAdServingStatusADARCHIVED                       SponsoredProductsAdServingStatus = "AD_ARCHIVED"
	SponsoredProductsAdServingStatusADCREATIONFAILED                 SponsoredProductsAdServingStatus = "AD_CREATION_FAILED"
	SponsoredProductsAdServingStatusADCREATIONOFFLINEFAILED          SponsoredProductsAdServingStatus = "AD_CREATION_OFFLINE_FAILED"
	SponsoredProductsAdServingStatusADCREATIONOFFLINEINPROGRESS      SponsoredProductsAdServingStatus = "AD_CREATION_OFFLINE_IN_PROGRESS"
	SponsoredProductsAdServingStatusADCREATIONOFFLINEPENDING         SponsoredProductsAdServingStatus = "AD_CREATION_OFFLINE_PENDING"
	SponsoredProductsAdServingStatusADELIGIBLE                       SponsoredProductsAdServingStatus = "AD_ELIGIBLE"
	SponsoredProductsAdServingStatusADGROUPARCHIVED                  SponsoredProductsAdServingStatus = "AD_GROUP_ARCHIVED"
	SponsoredProductsAdServingStatusADGROUPINCOMPLETE                SponsoredProductsAdServingStatus = "AD_GROUP_INCOMPLETE"
	SponsoredProductsAdServingStatusADGROUPLOWBID                    SponsoredProductsAdServingStatus = "AD_GROUP_LOW_BID"
	SponsoredProductsAdServingStatusADGROUPPAUSED                    SponsoredProductsAdServingStatus = "AD_GROUP_PAUSED"
	SponsoredProductsAdServingStatusADGROUPPOLICINGCREATIVEREJECTED  SponsoredProductsAdServingStatus = "AD_GROUP_POLICING_CREATIVE_REJECTED"
	SponsoredProductsAdServingStatusADGROUPPOLICINGPENDINGREVIEW     SponsoredProductsAdServingStatus = "AD_GROUP_POLICING_PENDING_REVIEW"
	SponsoredProductsAdServingStatusADGROUPSTATUSENABLED             SponsoredProductsAdServingStatus = "AD_GROUP_STATUS_ENABLED"
	SponsoredProductsAdServingStatusADINELIGIBLE                     SponsoredProductsAdServingStatus = "AD_INELIGIBLE"
	SponsoredProductsAdServingStatusADLANDINGPAGENOTAVAILABLE        SponsoredProductsAdServingStatus = "AD_LANDING_PAGE_NOT_AVAILABLE"
	SponsoredProductsAdServingStatusADMISSINGDECORATION              SponsoredProductsAdServingStatus = "AD_MISSING_DECORATION"
	SponsoredProductsAdServingStatusADMISSINGIMAGE                   SponsoredProductsAdServingStatus = "AD_MISSING_IMAGE"
	SponsoredProductsAdServingStatusADNOPURCHASABLEOFFER             SponsoredProductsAdServingStatus = "AD_NO_PURCHASABLE_OFFER"
	SponsoredProductsAdServingStatusADNOTBUYABLE                     SponsoredProductsAdServingStatus = "AD_NOT_BUYABLE"
	SponsoredProductsAdServingStatusADNOTINBUYBOX                    SponsoredProductsAdServingStatus = "AD_NOT_IN_BUYBOX"
	SponsoredProductsAdServingStatusADOUTOFSTOCK                     SponsoredProductsAdServingStatus = "AD_OUT_OF_STOCK"
	SponsoredProductsAdServingStatusADPAUSED                         SponsoredProductsAdServingStatus = "AD_PAUSED"
	SponsoredProductsAdServingStatusADPOLICINGPENDINGREVIEW          SponsoredProductsAdServingStatus = "AD_POLICING_PENDING_REVIEW"
	SponsoredProductsAdServingStatusADPOLICINGSUSPENDED              SponsoredProductsAdServingStatus = "AD_POLICING_SUSPENDED"
	SponsoredProductsAdServingStatusADSTATUSLIVE                     SponsoredProductsAdServingStatus = "AD_STATUS_LIVE"
	SponsoredProductsAdServingStatusADVERTISERACCOUNTOUTOFBUDGET     SponsoredProductsAdServingStatus = "ADVERTISER_ACCOUNT_OUT_OF_BUDGET"
	SponsoredProductsAdServingStatusADVERTISERARCHIVED               SponsoredProductsAdServingStatus = "ADVERTISER_ARCHIVED"
	SponsoredProductsAdServingStatusADVERTISEREXCEEDSPENDSLIMIT      SponsoredProductsAdServingStatus = "ADVERTISER_EXCEED_SPENDS_LIMIT"
	SponsoredProductsAdServingStatusADVERTISEROUTOFBUDGET            SponsoredProductsAdServingStatus = "ADVERTISER_OUT_OF_BUDGET"
	SponsoredProductsAdServingStatusADVERTISERPAUSED                 SponsoredProductsAdServingStatus = "ADVERTISER_PAUSED"
	SponsoredProductsAdServingStatusADVERTISERPAYMENTFAILURE         SponsoredProductsAdServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	SponsoredProductsAdServingStatusADVERTISERPOLICINGPENDINGREVIEW  SponsoredProductsAdServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	SponsoredProductsAdServingStatusADVERTISERPOLICINGSUSPENDED      SponsoredProductsAdServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	SponsoredProductsAdServingStatusADVERTISERSTATUSENABLED          SponsoredProductsAdServingStatus = "ADVERTISER_STATUS_ENABLED"
	SponsoredProductsAdServingStatusCAMPAIGNADSNOTDELIVERING         SponsoredProductsAdServingStatus = "CAMPAIGN_ADS_NOT_DELIVERING"
	SponsoredProductsAdServingStatusCAMPAIGNARCHIVED                 SponsoredProductsAdServingStatus = "CAMPAIGN_ARCHIVED"
	SponsoredProductsAdServingStatusCAMPAIGNENDED                    SponsoredProductsAdServingStatus = "CAMPAIGN_ENDED"
	SponsoredProductsAdServingStatusCAMPAIGNINCOMPLETE               SponsoredProductsAdServingStatus = "CAMPAIGN_INCOMPLETE"
	SponsoredProductsAdServingStatusCAMPAIGNOUTOFBUDGET              SponsoredProductsAdServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	SponsoredProductsAdServingStatusCAMPAIGNPAUSED                   SponsoredProductsAdServingStatus = "CAMPAIGN_PAUSED"
	SponsoredProductsAdServingStatusCAMPAIGNPENDINGSTARTDATE         SponsoredProductsAdServingStatus = "CAMPAIGN_PENDING_START_DATE"
	SponsoredProductsAdServingStatusCAMPAIGNSTATUSENABLED            SponsoredProductsAdServingStatus = "CAMPAIGN_STATUS_ENABLED"
	SponsoredProductsAdServingStatusELIGIBLE                         SponsoredProductsAdServingStatus = "ELIGIBLE"
	SponsoredProductsAdServingStatusENDED                            SponsoredProductsAdServingStatus = "ENDED"
	SponsoredProductsAdServingStatusINELIGIBLE                       SponsoredProductsAdServingStatus = "INELIGIBLE"
	SponsoredProductsAdServingStatusLANDINGPAGENOTAVAILABLE          SponsoredProductsAdServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SponsoredProductsAdServingStatusMISSINGDECORATION                SponsoredProductsAdServingStatus = "MISSING_DECORATION"
	SponsoredProductsAdServingStatusMISSINGIMAGE                     SponsoredProductsAdServingStatus = "MISSING_IMAGE"
	SponsoredProductsAdServingStatusNOINVENTORY                      SponsoredProductsAdServingStatus = "NO_INVENTORY"
	SponsoredProductsAdServingStatusNOPURCHASABLEOFFER               SponsoredProductsAdServingStatus = "NO_PURCHASABLE_OFFER"
	SponsoredProductsAdServingStatusNOTBUYABLE                       SponsoredProductsAdServingStatus = "NOT_BUYABLE"
	SponsoredProductsAdServingStatusNOTINBUYBOX                      SponsoredProductsAdServingStatus = "NOT_IN_BUYBOX"
	SponsoredProductsAdServingStatusOTHER                            SponsoredProductsAdServingStatus = "OTHER"
	SponsoredProductsAdServingStatusOUTOFSTOCK                       SponsoredProductsAdServingStatus = "OUT_OF_STOCK"
	SponsoredProductsAdServingStatusPENDINGREVIEW                    SponsoredProductsAdServingStatus = "PENDING_REVIEW"
	SponsoredProductsAdServingStatusPENDINGSTARTDATE                 SponsoredProductsAdServingStatus = "PENDING_START_DATE"
	SponsoredProductsAdServingStatusPIRRULEEXCLUDED                  SponsoredProductsAdServingStatus = "PIR_RULE_EXCLUDED"
	SponsoredProductsAdServingStatusPORTFOLIOARCHIVED                SponsoredProductsAdServingStatus = "PORTFOLIO_ARCHIVED"
	SponsoredProductsAdServingStatusPORTFOLIOENDED                   SponsoredProductsAdServingStatus = "PORTFOLIO_ENDED"
	SponsoredProductsAdServingStatusPORTFOLIOOUTOFBUDGET             SponsoredProductsAdServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	SponsoredProductsAdServingStatusPORTFOLIOPAUSED                  SponsoredProductsAdServingStatus = "PORTFOLIO_PAUSED"
	SponsoredProductsAdServingStatusPORTFOLIOPENDINGSTARTDATE        SponsoredProductsAdServingStatus = "PORTFOLIO_PENDING_START_DATE"
	SponsoredProductsAdServingStatusPORTFOLIOSTATUSENABLED           SponsoredProductsAdServingStatus = "PORTFOLIO_STATUS_ENABLED"
	SponsoredProductsAdServingStatusREJECTED                         SponsoredProductsAdServingStatus = "REJECTED"
	SponsoredProductsAdServingStatusSECURITYSCANPENDINGREVIEW        SponsoredProductsAdServingStatus = "SECURITY_SCAN_PENDING_REVIEW"
	SponsoredProductsAdServingStatusSECURITYSCANREJECTED             SponsoredProductsAdServingStatus = "SECURITY_SCAN_REJECTED"
	SponsoredProductsAdServingStatusSTATUSUNAVAILABLE                SponsoredProductsAdServingStatus = "STATUS_UNAVAILABLE"
	SponsoredProductsAdServingStatusTARGETINGCLAUSEARCHIVED          SponsoredProductsAdServingStatus = "TARGETING_CLAUSE_ARCHIVED"
	SponsoredProductsAdServingStatusTARGETINGCLAUSEBLOCKED           SponsoredProductsAdServingStatus = "TARGETING_CLAUSE_BLOCKED"
	SponsoredProductsAdServingStatusTARGETINGCLAUSEPAUSED            SponsoredProductsAdServingStatus = "TARGETING_CLAUSE_PAUSED"
	SponsoredProductsAdServingStatusTARGETINGCLAUSEPOLICINGSUSPENDED SponsoredProductsAdServingStatus = "TARGETING_CLAUSE_POLICING_SUSPENDED"
	SponsoredProductsAdServingStatusTARGETINGCLAUSESTATUSLIVE        SponsoredProductsAdServingStatus = "TARGETING_CLAUSE_STATUS_LIVE"
)

// Defines values for SponsoredProductsAdServingStatusReason.
const (
	SponsoredProductsAdServingStatusReasonACCOUNTOUTOFBUDGETDETAIL                 SponsoredProductsAdServingStatusReason = "ACCOUNT_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdServingStatusReasonADARCHIVEDDETAIL                         SponsoredProductsAdServingStatusReason = "AD_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonADCREATIONOFFLINEFAILED                  SponsoredProductsAdServingStatusReason = "AD_CREATION_OFFLINE_FAILED"
	SponsoredProductsAdServingStatusReasonADCREATIONOFFLINEINPROGRESS              SponsoredProductsAdServingStatusReason = "AD_CREATION_OFFLINE_IN_PROGRESS"
	SponsoredProductsAdServingStatusReasonADCREATIONOFFLINEPENDING                 SponsoredProductsAdServingStatusReason = "AD_CREATION_OFFLINE_PENDING"
	SponsoredProductsAdServingStatusReasonADGROUPARCHIVEDDETAIL                    SponsoredProductsAdServingStatusReason = "AD_GROUP_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPINCOMPLETEDETAIL                  SponsoredProductsAdServingStatusReason = "AD_GROUP_INCOMPLETE_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPLOWBIDDETAIL                      SponsoredProductsAdServingStatusReason = "AD_GROUP_LOW_BID_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPPAUSEDDETAIL                      SponsoredProductsAdServingStatusReason = "AD_GROUP_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPPOLICINGCREATIVEREJECTEDDETAIL    SponsoredProductsAdServingStatusReason = "AD_GROUP_POLICING_CREATIVE_REJECTED_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPPOLICINGPENDINGREVIEWDETAIL       SponsoredProductsAdServingStatusReason = "AD_GROUP_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsAdServingStatusReasonADGROUPSTATUSENABLEDDETAIL               SponsoredProductsAdServingStatusReason = "AD_GROUP_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdServingStatusReasonADPAUSEDDETAIL                           SponsoredProductsAdServingStatusReason = "AD_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonADPOLICINGPENDINGREVIEW                  SponsoredProductsAdServingStatusReason = "AD_POLICING_PENDING_REVIEW"
	SponsoredProductsAdServingStatusReasonADPOLICINGPENDINGREVIEWDETAIL            SponsoredProductsAdServingStatusReason = "AD_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsAdServingStatusReasonADPOLICINGSUSPENDEDDETAIL                SponsoredProductsAdServingStatusReason = "AD_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsAdServingStatusReasonADSTATUSLIVEDETAIL                       SponsoredProductsAdServingStatusReason = "AD_STATUS_LIVE_DETAIL"
	SponsoredProductsAdServingStatusReasonADULTPRODUCT                             SponsoredProductsAdServingStatusReason = "ADULT_PRODUCT"
	SponsoredProductsAdServingStatusReasonADVERTISERACCOUNTOUTOFBUDGETDETAIL       SponsoredProductsAdServingStatusReason = "ADVERTISER_ACCOUNT_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERARCHIVEDDETAIL                 SponsoredProductsAdServingStatusReason = "ADVERTISER_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISEREXCEEDSPENDSLIMITDETAIL        SponsoredProductsAdServingStatusReason = "ADVERTISER_EXCEED_SPENDS_LIMIT_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISEROUTOFBUDGETDETAIL              SponsoredProductsAdServingStatusReason = "ADVERTISER_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERPAUSEDDETAIL                   SponsoredProductsAdServingStatusReason = "ADVERTISER_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERPAYMENTFAILUREDETAIL           SponsoredProductsAdServingStatusReason = "ADVERTISER_PAYMENT_FAILURE_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERPOLICINGPENDINGREVIEWDETAIL    SponsoredProductsAdServingStatusReason = "ADVERTISER_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERPOLICINGSUSPENDEDDETAIL        SponsoredProductsAdServingStatusReason = "ADVERTISER_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsAdServingStatusReasonADVERTISERSTATUSENABLEDDETAIL            SponsoredProductsAdServingStatusReason = "ADVERTISER_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdServingStatusReasonASINQUARANTINED                          SponsoredProductsAdServingStatusReason = "ASIN_QUARANTINED"
	SponsoredProductsAdServingStatusReasonBRANDREMOVED                             SponsoredProductsAdServingStatusReason = "BRAND_REMOVED"
	SponsoredProductsAdServingStatusReasonCAMPAIGNADSNOTDELIVERINGDETAIL           SponsoredProductsAdServingStatusReason = "CAMPAIGN_ADS_NOT_DELIVERING_DETAIL"
	SponsoredProductsAdServingStatusReasonCAMPAIGNARCHIVEDDETAIL                   SponsoredProductsAdServingStatusReason = "CAMPAIGN_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonCAMPAIGNINCOMPLETEDETAIL                 SponsoredProductsAdServingStatusReason = "CAMPAIGN_INCOMPLETE_DETAIL"
	SponsoredProductsAdServingStatusReasonCAMPAIGNOUTOFBUDGETDETAIL                SponsoredProductsAdServingStatusReason = "CAMPAIGN_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdServingStatusReasonCAMPAIGNPAUSEDDETAIL                     SponsoredProductsAdServingStatusReason = "CAMPAIGN_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonCAMPAIGNSTATUSENABLEDDETAIL              SponsoredProductsAdServingStatusReason = "CAMPAIGN_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdServingStatusReasonCBANOTSUPPORTED                          SponsoredProductsAdServingStatusReason = "CBA_NOT_SUPPORTED"
	SponsoredProductsAdServingStatusReasonCLOSEDGL                                 SponsoredProductsAdServingStatusReason = "CLOSED_GL"
	SponsoredProductsAdServingStatusReasonCPINELIGIBLE                             SponsoredProductsAdServingStatusReason = "CP_INELIGIBLE"
	SponsoredProductsAdServingStatusReasonCPINELIGIBLEASIN                         SponsoredProductsAdServingStatusReason = "CP_INELIGIBLE_ASIN"
	SponsoredProductsAdServingStatusReasonCPINELIGIBLEUNKNOWN                      SponsoredProductsAdServingStatusReason = "CP_INELIGIBLE_UNKNOWN"
	SponsoredProductsAdServingStatusReasonCPINELIGIBLEVENDOR                       SponsoredProductsAdServingStatusReason = "CP_INELIGIBLE_VENDOR"
	SponsoredProductsAdServingStatusReasonELIGIBLEDETAIL                           SponsoredProductsAdServingStatusReason = "ELIGIBLE_DETAIL"
	SponsoredProductsAdServingStatusReasonENDEDDETAIL                              SponsoredProductsAdServingStatusReason = "ENDED_DETAIL"
	SponsoredProductsAdServingStatusReasonINELIGIBLECONDITION                      SponsoredProductsAdServingStatusReason = "INELIGIBLE_CONDITION"
	SponsoredProductsAdServingStatusReasonINVENTORYINCOMPLETE                      SponsoredProductsAdServingStatusReason = "INVENTORY_INCOMPLETE"
	SponsoredProductsAdServingStatusReasonITEMMISSING                              SponsoredProductsAdServingStatusReason = "ITEM_MISSING"
	SponsoredProductsAdServingStatusReasonLANDINGPAGEINELIGIBLE                    SponsoredProductsAdServingStatusReason = "LANDING_PAGE_INELIGIBLE"
	SponsoredProductsAdServingStatusReasonLANDINGPAGENOTAVAILABLEDETAIL            SponsoredProductsAdServingStatusReason = "LANDING_PAGE_NOT_AVAILABLE_DETAIL"
	SponsoredProductsAdServingStatusReasonMISSINGDECORATIONDETAIL                  SponsoredProductsAdServingStatusReason = "MISSING_DECORATION_DETAIL"
	SponsoredProductsAdServingStatusReasonMISSINGIMAGEDETAIL                       SponsoredProductsAdServingStatusReason = "MISSING_IMAGE_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONADULTNOVELTYPVDETAIL           SponsoredProductsAdServingStatusReason = "MODERATION_ADULT_NOVELTY_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONADULTPRODUCTPVDETAIL           SponsoredProductsAdServingStatusReason = "MODERATION_ADULT_PRODUCT_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONADULTSOFTLINESPVDETAIL         SponsoredProductsAdServingStatusReason = "MODERATION_ADULT_SOFTLINES_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONCLAIMWEIGHTLOSSPVDETAIL        SponsoredProductsAdServingStatusReason = "MODERATION_CLAIM_WEIGHTLOSS_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONCONTENTNUDITYPVDETAIL          SponsoredProductsAdServingStatusReason = "MODERATION_CONTENT_NUDITY_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONCONTENTPROVOCATIVEPVDETAIL     SponsoredProductsAdServingStatusReason = "MODERATION_CONTENT_PROVOCATIVE_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONCONTENTSMOKINGPVDETAIL         SponsoredProductsAdServingStatusReason = "MODERATION_CONTENT_SMOKING_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONCRITICALEVENTSPVDETAIL         SponsoredProductsAdServingStatusReason = "MODERATION_CRITICAL_EVENTS_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONERROR404PVDETAIL               SponsoredProductsAdServingStatusReason = "MODERATION_ERROR_404_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONGRAPHICALSEXUALIMAGESPVDETAIL  SponsoredProductsAdServingStatusReason = "MODERATION_GRAPHICAL_SEXUAL_IMAGES_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONHFSSPRODUCTPVDETAIL            SponsoredProductsAdServingStatusReason = "MODERATION_HFSS_PRODUCT_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONLANGUAGEOFFENSIVEPVDETAIL      SponsoredProductsAdServingStatusReason = "MODERATION_LANGUAGE_OFFENSIVE_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONNOTCOMPLIANTTOADPOLICYPVDETAIL SponsoredProductsAdServingStatusReason = "MODERATION_NOT_COMPLIANT_TO_AD_POLICY_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonMODERATIONSMOKINGRELATEDPVDETAIL         SponsoredProductsAdServingStatusReason = "MODERATION_SMOKING_RELATED_PV_DETAIL"
	SponsoredProductsAdServingStatusReasonNOINVENTORYDETAIL                        SponsoredProductsAdServingStatusReason = "NO_INVENTORY_DETAIL"
	SponsoredProductsAdServingStatusReasonNOPURCHASABLEOFFERDETAIL                 SponsoredProductsAdServingStatusReason = "NO_PURCHASABLE_OFFER_DETAIL"
	SponsoredProductsAdServingStatusReasonNOTBUYABLEDETAIL                         SponsoredProductsAdServingStatusReason = "NOT_BUYABLE_DETAIL"
	SponsoredProductsAdServingStatusReasonNOTINBUYBOXDETAIL                        SponsoredProductsAdServingStatusReason = "NOT_IN_BUYBOX_DETAIL"
	SponsoredProductsAdServingStatusReasonOFFERMISSINGDETAIL                       SponsoredProductsAdServingStatusReason = "OFFER_MISSING_DETAIL"
	SponsoredProductsAdServingStatusReasonOTHER                                    SponsoredProductsAdServingStatusReason = "OTHER"
	SponsoredProductsAdServingStatusReasonOUTOFSTOCKDETAIL                         SponsoredProductsAdServingStatusReason = "OUT_OF_STOCK_DETAIL"
	SponsoredProductsAdServingStatusReasonPENDINGREVIEWDETAIL                      SponsoredProductsAdServingStatusReason = "PENDING_REVIEW_DETAIL"
	SponsoredProductsAdServingStatusReasonPENDINGSTARTDATEDETAIL                   SponsoredProductsAdServingStatusReason = "PENDING_START_DATE_DETAIL"
	SponsoredProductsAdServingStatusReasonPIRRULEEXCLUDED                          SponsoredProductsAdServingStatusReason = "PIR_RULE_EXCLUDED"
	SponsoredProductsAdServingStatusReasonPORTFOLIOARCHIVEDDETAIL                  SponsoredProductsAdServingStatusReason = "PORTFOLIO_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonPORTFOLIOENDEDDETAIL                     SponsoredProductsAdServingStatusReason = "PORTFOLIO_ENDED_DETAIL"
	SponsoredProductsAdServingStatusReasonPORTFOLIOOUTOFBUDGETDETAIL               SponsoredProductsAdServingStatusReason = "PORTFOLIO_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsAdServingStatusReasonPORTFOLIOPAUSEDDETAIL                    SponsoredProductsAdServingStatusReason = "PORTFOLIO_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonPORTFOLIOPENDINGSTARTDATEDETAIL          SponsoredProductsAdServingStatusReason = "PORTFOLIO_PENDING_START_DATE_DETAIL"
	SponsoredProductsAdServingStatusReasonPORTFOLIOSTATUSENABLEDDETAIL             SponsoredProductsAdServingStatusReason = "PORTFOLIO_STATUS_ENABLED_DETAIL"
	SponsoredProductsAdServingStatusReasonREJECTEDDETAIL                           SponsoredProductsAdServingStatusReason = "REJECTED_DETAIL"
	SponsoredProductsAdServingStatusReasonRESTRICTEDGL                             SponsoredProductsAdServingStatusReason = "RESTRICTED_GL"
	SponsoredProductsAdServingStatusReasonSECURITYSCANPENDINGREVIEW                SponsoredProductsAdServingStatusReason = "SECURITY_SCAN_PENDING_REVIEW"
	SponsoredProductsAdServingStatusReasonSECURITYSCANREJECTED                     SponsoredProductsAdServingStatusReason = "SECURITY_SCAN_REJECTED"
	SponsoredProductsAdServingStatusReasonSKUDEFECTIVE                             SponsoredProductsAdServingStatusReason = "SKU_DEFECTIVE"
	SponsoredProductsAdServingStatusReasonSTATUSUNAVAILABLE                        SponsoredProductsAdServingStatusReason = "STATUS_UNAVAILABLE"
	SponsoredProductsAdServingStatusReasonTARGETINGCLAUSEARCHIVEDDETAIL            SponsoredProductsAdServingStatusReason = "TARGETING_CLAUSE_ARCHIVED_DETAIL"
	SponsoredProductsAdServingStatusReasonTARGETINGCLAUSEBLOCKEDDETAIL             SponsoredProductsAdServingStatusReason = "TARGETING_CLAUSE_BLOCKED_DETAIL"
	SponsoredProductsAdServingStatusReasonTARGETINGCLAUSEPAUSEDDETAIL              SponsoredProductsAdServingStatusReason = "TARGETING_CLAUSE_PAUSED_DETAIL"
	SponsoredProductsAdServingStatusReasonTARGETINGCLAUSEPOLICINGSUSPENDEDDETAIL   SponsoredProductsAdServingStatusReason = "TARGETING_CLAUSE_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsAdServingStatusReasonTARGETINGCLAUSESTATUSLIVEDETAIL          SponsoredProductsAdServingStatusReason = "TARGETING_CLAUSE_STATUS_LIVE_DETAIL"
	SponsoredProductsAdServingStatusReasonVARIATIONPARENT                          SponsoredProductsAdServingStatusReason = "VARIATION_PARENT"
)

// Defines values for SponsoredProductsApplicableMarketplacesErrorReason.
const (
	APPLICABLEMARKETPLACESMISMATCHERROR SponsoredProductsApplicableMarketplacesErrorReason = "APPLICABLE_MARKETPLACES_MISMATCH_ERROR"
)

// Defines values for SponsoredProductsAsinOwnershipErrorReason.
const (
	ASINNOTOWNEDBYAUTHOR SponsoredProductsAsinOwnershipErrorReason = "ASIN_NOT_OWNED_BY_AUTHOR"
)

// Defines values for SponsoredProductsBiddingErrorReason.
const (
	BIDGTBUDGET              SponsoredProductsBiddingErrorReason = "BID_GT_BUDGET"
	BIDINVALIDPLACEMENT      SponsoredProductsBiddingErrorReason = "BID_INVALID_PLACEMENT"
	BIDOUTOFMARKETPLACERANGE SponsoredProductsBiddingErrorReason = "BID_OUT_OF_MARKET_PLACE_RANGE"
)

// Defines values for SponsoredProductsBiddingStrategy.
const (
	SponsoredProductsBiddingStrategyAUTOFORSALES   SponsoredProductsBiddingStrategy = "AUTO_FOR_SALES"
	SponsoredProductsBiddingStrategyLEGACYFORSALES SponsoredProductsBiddingStrategy = "LEGACY_FOR_SALES"
	SponsoredProductsBiddingStrategyMANUAL         SponsoredProductsBiddingStrategy = "MANUAL"
	SponsoredProductsBiddingStrategyOTHER          SponsoredProductsBiddingStrategy = "OTHER"
	SponsoredProductsBiddingStrategyRULEBASED      SponsoredProductsBiddingStrategy = "RULE_BASED"
)

// Defines values for SponsoredProductsBillingErrorReason.
const (
	ADVERTISERBILLINGSETUPINCOMPLETE SponsoredProductsBillingErrorReason = "ADVERTISER_BILLING_SETUP_INCOMPLETE"
	ADVERTISERSUSPENDED              SponsoredProductsBillingErrorReason = "ADVERTISER_SUSPENDED"
	BILLINGACCOUNTNOTFOUND           SponsoredProductsBillingErrorReason = "BILLING_ACCOUNT_NOT_FOUND"
	EXPIREDPAYMENTMETHOD             SponsoredProductsBillingErrorReason = "EXPIRED_PAYMENT_METHOD"
	PAYMENTPROFILENOTFOUND           SponsoredProductsBillingErrorReason = "PAYMENT_PROFILE_NOT_FOUND"
	VETTINGFAILURE                   SponsoredProductsBillingErrorReason = "VETTING_FAILURE"
)

// Defines values for SponsoredProductsBudgetErrorReason.
const (
	BUDGETCURRENCYDOESNOTMATCHMARKETPLACESETTINGS SponsoredProductsBudgetErrorReason = "BUDGET_CURRENCY_DOES_NOT_MATCH_MARKETPLACE_SETTINGS"
	BUDGETINGPOLICYINVALID                        SponsoredProductsBudgetErrorReason = "BUDGETING_POLICY_INVALID"
	BUDGETLTDEFAULTBIDS                           SponsoredProductsBudgetErrorReason = "BUDGET_LT_DEFAULT_BIDS"
	BUDGETLTKEYWORDBIDS                           SponsoredProductsBudgetErrorReason = "BUDGET_LT_KEYWORD_BIDS"
	BUDGETLTPREDEFINEDTARGETBIDS                  SponsoredProductsBudgetErrorReason = "BUDGET_LT_PREDEFINED_TARGET_BIDS"
	BUDGETOUTOFMARKETPLACERANGE                   SponsoredProductsBudgetErrorReason = "BUDGET_OUT_OF_MARKET_PLACE_RANGE"
	BUDGETTOOHIGH                                 SponsoredProductsBudgetErrorReason = "BUDGET_TOO_HIGH"
	BUDGETTOOLOW                                  SponsoredProductsBudgetErrorReason = "BUDGET_TOO_LOW"
	MISSINGBUDGETINGPOLICY                        SponsoredProductsBudgetErrorReason = "MISSING_BUDGETING_POLICY"
	MISSINGINBUDGETFLAG                           SponsoredProductsBudgetErrorReason = "MISSING_IN_BUDGET_FLAG"
)

// Defines values for SponsoredProductsBudgetType.
const (
	SponsoredProductsBudgetTypeDAILY SponsoredProductsBudgetType = "DAILY"
	SponsoredProductsBudgetTypeOTHER SponsoredProductsBudgetType = "OTHER"
)

// Defines values for SponsoredProductsCampaignServingStatus.
const (
	SponsoredProductsCampaignServingStatusACCOUNTOUTOFBUDGET              SponsoredProductsCampaignServingStatus = "ACCOUNT_OUT_OF_BUDGET"
	SponsoredProductsCampaignServingStatusADVERTISERARCHIVED              SponsoredProductsCampaignServingStatus = "ADVERTISER_ARCHIVED"
	SponsoredProductsCampaignServingStatusADVERTISEROUTOFBUDGET           SponsoredProductsCampaignServingStatus = "ADVERTISER_OUT_OF_BUDGET"
	SponsoredProductsCampaignServingStatusADVERTISERPAUSED                SponsoredProductsCampaignServingStatus = "ADVERTISER_PAUSED"
	SponsoredProductsCampaignServingStatusADVERTISERPAYMENTFAILURE        SponsoredProductsCampaignServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	SponsoredProductsCampaignServingStatusADVERTISERPOLICINGPENDINGREVIEW SponsoredProductsCampaignServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	SponsoredProductsCampaignServingStatusADVERTISERPOLICINGSUSPENDED     SponsoredProductsCampaignServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	SponsoredProductsCampaignServingStatusCAMPAIGNARCHIVED                SponsoredProductsCampaignServingStatus = "CAMPAIGN_ARCHIVED"
	SponsoredProductsCampaignServingStatusCAMPAIGNINCOMPLETE              SponsoredProductsCampaignServingStatus = "CAMPAIGN_INCOMPLETE"
	SponsoredProductsCampaignServingStatusCAMPAIGNOUTOFBUDGET             SponsoredProductsCampaignServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	SponsoredProductsCampaignServingStatusCAMPAIGNPAUSED                  SponsoredProductsCampaignServingStatus = "CAMPAIGN_PAUSED"
	SponsoredProductsCampaignServingStatusCAMPAIGNSTATUSENABLED           SponsoredProductsCampaignServingStatus = "CAMPAIGN_STATUS_ENABLED"
	SponsoredProductsCampaignServingStatusENDED                           SponsoredProductsCampaignServingStatus = "ENDED"
	SponsoredProductsCampaignServingStatusOTHER                           SponsoredProductsCampaignServingStatus = "OTHER"
	SponsoredProductsCampaignServingStatusPENDINGREVIEW                   SponsoredProductsCampaignServingStatus = "PENDING_REVIEW"
	SponsoredProductsCampaignServingStatusPENDINGSTARTDATE                SponsoredProductsCampaignServingStatus = "PENDING_START_DATE"
	SponsoredProductsCampaignServingStatusPORTFOLIOARCHIVED               SponsoredProductsCampaignServingStatus = "PORTFOLIO_ARCHIVED"
	SponsoredProductsCampaignServingStatusPORTFOLIOENDED                  SponsoredProductsCampaignServingStatus = "PORTFOLIO_ENDED"
	SponsoredProductsCampaignServingStatusPORTFOLIOOUTOFBUDGET            SponsoredProductsCampaignServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	SponsoredProductsCampaignServingStatusPORTFOLIOPAUSED                 SponsoredProductsCampaignServingStatus = "PORTFOLIO_PAUSED"
	SponsoredProductsCampaignServingStatusPORTFOLIOPENDINGSTARTDATE       SponsoredProductsCampaignServingStatus = "PORTFOLIO_PENDING_START_DATE"
	SponsoredProductsCampaignServingStatusPORTFOLIOSTATUSENABLED          SponsoredProductsCampaignServingStatus = "PORTFOLIO_STATUS_ENABLED"
	SponsoredProductsCampaignServingStatusREJECTED                        SponsoredProductsCampaignServingStatus = "REJECTED"
)

// Defines values for SponsoredProductsCampaignServingStatusReason.
const (
	SponsoredProductsCampaignServingStatusReasonACCOUNTOUTOFBUDGETDETAIL              SponsoredProductsCampaignServingStatusReason = "ACCOUNT_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISERARCHIVEDDETAIL              SponsoredProductsCampaignServingStatusReason = "ADVERTISER_ARCHIVED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISEROUTOFBUDGETDETAIL           SponsoredProductsCampaignServingStatusReason = "ADVERTISER_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISERPAUSEDDETAIL                SponsoredProductsCampaignServingStatusReason = "ADVERTISER_PAUSED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISERPAYMENTFAILUREDETAIL        SponsoredProductsCampaignServingStatusReason = "ADVERTISER_PAYMENT_FAILURE_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISERPOLICINGPENDINGREVIEWDETAIL SponsoredProductsCampaignServingStatusReason = "ADVERTISER_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsCampaignServingStatusReasonADVERTISERPOLICINGSUSPENDEDDETAIL     SponsoredProductsCampaignServingStatusReason = "ADVERTISER_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonCAMPAIGNARCHIVEDDETAIL                SponsoredProductsCampaignServingStatusReason = "CAMPAIGN_ARCHIVED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonCAMPAIGNINCOMPLETEDETAIL              SponsoredProductsCampaignServingStatusReason = "CAMPAIGN_INCOMPLETE_DETAIL"
	SponsoredProductsCampaignServingStatusReasonCAMPAIGNOUTOFBUDGETDETAIL             SponsoredProductsCampaignServingStatusReason = "CAMPAIGN_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsCampaignServingStatusReasonCAMPAIGNPAUSEDDETAIL                  SponsoredProductsCampaignServingStatusReason = "CAMPAIGN_PAUSED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonCAMPAIGNSTATUSENABLEDDETAIL           SponsoredProductsCampaignServingStatusReason = "CAMPAIGN_STATUS_ENABLED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonENDEDDETAIL                           SponsoredProductsCampaignServingStatusReason = "ENDED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonOTHER                                 SponsoredProductsCampaignServingStatusReason = "OTHER"
	SponsoredProductsCampaignServingStatusReasonPENDINGREVIEWDETAIL                   SponsoredProductsCampaignServingStatusReason = "PENDING_REVIEW_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPENDINGSTARTDATEDETAIL                SponsoredProductsCampaignServingStatusReason = "PENDING_START_DATE_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOARCHIVEDDETAIL               SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_ARCHIVED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOENDEDDETAIL                  SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_ENDED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOOUTOFBUDGETDETAIL            SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOPAUSEDDETAIL                 SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_PAUSED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOPENDINGSTARTDATEDETAIL       SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_PENDING_START_DATE_DETAIL"
	SponsoredProductsCampaignServingStatusReasonPORTFOLIOSTATUSENABLEDDETAIL          SponsoredProductsCampaignServingStatusReason = "PORTFOLIO_STATUS_ENABLED_DETAIL"
	SponsoredProductsCampaignServingStatusReasonREJECTEDDETAIL                        SponsoredProductsCampaignServingStatusReason = "REJECTED_DETAIL"
)

// Defines values for SponsoredProductsCreateExpressionType.
const (
	SponsoredProductsCreateExpressionTypeMANUAL SponsoredProductsCreateExpressionType = "MANUAL"
)

// Defines values for SponsoredProductsCreateOrUpdateBiddingStrategy.
const (
	SponsoredProductsCreateOrUpdateBiddingStrategyAUTOFORSALES   SponsoredProductsCreateOrUpdateBiddingStrategy = "AUTO_FOR_SALES"
	SponsoredProductsCreateOrUpdateBiddingStrategyLEGACYFORSALES SponsoredProductsCreateOrUpdateBiddingStrategy = "LEGACY_FOR_SALES"
	SponsoredProductsCreateOrUpdateBiddingStrategyMANUAL         SponsoredProductsCreateOrUpdateBiddingStrategy = "MANUAL"
	SponsoredProductsCreateOrUpdateBiddingStrategyRULEBASED      SponsoredProductsCreateOrUpdateBiddingStrategy = "RULE_BASED"
)

// Defines values for SponsoredProductsCreateOrUpdateBudgetType.
const (
	DAILY SponsoredProductsCreateOrUpdateBudgetType = "DAILY"
)

// Defines values for SponsoredProductsCreateOrUpdateEntityState.
const (
	SponsoredProductsCreateOrUpdateEntityStateENABLED SponsoredProductsCreateOrUpdateEntityState = "ENABLED"
	SponsoredProductsCreateOrUpdateEntityStatePAUSED  SponsoredProductsCreateOrUpdateEntityState = "PAUSED"
)

// Defines values for SponsoredProductsCreateOrUpdateMatchType.
const (
	SponsoredProductsCreateOrUpdateMatchTypeBROAD  SponsoredProductsCreateOrUpdateMatchType = "BROAD"
	SponsoredProductsCreateOrUpdateMatchTypeEXACT  SponsoredProductsCreateOrUpdateMatchType = "EXACT"
	SponsoredProductsCreateOrUpdateMatchTypePHRASE SponsoredProductsCreateOrUpdateMatchType = "PHRASE"
)

// Defines values for SponsoredProductsCreateOrUpdateNegativeMatchType.
const (
	SponsoredProductsCreateOrUpdateNegativeMatchTypeNEGATIVEBROAD  SponsoredProductsCreateOrUpdateNegativeMatchType = "NEGATIVE_BROAD"
	SponsoredProductsCreateOrUpdateNegativeMatchTypeNEGATIVEEXACT  SponsoredProductsCreateOrUpdateNegativeMatchType = "NEGATIVE_EXACT"
	SponsoredProductsCreateOrUpdateNegativeMatchTypeNEGATIVEPHRASE SponsoredProductsCreateOrUpdateNegativeMatchType = "NEGATIVE_PHRASE"
)

// Defines values for SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType.
const (
	SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateTypeASINBRANDSAMEAS SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType = "ASIN_BRAND_SAME_AS"
	SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateTypeASINSAMEAS      SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType = "ASIN_SAME_AS"
)

// Defines values for SponsoredProductsCreateTargetingExpressionPredicateType.
const (
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINAGERANGESAMEAS          SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_AGE_RANGE_SAME_AS"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINBRANDSAMEAS             SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_BRAND_SAME_AS"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINCATEGORYSAMEAS          SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_CATEGORY_SAME_AS"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINEXPANDEDFROM            SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_EXPANDED_FROM"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINGENRESAMEAS             SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_GENRE_SAME_AS"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINISPRIMESHIPPINGELIGIBLE SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_IS_PRIME_SHIPPING_ELIGIBLE"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINPRICEBETWEEN            SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_PRICE_BETWEEN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINPRICEGREATERTHAN        SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_PRICE_GREATER_THAN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINPRICELESSTHAN           SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_PRICE_LESS_THAN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINREVIEWRATINGBETWEEN     SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_BETWEEN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINREVIEWRATINGGREATERTHAN SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_GREATER_THAN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINREVIEWRATINGLESSTHAN    SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_LESS_THAN"
	SponsoredProductsCreateTargetingExpressionPredicateTypeASINSAMEAS                  SponsoredProductsCreateTargetingExpressionPredicateType = "ASIN_SAME_AS"
)

// Defines values for SponsoredProductsCurrencyErrorReason.
const (
	CANNOTUPDATECURRENCY                 SponsoredProductsCurrencyErrorReason = "CANNOT_UPDATE_CURRENCY"
	CURRENCYNOTMATCHINGPREFERREDCURRENCY SponsoredProductsCurrencyErrorReason = "CURRENCY_NOT_MATCHING_PREFERRED_CURRENCY"
	CURRENCYNOTSUPPORTED                 SponsoredProductsCurrencyErrorReason = "CURRENCY_NOT_SUPPORTED"
	PREFERREDCURRENCYNOTSET              SponsoredProductsCurrencyErrorReason = "PREFERRED_CURRENCY_NOT_SET"
)

// Defines values for SponsoredProductsDateErrorReason.
const (
	ENDDATEEARLIERTHANTODAY               SponsoredProductsDateErrorReason = "END_DATE_EARLIER_THAN_TODAY"
	ENDDATELATERTHANMAXIMUM               SponsoredProductsDateErrorReason = "END_DATE_LATER_THAN_MAXIMUM"
	INVALIDDATE                           SponsoredProductsDateErrorReason = "INVALID_DATE"
	STARTDATEAFTERENDDATE                 SponsoredProductsDateErrorReason = "START_DATE_AFTER_END_DATE"
	STARTDATEEARLIERTHANTODAY             SponsoredProductsDateErrorReason = "START_DATE_EARLIER_THAN_TODAY"
	STARTDATELATERTHANMAXIMUM             SponsoredProductsDateErrorReason = "START_DATE_LATER_THAN_MAXIMUM"
	UPDATINGENDEDCAMPAIGNWITHOUTEXTENSION SponsoredProductsDateErrorReason = "UPDATING_ENDED_CAMPAIGN_WITHOUT_EXTENSION"
	UPDATINGREADONLYENDDATE               SponsoredProductsDateErrorReason = "UPDATING_READ_ONLY_END_DATE"
	UPDATINGREADONLYSTARTDATE             SponsoredProductsDateErrorReason = "UPDATING_READ_ONLY_START_DATE"
)

// Defines values for SponsoredProductsDuplicateValueErrorReason.
const (
	DUPLICATEVALUE                SponsoredProductsDuplicateValueErrorReason = "DUPLICATE_VALUE"
	MARKETPLACEATTRIBUTESREPEATED SponsoredProductsDuplicateValueErrorReason = "MARKETPLACE_ATTRIBUTES_REPEATED"
	NAMENOTUNIQUE                 SponsoredProductsDuplicateValueErrorReason = "NAME_NOT_UNIQUE"
)

// Defines values for SponsoredProductsEntityNotFoundErrorReason.
const (
	ENTITYNOTFOUND SponsoredProductsEntityNotFoundErrorReason = "ENTITY_NOT_FOUND"
)

// Defines values for SponsoredProductsEntityState.
const (
	SponsoredProductsEntityStateARCHIVED    SponsoredProductsEntityState = "ARCHIVED"
	SponsoredProductsEntityStateENABLED     SponsoredProductsEntityState = "ENABLED"
	SponsoredProductsEntityStateENABLING    SponsoredProductsEntityState = "ENABLING"
	SponsoredProductsEntityStateOTHER       SponsoredProductsEntityState = "OTHER"
	SponsoredProductsEntityStatePAUSED      SponsoredProductsEntityState = "PAUSED"
	SponsoredProductsEntityStateUSERDELETED SponsoredProductsEntityState = "USER_DELETED"
)

// Defines values for SponsoredProductsEntityStateErrorReason.
const (
	ARCHIVEDENTITYCANNOTBEMODIFIED              SponsoredProductsEntityStateErrorReason = "ARCHIVED_ENTITY_CANNOT_BE_MODIFIED"
	AUTOTARGETINGCLAUSECANNOTBEARCHIVEDMANUALLY SponsoredProductsEntityStateErrorReason = "AUTO_TARGETING_CLAUSE_CANNOT_BE_ARCHIVED_MANUALLY"
	INVALIDTARGETSTATE                          SponsoredProductsEntityStateErrorReason = "INVALID_TARGET_STATE"
	MARKETPLACESTATECANNOTBEARCHIVED            SponsoredProductsEntityStateErrorReason = "MARKETPLACE_STATE_CANNOT_BE_ARCHIVED"
	PARENTARCHIVEDFORBIDSUPDATES                SponsoredProductsEntityStateErrorReason = "PARENT_ARCHIVED_FORBIDS_UPDATES"
	PARENTENTITYFORBIDSCREATION                 SponsoredProductsEntityStateErrorReason = "PARENT_ENTITY_FORBIDS_CREATION"
	PARENTSTATUSFORBIDSUPDATESANDCREATES        SponsoredProductsEntityStateErrorReason = "PARENT_STATUS_FORBIDS_UPDATES_AND_CREATES"
)

// Defines values for SponsoredProductsEntityType.
const (
	SponsoredProductsEntityTypeADGROUP                         SponsoredProductsEntityType = "AD_GROUP"
	SponsoredProductsEntityTypeCAMPAIGN                        SponsoredProductsEntityType = "CAMPAIGN"
	SponsoredProductsEntityTypeCAMPAIGNNEGATIVEKEYWORD         SponsoredProductsEntityType = "CAMPAIGN_NEGATIVE_KEYWORD"
	SponsoredProductsEntityTypeCAMPAIGNNEGATIVETARGETINGCLAUSE SponsoredProductsEntityType = "CAMPAIGN_NEGATIVE_TARGETING_CLAUSE"
	SponsoredProductsEntityTypeKEYWORD                         SponsoredProductsEntityType = "KEYWORD"
	SponsoredProductsEntityTypeNEGATIVEKEYWORD                 SponsoredProductsEntityType = "NEGATIVE_KEYWORD"
	SponsoredProductsEntityTypeNEGATIVETARGETINGCLAUSE         SponsoredProductsEntityType = "NEGATIVE_TARGETING_CLAUSE"
	SponsoredProductsEntityTypePRODUCTAD                       SponsoredProductsEntityType = "PRODUCT_AD"
	SponsoredProductsEntityTypeTARGETINGCLAUSE                 SponsoredProductsEntityType = "TARGETING_CLAUSE"
)

// Defines values for SponsoredProductsExpressionType.
const (
	SponsoredProductsExpressionTypeAUTO   SponsoredProductsExpressionType = "AUTO"
	SponsoredProductsExpressionTypeMANUAL SponsoredProductsExpressionType = "MANUAL"
	SponsoredProductsExpressionTypeOTHER  SponsoredProductsExpressionType = "OTHER"
)

// Defines values for SponsoredProductsExpressionTypeErrorReason.
const (
	UNSUPPORTEDEXPRESSIONTYPE SponsoredProductsExpressionTypeErrorReason = "UNSUPPORTED_EXPRESSION_TYPE"
)

// Defines values for SponsoredProductsExpressionTypeWithoutOther.
const (
	SponsoredProductsExpressionTypeWithoutOtherAUTO   SponsoredProductsExpressionTypeWithoutOther = "AUTO"
	SponsoredProductsExpressionTypeWithoutOtherMANUAL SponsoredProductsExpressionTypeWithoutOther = "MANUAL"
)

// Defines values for SponsoredProductsInternalErrorErrorCode.
const (
	SponsoredProductsInternalErrorErrorCodeINTERNALERROR SponsoredProductsInternalErrorErrorCode = "INTERNAL_ERROR"
)

// Defines values for SponsoredProductsInternalServerErrorReason.
const (
	SponsoredProductsInternalServerErrorReasonINTERNALERROR SponsoredProductsInternalServerErrorReason = "INTERNAL_ERROR"
)

// Defines values for SponsoredProductsInvalidArgumentErrorCode.
const (
	INVALIDARGUMENT SponsoredProductsInvalidArgumentErrorCode = "INVALID_ARGUMENT"
)

// Defines values for SponsoredProductsInvalidInputErrorReason.
const (
	INVALIDTOKEN SponsoredProductsInvalidInputErrorReason = "INVALID_TOKEN"
)

// Defines values for SponsoredProductsKeywordServingStatus.
const (
	SponsoredProductsKeywordServingStatusACCOUNTOUTOFBUDGET               SponsoredProductsKeywordServingStatus = "ACCOUNT_OUT_OF_BUDGET"
	SponsoredProductsKeywordServingStatusADGROUPARCHIVED                  SponsoredProductsKeywordServingStatus = "AD_GROUP_ARCHIVED"
	SponsoredProductsKeywordServingStatusADGROUPINCOMPLETE                SponsoredProductsKeywordServingStatus = "AD_GROUP_INCOMPLETE"
	SponsoredProductsKeywordServingStatusADGROUPLOWBID                    SponsoredProductsKeywordServingStatus = "AD_GROUP_LOW_BID"
	SponsoredProductsKeywordServingStatusADGROUPPAUSED                    SponsoredProductsKeywordServingStatus = "AD_GROUP_PAUSED"
	SponsoredProductsKeywordServingStatusADGROUPPOLICINGCREATIVEREJECTED  SponsoredProductsKeywordServingStatus = "AD_GROUP_POLICING_CREATIVE_REJECTED"
	SponsoredProductsKeywordServingStatusADGROUPPOLICINGPENDINGREVIEW     SponsoredProductsKeywordServingStatus = "AD_GROUP_POLICING_PENDING_REVIEW"
	SponsoredProductsKeywordServingStatusADGROUPSTATUSENABLED             SponsoredProductsKeywordServingStatus = "AD_GROUP_STATUS_ENABLED"
	SponsoredProductsKeywordServingStatusADVERTISERARCHIVED               SponsoredProductsKeywordServingStatus = "ADVERTISER_ARCHIVED"
	SponsoredProductsKeywordServingStatusADVERTISEROUTOFBUDGET            SponsoredProductsKeywordServingStatus = "ADVERTISER_OUT_OF_BUDGET"
	SponsoredProductsKeywordServingStatusADVERTISERPAUSED                 SponsoredProductsKeywordServingStatus = "ADVERTISER_PAUSED"
	SponsoredProductsKeywordServingStatusADVERTISERPAYMENTFAILURE         SponsoredProductsKeywordServingStatus = "ADVERTISER_PAYMENT_FAILURE"
	SponsoredProductsKeywordServingStatusADVERTISERPOLICINGPENDINGREVIEW  SponsoredProductsKeywordServingStatus = "ADVERTISER_POLICING_PENDING_REVIEW"
	SponsoredProductsKeywordServingStatusADVERTISERPOLICINGSUSPENDED      SponsoredProductsKeywordServingStatus = "ADVERTISER_POLICING_SUSPENDED"
	SponsoredProductsKeywordServingStatusCAMPAIGNARCHIVED                 SponsoredProductsKeywordServingStatus = "CAMPAIGN_ARCHIVED"
	SponsoredProductsKeywordServingStatusCAMPAIGNINCOMPLETE               SponsoredProductsKeywordServingStatus = "CAMPAIGN_INCOMPLETE"
	SponsoredProductsKeywordServingStatusCAMPAIGNOUTOFBUDGET              SponsoredProductsKeywordServingStatus = "CAMPAIGN_OUT_OF_BUDGET"
	SponsoredProductsKeywordServingStatusCAMPAIGNPAUSED                   SponsoredProductsKeywordServingStatus = "CAMPAIGN_PAUSED"
	SponsoredProductsKeywordServingStatusCAMPAIGNSTATUSENABLED            SponsoredProductsKeywordServingStatus = "CAMPAIGN_STATUS_ENABLED"
	SponsoredProductsKeywordServingStatusENDED                            SponsoredProductsKeywordServingStatus = "ENDED"
	SponsoredProductsKeywordServingStatusOTHER                            SponsoredProductsKeywordServingStatus = "OTHER"
	SponsoredProductsKeywordServingStatusPENDINGREVIEW                    SponsoredProductsKeywordServingStatus = "PENDING_REVIEW"
	SponsoredProductsKeywordServingStatusPENDINGSTARTDATE                 SponsoredProductsKeywordServingStatus = "PENDING_START_DATE"
	SponsoredProductsKeywordServingStatusPORTFOLIOARCHIVED                SponsoredProductsKeywordServingStatus = "PORTFOLIO_ARCHIVED"
	SponsoredProductsKeywordServingStatusPORTFOLIOENDED                   SponsoredProductsKeywordServingStatus = "PORTFOLIO_ENDED"
	SponsoredProductsKeywordServingStatusPORTFOLIOOUTOFBUDGET             SponsoredProductsKeywordServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	SponsoredProductsKeywordServingStatusPORTFOLIOPAUSED                  SponsoredProductsKeywordServingStatus = "PORTFOLIO_PAUSED"
	SponsoredProductsKeywordServingStatusPORTFOLIOPENDINGSTARTDATE        SponsoredProductsKeywordServingStatus = "PORTFOLIO_PENDING_START_DATE"
	SponsoredProductsKeywordServingStatusPORTFOLIOSTATUSENABLED           SponsoredProductsKeywordServingStatus = "PORTFOLIO_STATUS_ENABLED"
	SponsoredProductsKeywordServingStatusREJECTED                         SponsoredProductsKeywordServingStatus = "REJECTED"
	SponsoredProductsKeywordServingStatusTARGETINGCLAUSEARCHIVED          SponsoredProductsKeywordServingStatus = "TARGETING_CLAUSE_ARCHIVED"
	SponsoredProductsKeywordServingStatusTARGETINGCLAUSEBLOCKED           SponsoredProductsKeywordServingStatus = "TARGETING_CLAUSE_BLOCKED"
	SponsoredProductsKeywordServingStatusTARGETINGCLAUSEPAUSED            SponsoredProductsKeywordServingStatus = "TARGETING_CLAUSE_PAUSED"
	SponsoredProductsKeywordServingStatusTARGETINGCLAUSEPOLICINGSUSPENDED SponsoredProductsKeywordServingStatus = "TARGETING_CLAUSE_POLICING_SUSPENDED"
	SponsoredProductsKeywordServingStatusTARGETINGCLAUSESTATUSLIVE        SponsoredProductsKeywordServingStatus = "TARGETING_CLAUSE_STATUS_LIVE"
)

// Defines values for SponsoredProductsKeywordServingStatusReason.
const (
	SponsoredProductsKeywordServingStatusReasonACCOUNTOUTOFBUDGETDETAIL               SponsoredProductsKeywordServingStatusReason = "ACCOUNT_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPARCHIVEDDETAIL                  SponsoredProductsKeywordServingStatusReason = "AD_GROUP_ARCHIVED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPINCOMPLETEDETAIL                SponsoredProductsKeywordServingStatusReason = "AD_GROUP_INCOMPLETE_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPLOWBIDDETAIL                    SponsoredProductsKeywordServingStatusReason = "AD_GROUP_LOW_BID_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPPAUSEDDETAIL                    SponsoredProductsKeywordServingStatusReason = "AD_GROUP_PAUSED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPPOLICINGCREATIVEREJECTEDDETAIL  SponsoredProductsKeywordServingStatusReason = "AD_GROUP_POLICING_CREATIVE_REJECTED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPPOLICINGPENDINGREVIEWDETAIL     SponsoredProductsKeywordServingStatusReason = "AD_GROUP_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADGROUPSTATUSENABLEDDETAIL             SponsoredProductsKeywordServingStatusReason = "AD_GROUP_STATUS_ENABLED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISERARCHIVEDDETAIL               SponsoredProductsKeywordServingStatusReason = "ADVERTISER_ARCHIVED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISEROUTOFBUDGETDETAIL            SponsoredProductsKeywordServingStatusReason = "ADVERTISER_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISERPAUSEDDETAIL                 SponsoredProductsKeywordServingStatusReason = "ADVERTISER_PAUSED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISERPAYMENTFAILUREDETAIL         SponsoredProductsKeywordServingStatusReason = "ADVERTISER_PAYMENT_FAILURE_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISERPOLICINGPENDINGREVIEWDETAIL  SponsoredProductsKeywordServingStatusReason = "ADVERTISER_POLICING_PENDING_REVIEW_DETAIL"
	SponsoredProductsKeywordServingStatusReasonADVERTISERPOLICINGSUSPENDEDDETAIL      SponsoredProductsKeywordServingStatusReason = "ADVERTISER_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonCAMPAIGNARCHIVEDDETAIL                 SponsoredProductsKeywordServingStatusReason = "CAMPAIGN_ARCHIVED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonCAMPAIGNINCOMPLETEDETAIL               SponsoredProductsKeywordServingStatusReason = "CAMPAIGN_INCOMPLETE_DETAIL"
	SponsoredProductsKeywordServingStatusReasonCAMPAIGNOUTOFBUDGETDETAIL              SponsoredProductsKeywordServingStatusReason = "CAMPAIGN_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsKeywordServingStatusReasonCAMPAIGNPAUSEDDETAIL                   SponsoredProductsKeywordServingStatusReason = "CAMPAIGN_PAUSED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonCAMPAIGNSTATUSENABLEDDETAIL            SponsoredProductsKeywordServingStatusReason = "CAMPAIGN_STATUS_ENABLED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonENDEDDETAIL                            SponsoredProductsKeywordServingStatusReason = "ENDED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonOTHER                                  SponsoredProductsKeywordServingStatusReason = "OTHER"
	SponsoredProductsKeywordServingStatusReasonPENDINGREVIEWDETAIL                    SponsoredProductsKeywordServingStatusReason = "PENDING_REVIEW_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPENDINGSTARTDATEDETAIL                 SponsoredProductsKeywordServingStatusReason = "PENDING_START_DATE_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOARCHIVEDDETAIL                SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_ARCHIVED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOENDEDDETAIL                   SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_ENDED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOOUTOFBUDGETDETAIL             SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_OUT_OF_BUDGET_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOPAUSEDDETAIL                  SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_PAUSED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOPENDINGSTARTDATEDETAIL        SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_PENDING_START_DATE_DETAIL"
	SponsoredProductsKeywordServingStatusReasonPORTFOLIOSTATUSENABLEDDETAIL           SponsoredProductsKeywordServingStatusReason = "PORTFOLIO_STATUS_ENABLED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonREJECTEDDETAIL                         SponsoredProductsKeywordServingStatusReason = "REJECTED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonTARGETINGCLAUSEARCHIVEDDETAIL          SponsoredProductsKeywordServingStatusReason = "TARGETING_CLAUSE_ARCHIVED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonTARGETINGCLAUSEBLOCKEDDETAIL           SponsoredProductsKeywordServingStatusReason = "TARGETING_CLAUSE_BLOCKED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonTARGETINGCLAUSEPAUSEDDETAIL            SponsoredProductsKeywordServingStatusReason = "TARGETING_CLAUSE_PAUSED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonTARGETINGCLAUSEPOLICINGSUSPENDEDDETAIL SponsoredProductsKeywordServingStatusReason = "TARGETING_CLAUSE_POLICING_SUSPENDED_DETAIL"
	SponsoredProductsKeywordServingStatusReasonTARGETINGCLAUSESTATUSLIVEDETAIL        SponsoredProductsKeywordServingStatusReason = "TARGETING_CLAUSE_STATUS_LIVE_DETAIL"
)

// Defines values for SponsoredProductsLocaleErrorReason.
const (
	INVALIDLOCALE SponsoredProductsLocaleErrorReason = "INVALID_LOCALE"
)

// Defines values for SponsoredProductsMalformedValueErrorReason.
const (
	BLANK                       SponsoredProductsMalformedValueErrorReason = "BLANK"
	FORBIDDENCHARS              SponsoredProductsMalformedValueErrorReason = "FORBIDDEN_CHARS"
	LEADINGORTRAILINGWHITESPACE SponsoredProductsMalformedValueErrorReason = "LEADING_OR_TRAILING_WHITESPACE"
	PATTERNNOTMATCHED           SponsoredProductsMalformedValueErrorReason = "PATTERN_NOT_MATCHED"
	TOOLONG                     SponsoredProductsMalformedValueErrorReason = "TOO_LONG"
	TOOSHORT                    SponsoredProductsMalformedValueErrorReason = "TOO_SHORT"
)

// Defines values for SponsoredProductsMarketplace.
const (
	AE SponsoredProductsMarketplace = "AE"
	AU SponsoredProductsMarketplace = "AU"
	BR SponsoredProductsMarketplace = "BR"
	CA SponsoredProductsMarketplace = "CA"
	DE SponsoredProductsMarketplace = "DE"
	EG SponsoredProductsMarketplace = "EG"
	ES SponsoredProductsMarketplace = "ES"
	FR SponsoredProductsMarketplace = "FR"
	IN SponsoredProductsMarketplace = "IN"
	IT SponsoredProductsMarketplace = "IT"
	JP SponsoredProductsMarketplace = "JP"
	MX SponsoredProductsMarketplace = "MX"
	NL SponsoredProductsMarketplace = "NL"
	PL SponsoredProductsMarketplace = "PL"
	SA SponsoredProductsMarketplace = "SA"
	SE SponsoredProductsMarketplace = "SE"
	SG SponsoredProductsMarketplace = "SG"
	TR SponsoredProductsMarketplace = "TR"
	UK SponsoredProductsMarketplace = "UK"
	US SponsoredProductsMarketplace = "US"
)

// Defines values for SponsoredProductsMatchType.
const (
	SponsoredProductsMatchTypeBROAD  SponsoredProductsMatchType = "BROAD"
	SponsoredProductsMatchTypeEXACT  SponsoredProductsMatchType = "EXACT"
	SponsoredProductsMatchTypeOTHER  SponsoredProductsMatchType = "OTHER"
	SponsoredProductsMatchTypePHRASE SponsoredProductsMatchType = "PHRASE"
)

// Defines values for SponsoredProductsMissingValueErrorReason.
const (
	MISSINGVALUE SponsoredProductsMissingValueErrorReason = "MISSING_VALUE"
)

// Defines values for SponsoredProductsNegativeMatchType.
const (
	SponsoredProductsNegativeMatchTypeNEGATIVEBROAD  SponsoredProductsNegativeMatchType = "NEGATIVE_BROAD"
	SponsoredProductsNegativeMatchTypeNEGATIVEEXACT  SponsoredProductsNegativeMatchType = "NEGATIVE_EXACT"
	SponsoredProductsNegativeMatchTypeNEGATIVEPHRASE SponsoredProductsNegativeMatchType = "NEGATIVE_PHRASE"
	SponsoredProductsNegativeMatchTypeOTHER          SponsoredProductsNegativeMatchType = "OTHER"
)

// Defines values for SponsoredProductsNegativeTargetingExpressionPredicateType.
const (
	SponsoredProductsNegativeTargetingExpressionPredicateTypeASINBRANDSAMEAS SponsoredProductsNegativeTargetingExpressionPredicateType = "ASIN_BRAND_SAME_AS"
	SponsoredProductsNegativeTargetingExpressionPredicateTypeASINSAMEAS      SponsoredProductsNegativeTargetingExpressionPredicateType = "ASIN_SAME_AS"
	SponsoredProductsNegativeTargetingExpressionPredicateTypeOTHER           SponsoredProductsNegativeTargetingExpressionPredicateType = "OTHER"
)

// Defines values for SponsoredProductsOtherErrorReason.
const (
	OTHERERROR SponsoredProductsOtherErrorReason = "OTHER_ERROR"
)

// Defines values for SponsoredProductsParentEntityErrorReason.
const (
	PARENTENTITYARCHIVED                       SponsoredProductsParentEntityErrorReason = "PARENT_ENTITY_ARCHIVED"
	PARENTENTITYDOESNOTTARGETTHESEMARKETPLACES SponsoredProductsParentEntityErrorReason = "PARENT_ENTITY_DOES_NOT_TARGET_THESE_MARKETPLACES"
	PARENTENTITYNOTFOUND                       SponsoredProductsParentEntityErrorReason = "PARENT_ENTITY_NOT_FOUND"
)

// Defines values for SponsoredProductsPlacement.
const (
	SponsoredProductsPlacementPLACEMENTPRODUCTPAGE  SponsoredProductsPlacement = "PLACEMENT_PRODUCT_PAGE"
	SponsoredProductsPlacementPLACEMENTRESTOFSEARCH SponsoredProductsPlacement = "PLACEMENT_REST_OF_SEARCH"
	SponsoredProductsPlacementPLACEMENTTOP          SponsoredProductsPlacement = "PLACEMENT_TOP"
)

// Defines values for SponsoredProductsProductIdentifierErrorReason.
const (
	INVALIDASIN SponsoredProductsProductIdentifierErrorReason = "INVALID_ASIN"
	INVALIDSKU  SponsoredProductsProductIdentifierErrorReason = "INVALID_SKU"
)

// Defines values for SponsoredProductsQueryTermMatchType.
const (
	BROADMATCH SponsoredProductsQueryTermMatchType = "BROAD_MATCH"
	EXACTMATCH SponsoredProductsQueryTermMatchType = "EXACT_MATCH"
)

// Defines values for SponsoredProductsQuotaErrorReason.
const (
	NONARCHIVEDQUOTAEXCEEDED SponsoredProductsQuotaErrorReason = "NON_ARCHIVED_QUOTA_EXCEEDED"
	QUOTAEXCEEDED            SponsoredProductsQuotaErrorReason = "QUOTA_EXCEEDED"
)

// Defines values for SponsoredProductsQuotaScope.
const (
	ACCOUNT      SponsoredProductsQuotaScope = "ACCOUNT"
	PARENTENTITY SponsoredProductsQuotaScope = "PARENT_ENTITY"
)

// Defines values for SponsoredProductsTargetingClauseSetupErrorReason.
const (
	AUTOTARGETINGCLAUSECANNOTBECREATEDMANUALLY      SponsoredProductsTargetingClauseSetupErrorReason = "AUTO_TARGETING_CLAUSE_CANNOT_BE_CREATED_MANUALLY"
	TARGETINGEXPRESSIONINVALIDVALUE                 SponsoredProductsTargetingClauseSetupErrorReason = "TARGETING_EXPRESSION_INVALID_VALUE"
	TARGETINGTYPENOTALLOWEDFORAUTOTARGETINGCAMPAIGN SponsoredProductsTargetingClauseSetupErrorReason = "TARGETING_TYPE_NOT_ALLOWED_FOR_AUTO_TARGETING_CAMPAIGN"
	TYPECONFLICTINADGROUP                           SponsoredProductsTargetingClauseSetupErrorReason = "TYPE_CONFLICT_IN_AD_GROUP"
)

// Defines values for SponsoredProductsTargetingExpressionPredicateType.
const (
	SponsoredProductsTargetingExpressionPredicateTypeASINACCESSORYRELATED        SponsoredProductsTargetingExpressionPredicateType = "ASIN_ACCESSORY_RELATED"
	SponsoredProductsTargetingExpressionPredicateTypeASINAGERANGESAMEAS          SponsoredProductsTargetingExpressionPredicateType = "ASIN_AGE_RANGE_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeASINBRANDSAMEAS             SponsoredProductsTargetingExpressionPredicateType = "ASIN_BRAND_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeASINCATEGORYSAMEAS          SponsoredProductsTargetingExpressionPredicateType = "ASIN_CATEGORY_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeASINEXPANDEDFROM            SponsoredProductsTargetingExpressionPredicateType = "ASIN_EXPANDED_FROM"
	SponsoredProductsTargetingExpressionPredicateTypeASINGENRESAMEAS             SponsoredProductsTargetingExpressionPredicateType = "ASIN_GENRE_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeASINISPRIMESHIPPINGELIGIBLE SponsoredProductsTargetingExpressionPredicateType = "ASIN_IS_PRIME_SHIPPING_ELIGIBLE"
	SponsoredProductsTargetingExpressionPredicateTypeASINPRICEBETWEEN            SponsoredProductsTargetingExpressionPredicateType = "ASIN_PRICE_BETWEEN"
	SponsoredProductsTargetingExpressionPredicateTypeASINPRICEGREATERTHAN        SponsoredProductsTargetingExpressionPredicateType = "ASIN_PRICE_GREATER_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeASINPRICELESSTHAN           SponsoredProductsTargetingExpressionPredicateType = "ASIN_PRICE_LESS_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeASINREVIEWRATINGBETWEEN     SponsoredProductsTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_BETWEEN"
	SponsoredProductsTargetingExpressionPredicateTypeASINREVIEWRATINGGREATERTHAN SponsoredProductsTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_GREATER_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeASINREVIEWRATINGLESSTHAN    SponsoredProductsTargetingExpressionPredicateType = "ASIN_REVIEW_RATING_LESS_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeASINSAMEAS                  SponsoredProductsTargetingExpressionPredicateType = "ASIN_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeASINSUBSTITUTERELATED       SponsoredProductsTargetingExpressionPredicateType = "ASIN_SUBSTITUTE_RELATED"
	SponsoredProductsTargetingExpressionPredicateTypeOTHER                       SponsoredProductsTargetingExpressionPredicateType = "OTHER"
	SponsoredProductsTargetingExpressionPredicateTypeQUERYBROADRELMATCHES        SponsoredProductsTargetingExpressionPredicateType = "QUERY_BROAD_REL_MATCHES"
	SponsoredProductsTargetingExpressionPredicateTypeQUERYHIGHRELMATCHES         SponsoredProductsTargetingExpressionPredicateType = "QUERY_HIGH_REL_MATCHES"
)

// Defines values for SponsoredProductsTargetingExpressionPredicateTypeWithoutOther.
const (
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINACCESSORYRELATED        SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_ACCESSORY_RELATED"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINAGERANGESAMEAS          SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_AGE_RANGE_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINBRANDSAMEAS             SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_BRAND_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINCATEGORYSAMEAS          SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_CATEGORY_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINEXPANDEDFROM            SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_EXPANDED_FROM"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINGENRESAMEAS             SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_GENRE_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINISPRIMESHIPPINGELIGIBLE SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_IS_PRIME_SHIPPING_ELIGIBLE"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINPRICEBETWEEN            SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_PRICE_BETWEEN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINPRICEGREATERTHAN        SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_PRICE_GREATER_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINPRICELESSTHAN           SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_PRICE_LESS_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINREVIEWRATINGBETWEEN     SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_REVIEW_RATING_BETWEEN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINREVIEWRATINGGREATERTHAN SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_REVIEW_RATING_GREATER_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINREVIEWRATINGLESSTHAN    SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_REVIEW_RATING_LESS_THAN"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINSAMEAS                  SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_SAME_AS"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherASINSUBSTITUTERELATED       SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "ASIN_SUBSTITUTE_RELATED"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherQUERYBROADRELMATCHES        SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "QUERY_BROAD_REL_MATCHES"
	SponsoredProductsTargetingExpressionPredicateTypeWithoutOtherQUERYHIGHRELMATCHES         SponsoredProductsTargetingExpressionPredicateTypeWithoutOther = "QUERY_HIGH_REL_MATCHES"
)

// Defines values for SponsoredProductsTargetingType.
const (
	SponsoredProductsTargetingTypeAUTO   SponsoredProductsTargetingType = "AUTO"
	SponsoredProductsTargetingTypeMANUAL SponsoredProductsTargetingType = "MANUAL"
)

// Defines values for SponsoredProductsThrottledErrorCode.
const (
	SponsoredProductsThrottledErrorCodeTHROTTLED SponsoredProductsThrottledErrorCode = "THROTTLED"
)

// Defines values for SponsoredProductsThrottledErrorReason.
const (
	SponsoredProductsThrottledErrorReasonTHROTTLED SponsoredProductsThrottledErrorReason = "THROTTLED"
)

// Defines values for SponsoredProductsUnauthorizedErrorCode.
const (
	UNAUTHORIZED SponsoredProductsUnauthorizedErrorCode = "UNAUTHORIZED"
)

// Defines values for SponsoredProductsUnsupportedMediaTypeErrorCode.
const (
	UNSUPPORTEDMEDIATYPE SponsoredProductsUnsupportedMediaTypeErrorCode = "UNSUPPORTED_MEDIA_TYPE"
)

// Defines values for SponsoredProductsUnsupportedOperationErrorReason.
const (
	UNSUPPORTEDOPERATION SponsoredProductsUnsupportedOperationErrorReason = "UNSUPPORTED_OPERATION"
)

// Defines values for SponsoredProductsValueLimitErrorReason.
const (
	INVALIDENUMVALUE SponsoredProductsValueLimitErrorReason = "INVALID_ENUM_VALUE"
	NOTINLIST        SponsoredProductsValueLimitErrorReason = "NOT_IN_LIST"
	TOOHIGH          SponsoredProductsValueLimitErrorReason = "TOO_HIGH"
	TOOLOW           SponsoredProductsValueLimitErrorReason = "TOO_LOW"
)

// Defines values for TargetingExpressionType.
const (
	TargetingExpressionTypeCLOSEMATCH         TargetingExpressionType = "CLOSE_MATCH"
	TargetingExpressionTypeCOMPLEMENTS        TargetingExpressionType = "COMPLEMENTS"
	TargetingExpressionTypeKEYWORDBROADMATCH  TargetingExpressionType = "KEYWORD_BROAD_MATCH"
	TargetingExpressionTypeKEYWORDEXACTMATCH  TargetingExpressionType = "KEYWORD_EXACT_MATCH"
	TargetingExpressionTypeKEYWORDPHRASEMATCH TargetingExpressionType = "KEYWORD_PHRASE_MATCH"
	TargetingExpressionTypeLOOSEMATCH         TargetingExpressionType = "LOOSE_MATCH"
	TargetingExpressionTypeSUBSTITUTES        TargetingExpressionType = "SUBSTITUTES"
)

// Defines values for TargetingGroupBidRecommendationAction.
const (
	TargetingGroupBidRecommendationActionADD      TargetingGroupBidRecommendationAction = "ADD"
	TargetingGroupBidRecommendationActionDECREASE TargetingGroupBidRecommendationAction = "DECREASE"
	TargetingGroupBidRecommendationActionINCREASE TargetingGroupBidRecommendationAction = "INCREASE"
	TargetingGroupBidRecommendationActionREMOVE   TargetingGroupBidRecommendationAction = "REMOVE"
)

// Defines values for TargetingGroupBidRecommendationTargetingGroupExpression.
const (
	TargetingGroupBidRecommendationTargetingGroupExpressionCLOSEMATCH  TargetingGroupBidRecommendationTargetingGroupExpression = "CLOSE_MATCH"
	TargetingGroupBidRecommendationTargetingGroupExpressionCOMPLEMENTS TargetingGroupBidRecommendationTargetingGroupExpression = "COMPLEMENTS"
	TargetingGroupBidRecommendationTargetingGroupExpressionLOOSEMATCH  TargetingGroupBidRecommendationTargetingGroupExpression = "LOOSE_MATCH"
	TargetingGroupBidRecommendationTargetingGroupExpressionSUBSTITUTES TargetingGroupBidRecommendationTargetingGroupExpression = "SUBSTITUTES"
)

// Defines values for Theme.
const (
	BFCMHOLIDAY             Theme = "BFCM_HOLIDAY"
	CONVERSIONOPPORTUNITIES Theme = "CONVERSION_OPPORTUNITIES"
	FALLPRIMEDEALEVENT      Theme = "FALL_PRIME_DEAL_EVENT"
	PRIMEDAY                Theme = "PRIME_DAY"
)

// Defines values for ThemedBidMatchType.
const (
	BROAD  ThemedBidMatchType = "BROAD"
	EXACT  ThemedBidMatchType = "EXACT"
	PHRASE ThemedBidMatchType = "PHRASE"
)

// Defines values for State.
const (
	ACTIVE State = "ACTIVE"
	PAUSED State = "PAUSED"
)

// Defines values for GetTargetableCategoriesParamsLocale.
const (
	GetTargetableCategoriesParamsLocaleArAE GetTargetableCategoriesParamsLocale = "ar_AE"
	GetTargetableCategoriesParamsLocaleDeDE GetTargetableCategoriesParamsLocale = "de_DE"
	GetTargetableCategoriesParamsLocaleEnAE GetTargetableCategoriesParamsLocale = "en_AE"
	GetTargetableCategoriesParamsLocaleEnAU GetTargetableCategoriesParamsLocale = "en_AU"
	GetTargetableCategoriesParamsLocaleEnCA GetTargetableCategoriesParamsLocale = "en_CA"
	GetTargetableCategoriesParamsLocaleEnGB GetTargetableCategoriesParamsLocale = "en_GB"
	GetTargetableCategoriesParamsLocaleEnIN GetTargetableCategoriesParamsLocale = "en_IN"
	GetTargetableCategoriesParamsLocaleEnSG GetTargetableCategoriesParamsLocale = "en_SG"
	GetTargetableCategoriesParamsLocaleEnUS GetTargetableCategoriesParamsLocale = "en_US"
	GetTargetableCategoriesParamsLocaleEsES GetTargetableCategoriesParamsLocale = "es_ES"
	GetTargetableCategoriesParamsLocaleEsMX GetTargetableCategoriesParamsLocale = "es_MX"
	GetTargetableCategoriesParamsLocaleFrCA GetTargetableCategoriesParamsLocale = "fr_CA"
	GetTargetableCategoriesParamsLocaleFrFR GetTargetableCategoriesParamsLocale = "fr_FR"
	GetTargetableCategoriesParamsLocaleHiIN GetTargetableCategoriesParamsLocale = "hi_IN"
	GetTargetableCategoriesParamsLocaleItIT GetTargetableCategoriesParamsLocale = "it_IT"
	GetTargetableCategoriesParamsLocaleJaJP GetTargetableCategoriesParamsLocale = "ja_JP"
	GetTargetableCategoriesParamsLocaleKoKR GetTargetableCategoriesParamsLocale = "ko_KR"
	GetTargetableCategoriesParamsLocaleNlNL GetTargetableCategoriesParamsLocale = "nl_NL"
	GetTargetableCategoriesParamsLocalePlPL GetTargetableCategoriesParamsLocale = "pl_PL"
	GetTargetableCategoriesParamsLocalePtBR GetTargetableCategoriesParamsLocale = "pt_BR"
	GetTargetableCategoriesParamsLocaleSvSE GetTargetableCategoriesParamsLocale = "sv_SE"
	GetTargetableCategoriesParamsLocaleTaIN GetTargetableCategoriesParamsLocale = "ta_IN"
	GetTargetableCategoriesParamsLocaleThTH GetTargetableCategoriesParamsLocale = "th_TH"
	GetTargetableCategoriesParamsLocaleTrTR GetTargetableCategoriesParamsLocale = "tr_TR"
	GetTargetableCategoriesParamsLocaleViVN GetTargetableCategoriesParamsLocale = "vi_VN"
	GetTargetableCategoriesParamsLocaleZhCN GetTargetableCategoriesParamsLocale = "zh_CN"
)

// Defines values for GetCategoryRecommendationsForASINsParamsLocale.
const (
	GetCategoryRecommendationsForASINsParamsLocaleArAE GetCategoryRecommendationsForASINsParamsLocale = "ar_AE"
	GetCategoryRecommendationsForASINsParamsLocaleDeDE GetCategoryRecommendationsForASINsParamsLocale = "de_DE"
	GetCategoryRecommendationsForASINsParamsLocaleEnAE GetCategoryRecommendationsForASINsParamsLocale = "en_AE"
	GetCategoryRecommendationsForASINsParamsLocaleEnAU GetCategoryRecommendationsForASINsParamsLocale = "en_AU"
	GetCategoryRecommendationsForASINsParamsLocaleEnCA GetCategoryRecommendationsForASINsParamsLocale = "en_CA"
	GetCategoryRecommendationsForASINsParamsLocaleEnGB GetCategoryRecommendationsForASINsParamsLocale = "en_GB"
	GetCategoryRecommendationsForASINsParamsLocaleEnIN GetCategoryRecommendationsForASINsParamsLocale = "en_IN"
	GetCategoryRecommendationsForASINsParamsLocaleEnSG GetCategoryRecommendationsForASINsParamsLocale = "en_SG"
	GetCategoryRecommendationsForASINsParamsLocaleEnUS GetCategoryRecommendationsForASINsParamsLocale = "en_US"
	GetCategoryRecommendationsForASINsParamsLocaleEsES GetCategoryRecommendationsForASINsParamsLocale = "es_ES"
	GetCategoryRecommendationsForASINsParamsLocaleEsMX GetCategoryRecommendationsForASINsParamsLocale = "es_MX"
	GetCategoryRecommendationsForASINsParamsLocaleFrCA GetCategoryRecommendationsForASINsParamsLocale = "fr_CA"
	GetCategoryRecommendationsForASINsParamsLocaleFrFR GetCategoryRecommendationsForASINsParamsLocale = "fr_FR"
	GetCategoryRecommendationsForASINsParamsLocaleHiIN GetCategoryRecommendationsForASINsParamsLocale = "hi_IN"
	GetCategoryRecommendationsForASINsParamsLocaleItIT GetCategoryRecommendationsForASINsParamsLocale = "it_IT"
	GetCategoryRecommendationsForASINsParamsLocaleJaJP GetCategoryRecommendationsForASINsParamsLocale = "ja_JP"
	GetCategoryRecommendationsForASINsParamsLocaleKoKR GetCategoryRecommendationsForASINsParamsLocale = "ko_KR"
	GetCategoryRecommendationsForASINsParamsLocaleNlNL GetCategoryRecommendationsForASINsParamsLocale = "nl_NL"
	GetCategoryRecommendationsForASINsParamsLocalePlPL GetCategoryRecommendationsForASINsParamsLocale = "pl_PL"
	GetCategoryRecommendationsForASINsParamsLocalePtBR GetCategoryRecommendationsForASINsParamsLocale = "pt_BR"
	GetCategoryRecommendationsForASINsParamsLocaleSvSE GetCategoryRecommendationsForASINsParamsLocale = "sv_SE"
	GetCategoryRecommendationsForASINsParamsLocaleTaIN GetCategoryRecommendationsForASINsParamsLocale = "ta_IN"
	GetCategoryRecommendationsForASINsParamsLocaleThTH GetCategoryRecommendationsForASINsParamsLocale = "th_TH"
	GetCategoryRecommendationsForASINsParamsLocaleTrTR GetCategoryRecommendationsForASINsParamsLocale = "tr_TR"
	GetCategoryRecommendationsForASINsParamsLocaleViVN GetCategoryRecommendationsForASINsParamsLocale = "vi_VN"
	GetCategoryRecommendationsForASINsParamsLocaleZhCN GetCategoryRecommendationsForASINsParamsLocale = "zh_CN"
)

// Defines values for GetRefinementsForCategoryParamsLocale.
const (
	GetRefinementsForCategoryParamsLocaleArAE GetRefinementsForCategoryParamsLocale = "ar_AE"
	GetRefinementsForCategoryParamsLocaleDeDE GetRefinementsForCategoryParamsLocale = "de_DE"
	GetRefinementsForCategoryParamsLocaleEnAE GetRefinementsForCategoryParamsLocale = "en_AE"
	GetRefinementsForCategoryParamsLocaleEnAU GetRefinementsForCategoryParamsLocale = "en_AU"
	GetRefinementsForCategoryParamsLocaleEnCA GetRefinementsForCategoryParamsLocale = "en_CA"
	GetRefinementsForCategoryParamsLocaleEnGB GetRefinementsForCategoryParamsLocale = "en_GB"
	GetRefinementsForCategoryParamsLocaleEnIN GetRefinementsForCategoryParamsLocale = "en_IN"
	GetRefinementsForCategoryParamsLocaleEnSG GetRefinementsForCategoryParamsLocale = "en_SG"
	GetRefinementsForCategoryParamsLocaleEnUS GetRefinementsForCategoryParamsLocale = "en_US"
	GetRefinementsForCategoryParamsLocaleEsES GetRefinementsForCategoryParamsLocale = "es_ES"
	GetRefinementsForCategoryParamsLocaleEsMX GetRefinementsForCategoryParamsLocale = "es_MX"
	GetRefinementsForCategoryParamsLocaleFrCA GetRefinementsForCategoryParamsLocale = "fr_CA"
	GetRefinementsForCategoryParamsLocaleFrFR GetRefinementsForCategoryParamsLocale = "fr_FR"
	GetRefinementsForCategoryParamsLocaleHiIN GetRefinementsForCategoryParamsLocale = "hi_IN"
	GetRefinementsForCategoryParamsLocaleItIT GetRefinementsForCategoryParamsLocale = "it_IT"
	GetRefinementsForCategoryParamsLocaleJaJP GetRefinementsForCategoryParamsLocale = "ja_JP"
	GetRefinementsForCategoryParamsLocaleKoKR GetRefinementsForCategoryParamsLocale = "ko_KR"
	GetRefinementsForCategoryParamsLocaleNlNL GetRefinementsForCategoryParamsLocale = "nl_NL"
	GetRefinementsForCategoryParamsLocalePlPL GetRefinementsForCategoryParamsLocale = "pl_PL"
	GetRefinementsForCategoryParamsLocalePtBR GetRefinementsForCategoryParamsLocale = "pt_BR"
	GetRefinementsForCategoryParamsLocaleSvSE GetRefinementsForCategoryParamsLocale = "sv_SE"
	GetRefinementsForCategoryParamsLocaleTaIN GetRefinementsForCategoryParamsLocale = "ta_IN"
	GetRefinementsForCategoryParamsLocaleThTH GetRefinementsForCategoryParamsLocale = "th_TH"
	GetRefinementsForCategoryParamsLocaleTrTR GetRefinementsForCategoryParamsLocale = "tr_TR"
	GetRefinementsForCategoryParamsLocaleViVN GetRefinementsForCategoryParamsLocale = "vi_VN"
	GetRefinementsForCategoryParamsLocaleZhCN GetRefinementsForCategoryParamsLocale = "zh_CN"
)

// AccessDeniedException Returns information about an AccessDeniedException.
type AccessDeniedException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// AdGroup defines model for AdGroup.
type AdGroup struct {
	// AdGroupId The ad group identifier.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// Asins The list of ad ASINs in the ad group.
	Asins []string `json:"asins"`

	// TargetingExpressions The list of targeting expressions. Maximum of 100 per request.
	TargetingExpressions []TargetingExpression `json:"targetingExpressions"`
}

// AdGroupKeywordTargetRankRecommendationRequest defines model for AdGroupKeywordTargetRankRecommendationRequest.
type AdGroupKeywordTargetRankRecommendationRequest = KeywordTargetRankRecommendationRequest

// AdGroupThemeBasedBidRecommendationRequest defines model for AdGroupThemeBasedBidRecommendationRequest.
type AdGroupThemeBasedBidRecommendationRequest struct {
	// AdGroupId The ad group identifier.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// RecommendationType The bid recommendation type.
	RecommendationType AdGroupThemeBasedBidRecommendationRequestRecommendationType `json:"recommendationType"`

	// TargetingExpressions The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.
	TargetingExpressions TargetingExpressionList `json:"targetingExpressions"`
}

// AdGroupThemeBasedBidRecommendationRequestRecommendationType The bid recommendation type.
type AdGroupThemeBasedBidRecommendationRequestRecommendationType string

// Adjustment defines model for Adjustment.
type Adjustment struct {
	// PlacementAdjustment Specifies bid adjustments based on the placement location. Use `PLACEMENT_TOP` for the top of the search page. Use `PLACEMENT_PRODUCT_PAGE` for a product page.
	PlacementAdjustment *PlacementAdjustment `json:"placementAdjustment,omitempty"`
}

// AgeRange defines model for AgeRange.
type AgeRange struct {
	// Id Id of Age Range. This field is REQUIRED if the Age Range object is being used as an input. Use the GetRefinementsForCategory to retrieve Age Range Node IDs.
	Id *string `json:"id,omitempty"`

	// Name Name of Age Range. This field is OPTIONAL if the Age Range object is being used as an input.
	Name *string `json:"name,omitempty"`
}

// AgeRangeLoP defines model for AgeRangeLoP.
type AgeRangeLoP struct {
	// Id Id of Age Range. Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Range Node IDs.
	Id *string `json:"id,omitempty"`

	// Name Name of Age Range.
	Name *string `json:"name,omitempty"`

	// TranslatedName Translated name of Age Range based off locale sent in request.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// AgeRanges List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
type AgeRanges = []AgeRange

// AgeRangesLoP List of Age Ranges in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
type AgeRangesLoP = []AgeRangeLoP

// AsinsKeywordTargetRankRecommendationRequest defines model for AsinsKeywordTargetRankRecommendationRequest.
type AsinsKeywordTargetRankRecommendationRequest = KeywordTargetRankRecommendationRequest

// AsinsThemeBasedBidRecommendationRequest defines model for AsinsThemeBasedBidRecommendationRequest.
type AsinsThemeBasedBidRecommendationRequest struct {
	// Asins The list of ad ASINs in the ad group.
	Asins []string `json:"asins"`

	// Bidding Bidding control configuration for the campaign.
	Bidding struct {
		// Adjustments Placement adjustment configuration for the campaign.
		Adjustments *[]PlacementAdjustment `json:"adjustments,omitempty"`

		// Strategy The bidding strategy selected for the campaign. Use `LEGACY_FOR_SALES` to lower your bid in real time when your ad may be less likely to convert to a sale. Use `AUTO_FOR_SALES` to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use `MANUAL` to use your exact bid along with any manual adjustments.
		MyBiddingStrategy MyBiddingStrategy `json:"strategy"`
	} `json:"bidding"`

	// RecommendationType The bid recommendation type.
	RecommendationType AsinsThemeBasedBidRecommendationRequestRecommendationType `json:"recommendationType"`

	// TargetingExpressions The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.
	TargetingExpressions TargetingExpressionList `json:"targetingExpressions"`
}

// AsinsThemeBasedBidRecommendationRequestRecommendationType The bid recommendation type.
type AsinsThemeBasedBidRecommendationRequestRecommendationType string

// AssociatedBudgetRuleResponse defines model for AssociatedBudgetRuleResponse.
type AssociatedBudgetRuleResponse struct {
	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The budget rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// AssociatedCampaign defines model for AssociatedCampaign.
type AssociatedCampaign struct {
	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// CampaignName The campaign name.
	CampaignName string `json:"campaignName"`

	// RuleStatus The budget rule evaluation status for this campaign. Read-only.
	RuleStatus string `json:"ruleStatus"`
}

// BadRequestException Returns information about a BadRequestException.
type BadRequestException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// Benchmark Forecasted impact metrics for next 7 days or during special days.
type Benchmark struct {
	// BenchmarkStatus Specifies the processing status of the benchmark. Success - If all fields in values property (impressions, clicks, conversions) have all non-null values. Failed - If all fields in values property have all null values. Partial - If some of the fields (impressions, clicks, or conversions) in values property have null values.
	BenchmarkStatus *BenchmarkBenchmarkStatus `json:"benchmarkStatus,omitempty"`

	// Values Metrics benchmark values.
	Values *Values `json:"values,omitempty"`
}

// BenchmarkBenchmarkStatus Specifies the processing status of the benchmark. Success - If all fields in values property (impressions, clicks, conversions) have all non-null values. Failed - If all fields in values property have all null values. Partial - If some of the fields (impressions, clicks, or conversions) in values property have null values.
type BenchmarkBenchmarkStatus string

// BidRecommendationError defines model for BidRecommendationError.
type BidRecommendationError struct {
	// Code A machine-readable error code.
	Code string `json:"code"`

	// Details A human-readable description of the response.
	Details string `json:"details"`
}

// BidRecommendationPerTargetingExpression defines model for BidRecommendationPerTargetingExpression.
type BidRecommendationPerTargetingExpression struct {
	BidValues []BidValue `json:"bidValues"`

	// TargetingExpression The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases.
	TargetingExpression TargetingExpression `json:"targetingExpression"`
}

// BidSuggestion Suggested bid range
type BidSuggestion struct {
	// BidRecId The bid recommendation id
	BidRecId *string `json:"bidRecId,omitempty"`

	// RangeEnd The bid range end
	RangeEnd *float64 `json:"rangeEnd,omitempty"`

	// RangeStart The bid range start
	RangeStart *float64 `json:"rangeStart,omitempty"`

	// Suggested The suggested bid
	Suggested *float64 `json:"suggested,omitempty"`
}

// BidValue Bid value of the bid recommendations
type BidValue struct {
	// SuggestedBid The suggested bid.
	SuggestedBid float64 `json:"suggestedBid"`
}

// BidValues Suggested bid range
type BidValues struct {
	// RangeEnd The bid range end
	RangeEnd *float64 `json:"rangeEnd,omitempty"`

	// RangeStart The bid range start
	RangeStart *float64 `json:"rangeStart,omitempty"`

	// Suggested The suggested bid
	Suggested *float64 `json:"suggested,omitempty"`
}

// Bidding The bidding control configuration for the new campaign.
type Bidding struct {
	// Adjustments Placement adjustment configuration for the campaign.
	Adjustments *[]Adjustment `json:"adjustments,omitempty"`

	// Strategy The bidding strategy selected for the campaign. Use LEGACY_FOR_SALES to lower your bid in real time when your ad may be less likely to convert to a sale. Use AUTO_FOR_SALES to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use MANUAL to use your exact bid along with any manual adjustments.
	Strategy BiddingStrategy `json:"strategy"`
}

// BiddingStrategy The bidding strategy selected for the campaign. Use LEGACY_FOR_SALES to lower your bid in real time when your ad may be less likely to convert to a sale. Use AUTO_FOR_SALES to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use MANUAL to use your exact bid along with any manual adjustments.
type BiddingStrategy string

// MyBiddingStrategy The bidding strategy selected for the campaign. Use `LEGACY_FOR_SALES` to lower your bid in real time when your ad may be less likely to convert to a sale. Use `AUTO_FOR_SALES` to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use `MANUAL` to use your exact bid along with any manual adjustments.
type MyBiddingStrategy string

// BiddingStrategyRecommendation Contains suggested recommendation for the campaign bidding strategy.
type BiddingStrategyRecommendation struct {
	// Action Type of suggested action.
	Action *BiddingStrategyRecommendationAction `json:"action,omitempty"`

	// SuggestedBiddingStrategy The suggested bidding strategy value for the campaign.
	// | Value | Strategy name | Description |
	// |----------------|---------------|-------------|
	// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
	// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
	// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
	SuggestedBiddingStrategy *BiddingStrategyRecommendationSuggestedBiddingStrategy `json:"suggestedBiddingStrategy,omitempty"`
}

// BiddingStrategyRecommendationAction Type of suggested action.
type BiddingStrategyRecommendationAction string

// BiddingStrategyRecommendationSuggestedBiddingStrategy The suggested bidding strategy value for the campaign.
// | Value | Strategy name | Description |
// |----------------|---------------|-------------|
// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
type BiddingStrategyRecommendationSuggestedBiddingStrategy string

// Brand defines model for Brand.
type Brand struct {
	// Id Id of brand. This field is REQUIRED if the Brand object is being used as an input. Use the GetRefinementsForCategory to retrieve Brand Node IDs.
	Id *string `json:"id,omitempty"`

	// Name Name of brand. This field is OPTIONAL if the Brand object is being used as an input.
	Name *string `json:"name,omitempty"`
}

// BrandLoP defines model for BrandLoP.
type BrandLoP struct {
	// Id Id of brand.
	Id *string `json:"id,omitempty"`

	// Name Name of brand.
	Name *string `json:"name,omitempty"`
}

// Brands List of Brands.
type Brands = []Brand

// BrandsLoP List of Brands.
type BrandsLoP = []BrandLoP

// BudgetChangeType The value by which to update the budget of the budget rule.
type BudgetChangeType string

// BudgetRecommendation Contains suggested recommendation for the campaign budget.
type BudgetRecommendation struct {
	// Action Type of suggested action.
	Action *BudgetRecommendationAction `json:"action,omitempty"`

	// SuggestedBudget The suggested budget value for the campaign.
	SuggestedBudget *float64 `json:"suggestedBudget,omitempty"`
}

// BudgetRecommendationAction Type of suggested action.
type BudgetRecommendationAction string

// BudgetRecommendationError defines model for BudgetRecommendationError.
type BudgetRecommendationError struct {
	Error SPTORBudgetRecommendationError `json:"Error"`

	// CampaignId encrypted campaignId
	CampaignId string `json:"campaignId"`

	// Index Correlate the recommendation to the campaign index in the request. Zero-based
	Index int `json:"index"`
}

// BudgetRecommendationNewCampaignsErrorMessage defines model for BudgetRecommendationNewCampaignsErrorMessage.
type BudgetRecommendationNewCampaignsErrorMessage = string

// BudgetRecommendationNewCampaignsException defines model for BudgetRecommendationNewCampaignsException.
type BudgetRecommendationNewCampaignsException struct {
	Message *BudgetRecommendationNewCampaignsErrorMessage `json:"message,omitempty"`
}

// BudgetRecommendationRequest defines model for BudgetRecommendationRequest.
type BudgetRecommendationRequest struct {
	// CampaignIds List of campaigns.
	CampaignIds []string `json:"campaignIds"`
}

// BudgetRecommendationResponse defines model for BudgetRecommendationResponse.
type BudgetRecommendationResponse struct {
	// BudgetRecommendationsErrorResults List of errors that occured when generating bduget recommendation.
	BudgetRecommendationsErrorResults []BudgetRecommendationError `json:"budgetRecommendationsErrorResults"`

	// BudgetRecommendationsSuccessResults List of successful budget recomendation for campagins.
	BudgetRecommendationsSuccessResults []BudgetRecommendation `json:"budgetRecommendationsSuccessResults"`
}

// BudgetRuleError The Error Response Object.
type BudgetRuleError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// BudgetRuleResponse defines model for BudgetRuleResponse.
type BudgetRuleResponse struct {
	AssociatedCampaignIds *[]string `json:"associatedCampaignIds,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`

	// RuleId The rule identifier.
	RuleId *string `json:"ruleId,omitempty"`
}

// BudgetUsageCampaign defines model for BudgetUsageCampaign.
type BudgetUsageCampaign struct {
	// Budget Budget amount of resource requested
	Budget *float32 `json:"budget,omitempty"`

	// BudgetUsagePercent Budget usage percentage (spend / available budget) for the given budget policy.
	BudgetUsagePercent *float32 `json:"budgetUsagePercent,omitempty"`

	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`

	// UsageUpdatedTimestamp Last evaluation time for budget usage
	UsageUpdatedTimestamp *time.Time `json:"usageUpdatedTimestamp,omitempty"`
}

// BudgetUsageCampaignBatchError defines model for BudgetUsageCampaignBatchError.
type BudgetUsageCampaignBatchError struct {
	// CampaignId ID of requested resource
	CampaignId *string `json:"campaignId,omitempty"`

	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`

	// Index An index to maintain order of the campaignIds
	Index *float32 `json:"index,omitempty"`
}

// BudgetUsageCampaignRequest defines model for BudgetUsageCampaignRequest.
type BudgetUsageCampaignRequest struct {
	// CampaignIds A list of campaign IDs
	CampaignIds *[]string `json:"campaignIds,omitempty"`
}

// BudgetUsageCampaignResponse defines model for BudgetUsageCampaignResponse.
type BudgetUsageCampaignResponse struct {
	// Error List of budget usage percentages that failed to pull
	Error *[]BudgetUsageCampaignBatchError `json:"error,omitempty"`

	// Success List of budget usage percentages that were successfully pulled
	Success *[]BudgetUsageCampaign `json:"success,omitempty"`
}

// BudgetUsageError The Error Response Object.
type BudgetUsageError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// CampaignOptimizationRule defines model for CampaignOptimizationRule.
type CampaignOptimizationRule struct {
	CampaignIds *[]RuleCampaignId `json:"campaignIds,omitempty"`

	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId CampaignOptimizationId `json:"campaignOptimizationId"`

	// CreatedDate Time of campaign optimization rule creation in ISO 8061. Read-only.
	CreatedDate *RuleCreationDate `json:"createdDate,omitempty"`

	// Recurrence The frequency of the rule application.
	Recurrence *RecurrenceType `json:"recurrence,omitempty"`

	// RuleAction The action taken when the campaign optimization rule is enabled. Defaults to adopt
	RuleAction    *RuleAction        `json:"ruleAction,omitempty"`
	RuleCondition *RuleConditionList `json:"ruleCondition,omitempty"`

	// RuleName The campaign optimization rule name.
	RuleName *RuleName `json:"ruleName,omitempty"`

	// RuleStatus The campaign optimization rule status. Read-Only
	RuleStatus *RuleStatus `json:"ruleStatus,omitempty"`

	// RuleType The type of the campaign optimization rule. Only Support BID as of now
	RuleType *RuleType `json:"ruleType,omitempty"`
}

// CampaignOptimizationRuleError The Error Response Object.
type CampaignOptimizationRuleError struct {
	// Code An enumerated error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// CampaignRecommendation This object contains a set of recommendations for a campaign across bid, budget, targeting.
type CampaignRecommendation struct {
	// BiddingStrategyRecommendation Contains suggested recommendation for the campaign bidding strategy.
	BiddingStrategyRecommendation *BiddingStrategyRecommendation `json:"biddingStrategyRecommendation,omitempty"`

	// BudgetRecommendation Contains suggested recommendation for the campaign budget.
	BudgetRecommendation *BudgetRecommendation `json:"budgetRecommendation,omitempty"`

	// CampaignId The identifier of the campaign.
	CampaignId                       *string                            `json:"campaignId,omitempty"`
	KeywordTargetingRecommendations  *[]KeywordTargetingRecommendation  `json:"keywordTargetingRecommendations,omitempty"`
	SevenDaysEstimatedOpportunities  *SevenDaysEstimatedOpportunities   `json:"sevenDaysEstimatedOpportunities,omitempty"`
	TargetingGroupBidRecommendations *[]TargetingGroupBidRecommendation `json:"targetingGroupBidRecommendations,omitempty"`
}

// CategoryItem defines model for CategoryItem.
type CategoryItem struct {
	// CanBeTargeted A flag which indicates if the current node may be targeted
	CanBeTargeted *bool `json:"canBeTargeted,omitempty"`

	// Id The category id of the current node
	Id *string `json:"id,omitempty"`

	// Name The name of the category
	Name *string `json:"name,omitempty"`

	// Parent The category id of the parent node
	Parent *string `json:"parent,omitempty"`

	// Path The path of the category, which contains the current category and all parent categories
	Path *string `json:"path,omitempty"`
}

// CategoryItemWithAsinCounts defines model for CategoryItemWithAsinCounts.
type CategoryItemWithAsinCounts struct {
	AsinCounts *IntegerRange `json:"asinCounts,omitempty"`

	// CategoryPath The path of the category, which contains the current category and all parent categories
	CategoryPath *string `json:"categoryPath,omitempty"`

	// Id The category id of the current node
	Id *string `json:"id,omitempty"`

	// Name The name of the category
	Name *string `json:"name,omitempty"`

	// ParentCategoryId The category id of the parent node
	ParentCategoryId *string `json:"parentCategoryId,omitempty"`
}

// CategoryItemWithAsinCountsLoP defines model for CategoryItemWithAsinCountsLoP.
type CategoryItemWithAsinCountsLoP struct {
	AsinCounts *IntegerRange `json:"asinCounts,omitempty"`

	// CategoryPath The path of the category, which contains the current category and all parent categories
	CategoryPath *string `json:"categoryPath,omitempty"`

	// Id The category id of the current node
	Id *string `json:"id,omitempty"`

	// Name The name of the category
	Name *string `json:"name,omitempty"`

	// ParentCategoryId The category id of the parent node
	ParentCategoryId *string `json:"parentCategoryId,omitempty"`

	// TranslatedCategoryPath The translated path of the category, which contains the current category and all parent categories.
	TranslatedCategoryPath *string `json:"translatedCategoryPath,omitempty"`

	// TranslatedName The translated name of the category.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// CategoryRecommendations Response object for the GetCategoryRecommendationsForAsins API.
type CategoryRecommendations struct {
	// Categories List of category recommendations
	Categories *[]CategoryItem `json:"categories,omitempty"`
}

// CategoryRecommendationsWithAsinCounts Response object for the GetCategoryRecommendationsForAsins API.
type CategoryRecommendationsWithAsinCounts struct {
	// Categories List of category recommendations
	Categories *[]CategoryItemWithAsinCounts `json:"categories,omitempty"`
}

// CategoryRecommendationsWithAsinCountsLoP Response object for the GetCategoryRecommendationsForAsins API.
type CategoryRecommendationsWithAsinCountsLoP struct {
	// Categories List of category recommendations
	Categories *[]CategoryItemWithAsinCountsLoP `json:"categories,omitempty"`
}

// Clicks Clicks benchmark.
type Clicks struct {
	// Lower lower bound.
	Lower *int `json:"lower,omitempty"`

	// Upper upper bound.
	Upper *int `json:"upper,omitempty"`
}

// ComparisonOperator The comparison operator.
type ComparisonOperator string

// Conversions Conversions benchmark.
type Conversions struct {
	// Lower lower bound.
	Lower *int `json:"lower,omitempty"`

	// Upper upper bound.
	Upper *int `json:"upper,omitempty"`
}

// CreateAssociatedBudgetRulesRequest defines model for CreateAssociatedBudgetRulesRequest.
type CreateAssociatedBudgetRulesRequest struct {
	// BudgetRuleIds A list of budget rule identifiers.
	BudgetRuleIds *[]string `json:"budgetRuleIds,omitempty"`
}

// CreateAssociatedBudgetRulesResponse defines model for CreateAssociatedBudgetRulesResponse.
type CreateAssociatedBudgetRulesResponse struct {
	Responses *[]AssociatedBudgetRuleResponse `json:"responses,omitempty"`
}

// CreateBudgetRulesResponse defines model for CreateBudgetRulesResponse.
type CreateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// CreateSPBudgetRulesRequest defines model for CreateSPBudgetRulesRequest.
type CreateSPBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SPBudgetRuleDetails `json:"budgetRulesDetails,omitempty"`
}

// CreateSPCampaignOptimizationRulesRequest defines model for CreateSPCampaignOptimizationRulesRequest.
type CreateSPCampaignOptimizationRulesRequest struct {
	// CampaignIds A list of campaign ids
	CampaignIds []RuleCampaignId `json:"campaignIds"`

	// Recurrence The frequency of the rule application.
	Recurrence RecurrenceType `json:"recurrence"`

	// RuleAction The action taken when the campaign optimization rule is enabled. Defaults to adopt
	RuleAction    RuleAction        `json:"ruleAction"`
	RuleCondition RuleConditionList `json:"ruleCondition"`

	// RuleName The campaign optimization rule name.
	RuleName *RuleName `json:"ruleName,omitempty"`

	// RuleType The type of the campaign optimization rule. Only Support BID as of now
	RuleType RuleType `json:"ruleType"`
}

// CreateSPCampaignOptimizationRulesResponse defines model for CreateSPCampaignOptimizationRulesResponse.
type CreateSPCampaignOptimizationRulesResponse struct {
	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId *CampaignOptimizationId `json:"campaignOptimizationId,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`
}

// DateRangeTypeRuleDuration Object representing date range type rule duration.
type DateRangeTypeRuleDuration struct {
	// EndDate The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.
	EndDate *string `json:"endDate,omitempty"`

	// StartDate The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
	StartDate string `json:"startDate"`
}

// DayOfWeek The day of the week.
type DayOfWeek string

// DeleteSPCampaignOptimizationRuleResponse defines model for DeleteSPCampaignOptimizationRuleResponse.
type DeleteSPCampaignOptimizationRuleResponse struct {
	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId *CampaignOptimizationId `json:"campaignOptimizationId,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`
}

// DisassociateAssociatedBudgetRuleResponse defines model for DisassociateAssociatedBudgetRuleResponse.
type DisassociateAssociatedBudgetRuleResponse = map[string]interface{}

// EventTypeRuleDuration Object representing event type rule duration.
type EventTypeRuleDuration struct {
	// EndDate The event end date in YYYYMMDD format. Read-only.
	EndDate *string `json:"endDate,omitempty"`

	// EventId The event identifier. This value is available from the budget rules recommendation API.
	EventId string `json:"eventId"`

	// EventName The event name. Read-only.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.
	StartDate *string `json:"startDate,omitempty"`
}

// Genre defines model for Genre.
type Genre struct {
	// Id Id of Genre. This field is REQUIRED if the Genre object is being used as an input. Use the GetRefinementsForCategory to retrieve Genre Node IDs.
	Id *string `json:"id,omitempty"`

	// Name Name of Genre. This field is OPTIONAL if the Genre object is being used as an input.
	Name *string `json:"name,omitempty"`
}

// GenreLoP defines model for GenreLoP.
type GenreLoP struct {
	// Id Id of Genre. Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs.
	Id *string `json:"id,omitempty"`

	// Name Name of Genre.
	Name *string `json:"name,omitempty"`

	// TranslatedName Translated name of the Genre based off locale send in the query parameter.
	TranslatedName *string `json:"translatedName,omitempty"`
}

// Genres List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.
type Genres = []Genre

// GenresLoP List of Genres in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs. Genres are only available for categories related to books.
type GenresLoP = []GenreLoP

// GetCampaignRecommendationsResponse defines model for GetCampaignRecommendationsResponse.
type GetCampaignRecommendationsResponse struct {
	// NextToken An identifier to fetch next set of campaign recommendations records in the result set if available. This will be null when at the end of result set.
	NextToken *string `json:"nextToken,omitempty"`

	// Recommendations List of campaign recommendations.
	Recommendations []CampaignRecommendation `json:"recommendations"`
}

// GetCategoryRecommendationsForAsinsRequest Request object to retrieve Category Recommendations based on the input ASINs.
type GetCategoryRecommendationsForAsinsRequest struct {
	// Asins List of input ASINs. This API does not check if the ASINs are valid ASINs.
	Asins *[]string `json:"asins,omitempty"`

	// IncludeAncestor Enable this if you would like to retrieve categories which are ancestor nodes of the original recommended categories. This may increase the number of categories returned, but decrease the relevancy of those categories.
	IncludeAncestor *bool `json:"includeAncestor,omitempty"`
}

// GetProductRecommendationsRequest Request structure to get ASIN recommendations for a set of input ASINs.
type GetProductRecommendationsRequest struct {
	// AdAsins List of input ASINs.
	AdAsins []string `json:"adAsins"`

	// Count Count of objects requested in the response. The count will be applied on the objects returned under `recommendations` array in response body.  <ul> <li>Requesting `application/vnd.spproductrecommendationresponse.themes.v3+json` mediatype applies the count on `ThemeRecommendation` objects.If no count value is passed a default of `5` is assumed. The API will return a maximum of `10` themes irrespective of how large the count is set. </li> <li>Requesting `application/vnd.spproductrecommendationresponse.asins.v3+json` mediatype applies count on the `ProductRecommendation` objects in response body.If no count value is passed a default of `100` is assumed. The API will return a maximum of `1000` recommendations irrespective of how large the count is set. </li> </ul> Please refer the response Schemas for more info.
	Count *int `json:"count,omitempty"`

	// Cursor A optional cursor value that can be used to fetch next or previous set of records.
	Cursor *string `json:"cursor,omitempty"`

	// Locale Theme names and descriptions will be provided in the language for your supported locale. Available options are en_US (U.S. English), en_GB (UK English), zh_CN (Chinese), es_ES (Spanish), jp_JP (Japanese), de_DE (German), fr_FR (French), it_IT(Italian). If locale is not provided or unsupported, the theme names and descriptions will be returned in U.S. English (en_US).
	Locale *string `json:"locale,omitempty"`
}

// GetSPBudgetRuleResponse defines model for GetSPBudgetRuleResponse.
type GetSPBudgetRuleResponse struct {
	BudgetRule *SPBudgetRule `json:"budgetRule,omitempty"`
}

// GetSPBudgetRulesForAdvertiserResponse defines model for GetSPBudgetRulesForAdvertiserResponse.
type GetSPBudgetRulesForAdvertiserResponse struct {
	// BudgetRulesForAdvertiserResponse A list of rules created by the advertiser.
	BudgetRulesForAdvertiserResponse *[]SPBudgetRule `json:"budgetRulesForAdvertiserResponse,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// GetSPCampaignOptimizationRuleResponse defines model for GetSPCampaignOptimizationRuleResponse.
type GetSPCampaignOptimizationRuleResponse struct {
	CampaignOptimizationRule *CampaignOptimizationRule `json:"CampaignOptimizationRule,omitempty"`
}

// GetTargetableAsinCountsRequest defines model for GetTargetableAsinCountsRequest.
type GetTargetableAsinCountsRequest struct {
	// AgeRanges List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
	AgeRanges *AgeRanges `json:"ageRanges,omitempty"`

	// Brands List of Brands.
	Brands *Brands `json:"brands,omitempty"`

	// Category The category node id. Please use the GetTargetableCategories API or GetCategoryRecommendationsForASINs API to retrieve category IDs.
	Category string `json:"category"`

	// Genres List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.
	Genres *Genres `json:"genres,omitempty"`

	// IsPrimeShipping Indicates if products have prime shipping
	IsPrimeShipping *bool `json:"isPrimeShipping,omitempty"`

	// PriceRange A range of prices. We use this to retrieve the number of targetable ASINs that falls within this price range.
	PriceRange *PriceRange `json:"priceRange,omitempty"`

	// RatingRange Rating range is restricted to integers between 0 and 5, inclusive. Min must be less than or equal to max. We use this to retrieve the number of targetable ASINs that falls within this rating range.
	RatingRange *RatingRange `json:"ratingRange,omitempty"`
}

// ImpactMetric The impact metrics are given in the same order of suggested bids.
//
// Note: This object is nullable
type ImpactMetric struct {
	Values *[]RangeMetricValue `json:"values,omitempty"`
}

// ImpactMetrics For the CONVERSION_OPPORTUNITIES theme, the impact metrics are weekly clicks and orders received for similar products.
// For other event-based themes, the impact metrics are clicks and orders received for similar products during the event days
//
// Note: This object is nullable
type ImpactMetrics struct {
	// Clicks The impact metrics are given in the same order of suggested bids.
	//
	// Note: This object is nullable
	Clicks *ImpactMetric `json:"clicks"`

	// Orders The impact metrics are given in the same order of suggested bids.
	//
	// Note: This object is nullable
	Orders *ImpactMetric `json:"orders"`
}

// Impressions Impressions benchmark.
type Impressions struct {
	// Lower lower bound.
	Lower *int `json:"lower,omitempty"`

	// Upper upper bound.
	Upper *int `json:"upper,omitempty"`
}

// InitialBudgetRecommendationRequest defines model for InitialBudgetRecommendationRequest.
type InitialBudgetRecommendationRequest struct {
	// AdGroups The ad group information for this new campaign.
	AdGroups []AdGroup `json:"adGroups"`

	// Bidding The bidding control configuration for the new campaign.
	Bidding Bidding `json:"bidding"`

	// EndDate The end date of the campaign in YYYYMMDD format.
	EndDate *string `json:"endDate,omitempty"`

	// StartDate The start date of the campaign in YYYYMMDD format.
	StartDate *string `json:"startDate,omitempty"`

	// TargetingType Specifies the targeting type.
	TargetingType InitialBudgetRecommendationRequestTargetingType `json:"targetingType"`
}

// InitialBudgetRecommendationRequestTargetingType Specifies the targeting type.
type InitialBudgetRecommendationRequestTargetingType string

// InitialBudgetRecommendationResponse defines model for InitialBudgetRecommendationResponse.
type InitialBudgetRecommendationResponse struct {
	// Benchmark Forecasted impact metrics for next 7 days or during special days.
	Benchmark Benchmark `json:"benchmark"`

	// DailyBudget Recommended daily budget for the new campaign. Note: value -1 means we don’t have enough information to provide a recommendation.
	DailyBudget float32 `json:"dailyBudget"`

	// RecommendationId Unique identifier for each recommendation.
	RecommendationId *string `json:"recommendationId,omitempty"`

	// SpecialEvents A list of special events around the start and end date of the campaign.
	SpecialEvents []SpecialEvent `json:"specialEvents"`
}

// IntegerRange defines model for IntegerRange.
type IntegerRange struct {
	Max *int32 `json:"max,omitempty"`
	Min *int32 `json:"min,omitempty"`
}

// InternalServerException Returns information about an InternalServerException.
type InternalServerException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// KeywordBidInfo defines model for KeywordBidInfo.
type KeywordBidInfo struct {
	// Bid The bid value for the keyword. The default value will be the suggested bid.
	Bid *float64 `json:"bid,omitempty"`

	// MatchType Keyword match type. The default value will be BROAD.
	MatchType *KeywordBidInfoMatchType `json:"matchType,omitempty"`

	// Rank The keyword target rank
	Rank *float32 `json:"rank,omitempty"`

	// SuggestedBid Suggested bid range
	SuggestedBid *BidSuggestion `json:"suggestedBid,omitempty"`
}

// KeywordBidInfoMatchType Keyword match type. The default value will be BROAD.
type KeywordBidInfoMatchType string

// KeywordTarget defines model for KeywordTarget.
type KeywordTarget struct {
	// Bid The bid value for the keyword. The default value will be the suggested bid.
	Bid *float64 `json:"bid,omitempty"`

	// Keyword The keyword value
	Keyword *string `json:"keyword,omitempty"`

	// MatchType Keyword match type. The default value will be BROAD.
	MatchType *KeywordTargetMatchType `json:"matchType,omitempty"`

	// UserSelectedKeyword Flag that tells if keyword was selected by the user or was recommended by KRS
	UserSelectedKeyword *bool `json:"userSelectedKeyword,omitempty"`
}

// KeywordTargetMatchType Keyword match type. The default value will be BROAD.
type KeywordTargetMatchType string

// KeywordTargetRankRecommendationRequest defines model for KeywordTargetRankRecommendationRequest.
type KeywordTargetRankRecommendationRequest = RecommendationOptions

// KeywordTargetResponse defines model for KeywordTargetResponse.
type KeywordTargetResponse = KeywordTarget

// KeywordTargetingRecommendation Contains suggested recommendation for the keyword targeting.
type KeywordTargetingRecommendation struct {
	// Action Type of action for the keyword targeting.
	Action *KeywordTargetingRecommendationAction `json:"action,omitempty"`

	// AdGroupId The ad group identifier.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// KeywordId The identifier of the keyword targeting.
	KeywordId *string `json:"keywordId,omitempty"`

	// KeywordText The keyword text.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType Keyword match type. | Value | Description | | --- | --- | | `BROAD` | Use BROAD to broadly match your keyword targeting ads with search queries.| | `EXACT` | Use EXACT to exactly match your keyword targeting ads with search queries.| | `PHRASE` | Use PHRASE to match your keyword targeting ads with search phrases.|
	MatchType *KeywordTargetingRecommendationMatchType `json:"matchType,omitempty"`

	// SuggestedBid The suggested bid value associated with this keyword targeting clause.
	SuggestedBid *float64 `json:"suggestedBid,omitempty"`
}

// KeywordTargetingRecommendationAction Type of action for the keyword targeting.
type KeywordTargetingRecommendationAction string

// KeywordTargetingRecommendationMatchType Keyword match type. | Value | Description | | --- | --- | | `BROAD` | Use BROAD to broadly match your keyword targeting ads with search queries.| | `EXACT` | Use EXACT to exactly match your keyword targeting ads with search queries.| | `PHRASE` | Use PHRASE to match your keyword targeting ads with search phrases.|
type KeywordTargetingRecommendationMatchType string

// PerformanceMeasureCondition defines model for PerformanceMeasureCondition.
type PerformanceMeasureCondition struct {
	// ComparisonOperator The comparison operator.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator"`

	// MetricName The advertising performance metric.
	MetricName PerformanceMetric `json:"metricName"`

	// Threshold The performance threshold value.
	Threshold float64 `json:"threshold"`
}

// PerformanceMetric The advertising performance metric.
type PerformanceMetric string

// PerformanceMetricValue An object giving the name of the performance metric and its value when the rule was evaluated
type PerformanceMetricValue struct {
	// Name Name of the performance metric
	Name *string `json:"name,omitempty"`

	// Value Value of the performance metric
	Value *float64 `json:"value,omitempty"`
}

// PlacementAdjustment Specifies bid adjustments based on the placement location. Use `PLACEMENT_TOP` for the top of the search page. Use `PLACEMENT_PRODUCT_PAGE` for a product page.
type PlacementAdjustment struct {
	Percentage *int                          `json:"percentage,omitempty"`
	Predicate  *PlacementAdjustmentPredicate `json:"predicate,omitempty"`
}

// PlacementAdjustmentPredicate defines model for PlacementAdjustment.Predicate.
type PlacementAdjustmentPredicate string

// PriceRange A range of prices. We use this to retrieve the number of targetable ASINs that falls within this price range.
type PriceRange struct {
	Max *float64 `json:"max,omitempty"`
	Min *float64 `json:"min,omitempty"`
}

// ProductRecommendation Recommended asin and related information.
type ProductRecommendation struct {
	// RecommendedAsin Recommended ASIN
	RecommendedAsin *string `json:"recommendedAsin,omitempty"`

	// Themes List of themes associated with this recommended ASIN.
	Themes *[]string `json:"themes,omitempty"`
}

// ProductRecommendationsByASIN Product recommendations supplemented with relevant information.
type ProductRecommendationsByASIN struct {
	// NextCursor An identifier to fetch next set of `ProductRecommendation` records in the result set if available. This will be null when at the end of result set.
	NextCursor *string `json:"nextCursor,omitempty"`

	// PreviousCursor Optional parameter that links to the previous result set served. This parameter will be null on the first request.
	PreviousCursor *string `json:"previousCursor,omitempty"`

	// Recommendations An array of `ProductRecommendation` objects.
	Recommendations *[]ProductRecommendation `json:"recommendations,omitempty"`
}

// ProductRecommendationsByTheme Product recommendations grouped by theme attribute.
type ProductRecommendationsByTheme struct {
	// NextCursor An identifier to fetch next set of `ThemeRecommendation` records in the result set if available. This will be null when at the end of result set.
	NextCursor *string `json:"nextCursor,omitempty"`

	// PreviousCursor Optional parameter that links to the previous result set served to the requester.
	PreviousCursor *string `json:"previousCursor,omitempty"`

	// Recommendations An array of `ThemeRecommendation` objects
	Recommendations *[]ThemeRecommendation `json:"recommendations,omitempty"`
}

// RangeMetricValue Describes lower and upper bounds of the range.
//
// Note: This object is nullable
type RangeMetricValue struct {
	Lower *int `json:"lower,omitempty"`
	Upper *int `json:"upper,omitempty"`
}

// RankedKeywordTargetsForAdGroupRequest defines model for RankedKeywordTargetsForAdGroupRequest.
type RankedKeywordTargetsForAdGroupRequest = KeywordTargetRankRecommendationRequest

// RankedKeywordTargetsForAsinsRequest defines model for RankedKeywordTargetsForAsinsRequest.
type RankedKeywordTargetsForAsinsRequest = KeywordTargetRankRecommendationRequest

// RankedTargetResponse defines model for RankedTargetResponse.
type RankedTargetResponse struct {
	// KeywordTargetList A list of ranked keyword targets
	KeywordTargetList *[]RecKeywordTarget `json:"keywordTargetList,omitempty"`
}

// RankedTargetWithThemedBids defines model for RankedTargetWithThemedBids.
type RankedTargetWithThemedBids struct {
	// BidInfo A list of keyword bid info
	BidInfo *[]ThemedBid `json:"bidInfo,omitempty"`

	// Keyword The keyword value
	Keyword *string `json:"keyword,omitempty"`

	// RecId The recommended keyword target id
	RecId *string `json:"recId,omitempty"`

	// SearchTermImpressionRank The account-level ad-attributed impression rank for the search-term/keyword. Provides [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 30 days. It tells an advertiser how many advertisers had higher share of ad impressions. This information is only available for keywords the advertiser targeted with ad impressions.
	SearchTermImpressionRank *float32 `json:"searchTermImpressionRank,omitempty"`

	// SearchTermImpressionShare The account-level ad-attributed impression share for the search-term/keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 30 days. This metric helps advertisers identify potential opportunities based on their share on relevant keywords. This information is only available for keywords the advertiser targeted with ad impressions.
	SearchTermImpressionShare *float64 `json:"searchTermImpressionShare,omitempty"`

	// Translation The translation of keyword if a locale is passed in
	Translation *string `json:"translation,omitempty"`

	// UserSelectedKeyword Flag that tells if keyword was selected by the user or was recommended by KRS
	UserSelectedKeyword *bool `json:"userSelectedKeyword,omitempty"`
}

// RankedTargetWithThemedBidsList defines model for RankedTargetWithThemedBidsList.
type RankedTargetWithThemedBidsList = []RankedTargetWithThemedBids

// RankedTargetWithThemedBidsResponse defines model for RankedTargetWithThemedBidsResponse.
type RankedTargetWithThemedBidsResponse struct {
	// ImpactMetrics A list of impact metrics which anticipates the number of clicks and orders you will receive if you target all targeting expressions using the low, medium, and high suggested bid.
	ImpactMetrics     *[]ImpactMetrics                `json:"impactMetrics,omitempty"`
	KeywordTargetList *RankedTargetWithThemedBidsList `json:"keywordTargetList,omitempty"`
}

// RatingRange Rating range is restricted to integers between 0 and 5, inclusive. Min must be less than or equal to max. We use this to retrieve the number of targetable ASINs that falls within this rating range.
type RatingRange struct {
	Max *int32 `json:"max,omitempty"`
	Min *int32 `json:"min,omitempty"`
}

// RecKeywordTarget defines model for RecKeywordTarget.
type RecKeywordTarget struct {
	// BidInfo A list of keyword bid info
	BidInfo *[]KeywordBidInfo `json:"bidInfo,omitempty"`

	// Keyword The keyword value
	Keyword *string `json:"keyword,omitempty"`

	// RecId The recommended keyword target id
	RecId *string `json:"recId,omitempty"`

	// SearchTermImpressionRank The account-level ad-attributed impression rank for the search-term/keyword. Provides [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 30 days. It tells an advertiser how many advertisers had higher share of ad impressions. This information is only available for keywords the advertiser targeted with ad impressions.
	SearchTermImpressionRank *float32 `json:"searchTermImpressionRank,omitempty"`

	// SearchTermImpressionShare The account-level ad-attributed impression share for the search-term/keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 30 days. This metric helps advertisers identify potential opportunities based on their share on relevant keywords. This information is only available for keywords the advertiser targeted with ad impressions.
	SearchTermImpressionShare *float64 `json:"searchTermImpressionShare,omitempty"`

	// Translation The translation of keyword if a locale is passed in
	Translation *string `json:"translation,omitempty"`

	// UserSelectedKeyword Flag that tells if keyword was selected by the user or was recommended by KRS
	UserSelectedKeyword *bool `json:"userSelectedKeyword,omitempty"`
}

// RecommendationOptions defines model for RecommendationOptions.
type RecommendationOptions struct {
	// Locale Translations are for readability and do not affect the targeting of ads. Supported marketplace to locale mappings can be found at the <a href='https://advertising.amazon.com/API/docs/en-us/localization/#/Keyword%20Localization'>POST /keywords/localize</a> endpoint. Note: Translations will be null if locale is unsupported.
	Locale *RecommendationOptionsLocale `json:"locale,omitempty"`

	// MaxRecommendations The max size of recommended target. Set it to 0 if you only want to rank user-defined keywords.
	MaxRecommendations *float32 `json:"maxRecommendations,omitempty"`

	// SortDimension The ranking metric value. Supported values: CLICKS, CONVERSIONS, DEFAULT. DEFAULT will be applied if no value passed in.
	SortDimension *RecommendationOptionsSortDimension `json:"sortDimension,omitempty"`
}

// RecommendationOptionsLocale Translations are for readability and do not affect the targeting of ads. Supported marketplace to locale mappings can be found at the <a href='https://advertising.amazon.com/API/docs/en-us/localization/#/Keyword%20Localization'>POST /keywords/localize</a> endpoint. Note: Translations will be null if locale is unsupported.
type RecommendationOptionsLocale string

// RecommendationOptionsSortDimension The ranking metric value. Supported values: CLICKS, CONVERSIONS, DEFAULT. DEFAULT will be applied if no value passed in.
type RecommendationOptionsSortDimension string

// Recurrence defines model for Recurrence.
type Recurrence struct {
	// DaysOfWeek Object representing days of the week for weekly type rule. It is not required for daily recurrence type
	DaysOfWeek *[]DayOfWeek `json:"daysOfWeek,omitempty"`

	// Type The frequency of the rule application.
	Type *RecurrenceType `json:"type,omitempty"`
}

// RecurrenceType The frequency of the rule application.
type RecurrenceType string

// Refinements Response object for the GetRefinementsForCategory API, containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
type Refinements struct {
	// AgeRanges List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
	AgeRanges *AgeRanges `json:"ageRanges,omitempty"`

	// Brands List of Brands.
	Brands *Brands `json:"brands,omitempty"`

	// Genres List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.
	Genres *Genres `json:"genres,omitempty"`
}

// RefinementsLoP Response object for the POST /sp/targets/category/{categoryId}/refinements endpoint, containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
type RefinementsLoP struct {
	// AgeRanges List of Age Ranges in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
	AgeRanges *AgeRangesLoP `json:"ageRanges,omitempty"`

	// Brands List of Brands.
	Brands *BrandsLoP `json:"brands,omitempty"`

	// Genres List of Genres in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs. Genres are only available for categories related to books.
	Genres *GenresLoP `json:"genres,omitempty"`
}

// RuleAction The action taken when the campaign optimization rule is enabled. Defaults to adopt
type RuleAction string

// RuleCampaignId campaignId
type RuleCampaignId = string

// RuleCondition defines model for RuleCondition.
type RuleCondition struct {
	// ComparisonOperator The comparison operator.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator"`

	// MetricName The advertising performance metric. ROAS is the only supported metric.
	MetricName RuleConditionMetric `json:"metricName"`

	// Threshold The performance threshold value.
	Threshold float64 `json:"threshold"`
}

// RuleConditionList defines model for RuleConditionList.
type RuleConditionList = []RuleCondition

// RuleConditionMetric The advertising performance metric. ROAS is the only supported metric.
type RuleConditionMetric string

// RuleCreationDate Time of campaign optimization rule creation in ISO 8061. Read-only.
type RuleCreationDate = string

// RuleDuration defines model for RuleDuration.
type RuleDuration struct {
	// DateRangeTypeRuleDuration Object representing date range type rule duration.
	DateRangeTypeRuleDuration *DateRangeTypeRuleDuration `json:"dateRangeTypeRuleDuration,omitempty"`

	// EventTypeRuleDuration Object representing event type rule duration.
	EventTypeRuleDuration *EventTypeRuleDuration `json:"eventTypeRuleDuration,omitempty"`
}

// RuleName The campaign optimization rule name.
type RuleName = string

// RuleNotification defines model for RuleNotification.
type RuleNotification struct {
	// CampaignId campaignId
	CampaignId *RuleCampaignId `json:"campaignId,omitempty"`

	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId *CampaignOptimizationId `json:"campaignOptimizationId,omitempty"`

	// NotificationString Explains why the rule state is disabled
	NotificationString *string `json:"notificationString,omitempty"`

	// RuleState The campaign optimization rule state.
	RuleState *RuleState `json:"ruleState,omitempty"`
}

// RuleNotificationError defines model for RuleNotificationError.
type RuleNotificationError struct {
	// Error The Error Response Object.
	Error *CampaignOptimizationRuleError `json:"Error,omitempty"`

	// CampaignId campaignId
	CampaignId *RuleCampaignId `json:"campaignId,omitempty"`
}

// RuleRecommendation defines model for RuleRecommendation.
type RuleRecommendation struct {
	// CampaignId campaignId
	CampaignId *RuleCampaignId `json:"campaignId,omitempty"`

	// PerformanceMetrics Performance Metrics supported by the rule recommendation
	PerformanceMetrics *RuleRecommendationMetrics `json:"performanceMetrics,omitempty"`
}

// RuleRecommendationError defines model for RuleRecommendationError.
type RuleRecommendationError struct {
	// Error The Error Response Object.
	Error *CampaignOptimizationRuleError `json:"Error,omitempty"`

	// CampaignId campaignId
	CampaignId *RuleCampaignId `json:"campaignId,omitempty"`
}

// RuleRecommendationMetrics Performance Metrics supported by the rule recommendation
type RuleRecommendationMetrics struct {
	// Roas return on ad spend value
	Roas *float64 `json:"roas,omitempty"`
}

// RuleState The campaign optimization rule state.
type RuleState string

// RuleStatus The campaign optimization rule status. Read-Only
type RuleStatus string

// RuleType The type of the campaign optimization rule. Only Support BID as of now
type RuleType string

// SPBudgetHistory defines model for SPBudgetHistory.
type SPBudgetHistory struct {
	History *[]SPRuleBasedBudget `json:"history,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SPBudgetRule defines model for SPBudgetRule.
type SPBudgetRule struct {
	// CreatedDate Epoch time of budget rule creation. Read-only.
	CreatedDate *int64 `json:"createdDate,omitempty"`

	// LastUpdatedDate Epoch time of budget rule update. Read-only.
	LastUpdatedDate *int64 `json:"lastUpdatedDate,omitempty"`

	// RuleDetails Object representing details of a budget rule for SP campaign
	RuleDetails *SPBudgetRuleDetails `json:"ruleDetails,omitempty"`

	// RuleId The budget rule identifier.
	RuleId string `json:"ruleId"`

	// RuleState The budget rule state.
	RuleState *State `json:"ruleState,omitempty"`

	// RuleStatus The budget rule status. Read-only.
	RuleStatus *string `json:"ruleStatus,omitempty"`
}

// SPBudgetRuleDetails Object representing details of a budget rule for SP campaign
type SPBudgetRuleDetails struct {
	BudgetIncreaseBy *BudgetIncreaseBy `json:"budgetIncreaseBy,omitempty"`
	Duration         *RuleDuration     `json:"duration,omitempty"`

	// Name The budget rule name. Required to be unique within a campaign.
	Name                        *string                      `json:"name,omitempty"`
	PerformanceMeasureCondition *PerformanceMeasureCondition `json:"performanceMeasureCondition,omitempty"`
	Recurrence                  *Recurrence                  `json:"recurrence,omitempty"`

	// RuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
	RuleType *SPRuleType `json:"ruleType,omitempty"`
}

// SPBudgetRulesRecommendationError The Error Response Object.
type SPBudgetRulesRecommendationError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SPBudgetRulesRecommendationEvent defines model for SPBudgetRulesRecommendationEvent.
type SPBudgetRulesRecommendationEvent struct {
	// EndDate The end date in YYYYMMDD format.
	EndDate *string `json:"endDate,omitempty"`

	// EventId The event identifier.
	EventId *string `json:"eventId,omitempty"`

	// EventName The event name.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The start date in YYYYMMDD format.
	StartDate *string `json:"startDate,omitempty"`

	// SuggestedBudgetIncreasePercent The suggested budget increase expressed as a percent.
	SuggestedBudgetIncreasePercent *float32 `json:"suggestedBudgetIncreasePercent,omitempty"`
}

// SPBudgetRulesRecommendationEventRequest defines model for SPBudgetRulesRecommendationEventRequest.
type SPBudgetRulesRecommendationEventRequest struct {
	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`
}

// SPBudgetRulesRecommendationEventResponse Special events with date range and suggested budget increase.
type SPBudgetRulesRecommendationEventResponse struct {
	// RecommendedBudgetRuleEvents A list of recommended special events with date range and suggested budget increase.
	RecommendedBudgetRuleEvents *[]SPBudgetRulesRecommendationEvent `json:"recommendedBudgetRuleEvents,omitempty"`
}

// SPCampaignBudgetRule defines model for SPCampaignBudgetRule.
type SPCampaignBudgetRule struct {
	// CreatedDate Epoch time of budget rule creation. Read-only.
	CreatedDate *int64 `json:"createdDate,omitempty"`

	// LastUpdatedDate Epoch time of budget rule update. Read-only.
	LastUpdatedDate *int64 `json:"lastUpdatedDate,omitempty"`

	// RuleDetails Object representing details of a budget rule for SP campaign
	RuleDetails *SPBudgetRuleDetails `json:"ruleDetails,omitempty"`

	// RuleId The budget rule identifier.
	RuleId string `json:"ruleId"`

	// RuleState The budget rule state.
	RuleState *State `json:"ruleState,omitempty"`

	// RuleStatus The budget rule evaluation status. Read-only.
	RuleStatus *string `json:"ruleStatus,omitempty"`
}

// SPCampaignOptimizationNotificationAPIRequest defines model for SPCampaignOptimizationNotificationAPIRequest.
type SPCampaignOptimizationNotificationAPIRequest struct {
	// CampaignIds A list of campaign ids
	CampaignIds []RuleCampaignId `json:"campaignIds"`
}

// SPCampaignOptimizationNotificationAPIResponse defines model for SPCampaignOptimizationNotificationAPIResponse.
type SPCampaignOptimizationNotificationAPIResponse struct {
	// CampaignOptimizationNotifications List of successful campaign optimization notifications for campaigns.
	CampaignOptimizationNotifications *[]RuleNotification `json:"CampaignOptimizationNotifications,omitempty"`

	// CampaignOptimizationRecommendationsError List of errors that occured when generating campaign optimization notifications.
	CampaignOptimizationRecommendationsError *[]RuleNotificationError `json:"CampaignOptimizationRecommendationsError,omitempty"`
}

// SPCampaignOptimizationRecommendationAPIResponse defines model for SPCampaignOptimizationRecommendationAPIResponse.
type SPCampaignOptimizationRecommendationAPIResponse struct {
	// CampaignOptimizationRecommendations List of successful campaign optimization recomendation for campaigns.
	CampaignOptimizationRecommendations *[]RuleRecommendation `json:"CampaignOptimizationRecommendations,omitempty"`

	// CampaignOptimizationRecommendationsError List of errors that occured when generating campaign optimization recommendation.
	CampaignOptimizationRecommendationsError *[]RuleRecommendationError `json:"CampaignOptimizationRecommendationsError,omitempty"`
}

// SPCampaignOptimizationRecommendationsAPIRequest defines model for SPCampaignOptimizationRecommendationsAPIRequest.
type SPCampaignOptimizationRecommendationsAPIRequest struct {
	// CampaignIds A list of campaign ids
	CampaignIds []RuleCampaignId `json:"campaignIds"`
}

// SPGetAssociatedCampaignsResponse defines model for SPGetAssociatedCampaignsResponse.
type SPGetAssociatedCampaignsResponse struct {
	// AssociatedCampaigns A list of campaigns that are associated to this budget rule.
	AssociatedCampaigns *[]AssociatedCampaign `json:"associatedCampaigns,omitempty"`

	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `json:"nextToken,omitempty"`
}

// SPListAssociatedBudgetRulesResponse defines model for SPListAssociatedBudgetRulesResponse.
type SPListAssociatedBudgetRulesResponse struct {
	// AssociatedRules A list of associated budget rules.
	AssociatedRules *[]SPCampaignBudgetRule `json:"associatedRules,omitempty"`
}

// SPRuleBasedBudget defines model for SPRuleBasedBudget.
type SPRuleBasedBudget struct {
	AppliedRule *SPBudgetRule `json:"appliedRule,omitempty"`

	// DailyBudgetValue The daily budget value.
	DailyBudgetValue *float32 `json:"dailyBudgetValue,omitempty"`

	// ExecutionTime Epoch time of budget rule execution.
	ExecutionTime *int64 `json:"executionTime,omitempty"`

	// PerformanceMetric An object giving the name of the performance metric and its value when the rule was evaluated
	PerformanceMetric *PerformanceMetricValue `json:"performanceMetric,omitempty"`

	// RuleBasedBudgetValue The budget value.
	RuleBasedBudgetValue *float32 `json:"ruleBasedBudgetValue,omitempty"`
}

// SPRuleType The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
type SPRuleType string

// SPTORBudgetRecommendationError defines model for SPTORBudgetRecommendationError.
type SPTORBudgetRecommendationError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SPTargetingError The Error Response Object.
type SPTargetingError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// SearchBrandsRequest Request object for SearchBrands API.
type SearchBrandsRequest struct {
	Keyword string `json:"keyword"`
}

// SevenDaysEstimatedOpportunities defines model for SevenDaysEstimatedOpportunities.
type SevenDaysEstimatedOpportunities struct {
	// EndDate End date of the opportunities date range in YYYY-MM-DDTHH:mm:ssZ format.
	EndDate *string `json:"endDate,omitempty"`

	// EstimatedIncrementalClicksLower Lower bound of the estimated incremental clicks that could be gained if all optimizations are made.
	EstimatedIncrementalClicksLower *int `json:"estimatedIncrementalClicksLower,omitempty"`

	// EstimatedIncrementalClicksUpper Upper bound of the estimated incremental clicks that could be gained if all optimizations are made.
	EstimatedIncrementalClicksUpper *int `json:"estimatedIncrementalClicksUpper,omitempty"`

	// StartDate Start date of the opportunities date range in YYYY-MM-DDTHH:mm:ssZ format.
	StartDate *string `json:"startDate,omitempty"`
}

// SpecialEvent defines model for SpecialEvent.
type SpecialEvent struct {
	// Benchmark Forecasted impact metrics for next 7 days or during special days.
	Benchmark *Benchmark `json:"benchmark,omitempty"`

	// BudgetModifier Deprecated. The factor used to boost the recommended budget.
	BudgetModifier *float32 `json:"budgetModifier,omitempty"`

	// DailyBudget Recommended daily budget for the new campaign during the special event period.
	DailyBudget *float32 `json:"dailyBudget,omitempty"`

	// EndDate The end date of the special event in YYYYMMDD format.
	EndDate *string `json:"endDate,omitempty"`

	// EventKey The key of the special event.
	EventKey *string `json:"eventKey,omitempty"`

	// EventName The name of the special event.
	EventName *string `json:"eventName,omitempty"`

	// StartDate The start date of the special event in YYYYMMDD format.
	StartDate *string `json:"startDate,omitempty"`
}

// SponsoredProductsAccessDeniedErrorCode defines model for SponsoredProductsAccessDeniedErrorCode.
type SponsoredProductsAccessDeniedErrorCode string

// SponsoredProductsAccessDeniedExceptionResponseContent defines model for SponsoredProductsAccessDeniedExceptionResponseContent.
type SponsoredProductsAccessDeniedExceptionResponseContent struct {
	Code SponsoredProductsAccessDeniedErrorCode `json:"code"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsAdEligibilityError Errors related to ad eligibility
type SponsoredProductsAdEligibilityError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                    `json:"message"`
	Reason  SponsoredProductsAdEligibilityErrorReason `json:"reason"`
}

// SponsoredProductsAdEligibilityErrorReason defines model for SponsoredProductsAdEligibilityErrorReason.
type SponsoredProductsAdEligibilityErrorReason string

// SponsoredProductsAdGroup defines model for SponsoredProductsAdGroup.
type SponsoredProductsAdGroup struct {
	// AdGroupId The identifier of the keyword.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// DefaultBid A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	DefaultBid   float64                               `json:"defaultBid"`
	ExtendedData *SponsoredProductsAdGroupExtendedData `json:"extendedData,omitempty"`

	// Name The name of the ad group.
	Name string `json:"name"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`
}

// SponsoredProductsAdGroupAccessError defines model for SponsoredProductsAdGroupAccessError.
type SponsoredProductsAdGroupAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                      `json:"errorType"`
	ErrorValue SponsoredProductsAdGroupAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsAdGroupAccessErrorSelector defines model for SponsoredProductsAdGroupAccessErrorSelector.
type SponsoredProductsAdGroupAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsAdGroupAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsAdGroupAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsAdGroupAccessError    `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsAdGroupExtendedData defines model for SponsoredProductsAdGroupExtendedData.
type SponsoredProductsAdGroupExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsAdGroupServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the AdGroup
	ServingStatusDetails *[]SponsoredProductsAdGroupServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsAdGroupFailureResponseItem defines model for SponsoredProductsAdGroupFailureResponseItem.
type SponsoredProductsAdGroupFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsAdGroupMutationError `json:"errors,omitempty"`

	// Index the index of the adGroup in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsAdGroupMutationError defines model for SponsoredProductsAdGroupMutationError.
type SponsoredProductsAdGroupMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                        `json:"errorType"`
	ErrorValue SponsoredProductsAdGroupMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsAdGroupMutationErrorSelector defines model for SponsoredProductsAdGroupMutationErrorSelector.
type SponsoredProductsAdGroupMutationErrorSelector struct {
	// ApplicableMarketplacesError Errors related to ad eligibility
	ApplicableMarketplacesError *SponsoredProductsApplicableMarketplacesError `json:"applicableMarketplacesError,omitempty"`

	// BiddingError Errors related to bids
	BiddingError *SponsoredProductsBiddingError `json:"biddingError,omitempty"`

	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsAdGroupMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsAdGroupMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsAdGroupMutationError  `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsAdGroupServingStatus defines model for SponsoredProductsAdGroupServingStatus.
type SponsoredProductsAdGroupServingStatus string

// SponsoredProductsAdGroupServingStatusDetail defines model for SponsoredProductsAdGroupServingStatusDetail.
type SponsoredProductsAdGroupServingStatusDetail struct {
	// HelpUrl A URL with additional information about the status identifier.
	HelpUrl *string `json:"helpUrl,omitempty"`

	// Message A human-readable description of the status identifier specified in the name field.
	Message *string                                      `json:"message,omitempty"`
	Name    *SponsoredProductsAdGroupServingStatusReason `json:"name,omitempty"`
}

// SponsoredProductsAdGroupServingStatusReason defines model for SponsoredProductsAdGroupServingStatusReason.
type SponsoredProductsAdGroupServingStatusReason string

// SponsoredProductsAdGroupSuccessResponseItem defines model for SponsoredProductsAdGroupSuccessResponseItem.
type SponsoredProductsAdGroupSuccessResponseItem struct {
	AdGroup *SponsoredProductsAdGroup `json:"adGroup,omitempty"`

	// AdGroupId the adGroup ID
	AdGroupId *string `json:"adGroupId,omitempty"`

	// Index the index of the adGroup in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsAdServingStatus defines model for SponsoredProductsAdServingStatus.
type SponsoredProductsAdServingStatus string

// SponsoredProductsAdServingStatusDetail defines model for SponsoredProductsAdServingStatusDetail.
type SponsoredProductsAdServingStatusDetail struct {
	// HelpUrl A URL with additional information about the status identifier.
	HelpUrl *string `json:"helpUrl,omitempty"`

	// Message A human-readable description of the status identifier specified in the name field.
	Message *string                                 `json:"message,omitempty"`
	Name    *SponsoredProductsAdServingStatusReason `json:"name,omitempty"`
}

// SponsoredProductsAdServingStatusReason defines model for SponsoredProductsAdServingStatusReason.
type SponsoredProductsAdServingStatusReason string

// SponsoredProductsApplicableMarketplacesError Errors related to ad eligibility
type SponsoredProductsApplicableMarketplacesError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                             `json:"message"`
	Reason  SponsoredProductsApplicableMarketplacesErrorReason `json:"reason"`
}

// SponsoredProductsApplicableMarketplacesErrorReason defines model for SponsoredProductsApplicableMarketplacesErrorReason.
type SponsoredProductsApplicableMarketplacesErrorReason string

// SponsoredProductsAsinFilter defines model for SponsoredProductsAsinFilter.
type SponsoredProductsAsinFilter struct {
	Include *[]string `json:"include,omitempty"`

	// QueryTermMatchType Match type for query filters.
	// | Value |  Description |
	// |-----------|------------|
	// | `BROAD_MATCH` | Match if the queried value contains the filter value. (substring matching) |
	// | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
	QueryTermMatchType *SponsoredProductsQueryTermMatchType `json:"queryTermMatchType,omitempty"`
}

// SponsoredProductsAsinOwnershipError Errors related to author asin ownership
type SponsoredProductsAsinOwnershipError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                    `json:"message"`
	Reason  SponsoredProductsAsinOwnershipErrorReason `json:"reason"`
}

// SponsoredProductsAsinOwnershipErrorReason defines model for SponsoredProductsAsinOwnershipErrorReason.
type SponsoredProductsAsinOwnershipErrorReason string

// SponsoredProductsBiddingError Errors related to bids
type SponsoredProductsBiddingError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	LowerLimit  *string                       `json:"lowerLimit,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message    string                              `json:"message"`
	Reason     SponsoredProductsBiddingErrorReason `json:"reason"`
	UpperLimit *string                             `json:"upperLimit,omitempty"`
}

// SponsoredProductsBiddingErrorReason defines model for SponsoredProductsBiddingErrorReason.
type SponsoredProductsBiddingErrorReason string

// SponsoredProductsBiddingStrategy The bidding strategy.
// | Value | Strategy name | Description |
// |----------------|---------------|-------------|
// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
// | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
type SponsoredProductsBiddingStrategy string

// SponsoredProductsBillingError Errors related to bids
type SponsoredProductsBillingError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                              `json:"message"`
	Reason  SponsoredProductsBillingErrorReason `json:"reason"`
}

// SponsoredProductsBillingErrorReason defines model for SponsoredProductsBillingErrorReason.
type SponsoredProductsBillingErrorReason string

// SponsoredProductsBudget defines model for SponsoredProductsBudget.
type SponsoredProductsBudget struct {
	// Budget Monetary value
	Budget     float64                     `json:"budget"`
	BudgetType SponsoredProductsBudgetType `json:"budgetType"`

	// EffectiveBudget Monetary value
	EffectiveBudget *float64 `json:"effectiveBudget,omitempty"`
}

// SponsoredProductsBudgetError defines model for SponsoredProductsBudgetError.
type SponsoredProductsBudgetError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause      *SponsoredProductsErrorCause `json:"cause,omitempty"`
	LowerLimit *string                      `json:"lowerLimit,omitempty"`

	// Message Human readable error message
	Message    string                             `json:"message"`
	Reason     SponsoredProductsBudgetErrorReason `json:"reason"`
	UpperLimit *string                            `json:"upperLimit,omitempty"`
}

// SponsoredProductsBudgetErrorReason defines model for SponsoredProductsBudgetErrorReason.
type SponsoredProductsBudgetErrorReason string

// SponsoredProductsBudgetType defines model for SponsoredProductsBudgetType.
type SponsoredProductsBudgetType string

// SponsoredProductsBulkAdGroupOperationResponse defines model for SponsoredProductsBulkAdGroupOperationResponse.
type SponsoredProductsBulkAdGroupOperationResponse struct {
	Error   *[]SponsoredProductsAdGroupFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsAdGroupSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkCampaignNegativeKeywordOperationResponse defines model for SponsoredProductsBulkCampaignNegativeKeywordOperationResponse.
type SponsoredProductsBulkCampaignNegativeKeywordOperationResponse struct {
	Error   *[]SponsoredProductsCampaignNegativeKeywordFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsCampaignNegativeKeywordSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse defines model for SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse.
type SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse struct {
	Error   *[]SponsoredProductsCampaignNegativeTargetingClauseFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsCampaignNegativeTargetingClauseSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkCampaignOperationResponse defines model for SponsoredProductsBulkCampaignOperationResponse.
type SponsoredProductsBulkCampaignOperationResponse struct {
	Error   *[]SponsoredProductsCampaignMutationFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsCampaignMutationSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkKeywordOperationResponse defines model for SponsoredProductsBulkKeywordOperationResponse.
type SponsoredProductsBulkKeywordOperationResponse struct {
	Error   *[]SponsoredProductsKeywordFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsKeywordSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkNegativeKeywordOperationResponse defines model for SponsoredProductsBulkNegativeKeywordOperationResponse.
type SponsoredProductsBulkNegativeKeywordOperationResponse struct {
	Error   *[]SponsoredProductsNegativeKeywordFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsNegativeKeywordSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkNegativeTargetingClauseOperationResponse defines model for SponsoredProductsBulkNegativeTargetingClauseOperationResponse.
type SponsoredProductsBulkNegativeTargetingClauseOperationResponse struct {
	Error   *[]SponsoredProductsNegativeTargetingClauseFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsNegativeTargetingClauseSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkProductAdOperationResponse defines model for SponsoredProductsBulkProductAdOperationResponse.
type SponsoredProductsBulkProductAdOperationResponse struct {
	Error   *[]SponsoredProductsProductAdFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsProductAdSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsBulkTargetingClauseOperationResponse defines model for SponsoredProductsBulkTargetingClauseOperationResponse.
type SponsoredProductsBulkTargetingClauseOperationResponse struct {
	Error   *[]SponsoredProductsTargetingClauseFailureResponseItem `json:"error,omitempty"`
	Success *[]SponsoredProductsTargetingClauseSuccessResponseItem `json:"success,omitempty"`
}

// SponsoredProductsCampaign defines model for SponsoredProductsCampaign.
type SponsoredProductsCampaign struct {
	Budget SponsoredProductsBudget `json:"budget"`

	// CampaignId The identifier of the campaign.
	CampaignId     string                           `json:"campaignId"`
	DynamicBidding *SponsoredProductsDynamicBidding `json:"dynamicBidding,omitempty"`

	// EndDate The format of the date is YYYY-MM-DD.
	EndDate      *openapi_types.Date                    `json:"endDate"`
	ExtendedData *SponsoredProductsCampaignExtendedData `json:"extendedData,omitempty"`

	// Name The name of the campaign.
	Name string `json:"name"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId,omitempty"`

	// StartDate The format of the date is YYYY-MM-DD.
	StartDate openapi_types.Date `json:"startDate"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags          *SponsoredProductsTags         `json:"tags,omitempty"`
	TargetingType SponsoredProductsTargetingType `json:"targetingType"`
}

// SponsoredProductsCampaignAccessError defines model for SponsoredProductsCampaignAccessError.
type SponsoredProductsCampaignAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                       `json:"errorType"`
	ErrorValue SponsoredProductsCampaignAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignAccessErrorSelector defines model for SponsoredProductsCampaignAccessErrorSelector.
type SponsoredProductsCampaignAccessErrorSelector struct {
	DateError           *SponsoredProductsDateError           `json:"dateError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsCampaignAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsCampaignAccessError   `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignExtendedData defines model for SponsoredProductsCampaignExtendedData.
type SponsoredProductsCampaignExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                              `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsCampaignServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Campaign
	ServingStatusDetails *[]SponsoredProductsCampaignServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsCampaignMutationError defines model for SponsoredProductsCampaignMutationError.
type SponsoredProductsCampaignMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                         `json:"errorType"`
	ErrorValue SponsoredProductsCampaignMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignMutationErrorSelector defines model for SponsoredProductsCampaignMutationErrorSelector.
type SponsoredProductsCampaignMutationErrorSelector struct {
	// BiddingError Errors related to bids
	BiddingError *SponsoredProductsBiddingError `json:"biddingError,omitempty"`

	// BillingError Errors related to bids
	BillingError *SponsoredProductsBillingError `json:"billingError,omitempty"`
	BudgetError  *SponsoredProductsBudgetError  `json:"budgetError,omitempty"`

	// CurrencyError Errors related to currency
	CurrencyError       *SponsoredProductsCurrencyError       `json:"currencyError,omitempty"`
	DateError           *SponsoredProductsDateError           `json:"dateError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsCampaignMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsCampaignMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignMutationFailureResponseItem defines model for SponsoredProductsCampaignMutationFailureResponseItem.
type SponsoredProductsCampaignMutationFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsCampaignMutationError `json:"errors,omitempty"`

	// Index the index of the campaign in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignMutationSuccessResponseItem defines model for SponsoredProductsCampaignMutationSuccessResponseItem.
type SponsoredProductsCampaignMutationSuccessResponseItem struct {
	Campaign *SponsoredProductsCampaign `json:"campaign,omitempty"`

	// CampaignId the campaign ID
	CampaignId *string `json:"campaignId,omitempty"`

	// Index the index of the campaign in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignNegativeKeyword defines model for SponsoredProductsCampaignNegativeKeyword.
type SponsoredProductsCampaignNegativeKeyword struct {
	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId   string                                                `json:"campaignId"`
	ExtendedData *SponsoredProductsCampaignNegativeKeywordExtendedData `json:"extendedData,omitempty"`

	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// KeywordText The keyword text.
	KeywordText string                             `json:"keywordText"`
	MatchType   SponsoredProductsNegativeMatchType `json:"matchType"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`
}

// SponsoredProductsCampaignNegativeKeywordAccessError defines model for SponsoredProductsCampaignNegativeKeywordAccessError.
type SponsoredProductsCampaignNegativeKeywordAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                                      `json:"errorType"`
	ErrorValue SponsoredProductsCampaignNegativeKeywordAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignNegativeKeywordAccessErrorSelector defines model for SponsoredProductsCampaignNegativeKeywordAccessErrorSelector.
type SponsoredProductsCampaignNegativeKeywordAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignNegativeKeywordAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsCampaignNegativeKeywordAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode              `json:"code"`
	Errors *[]SponsoredProductsCampaignNegativeKeywordAccessError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignNegativeKeywordExtendedData defines model for SponsoredProductsCampaignNegativeKeywordExtendedData.
type SponsoredProductsCampaignNegativeKeywordExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Keyword
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsCampaignNegativeKeywordFailureResponseItem defines model for SponsoredProductsCampaignNegativeKeywordFailureResponseItem.
type SponsoredProductsCampaignNegativeKeywordFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsCampaignNegativeKeywordMutationError `json:"errors,omitempty"`

	// Index the index of the campaign in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignNegativeKeywordMutationError defines model for SponsoredProductsCampaignNegativeKeywordMutationError.
type SponsoredProductsCampaignNegativeKeywordMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                                        `json:"errorType"`
	ErrorValue SponsoredProductsCampaignNegativeKeywordMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignNegativeKeywordMutationErrorSelector defines model for SponsoredProductsCampaignNegativeKeywordMutationErrorSelector.
type SponsoredProductsCampaignNegativeKeywordMutationErrorSelector struct {
	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode                `json:"code"`
	Errors *[]SponsoredProductsCampaignNegativeKeywordMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignNegativeKeywordSuccessResponseItem defines model for SponsoredProductsCampaignNegativeKeywordSuccessResponseItem.
type SponsoredProductsCampaignNegativeKeywordSuccessResponseItem struct {
	CampaignNegativeKeyword *SponsoredProductsCampaignNegativeKeyword `json:"campaignNegativeKeyword,omitempty"`

	// CampaignNegativeKeywordId the campaignNegativeKeyword ID
	CampaignNegativeKeywordId *string `json:"campaignNegativeKeywordId,omitempty"`

	// Index the index of the campaign in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignNegativeTargetingClause defines model for SponsoredProductsCampaignNegativeTargetingClause.
type SponsoredProductsCampaignNegativeTargetingClause struct {
	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The CampaignNegativeTargetingClause expression.
	Expression   []SponsoredProductsNegativeTargetingExpressionPredicate       `json:"expression"`
	ExtendedData *SponsoredProductsCampaignNegativeTargetingClauseExtendedData `json:"extendedData,omitempty"`

	// ResolvedExpression The resolved CampaignNegativeTargetingClause expression.
	ResolvedExpression []SponsoredProductsNegativeTargetingExpressionPredicate `json:"resolvedExpression"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsCampaignNegativeTargetingClauseExtendedData defines model for SponsoredProductsCampaignNegativeTargetingClauseExtendedData.
type SponsoredProductsCampaignNegativeTargetingClauseExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the CampaignNegativeTargetingClause
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsCampaignNegativeTargetingClauseFailureResponseItem defines model for SponsoredProductsCampaignNegativeTargetingClauseFailureResponseItem.
type SponsoredProductsCampaignNegativeTargetingClauseFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsCampaignNegativeTargetsMutationError `json:"errors,omitempty"`

	// Index the index of the CampaignNegativeTargets in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignNegativeTargetingClauseSuccessResponseItem defines model for SponsoredProductsCampaignNegativeTargetingClauseSuccessResponseItem.
type SponsoredProductsCampaignNegativeTargetingClauseSuccessResponseItem struct {
	// CampaignNegativeTargetingClauseId the CampaignNegativeTargets ID
	CampaignNegativeTargetingClauseId *string                                           `json:"campaignNegativeTargetingClauseId,omitempty"`
	CampaignNegativeTargetingClauses  *SponsoredProductsCampaignNegativeTargetingClause `json:"campaignNegativeTargetingClauses,omitempty"`

	// Index the index of the CampaignNegativeTargets in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsCampaignNegativeTargetsAccessError defines model for SponsoredProductsCampaignNegativeTargetsAccessError.
type SponsoredProductsCampaignNegativeTargetsAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                                      `json:"errorType"`
	ErrorValue SponsoredProductsCampaignNegativeTargetsAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignNegativeTargetsAccessErrorSelector defines model for SponsoredProductsCampaignNegativeTargetsAccessErrorSelector.
type SponsoredProductsCampaignNegativeTargetsAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignNegativeTargetsAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsCampaignNegativeTargetsAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode              `json:"code"`
	Errors *[]SponsoredProductsCampaignNegativeTargetsAccessError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignNegativeTargetsMutationError defines model for SponsoredProductsCampaignNegativeTargetsMutationError.
type SponsoredProductsCampaignNegativeTargetsMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                                        `json:"errorType"`
	ErrorValue SponsoredProductsCampaignNegativeTargetsMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsCampaignNegativeTargetsMutationErrorSelector defines model for SponsoredProductsCampaignNegativeTargetsMutationErrorSelector.
type SponsoredProductsCampaignNegativeTargetsMutationErrorSelector struct {
	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// TargetingClauseSetupError Errors related to targeting clause setup
	TargetingClauseSetupError *SponsoredProductsTargetingClauseSetupError `json:"targetingClauseSetupError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode                `json:"code"`
	Errors *[]SponsoredProductsCampaignNegativeTargetsMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsCampaignServingStatus defines model for SponsoredProductsCampaignServingStatus.
type SponsoredProductsCampaignServingStatus string

// SponsoredProductsCampaignServingStatusDetail defines model for SponsoredProductsCampaignServingStatusDetail.
type SponsoredProductsCampaignServingStatusDetail struct {
	// HelpUrl A URL with additional information about the status identifier.
	HelpUrl *string `json:"helpUrl,omitempty"`

	// Message A human-readable description of the status identifier specified in the name field.
	Message *string                                       `json:"message,omitempty"`
	Name    *SponsoredProductsCampaignServingStatusReason `json:"name,omitempty"`
}

// SponsoredProductsCampaignServingStatusReason defines model for SponsoredProductsCampaignServingStatusReason.
type SponsoredProductsCampaignServingStatusReason string

// SponsoredProductsCreateAdGroup defines model for SponsoredProductsCreateAdGroup.
type SponsoredProductsCreateAdGroup struct {
	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// DefaultBid A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	DefaultBid float64 `json:"defaultBid"`

	// Name The name of the ad group.
	Name string `json:"name"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateCampaign defines model for SponsoredProductsCreateCampaign.
type SponsoredProductsCreateCampaign struct {
	Budget SponsoredProductsCreateOrUpdateBudget `json:"budget"`

	// DynamicBidding Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
	// For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
	DynamicBidding *SponsoredProductsCreateOrUpdateDynamicBidding `json:"dynamicBidding,omitempty"`

	// EndDate The format of the date is YYYY-MM-DD.
	EndDate *openapi_types.Date `json:"endDate"`

	// Name The name of the campaign.
	Name string `json:"name"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId,omitempty"`

	// StartDate Default: today's date. The format of the date is YYYY-MM-DD.
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags          *SponsoredProductsTags         `json:"tags,omitempty"`
	TargetingType SponsoredProductsTargetingType `json:"targetingType"`
}

// SponsoredProductsCreateCampaignNegativeKeyword defines model for SponsoredProductsCreateCampaignNegativeKeyword.
type SponsoredProductsCreateCampaignNegativeKeyword struct {
	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// KeywordText The keyword text.
	KeywordText string                                           `json:"keywordText"`
	MatchType   SponsoredProductsCreateOrUpdateNegativeMatchType `json:"matchType"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateCampaignNegativeTargetingClause defines model for SponsoredProductsCreateCampaignNegativeTargetingClause.
type SponsoredProductsCreateCampaignNegativeTargetingClause struct {
	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The NegativeTargeting expression.
	Expression []SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate `json:"expression"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateExpressionType defines model for SponsoredProductsCreateExpressionType.
type SponsoredProductsCreateExpressionType string

// SponsoredProductsCreateKeyword defines model for SponsoredProductsCreateKeyword.
type SponsoredProductsCreateKeyword struct {
	// AdGroupId The identifier of the ad group to which this keyword is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid Bid associated with this keyword. Applicable to biddable match types only. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid"`

	// CampaignId The identifer of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// KeywordText The keyword text.
	KeywordText string                                   `json:"keywordText"`
	MatchType   SponsoredProductsCreateOrUpdateMatchType `json:"matchType"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to zh_CN. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
	NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateNegativeKeyword defines model for SponsoredProductsCreateNegativeKeyword.
type SponsoredProductsCreateNegativeKeyword struct {
	// AdGroupId The identifier of the ad group to which this keyword is associated.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifer of the campaign to which the keyword is associated.
	CampaignId string `json:"campaignId"`

	// KeywordText The keyword text.
	KeywordText string                                           `json:"keywordText"`
	MatchType   SponsoredProductsCreateOrUpdateNegativeMatchType `json:"matchType"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// NativeLanguageLocale The locale preference of the advertiser.
	NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateNegativeTargetingClause defines model for SponsoredProductsCreateNegativeTargetingClause.
type SponsoredProductsCreateNegativeTargetingClause struct {
	// AdGroupId The identifier of the ad group to which this target is associated.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The NegativeTargeting expression.
	Expression []SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate `json:"expression"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateOrUpdateBiddingStrategy The bidding strategy.
// `strategy` is required for create requests if dynamicBidding is provided, but is optional for update requests.
// | Value | Strategy name | Description |
// |----------------|---------------|-------------|
// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
// | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
type SponsoredProductsCreateOrUpdateBiddingStrategy string

// SponsoredProductsCreateOrUpdateBudget defines model for SponsoredProductsCreateOrUpdateBudget.
type SponsoredProductsCreateOrUpdateBudget struct {
	// Budget Monetary value
	Budget     float64                                   `json:"budget"`
	BudgetType SponsoredProductsCreateOrUpdateBudgetType `json:"budgetType"`
}

// SponsoredProductsCreateOrUpdateBudgetType defines model for SponsoredProductsCreateOrUpdateBudgetType.
type SponsoredProductsCreateOrUpdateBudgetType string

// SponsoredProductsCreateOrUpdateDynamicBidding Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
// For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
type SponsoredProductsCreateOrUpdateDynamicBidding struct {
	PlacementBidding *[]SponsoredProductsPlacementBidding `json:"placementBidding,omitempty"`

	// Strategy The bidding strategy.
	// `strategy` is required for create requests if dynamicBidding is provided, but is optional for update requests.
	// | Value | Strategy name | Description |
	// |----------------|---------------|-------------|
	// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
	// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
	// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
	// | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
	Strategy *SponsoredProductsCreateOrUpdateBiddingStrategy `json:"strategy,omitempty"`
}

// SponsoredProductsCreateOrUpdateEntityState Entity state for create or update operation
type SponsoredProductsCreateOrUpdateEntityState string

// SponsoredProductsCreateOrUpdateMatchType defines model for SponsoredProductsCreateOrUpdateMatchType.
type SponsoredProductsCreateOrUpdateMatchType string

// SponsoredProductsCreateOrUpdateNegativeMatchType defines model for SponsoredProductsCreateOrUpdateNegativeMatchType.
type SponsoredProductsCreateOrUpdateNegativeMatchType string

// SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate defines model for SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate.
type SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate struct {
	// Type The type of nagative targeting expression. You can only specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
	// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
	Type SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType `json:"type"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType The type of nagative targeting expression. You can only specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
type SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicateType string

// SponsoredProductsCreateProductAd defines model for SponsoredProductsCreateProductAd.
type SponsoredProductsCreateProductAd struct {
	// AdGroupId The ad group identifier.
	AdGroupId string `json:"adGroupId"`

	// Asin The ASIN associated with the product. Defined for vendors only.
	Asin *string `json:"asin,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// CustomText The custom text to use for creating a custom text ad for the associated ASIN. Defined only for KDP Authors and Book Vendors in US marketplace.
	CustomText *string `json:"customText,omitempty"`

	// Sku The SKU associated with the product. Defined for seller accounts only.
	Sku *string `json:"sku,omitempty"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateSponsoredProductsAdGroupsRequestContent defines model for SponsoredProductsCreateSponsoredProductsAdGroupsRequestContent.
type SponsoredProductsCreateSponsoredProductsAdGroupsRequestContent struct {
	// AdGroups An array of adGroups.
	AdGroups []SponsoredProductsCreateAdGroup `json:"adGroups"`
}

// SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent defines model for SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent.
type SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent struct {
	AdGroups SponsoredProductsBulkAdGroupOperationResponse `json:"adGroups"`
}

// SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsRequestContent defines model for SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsRequestContent.
type SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsRequestContent struct {
	// CampaignNegativeKeywords An array of campaignNegativeKeywords.
	CampaignNegativeKeywords []SponsoredProductsCreateCampaignNegativeKeyword `json:"campaignNegativeKeywords"`
}

// SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsResponseContent defines model for SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsResponseContent.
type SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsResponseContent struct {
	CampaignNegativeKeywords SponsoredProductsBulkCampaignNegativeKeywordOperationResponse `json:"campaignNegativeKeywords"`
}

// SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesRequestContent defines model for SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesRequestContent.
type SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesRequestContent struct {
	// CampaignNegativeTargetingClauses An array of Campaign Negative TargetingClauses.
	CampaignNegativeTargetingClauses []SponsoredProductsCreateCampaignNegativeTargetingClause `json:"campaignNegativeTargetingClauses"`
}

// SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesResponseContent defines model for SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesResponseContent.
type SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesResponseContent struct {
	CampaignNegativeTargetingClauses SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse `json:"campaignNegativeTargetingClauses"`
}

// SponsoredProductsCreateSponsoredProductsCampaignsRequestContent defines model for SponsoredProductsCreateSponsoredProductsCampaignsRequestContent.
type SponsoredProductsCreateSponsoredProductsCampaignsRequestContent struct {
	// Campaigns An array of campaigns.
	Campaigns []SponsoredProductsCreateCampaign `json:"campaigns"`
}

// SponsoredProductsCreateSponsoredProductsCampaignsResponseContent defines model for SponsoredProductsCreateSponsoredProductsCampaignsResponseContent.
type SponsoredProductsCreateSponsoredProductsCampaignsResponseContent struct {
	Campaigns SponsoredProductsBulkCampaignOperationResponse `json:"campaigns"`
}

// SponsoredProductsCreateSponsoredProductsKeywordsRequestContent defines model for SponsoredProductsCreateSponsoredProductsKeywordsRequestContent.
type SponsoredProductsCreateSponsoredProductsKeywordsRequestContent struct {
	// Keywords An array of keywords.
	Keywords []SponsoredProductsCreateKeyword `json:"keywords"`
}

// SponsoredProductsCreateSponsoredProductsKeywordsResponseContent defines model for SponsoredProductsCreateSponsoredProductsKeywordsResponseContent.
type SponsoredProductsCreateSponsoredProductsKeywordsResponseContent struct {
	Keywords SponsoredProductsBulkKeywordOperationResponse `json:"keywords"`
}

// SponsoredProductsCreateSponsoredProductsNegativeKeywordsRequestContent defines model for SponsoredProductsCreateSponsoredProductsNegativeKeywordsRequestContent.
type SponsoredProductsCreateSponsoredProductsNegativeKeywordsRequestContent struct {
	// NegativeKeywords An array of negativeKeywords.
	NegativeKeywords []SponsoredProductsCreateNegativeKeyword `json:"negativeKeywords"`
}

// SponsoredProductsCreateSponsoredProductsNegativeKeywordsResponseContent defines model for SponsoredProductsCreateSponsoredProductsNegativeKeywordsResponseContent.
type SponsoredProductsCreateSponsoredProductsNegativeKeywordsResponseContent struct {
	NegativeKeywords SponsoredProductsBulkNegativeKeywordOperationResponse `json:"negativeKeywords"`
}

// SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent defines model for SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent.
type SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent struct {
	// NegativeTargetingClauses An array of negativeTargeting.
	NegativeTargetingClauses []SponsoredProductsCreateNegativeTargetingClause `json:"negativeTargetingClauses"`
}

// SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent defines model for SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent.
type SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent struct {
	NegativeTargetingClauses SponsoredProductsBulkNegativeTargetingClauseOperationResponse `json:"negativeTargetingClauses"`
}

// SponsoredProductsCreateSponsoredProductsProductAdsRequestContent defines model for SponsoredProductsCreateSponsoredProductsProductAdsRequestContent.
type SponsoredProductsCreateSponsoredProductsProductAdsRequestContent struct {
	// ProductAds An array of ads.
	ProductAds []SponsoredProductsCreateProductAd `json:"productAds"`
}

// SponsoredProductsCreateSponsoredProductsProductAdsResponseContent defines model for SponsoredProductsCreateSponsoredProductsProductAdsResponseContent.
type SponsoredProductsCreateSponsoredProductsProductAdsResponseContent struct {
	ProductAds SponsoredProductsBulkProductAdOperationResponse `json:"productAds"`
}

// SponsoredProductsCreateSponsoredProductsTargetingClausesRequestContent defines model for SponsoredProductsCreateSponsoredProductsTargetingClausesRequestContent.
type SponsoredProductsCreateSponsoredProductsTargetingClausesRequestContent struct {
	// TargetingClauses An array of targetingClauses.
	TargetingClauses []SponsoredProductsCreateTargetingClause `json:"targetingClauses"`
}

// SponsoredProductsCreateSponsoredProductsTargetingClausesResponseContent defines model for SponsoredProductsCreateSponsoredProductsTargetingClausesResponseContent.
type SponsoredProductsCreateSponsoredProductsTargetingClausesResponseContent struct {
	TargetingClauses SponsoredProductsBulkTargetingClauseOperationResponse `json:"targetingClauses"`
}

// SponsoredProductsCreateTargetingClause defines model for SponsoredProductsCreateTargetingClause.
type SponsoredProductsCreateTargetingClause struct {
	// AdGroupId The identifier of the ad group to which this target is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid"`

	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The targeting expression.
	Expression     []SponsoredProductsCreateTargetingExpressionPredicate `json:"expression"`
	ExpressionType SponsoredProductsCreateExpressionType                 `json:"expressionType"`

	// State Entity state for create or update operation
	State SponsoredProductsCreateOrUpdateEntityState `json:"state"`
}

// SponsoredProductsCreateTargetingExpressionPredicate defines model for SponsoredProductsCreateTargetingExpressionPredicate.
type SponsoredProductsCreateTargetingExpressionPredicate struct {
	// Type The type of targeting expression. You can specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed. |
	// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
	// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
	// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
	// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
	// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
	// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
	// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
	// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
	// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
	// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
	// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
	// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
	Type SponsoredProductsCreateTargetingExpressionPredicateType `json:"type"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// SponsoredProductsCreateTargetingExpressionPredicateType The type of targeting expression. You can specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed. |
// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
type SponsoredProductsCreateTargetingExpressionPredicateType string

// SponsoredProductsCurrencyError Errors related to currency
type SponsoredProductsCurrencyError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                               `json:"message"`
	Reason  SponsoredProductsCurrencyErrorReason `json:"reason"`
}

// SponsoredProductsCurrencyErrorReason defines model for SponsoredProductsCurrencyErrorReason.
type SponsoredProductsCurrencyErrorReason string

// SponsoredProductsDateError defines model for SponsoredProductsDateError.
type SponsoredProductsDateError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                           `json:"message"`
	Reason  SponsoredProductsDateErrorReason `json:"reason"`
}

// SponsoredProductsDateErrorReason defines model for SponsoredProductsDateErrorReason.
type SponsoredProductsDateErrorReason string

// SponsoredProductsDeleteSponsoredProductsAdGroupsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsAdGroupsRequestContent.
type SponsoredProductsDeleteSponsoredProductsAdGroupsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter SponsoredProductsObjectIdFilter `json:"adGroupIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent.
type SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent struct {
	AdGroups SponsoredProductsBulkAdGroupOperationResponse `json:"adGroups"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsRequestContent.
type SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsRequestContent struct {
	// CampaignNegativeKeywordIdFilter Filter entities by the list of objectIds
	CampaignNegativeKeywordIdFilter SponsoredProductsObjectIdFilter `json:"campaignNegativeKeywordIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsResponseContent.
type SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsResponseContent struct {
	CampaignNegativeKeywords SponsoredProductsBulkCampaignNegativeKeywordOperationResponse `json:"campaignNegativeKeywords"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestContent.
type SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestContent struct {
	// CampaignNegativeTargetIdFilter Filter entities by the list of objectIds
	CampaignNegativeTargetIdFilter SponsoredProductsObjectIdFilter `json:"campaignNegativeTargetIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesResponseContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesResponseContent.
type SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesResponseContent struct {
	CampaignNegativeTargetingClauses SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse `json:"campaignNegativeTargetingClauses"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignsRequestContent.
type SponsoredProductsDeleteSponsoredProductsCampaignsRequestContent struct {
	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter SponsoredProductsObjectIdFilter `json:"campaignIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent.
type SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent struct {
	Campaigns SponsoredProductsBulkCampaignOperationResponse `json:"campaigns"`
}

// SponsoredProductsDeleteSponsoredProductsKeywordsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsKeywordsRequestContent.
type SponsoredProductsDeleteSponsoredProductsKeywordsRequestContent struct {
	// KeywordIdFilter Filter entities by the list of objectIds
	KeywordIdFilter SponsoredProductsObjectIdFilter `json:"keywordIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsKeywordsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsKeywordsResponseContent.
type SponsoredProductsDeleteSponsoredProductsKeywordsResponseContent struct {
	Keywords SponsoredProductsBulkKeywordOperationResponse `json:"keywords"`
}

// SponsoredProductsDeleteSponsoredProductsNegativeKeywordsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsNegativeKeywordsRequestContent.
type SponsoredProductsDeleteSponsoredProductsNegativeKeywordsRequestContent struct {
	// NegativeKeywordIdFilter Filter entities by the list of objectIds
	NegativeKeywordIdFilter SponsoredProductsObjectIdFilter `json:"negativeKeywordIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsNegativeKeywordsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsNegativeKeywordsResponseContent.
type SponsoredProductsDeleteSponsoredProductsNegativeKeywordsResponseContent struct {
	NegativeKeywords SponsoredProductsBulkNegativeKeywordOperationResponse `json:"negativeKeywords"`
}

// SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent defines model for SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent.
type SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent struct {
	// NegativeTargetIdFilter Filter entities by the list of objectIds
	NegativeTargetIdFilter SponsoredProductsObjectIdFilter `json:"negativeTargetIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent defines model for SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent.
type SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent struct {
	NegativeTargetingClauses SponsoredProductsBulkNegativeTargetingClauseOperationResponse `json:"negativeTargetingClauses"`
}

// SponsoredProductsDeleteSponsoredProductsProductAdsRequestContent defines model for SponsoredProductsDeleteSponsoredProductsProductAdsRequestContent.
type SponsoredProductsDeleteSponsoredProductsProductAdsRequestContent struct {
	// AdIdFilter Filter entities by the list of objectIds
	AdIdFilter SponsoredProductsObjectIdFilter `json:"adIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent defines model for SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent.
type SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent struct {
	ProductAds SponsoredProductsBulkProductAdOperationResponse `json:"productAds"`
}

// SponsoredProductsDeleteSponsoredProductsTargetingClausesRequestContent defines model for SponsoredProductsDeleteSponsoredProductsTargetingClausesRequestContent.
type SponsoredProductsDeleteSponsoredProductsTargetingClausesRequestContent struct {
	// TargetIdFilter Filter entities by the list of objectIds
	TargetIdFilter SponsoredProductsObjectIdFilter `json:"targetIdFilter"`
}

// SponsoredProductsDeleteSponsoredProductsTargetingClausesResponseContent defines model for SponsoredProductsDeleteSponsoredProductsTargetingClausesResponseContent.
type SponsoredProductsDeleteSponsoredProductsTargetingClausesResponseContent struct {
	TargetingClauses SponsoredProductsBulkTargetingClauseOperationResponse `json:"targetingClauses"`
}

// SponsoredProductsDuplicateValueError defines model for SponsoredProductsDuplicateValueError.
type SponsoredProductsDuplicateValueError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                     `json:"message"`
	Reason  SponsoredProductsDuplicateValueErrorReason `json:"reason"`
}

// SponsoredProductsDuplicateValueErrorReason defines model for SponsoredProductsDuplicateValueErrorReason.
type SponsoredProductsDuplicateValueErrorReason string

// SponsoredProductsDynamicBidding defines model for SponsoredProductsDynamicBidding.
type SponsoredProductsDynamicBidding struct {
	PlacementBidding *[]SponsoredProductsPlacementBidding `json:"placementBidding,omitempty"`

	// Strategy The bidding strategy.
	// | Value | Strategy name | Description |
	// |----------------|---------------|-------------|
	// | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
	// | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
	// | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
	// | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
	Strategy SponsoredProductsBiddingStrategy `json:"strategy"`
}

// SponsoredProductsEntityNotFoundError defines model for SponsoredProductsEntityNotFoundError.
type SponsoredProductsEntityNotFoundError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// EntityId The entity id in the request
	EntityId   string                      `json:"entityId"`
	EntityType SponsoredProductsEntityType `json:"entityType"`

	// Message Human readable error message
	Message string                                     `json:"message"`
	Reason  SponsoredProductsEntityNotFoundErrorReason `json:"reason"`
}

// SponsoredProductsEntityNotFoundErrorReason defines model for SponsoredProductsEntityNotFoundErrorReason.
type SponsoredProductsEntityNotFoundErrorReason string

// SponsoredProductsEntityQuotaError Errors related to exceeding quota in campaign management service
type SponsoredProductsEntityQuotaError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause      *SponsoredProductsErrorCause `json:"cause,omitempty"`
	EntityType SponsoredProductsEntityType  `json:"entityType"`

	// Message Human readable error message
	Message string `json:"message"`

	// Quota optional current quota
	Quota      *string                           `json:"quota,omitempty"`
	QuotaScope *SponsoredProductsQuotaScope      `json:"quotaScope,omitempty"`
	Reason     SponsoredProductsQuotaErrorReason `json:"reason"`
}

// SponsoredProductsEntityState The current resource state.
// | State | Description |
// | --- | --- |
// | `ENABLED` | Enabled State |
// | `PAUSED` | Paused State |
// | `ARCHIVED` | ARCHIVED State |
// | `ENABLING` | State for Draft Entity Only |
// | `USER_DELETED` | State for Draft Entity Only |
// | `OTHER` | Read Only |
type SponsoredProductsEntityState string

// SponsoredProductsEntityStateError entity state update errors
type SponsoredProductsEntityStateError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	EntityType  SponsoredProductsEntityType   `json:"entityType"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                  `json:"message"`
	Reason  SponsoredProductsEntityStateErrorReason `json:"reason"`
}

// SponsoredProductsEntityStateErrorReason defines model for SponsoredProductsEntityStateErrorReason.
type SponsoredProductsEntityStateErrorReason string

// SponsoredProductsEntityStateFilter Filter entities by state
type SponsoredProductsEntityStateFilter struct {
	Include []SponsoredProductsEntityState `json:"include"`
}

// SponsoredProductsEntityType defines model for SponsoredProductsEntityType.
type SponsoredProductsEntityType string

// SponsoredProductsErrorCause Structure describing error cause - location in the payload and data causing error
type SponsoredProductsErrorCause struct {
	// Location Error location, JSON Path expression specifying element of API payload causing error
	Location string `json:"location"`

	// Trigger optional value causing error
	Trigger *string `json:"trigger,omitempty"`
}

// SponsoredProductsExpressionType defines model for SponsoredProductsExpressionType.
type SponsoredProductsExpressionType string

// SponsoredProductsExpressionTypeError defines model for SponsoredProductsExpressionTypeError.
type SponsoredProductsExpressionTypeError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                     `json:"message"`
	Reason  SponsoredProductsExpressionTypeErrorReason `json:"reason"`
}

// SponsoredProductsExpressionTypeErrorReason defines model for SponsoredProductsExpressionTypeErrorReason.
type SponsoredProductsExpressionTypeErrorReason string

// SponsoredProductsExpressionTypeFilter Filter entities by ExpressionType
type SponsoredProductsExpressionTypeFilter struct {
	Include []SponsoredProductsExpressionType `json:"include"`
}

// SponsoredProductsExpressionTypeWithoutOther defines model for SponsoredProductsExpressionTypeWithoutOther.
type SponsoredProductsExpressionTypeWithoutOther string

// SponsoredProductsInternalErrorErrorCode defines model for SponsoredProductsInternalErrorErrorCode.
type SponsoredProductsInternalErrorErrorCode string

// SponsoredProductsInternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
type SponsoredProductsInternalServerError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                     `json:"message"`
	Reason  SponsoredProductsInternalServerErrorReason `json:"reason"`
}

// SponsoredProductsInternalServerErrorReason defines model for SponsoredProductsInternalServerErrorReason.
type SponsoredProductsInternalServerErrorReason string

// SponsoredProductsInternalServerExceptionResponseContent defines model for SponsoredProductsInternalServerExceptionResponseContent.
type SponsoredProductsInternalServerExceptionResponseContent struct {
	Code SponsoredProductsInternalErrorErrorCode `json:"code"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsInvalidArgumentErrorCode defines model for SponsoredProductsInvalidArgumentErrorCode.
type SponsoredProductsInvalidArgumentErrorCode string

// SponsoredProductsInvalidInputError Errors related to ad eligibility
type SponsoredProductsInvalidInputError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                   `json:"message"`
	Reason  SponsoredProductsInvalidInputErrorReason `json:"reason"`
}

// SponsoredProductsInvalidInputErrorReason defines model for SponsoredProductsInvalidInputErrorReason.
type SponsoredProductsInvalidInputErrorReason string

// SponsoredProductsKeyword defines model for SponsoredProductsKeyword.
type SponsoredProductsKeyword struct {
	// AdGroupId The identifier of the ad group to which this keyword is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid Bid associated with this keyword. Applicable to biddable match types only. Keywords that do not have bid values in listKeywords will inherit the defaultBid from the adGroup level. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId   string                                `json:"campaignId"`
	ExtendedData *SponsoredProductsKeywordExtendedData `json:"extendedData,omitempty"`

	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// KeywordText The keyword text.
	KeywordText string                     `json:"keywordText"`
	MatchType   SponsoredProductsMatchType `json:"matchType"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to zh_CN. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
	NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`
}

// SponsoredProductsKeywordAccessError defines model for SponsoredProductsKeywordAccessError.
type SponsoredProductsKeywordAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                      `json:"errorType"`
	ErrorValue SponsoredProductsKeywordAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsKeywordAccessErrorSelector defines model for SponsoredProductsKeywordAccessErrorSelector.
type SponsoredProductsKeywordAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`
	LocaleError       *SponsoredProductsLocaleError       `json:"localeError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsKeywordAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsKeywordAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsKeywordAccessError    `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsKeywordExtendedData defines model for SponsoredProductsKeywordExtendedData.
type SponsoredProductsKeywordExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Keyword
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsKeywordFailureResponseItem defines model for SponsoredProductsKeywordFailureResponseItem.
type SponsoredProductsKeywordFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsKeywordMutationError `json:"errors,omitempty"`

	// Index the index of the keyword in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsKeywordMutationError defines model for SponsoredProductsKeywordMutationError.
type SponsoredProductsKeywordMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                        `json:"errorType"`
	ErrorValue SponsoredProductsKeywordMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsKeywordMutationErrorSelector defines model for SponsoredProductsKeywordMutationErrorSelector.
type SponsoredProductsKeywordMutationErrorSelector struct {
	// BiddingError Errors related to bids
	BiddingError *SponsoredProductsBiddingError `json:"biddingError,omitempty"`

	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`
	LocaleError         *SponsoredProductsLocaleError         `json:"localeError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// TargetingClauseSetupError Errors related to targeting clause setup
	TargetingClauseSetupError *SponsoredProductsTargetingClauseSetupError `json:"targetingClauseSetupError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsKeywordMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsKeywordMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsKeywordMutationError  `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsKeywordServingStatus defines model for SponsoredProductsKeywordServingStatus.
type SponsoredProductsKeywordServingStatus string

// SponsoredProductsKeywordServingStatusDetail defines model for SponsoredProductsKeywordServingStatusDetail.
type SponsoredProductsKeywordServingStatusDetail struct {
	// HelpUrl A URL with additional information about the status identifier.
	HelpUrl *string `json:"helpUrl,omitempty"`

	// Message A human-readable description of the status identifier specified in the name field.
	Message *string                                      `json:"message,omitempty"`
	Name    *SponsoredProductsKeywordServingStatusReason `json:"name,omitempty"`
}

// SponsoredProductsKeywordServingStatusReason defines model for SponsoredProductsKeywordServingStatusReason.
type SponsoredProductsKeywordServingStatusReason string

// SponsoredProductsKeywordSuccessResponseItem defines model for SponsoredProductsKeywordSuccessResponseItem.
type SponsoredProductsKeywordSuccessResponseItem struct {
	// Index the index of the keyword in the array from the request body
	Index   int32                     `json:"index"`
	Keyword *SponsoredProductsKeyword `json:"keyword,omitempty"`

	// KeywordId the keyword ID
	KeywordId *string `json:"keywordId,omitempty"`
}

// SponsoredProductsKeywordTextFilter Filter by keywordText
type SponsoredProductsKeywordTextFilter struct {
	Include *[]string `json:"include,omitempty"`

	// QueryTermMatchType Match type for query filters.
	// | Value |  Description |
	// |-----------|------------|
	// | `BROAD_MATCH` | Match if the queried value contains the filter value. (substring matching) |
	// | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
	QueryTermMatchType *SponsoredProductsQueryTermMatchType `json:"queryTermMatchType,omitempty"`
}

// SponsoredProductsListSponsoredProductsAdGroupsRequestContent defines model for SponsoredProductsListSponsoredProductsAdGroupsRequestContent.
type SponsoredProductsListSponsoredProductsAdGroupsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter            *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`
	CampaignTargetingTypeFilter *SponsoredProductsTargetingType         `json:"campaignTargetingTypeFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NameFilter Filter entities by name
	NameFilter *SponsoredProductsNameFilter `json:"nameFilter,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsAdGroupsResponseContent defines model for SponsoredProductsListSponsoredProductsAdGroupsResponseContent.
type SponsoredProductsListSponsoredProductsAdGroupsResponseContent struct {
	AdGroups *[]SponsoredProductsAdGroup `json:"adGroups,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsRequestContent defines model for SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsRequestContent.
type SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsRequestContent struct {
	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// CampaignNegativeKeywordIdFilter Filter entities by the list of objectIds
	CampaignNegativeKeywordIdFilter *SponsoredProductsObjectIdFilter `json:"campaignNegativeKeywordIdFilter,omitempty"`

	// CampaignNegativeKeywordTextFilter Filter by keywordText
	CampaignNegativeKeywordTextFilter *SponsoredProductsKeywordTextFilter `json:"campaignNegativeKeywordTextFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MatchTypeFilter Restricts results to resources with the selected matchType
	MatchTypeFilter *[]SponsoredProductsNegativeMatchType `json:"matchTypeFilter,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsResponseContent defines model for SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsResponseContent.
type SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsResponseContent struct {
	CampaignNegativeKeywords *[]SponsoredProductsCampaignNegativeKeyword `json:"campaignNegativeKeywords,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesRequestContent defines model for SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesRequestContent.
type SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesRequestContent struct {
	AsinFilter *SponsoredProductsAsinFilter `json:"asinFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// CampaignNegativeTargetIdFilter Filter entities by the list of objectIds
	CampaignNegativeTargetIdFilter *SponsoredProductsObjectIdFilter `json:"campaignNegativeTargetIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesResponseContent defines model for SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesResponseContent.
type SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesResponseContent struct {
	CampaignNegativeTargetingClauses *[]SponsoredProductsCampaignNegativeTargetingClause `json:"campaignNegativeTargetingClauses,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignsRequestContent defines model for SponsoredProductsListSponsoredProductsCampaignsRequestContent.
type SponsoredProductsListSponsoredProductsCampaignsRequestContent struct {
	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NameFilter Filter entities by name
	NameFilter *SponsoredProductsNameFilter `json:"nameFilter,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// PortfolioIdFilter Filter entities by the list of objectIds
	PortfolioIdFilter *SponsoredProductsReducedObjectIdFilter `json:"portfolioIdFilter,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsCampaignsResponseContent defines model for SponsoredProductsListSponsoredProductsCampaignsResponseContent.
type SponsoredProductsListSponsoredProductsCampaignsResponseContent struct {
	Campaigns *[]SponsoredProductsCampaign `json:"campaigns,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsKeywordsRequestContent defines model for SponsoredProductsListSponsoredProductsKeywordsRequestContent.
type SponsoredProductsListSponsoredProductsKeywordsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsReducedObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// KeywordIdFilter Filter entities by the list of objectIds
	KeywordIdFilter *SponsoredProductsObjectIdFilter `json:"keywordIdFilter,omitempty"`

	// KeywordTextFilter Filter by keywordText
	KeywordTextFilter *SponsoredProductsKeywordTextFilter `json:"keywordTextFilter,omitempty"`

	// Locale Restricts results to keywords associated with locale
	Locale *string `json:"locale,omitempty"`

	// MatchTypeFilter Only the keyword with match type that is in this list will be listed
	MatchTypeFilter *[]SponsoredProductsMatchType `json:"matchTypeFilter,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsKeywordsResponseContent defines model for SponsoredProductsListSponsoredProductsKeywordsResponseContent.
type SponsoredProductsListSponsoredProductsKeywordsResponseContent struct {
	Keywords *[]SponsoredProductsKeyword `json:"keywords,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsNegativeKeywordsRequestContent defines model for SponsoredProductsListSponsoredProductsNegativeKeywordsRequestContent.
type SponsoredProductsListSponsoredProductsNegativeKeywordsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsReducedObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// Locale Restricts results to negativeKeywords that match the specified locale.
	Locale *string `json:"locale,omitempty"`

	// MatchTypeFilter Only the negativeKeyword with the match type that is in this list will be listed
	MatchTypeFilter *[]SponsoredProductsNegativeMatchType `json:"matchTypeFilter,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NegativeKeywordIdFilter Filter entities by the list of objectIds
	NegativeKeywordIdFilter *SponsoredProductsObjectIdFilter `json:"negativeKeywordIdFilter,omitempty"`

	// NegativeKeywordTextFilter Filter by keywordText
	NegativeKeywordTextFilter *SponsoredProductsKeywordTextFilter `json:"negativeKeywordTextFilter,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsNegativeKeywordsResponseContent defines model for SponsoredProductsListSponsoredProductsNegativeKeywordsResponseContent.
type SponsoredProductsListSponsoredProductsNegativeKeywordsResponseContent struct {
	NegativeKeywords *[]SponsoredProductsNegativeKeyword `json:"negativeKeywords,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent defines model for SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent.
type SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsReducedObjectIdFilter `json:"adGroupIdFilter,omitempty"`
	AsinFilter      *SponsoredProductsAsinFilter            `json:"asinFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NegativeTargetIdFilter Filter entities by the list of objectIds
	NegativeTargetIdFilter *SponsoredProductsObjectIdFilter `json:"negativeTargetIdFilter,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent defines model for SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent.
type SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent struct {
	NegativeTargetingClauses *[]SponsoredProductsNegativeTargetingClause `json:"negativeTargetingClauses,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsProductAdsRequestContent defines model for SponsoredProductsListSponsoredProductsProductAdsRequestContent.
type SponsoredProductsListSponsoredProductsProductAdsRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsReducedObjectIdFilter `json:"adGroupIdFilter,omitempty"`

	// AdIdFilter Filter entities by the list of objectIds
	AdIdFilter *SponsoredProductsObjectIdFilter `json:"adIdFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsProductAdsResponseContent defines model for SponsoredProductsListSponsoredProductsProductAdsResponseContent.
type SponsoredProductsListSponsoredProductsProductAdsResponseContent struct {
	// NextToken token value allowing to navigate to the next response page
	NextToken  *string                       `json:"nextToken,omitempty"`
	ProductAds *[]SponsoredProductsProductAd `json:"productAds,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsListSponsoredProductsTargetingClausesRequestContent defines model for SponsoredProductsListSponsoredProductsTargetingClausesRequestContent.
type SponsoredProductsListSponsoredProductsTargetingClausesRequestContent struct {
	// AdGroupIdFilter Filter entities by the list of objectIds
	AdGroupIdFilter *SponsoredProductsReducedObjectIdFilter `json:"adGroupIdFilter,omitempty"`
	AsinFilter      *SponsoredProductsAsinFilter            `json:"asinFilter,omitempty"`

	// CampaignIdFilter Filter entities by the list of objectIds
	CampaignIdFilter *SponsoredProductsReducedObjectIdFilter `json:"campaignIdFilter,omitempty"`

	// ExpressionTypeFilter Filter entities by ExpressionType
	ExpressionTypeFilter *SponsoredProductsExpressionTypeFilter `json:"expressionTypeFilter,omitempty"`

	// IncludeExtendedDataFields Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus
	IncludeExtendedDataFields *bool `json:"includeExtendedDataFields,omitempty"`

	// MaxResults Number of records to include in the paginated response. Defaults to max page size for given API
	MaxResults *int32 `json:"maxResults,omitempty"`

	// NextToken token value allowing to navigate to the next response page
	NextToken *string `json:"nextToken,omitempty"`

	// StateFilter Filter entities by state
	StateFilter *SponsoredProductsEntityStateFilter `json:"stateFilter,omitempty"`

	// TargetIdFilter Filter entities by the list of objectIds
	TargetIdFilter *SponsoredProductsObjectIdFilter `json:"targetIdFilter,omitempty"`
}

// SponsoredProductsListSponsoredProductsTargetingClausesResponseContent defines model for SponsoredProductsListSponsoredProductsTargetingClausesResponseContent.
type SponsoredProductsListSponsoredProductsTargetingClausesResponseContent struct {
	// NextToken token value allowing to navigate to the next response page
	NextToken        *string                             `json:"nextToken,omitempty"`
	TargetingClauses *[]SponsoredProductsTargetingClause `json:"targetingClauses,omitempty"`

	// TotalResults The total number of entities
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// SponsoredProductsLocaleError defines model for SponsoredProductsLocaleError.
type SponsoredProductsLocaleError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                             `json:"message"`
	Reason  SponsoredProductsLocaleErrorReason `json:"reason"`
}

// SponsoredProductsLocaleErrorReason defines model for SponsoredProductsLocaleErrorReason.
type SponsoredProductsLocaleErrorReason string

// SponsoredProductsMalformedValueError Errors being used to represent malformed values
// e.g. containing not allowed characters, not following patters etc
type SponsoredProductsMalformedValueError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Fragment fragment of the value which is wrong
	Fragment    *string                       `json:"fragment,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                     `json:"message"`
	Reason  SponsoredProductsMalformedValueErrorReason `json:"reason"`
}

// SponsoredProductsMalformedValueErrorReason defines model for SponsoredProductsMalformedValueErrorReason.
type SponsoredProductsMalformedValueErrorReason string

// SponsoredProductsMarketplace defines model for SponsoredProductsMarketplace.
type SponsoredProductsMarketplace string

// SponsoredProductsMatchType defines model for SponsoredProductsMatchType.
type SponsoredProductsMatchType string

// SponsoredProductsMissingValueError Error describing missing values in API payloads
type SponsoredProductsMissingValueError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                   `json:"message"`
	Reason  SponsoredProductsMissingValueErrorReason `json:"reason"`
}

// SponsoredProductsMissingValueErrorReason defines model for SponsoredProductsMissingValueErrorReason.
type SponsoredProductsMissingValueErrorReason string

// SponsoredProductsNameFilter Filter entities by name
type SponsoredProductsNameFilter struct {
	Include *[]string `json:"include,omitempty"`

	// QueryTermMatchType Match type for query filters.
	// | Value |  Description |
	// |-----------|------------|
	// | `BROAD_MATCH` | Match if the queried value contains the filter value. (substring matching) |
	// | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
	QueryTermMatchType *SponsoredProductsQueryTermMatchType `json:"queryTermMatchType,omitempty"`
}

// SponsoredProductsNegativeKeyword defines model for SponsoredProductsNegativeKeyword.
type SponsoredProductsNegativeKeyword struct {
	// AdGroupId The identifier of the ad group to which this keyword is associated.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifier of the campaign to which the keyword is associated.
	CampaignId   string                                        `json:"campaignId"`
	ExtendedData *SponsoredProductsNegativeKeywordExtendedData `json:"extendedData,omitempty"`

	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// KeywordText The keyword text.
	KeywordText string                             `json:"keywordText"`
	MatchType   SponsoredProductsNegativeMatchType `json:"matchType"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// NativeLanguageLocale The locale preference of the advertiser.
	NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`
}

// SponsoredProductsNegativeKeywordAccessError defines model for SponsoredProductsNegativeKeywordAccessError.
type SponsoredProductsNegativeKeywordAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                              `json:"errorType"`
	ErrorValue SponsoredProductsNegativeKeywordAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsNegativeKeywordAccessErrorSelector defines model for SponsoredProductsNegativeKeywordAccessErrorSelector.
type SponsoredProductsNegativeKeywordAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsNegativeKeywordAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsNegativeKeywordAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode      `json:"code"`
	Errors *[]SponsoredProductsNegativeKeywordAccessError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsNegativeKeywordExtendedData defines model for SponsoredProductsNegativeKeywordExtendedData.
type SponsoredProductsNegativeKeywordExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Keyword
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsNegativeKeywordFailureResponseItem defines model for SponsoredProductsNegativeKeywordFailureResponseItem.
type SponsoredProductsNegativeKeywordFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsNegativeKeywordMutationError `json:"errors,omitempty"`

	// Index the index of the negativeKeyword in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsNegativeKeywordMutationError defines model for SponsoredProductsNegativeKeywordMutationError.
type SponsoredProductsNegativeKeywordMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                                `json:"errorType"`
	ErrorValue SponsoredProductsNegativeKeywordMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsNegativeKeywordMutationErrorSelector defines model for SponsoredProductsNegativeKeywordMutationErrorSelector.
type SponsoredProductsNegativeKeywordMutationErrorSelector struct {
	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// TargetingClauseSetupError Errors related to targeting clause setup
	TargetingClauseSetupError *SponsoredProductsTargetingClauseSetupError `json:"targetingClauseSetupError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsNegativeKeywordMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsNegativeKeywordMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode        `json:"code"`
	Errors *[]SponsoredProductsNegativeKeywordMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsNegativeKeywordSuccessResponseItem defines model for SponsoredProductsNegativeKeywordSuccessResponseItem.
type SponsoredProductsNegativeKeywordSuccessResponseItem struct {
	// Index the index of the negativeKeyword in the array from the request body
	Index           int32                             `json:"index"`
	NegativeKeyword *SponsoredProductsNegativeKeyword `json:"negativeKeyword,omitempty"`

	// NegativeKeywordId the negativeKeyword ID
	NegativeKeywordId *string `json:"negativeKeywordId,omitempty"`
}

// SponsoredProductsNegativeMatchType defines model for SponsoredProductsNegativeMatchType.
type SponsoredProductsNegativeMatchType string

// SponsoredProductsNegativeTargetAccessError defines model for SponsoredProductsNegativeTargetAccessError.
type SponsoredProductsNegativeTargetAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                             `json:"errorType"`
	ErrorValue SponsoredProductsNegativeTargetAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsNegativeTargetAccessErrorSelector defines model for SponsoredProductsNegativeTargetAccessErrorSelector.
type SponsoredProductsNegativeTargetAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsNegativeTargetAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsNegativeTargetAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode     `json:"code"`
	Errors *[]SponsoredProductsNegativeTargetAccessError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsNegativeTargetMutationError defines model for SponsoredProductsNegativeTargetMutationError.
type SponsoredProductsNegativeTargetMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                               `json:"errorType"`
	ErrorValue SponsoredProductsNegativeTargetMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsNegativeTargetMutationErrorSelector defines model for SponsoredProductsNegativeTargetMutationErrorSelector.
type SponsoredProductsNegativeTargetMutationErrorSelector struct {
	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// TargetingClauseSetupError Errors related to targeting clause setup
	TargetingClauseSetupError *SponsoredProductsTargetingClauseSetupError `json:"targetingClauseSetupError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsNegativeTargetMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsNegativeTargetMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode       `json:"code"`
	Errors *[]SponsoredProductsNegativeTargetMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsNegativeTargetingClause defines model for SponsoredProductsNegativeTargetingClause.
type SponsoredProductsNegativeTargetingClause struct {
	// AdGroupId The identifier of the ad group to which this target is associated.
	AdGroupId string `json:"adGroupId"`

	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The NegativeTargeting expression.
	Expression   []SponsoredProductsNegativeTargetingExpressionPredicate `json:"expression"`
	ExtendedData *SponsoredProductsNegativeTargetingClauseExtendedData   `json:"extendedData,omitempty"`

	// ResolvedExpression The resolved NegativeTargeting expression.
	ResolvedExpression []SponsoredProductsNegativeTargetingExpressionPredicate `json:"resolvedExpression"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsNegativeTargetingClauseExtendedData defines model for SponsoredProductsNegativeTargetingClauseExtendedData.
type SponsoredProductsNegativeTargetingClauseExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the NegativeTargetingClause
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsNegativeTargetingClauseFailureResponseItem defines model for SponsoredProductsNegativeTargetingClauseFailureResponseItem.
type SponsoredProductsNegativeTargetingClauseFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsNegativeTargetMutationError `json:"errors,omitempty"`

	// Index the index of the NegativeTargetingClause in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsNegativeTargetingClauseSuccessResponseItem defines model for SponsoredProductsNegativeTargetingClauseSuccessResponseItem.
type SponsoredProductsNegativeTargetingClauseSuccessResponseItem struct {
	// Index the index of the NegativeTargetingClause in the array from the request body
	Index                   int32                                     `json:"index"`
	NegativeTargetingClause *SponsoredProductsNegativeTargetingClause `json:"negativeTargetingClause,omitempty"`

	// TargetId the NegativeTargetingClause ID
	TargetId *string `json:"targetId,omitempty"`
}

// SponsoredProductsNegativeTargetingExpressionPredicate defines model for SponsoredProductsNegativeTargetingExpressionPredicate.
type SponsoredProductsNegativeTargetingExpressionPredicate struct {
	// Type The type of nagative targeting expression. You can only specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
	// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
	// | `OTHER` | Other Type.   |
	Type *SponsoredProductsNegativeTargetingExpressionPredicateType `json:"type,omitempty"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// SponsoredProductsNegativeTargetingExpressionPredicateType The type of nagative targeting expression. You can only specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
// | `OTHER` | Other Type.   |
type SponsoredProductsNegativeTargetingExpressionPredicateType string

// SponsoredProductsObjectIdFilter Filter entities by the list of objectIds
type SponsoredProductsObjectIdFilter struct {
	Include []string `json:"include"`
}

// SponsoredProductsOtherError Errors not related to any of the other error types
type SponsoredProductsOtherError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                            `json:"message"`
	Reason  SponsoredProductsOtherErrorReason `json:"reason"`
}

// SponsoredProductsOtherErrorReason defines model for SponsoredProductsOtherErrorReason.
type SponsoredProductsOtherErrorReason string

// SponsoredProductsParentEntityError Errors related to parent entity
type SponsoredProductsParentEntityError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                   `json:"message"`
	Reason  SponsoredProductsParentEntityErrorReason `json:"reason"`
}

// SponsoredProductsParentEntityErrorReason defines model for SponsoredProductsParentEntityErrorReason.
type SponsoredProductsParentEntityErrorReason string

// SponsoredProductsPlacement You can enable controls to adjust your bid based on the placement location. Specify a location where you want to use bid controls. The percentage value set is the percentage of the original bid for which you want to have your bid adjustment increased. For example, a 50% adjustment on a $1.00 bid would increase the bid to $1.50 for the opportunity to win a specified placement.
// | Predicate |  Placement |
// |-----------|------------|
// | `PLACEMENT_TOP` | Top of search (first page) |
// | `PLACEMENT_PRODUCT_PAGE` | Product pages |
// | `PLACEMENT_REST_OF_SEARCH` | Rest of the search (read only) |
type SponsoredProductsPlacement string

// SponsoredProductsPlacementBidding defines model for SponsoredProductsPlacementBidding.
type SponsoredProductsPlacementBidding struct {
	Percentage *int32 `json:"percentage,omitempty"`

	// Placement You can enable controls to adjust your bid based on the placement location. Specify a location where you want to use bid controls. The percentage value set is the percentage of the original bid for which you want to have your bid adjustment increased. For example, a 50% adjustment on a $1.00 bid would increase the bid to $1.50 for the opportunity to win a specified placement.
	// | Predicate |  Placement |
	// |-----------|------------|
	// | `PLACEMENT_TOP` | Top of search (first page) |
	// | `PLACEMENT_PRODUCT_PAGE` | Product pages |
	// | `PLACEMENT_REST_OF_SEARCH` | Rest of the search (read only) |
	Placement *SponsoredProductsPlacement `json:"placement,omitempty"`
}

// SponsoredProductsProductAd defines model for SponsoredProductsProductAd.
type SponsoredProductsProductAd struct {
	// AdGroupId The ad group identifier.
	AdGroupId string `json:"adGroupId"`

	// AdId The product ad identifier.
	AdId string `json:"adId"`

	// Asin The ASIN associated with the product. Defined for vendors only.
	Asin *string `json:"asin,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId string `json:"campaignId"`

	// CustomText The custom text that is associated with this ad. Defined for custom text ads only.
	CustomText   *string                                 `json:"customText,omitempty"`
	ExtendedData *SponsoredProductsProductAdExtendedData `json:"extendedData,omitempty"`

	// Sku The SKU associated with the product. Defined for seller accounts only.
	Sku *string `json:"sku,omitempty"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`
}

// SponsoredProductsProductAdAccessError defines model for SponsoredProductsProductAdAccessError.
type SponsoredProductsProductAdAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                        `json:"errorType"`
	ErrorValue SponsoredProductsProductAdAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsProductAdAccessErrorSelector defines model for SponsoredProductsProductAdAccessErrorSelector.
type SponsoredProductsProductAdAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsProductAdAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsProductAdAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsProductAdAccessError  `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsProductAdExtendedData defines model for SponsoredProductsProductAdExtendedData.
type SponsoredProductsProductAdExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                        `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsAdServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the Ad
	ServingStatusDetails *[]SponsoredProductsAdServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsProductAdFailureResponseItem defines model for SponsoredProductsProductAdFailureResponseItem.
type SponsoredProductsProductAdFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsProductAdMutationError `json:"errors,omitempty"`

	// Index the index of the product ad in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsProductAdMutationError defines model for SponsoredProductsProductAdMutationError.
type SponsoredProductsProductAdMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                          `json:"errorType"`
	ErrorValue SponsoredProductsProductAdMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsProductAdMutationErrorSelector defines model for SponsoredProductsProductAdMutationErrorSelector.
type SponsoredProductsProductAdMutationErrorSelector struct {
	// AdEligibilityError Errors related to ad eligibility
	AdEligibilityError *SponsoredProductsAdEligibilityError `json:"adEligibilityError,omitempty"`

	// AsinOwnershipError Errors related to author asin ownership
	AsinOwnershipError *SponsoredProductsAsinOwnershipError `json:"asinOwnershipError,omitempty"`

	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError *SponsoredProductsEntityStateError `json:"entityStateError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// ProductIdentifierError Errors related to product identifiers
	ProductIdentifierError *SponsoredProductsProductIdentifierError `json:"productIdentifierError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`

	// UnsupportedOperationError Errors being used to represent an unsupported operation
	// e.g. Seller are not supported to create custom text product ads.
	UnsupportedOperationError *SponsoredProductsUnsupportedOperationError `json:"unsupportedOperationError,omitempty"`
}

// SponsoredProductsProductAdMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsProductAdMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode  `json:"code"`
	Errors *[]SponsoredProductsProductAdMutationError `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsProductAdSuccessResponseItem defines model for SponsoredProductsProductAdSuccessResponseItem.
type SponsoredProductsProductAdSuccessResponseItem struct {
	// AdId the ProductAd ID
	AdId *string `json:"adId,omitempty"`

	// Index The index in the original list from the request.
	Index     int32                       `json:"index"`
	ProductAd *SponsoredProductsProductAd `json:"productAd,omitempty"`
}

// SponsoredProductsProductIdentifierError Errors related to product identifiers
type SponsoredProductsProductIdentifierError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                        `json:"message"`
	Reason  SponsoredProductsProductIdentifierErrorReason `json:"reason"`
}

// SponsoredProductsProductIdentifierErrorReason defines model for SponsoredProductsProductIdentifierErrorReason.
type SponsoredProductsProductIdentifierErrorReason string

// SponsoredProductsQueryTermMatchType Match type for query filters.
// | Value |  Description |
// |-----------|------------|
// | `BROAD_MATCH` | Match if the queried value contains the filter value. (substring matching) |
// | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
type SponsoredProductsQueryTermMatchType string

// SponsoredProductsQuotaErrorReason defines model for SponsoredProductsQuotaErrorReason.
type SponsoredProductsQuotaErrorReason string

// SponsoredProductsQuotaScope defines model for SponsoredProductsQuotaScope.
type SponsoredProductsQuotaScope string

// SponsoredProductsRangeError Errors related to range constraints violations
type SponsoredProductsRangeError struct {
	// Allowed allowed values
	Allowed *[]string `json:"allowed,omitempty"`

	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// LowerLimit optional lower limit
	LowerLimit  *string                       `json:"lowerLimit,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                 `json:"message"`
	Reason  SponsoredProductsValueLimitErrorReason `json:"reason"`

	// UpperLimit optional upper limit
	UpperLimit *string `json:"upperLimit,omitempty"`
}

// SponsoredProductsReducedObjectIdFilter Filter entities by the list of objectIds
type SponsoredProductsReducedObjectIdFilter struct {
	Include []string `json:"include"`
}

// SponsoredProductsTags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
type SponsoredProductsTags map[string]string

// SponsoredProductsTargetAccessError defines model for SponsoredProductsTargetAccessError.
type SponsoredProductsTargetAccessError struct {
	// ErrorType The type of the error
	ErrorType  string                                     `json:"errorType"`
	ErrorValue SponsoredProductsTargetAccessErrorSelector `json:"errorValue"`
}

// SponsoredProductsTargetAccessErrorSelector defines model for SponsoredProductsTargetAccessErrorSelector.
type SponsoredProductsTargetAccessErrorSelector struct {
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// InvalidInputError Errors related to ad eligibility
	InvalidInputError *SponsoredProductsInvalidInputError `json:"invalidInputError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsTargetAccessExceptionResponseContent Exception resulting in accessing campaign management entities
type SponsoredProductsTargetAccessExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsTargetAccessError     `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsTargetMutationError defines model for SponsoredProductsTargetMutationError.
type SponsoredProductsTargetMutationError struct {
	// ErrorType The type of the error
	ErrorType  string                                       `json:"errorType"`
	ErrorValue SponsoredProductsTargetMutationErrorSelector `json:"errorValue"`
}

// SponsoredProductsTargetMutationErrorSelector defines model for SponsoredProductsTargetMutationErrorSelector.
type SponsoredProductsTargetMutationErrorSelector struct {
	// BiddingError Errors related to bids
	BiddingError *SponsoredProductsBiddingError `json:"biddingError,omitempty"`

	// BillingError Errors related to bids
	BillingError        *SponsoredProductsBillingError        `json:"billingError,omitempty"`
	DuplicateValueError *SponsoredProductsDuplicateValueError `json:"duplicateValueError,omitempty"`
	EntityNotFoundError *SponsoredProductsEntityNotFoundError `json:"entityNotFoundError,omitempty"`

	// EntityQuotaError Errors related to exceeding quota in campaign management service
	EntityQuotaError *SponsoredProductsEntityQuotaError `json:"entityQuotaError,omitempty"`

	// EntityStateError entity state update errors
	EntityStateError    *SponsoredProductsEntityStateError    `json:"entityStateError,omitempty"`
	ExpressionTypeError *SponsoredProductsExpressionTypeError `json:"expressionTypeError,omitempty"`

	// InternalServerError Error that represents non-retryable API service error. Sending the same request will result in another error.
	InternalServerError *SponsoredProductsInternalServerError `json:"internalServerError,omitempty"`

	// MalformedValueError Errors being used to represent malformed values
	// e.g. containing not allowed characters, not following patters etc
	MalformedValueError *SponsoredProductsMalformedValueError `json:"malformedValueError,omitempty"`

	// MissingValueError Error describing missing values in API payloads
	MissingValueError *SponsoredProductsMissingValueError `json:"missingValueError,omitempty"`

	// OtherError Errors not related to any of the other error types
	OtherError *SponsoredProductsOtherError `json:"otherError,omitempty"`

	// ParentEntityError Errors related to parent entity
	ParentEntityError *SponsoredProductsParentEntityError `json:"parentEntityError,omitempty"`

	// RangeError Errors related to range constraints violations
	RangeError *SponsoredProductsRangeError `json:"rangeError,omitempty"`

	// TargetingClauseSetupError Errors related to targeting clause setup
	TargetingClauseSetupError *SponsoredProductsTargetingClauseSetupError `json:"targetingClauseSetupError,omitempty"`

	// ThrottledError Error that represents failure due to API caller exceeding allowed service limits.
	ThrottledError *SponsoredProductsThrottledError `json:"throttledError,omitempty"`
}

// SponsoredProductsTargetMutationExceptionResponseContent Exception resulting in mutating campaign management entities
type SponsoredProductsTargetMutationExceptionResponseContent struct {
	Code   SponsoredProductsInvalidArgumentErrorCode `json:"code"`
	Errors *[]SponsoredProductsTargetMutationError   `json:"errors,omitempty"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsTargetingClause defines model for SponsoredProductsTargetingClause.
type SponsoredProductsTargetingClause struct {
	// AdGroupId The identifier of the ad group to which this target is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which this target is associated.
	CampaignId string `json:"campaignId"`

	// Expression The targeting expression.
	Expression     []SponsoredProductsTargetingExpressionPredicate `json:"expression"`
	ExpressionType SponsoredProductsExpressionType                 `json:"expressionType"`
	ExtendedData   *SponsoredProductsTargetingClauseExtendedData   `json:"extendedData,omitempty"`

	// ResolvedExpression The resolved targeting expression.
	ResolvedExpression []SponsoredProductsTargetingExpressionPredicate `json:"resolvedExpression"`

	// State The current resource state.
	// | State | Description |
	// | --- | --- |
	// | `ENABLED` | Enabled State |
	// | `PAUSED` | Paused State |
	// | `ARCHIVED` | ARCHIVED State |
	// | `ENABLING` | State for Draft Entity Only |
	// | `USER_DELETED` | State for Draft Entity Only |
	// | `OTHER` | Read Only |
	State SponsoredProductsEntityState `json:"state"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsTargetingClauseExtendedData defines model for SponsoredProductsTargetingClauseExtendedData.
type SponsoredProductsTargetingClauseExtendedData struct {
	// CreationDateTime Creation date in ISO 8601.
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`

	// LastUpdateDateTime Last updated date in ISO 8601.
	LastUpdateDateTime *time.Time                             `json:"lastUpdateDateTime,omitempty"`
	ServingStatus      *SponsoredProductsKeywordServingStatus `json:"servingStatus,omitempty"`

	// ServingStatusDetails The serving status reasons of the TargetingClause
	ServingStatusDetails *[]SponsoredProductsKeywordServingStatusDetail `json:"servingStatusDetails,omitempty"`
}

// SponsoredProductsTargetingClauseFailureResponseItem defines model for SponsoredProductsTargetingClauseFailureResponseItem.
type SponsoredProductsTargetingClauseFailureResponseItem struct {
	// Errors A list of validation errors
	Errors *[]SponsoredProductsTargetMutationError `json:"errors,omitempty"`

	// Index the index of the targetingClause in the array from the request body
	Index int32 `json:"index"`
}

// SponsoredProductsTargetingClauseSetupError Errors related to targeting clause setup
type SponsoredProductsTargetingClauseSetupError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause       *SponsoredProductsErrorCause  `json:"cause,omitempty"`
	Marketplace *SponsoredProductsMarketplace `json:"marketplace,omitempty"`

	// Message Human readable error message
	Message string                                           `json:"message"`
	Reason  SponsoredProductsTargetingClauseSetupErrorReason `json:"reason"`
}

// SponsoredProductsTargetingClauseSetupErrorReason defines model for SponsoredProductsTargetingClauseSetupErrorReason.
type SponsoredProductsTargetingClauseSetupErrorReason string

// SponsoredProductsTargetingClauseSuccessResponseItem defines model for SponsoredProductsTargetingClauseSuccessResponseItem.
type SponsoredProductsTargetingClauseSuccessResponseItem struct {
	// Index the index of the targetingClause in the array from the request body
	Index int32 `json:"index"`

	// TargetId the targetingClause ID
	TargetId        *string                           `json:"targetId,omitempty"`
	TargetingClause *SponsoredProductsTargetingClause `json:"targetingClause,omitempty"`
}

// SponsoredProductsTargetingExpressionPredicate defines model for SponsoredProductsTargetingExpressionPredicate.
type SponsoredProductsTargetingExpressionPredicate struct {
	// Type The type of targeting expression. You can specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `QUERY_BROAD_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Loose match` target type in the UI, this will show your ad to shoppers who use search terms loosely related to your products.|
	// | `QUERY_HIGH_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Close match` target type in the UI, this will show your ad to shoppers who use search terms closely related to your products.|
	// | `ASIN_ACCESSORY_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Complements` target type in the UI, this will show your ad to shoppers who view the detail pages of products that complement your product.|
	// | `ASIN_SUBSTITUTE_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Substitutes` target type in the UI, this will show your ad to shoppers who use detail pages of products similar to yours.|
	// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed |
	// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
	// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
	// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
	// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
	// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
	// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
	// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
	// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
	// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
	// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
	// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
	// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
	// | `OTHER` | Other Type.   |
	Type *SponsoredProductsTargetingExpressionPredicateType `json:"type,omitempty"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// SponsoredProductsTargetingExpressionPredicateType The type of targeting expression. You can specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `QUERY_BROAD_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Loose match` target type in the UI, this will show your ad to shoppers who use search terms loosely related to your products.|
// | `QUERY_HIGH_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Close match` target type in the UI, this will show your ad to shoppers who use search terms closely related to your products.|
// | `ASIN_ACCESSORY_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Complements` target type in the UI, this will show your ad to shoppers who view the detail pages of products that complement your product.|
// | `ASIN_SUBSTITUTE_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Substitutes` target type in the UI, this will show your ad to shoppers who use detail pages of products similar to yours.|
// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed |
// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
// | `OTHER` | Other Type.   |
type SponsoredProductsTargetingExpressionPredicateType string

// SponsoredProductsTargetingExpressionPredicateTypeWithoutOther The type of targeting expression. You can specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `QUERY_BROAD_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Loose match` target type in the UI, this will show your ad to shoppers who use search terms loosely related to your products.|
// | `QUERY_HIGH_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Close match` target type in the UI, this will show your ad to shoppers who use search terms closely related to your products.|
// | `ASIN_ACCESSORY_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Complements` target type in the UI, this will show your ad to shoppers who view the detail pages of products that complement your product.|
// | `ASIN_SUBSTITUTE_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Substitutes` target type in the UI, this will show your ad to shoppers who use detail pages of products similar to yours.|
// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed |
// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
// | `OTHER` | Other Type.   |
type SponsoredProductsTargetingExpressionPredicateTypeWithoutOther string

// SponsoredProductsTargetingExpressionPredicateWithoutOther defines model for SponsoredProductsTargetingExpressionPredicateWithoutOther.
type SponsoredProductsTargetingExpressionPredicateWithoutOther struct {
	// Type The type of targeting expression. You can specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `QUERY_BROAD_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Loose match` target type in the UI, this will show your ad to shoppers who use search terms loosely related to your products.|
	// | `QUERY_HIGH_REL_MATCHES` | Auto Targeting - cannot be manually created - corresponds to the `Close match` target type in the UI, this will show your ad to shoppers who use search terms closely related to your products.|
	// | `ASIN_ACCESSORY_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Complements` target type in the UI, this will show your ad to shoppers who view the detail pages of products that complement your product.|
	// | `ASIN_SUBSTITUTE_RELATED` | Auto Targeting - cannot be manually created - corresponds to the `Substitutes` target type in the UI, this will show your ad to shoppers who use detail pages of products similar to yours.|
	// | `ASIN_CATEGORY_SAME_AS` | Target the category that is the same as the category expressed |
	// | `ASIN_BRAND_SAME_AS` | Target the brand that is the same as the brand expressed. |
	// | `ASIN_PRICE_LESS_THAN` | Target a price that is less than the price expressed. |
	// | `ASIN_PRICE_BETWEEN` | Target a price that is between the prices expressed. |
	// | `ASIN_PRICE_GREATER_THAN` | Target a price that is greater than the price expressed. |
	// | `ASIN_REVIEW_RATING_LESS_THAN` | Target a review rating less than the review rating that is expressed. |
	// | `ASIN_REVIEW_RATING_BETWEEN` | Target a review rating that is between the review ratings expressed. |
	// | `ASIN_REVIEW_RATING_GREATER_THAN` | Target a review rating that is greater than the review rating expressed. |
	// | `ASIN_SAME_AS` | Target an ASIN that is the same as the ASIN expressed. |
	// | `ASIN_IS_PRIME_SHIPPING_ELIGIBLE` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
	// | `ASIN_AGE_RANGE_SAME_AS` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
	// | `ASIN_GENRE_SAME_AS` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
	// | `ASIN_EXPANDED_FROM` | Target products similar in performance to the ASIN expressed.   |
	// | `OTHER` | Other Type.   |
	Type SponsoredProductsTargetingExpressionPredicateTypeWithoutOther `json:"type"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// SponsoredProductsTargetingType defines model for SponsoredProductsTargetingType.
type SponsoredProductsTargetingType string

// SponsoredProductsThrottledError Error that represents failure due to API caller exceeding allowed service limits.
type SponsoredProductsThrottledError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                `json:"message"`
	Reason  SponsoredProductsThrottledErrorReason `json:"reason"`
}

// SponsoredProductsThrottledErrorCode defines model for SponsoredProductsThrottledErrorCode.
type SponsoredProductsThrottledErrorCode string

// SponsoredProductsThrottledErrorReason defines model for SponsoredProductsThrottledErrorReason.
type SponsoredProductsThrottledErrorReason string

// SponsoredProductsThrottlingExceptionResponseContent defines model for SponsoredProductsThrottlingExceptionResponseContent.
type SponsoredProductsThrottlingExceptionResponseContent struct {
	Code SponsoredProductsThrottledErrorCode `json:"code"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsUnauthorizedErrorCode defines model for SponsoredProductsUnauthorizedErrorCode.
type SponsoredProductsUnauthorizedErrorCode string

// SponsoredProductsUnauthorizedExceptionResponseContent defines model for SponsoredProductsUnauthorizedExceptionResponseContent.
type SponsoredProductsUnauthorizedExceptionResponseContent struct {
	Code SponsoredProductsUnauthorizedErrorCode `json:"code"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsUnsupportedMediaTypeErrorCode defines model for SponsoredProductsUnsupportedMediaTypeErrorCode.
type SponsoredProductsUnsupportedMediaTypeErrorCode string

// SponsoredProductsUnsupportedMediaTypeExceptionResponseContent defines model for SponsoredProductsUnsupportedMediaTypeExceptionResponseContent.
type SponsoredProductsUnsupportedMediaTypeExceptionResponseContent struct {
	Code SponsoredProductsUnsupportedMediaTypeErrorCode `json:"code"`

	// Message Human readable error message
	Message string `json:"message"`
}

// SponsoredProductsUnsupportedOperationError Errors being used to represent an unsupported operation
// e.g. Seller are not supported to create custom text product ads.
type SponsoredProductsUnsupportedOperationError struct {
	// Cause Structure describing error cause - location in the payload and data causing error
	Cause *SponsoredProductsErrorCause `json:"cause,omitempty"`

	// Message Human readable error message
	Message string                                           `json:"message"`
	Reason  SponsoredProductsUnsupportedOperationErrorReason `json:"reason"`
}

// SponsoredProductsUnsupportedOperationErrorReason defines model for SponsoredProductsUnsupportedOperationErrorReason.
type SponsoredProductsUnsupportedOperationErrorReason string

// SponsoredProductsUpdateAdGroup defines model for SponsoredProductsUpdateAdGroup.
type SponsoredProductsUpdateAdGroup struct {
	// AdGroupId The identifier of the keyword.
	AdGroupId string `json:"adGroupId"`

	// DefaultBid A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	DefaultBid *float64 `json:"defaultBid,omitempty"`

	// Name The name of the ad group.
	Name *string `json:"name,omitempty"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`
}

// SponsoredProductsUpdateCampaign defines model for SponsoredProductsUpdateCampaign.
type SponsoredProductsUpdateCampaign struct {
	Budget *SponsoredProductsCreateOrUpdateBudget `json:"budget,omitempty"`

	// CampaignId The identifier of the campaign.
	CampaignId string `json:"campaignId"`

	// DynamicBidding Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
	// For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
	DynamicBidding *SponsoredProductsCreateOrUpdateDynamicBidding `json:"dynamicBidding,omitempty"`

	// EndDate The format of the date is YYYY-MM-DD.
	EndDate *openapi_types.Date `json:"endDate"`

	// Name The name of the campaign.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of an existing portfolio to which the campaign is associated.
	PortfolioId *string `json:"portfolioId"`

	// StartDate The format of the date is YYYY-MM-DD.
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags          *SponsoredProductsTags          `json:"tags,omitempty"`
	TargetingType *SponsoredProductsTargetingType `json:"targetingType,omitempty"`
}

// SponsoredProductsUpdateCampaignNegativeKeyword defines model for SponsoredProductsUpdateCampaignNegativeKeyword.
type SponsoredProductsUpdateCampaignNegativeKeyword struct {
	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`
}

// SponsoredProductsUpdateCampaignNegativeTargetingClause defines model for SponsoredProductsUpdateCampaignNegativeTargetingClause.
type SponsoredProductsUpdateCampaignNegativeTargetingClause struct {
	// Expression The NegativeTargeting expression.
	Expression *[]SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate `json:"expression,omitempty"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsUpdateKeyword defines model for SponsoredProductsUpdateKeyword.
type SponsoredProductsUpdateKeyword struct {
	// Bid Bid associated with this keyword. Applicable to biddable match types only. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid"`

	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`
}

// SponsoredProductsUpdateNegativeKeyword defines model for SponsoredProductsUpdateNegativeKeyword.
type SponsoredProductsUpdateNegativeKeyword struct {
	// KeywordId The identifier of the keyword.
	KeywordId string `json:"keywordId"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`
}

// SponsoredProductsUpdateNegativeTargetingClause defines model for SponsoredProductsUpdateNegativeTargetingClause.
type SponsoredProductsUpdateNegativeTargetingClause struct {
	// Expression The NegativeTargeting expression.
	Expression *[]SponsoredProductsCreateOrUpdateNegativeTargetingExpressionPredicate `json:"expression,omitempty"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsUpdateProductAd defines model for SponsoredProductsUpdateProductAd.
type SponsoredProductsUpdateProductAd struct {
	// AdId The product ad identifier.
	AdId string `json:"adId"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`
}

// SponsoredProductsUpdateSponsoredProductsAdGroupsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsAdGroupsRequestContent.
type SponsoredProductsUpdateSponsoredProductsAdGroupsRequestContent struct {
	// AdGroups An array of adGroups with updated values.
	AdGroups []SponsoredProductsUpdateAdGroup `json:"adGroups"`
}

// SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent.
type SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent struct {
	AdGroups SponsoredProductsBulkAdGroupOperationResponse `json:"adGroups"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsRequestContent.
type SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsRequestContent struct {
	// CampaignNegativeKeywords An array of campaignNegativeKeywords with updated values.
	CampaignNegativeKeywords []SponsoredProductsUpdateCampaignNegativeKeyword `json:"campaignNegativeKeywords"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsResponseContent.
type SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsResponseContent struct {
	CampaignNegativeKeywords SponsoredProductsBulkCampaignNegativeKeywordOperationResponse `json:"campaignNegativeKeywords"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestContent.
type SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestContent struct {
	// CampaignNegativeTargetingClauses An array of Campaign Negative TargetingClauses with updated values.
	CampaignNegativeTargetingClauses []SponsoredProductsUpdateCampaignNegativeTargetingClause `json:"campaignNegativeTargetingClauses"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesResponseContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesResponseContent.
type SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesResponseContent struct {
	CampaignNegativeTargetingClauses SponsoredProductsBulkCampaignNegativeTargetingClauseOperationResponse `json:"campaignNegativeTargetingClauses"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignsRequestContent.
type SponsoredProductsUpdateSponsoredProductsCampaignsRequestContent struct {
	// Campaigns An array of campaigns with updated values.
	Campaigns []SponsoredProductsUpdateCampaign `json:"campaigns"`
}

// SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent.
type SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent struct {
	Campaigns SponsoredProductsBulkCampaignOperationResponse `json:"campaigns"`
}

// SponsoredProductsUpdateSponsoredProductsKeywordsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsKeywordsRequestContent.
type SponsoredProductsUpdateSponsoredProductsKeywordsRequestContent struct {
	// Keywords An array of keywords with updated values.
	Keywords []SponsoredProductsUpdateKeyword `json:"keywords"`
}

// SponsoredProductsUpdateSponsoredProductsKeywordsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsKeywordsResponseContent.
type SponsoredProductsUpdateSponsoredProductsKeywordsResponseContent struct {
	Keywords SponsoredProductsBulkKeywordOperationResponse `json:"keywords"`
}

// SponsoredProductsUpdateSponsoredProductsNegativeKeywordsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsNegativeKeywordsRequestContent.
type SponsoredProductsUpdateSponsoredProductsNegativeKeywordsRequestContent struct {
	// NegativeKeywords An array of negativeKeywords with updated values.
	NegativeKeywords []SponsoredProductsUpdateNegativeKeyword `json:"negativeKeywords"`
}

// SponsoredProductsUpdateSponsoredProductsNegativeKeywordsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsNegativeKeywordsResponseContent.
type SponsoredProductsUpdateSponsoredProductsNegativeKeywordsResponseContent struct {
	NegativeKeywords SponsoredProductsBulkNegativeKeywordOperationResponse `json:"negativeKeywords"`
}

// SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent defines model for SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent.
type SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent struct {
	// NegativeTargetingClauses An array of negativeTargeting with updated values.
	NegativeTargetingClauses []SponsoredProductsUpdateNegativeTargetingClause `json:"negativeTargetingClauses"`
}

// SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent defines model for SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent.
type SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent struct {
	NegativeTargetingClauses SponsoredProductsBulkNegativeTargetingClauseOperationResponse `json:"negativeTargetingClauses"`
}

// SponsoredProductsUpdateSponsoredProductsProductAdsRequestContent defines model for SponsoredProductsUpdateSponsoredProductsProductAdsRequestContent.
type SponsoredProductsUpdateSponsoredProductsProductAdsRequestContent struct {
	// ProductAds An array of ads with updated values.
	ProductAds []SponsoredProductsUpdateProductAd `json:"productAds"`
}

// SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent defines model for SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent.
type SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent struct {
	ProductAds SponsoredProductsBulkProductAdOperationResponse `json:"productAds"`
}

// SponsoredProductsUpdateSponsoredProductsTargetingClausesRequestContent defines model for SponsoredProductsUpdateSponsoredProductsTargetingClausesRequestContent.
type SponsoredProductsUpdateSponsoredProductsTargetingClausesRequestContent struct {
	// TargetingClauses An array of targetingClauses with updated values.
	TargetingClauses []SponsoredProductsUpdateTargetingClause `json:"targetingClauses"`
}

// SponsoredProductsUpdateSponsoredProductsTargetingClausesResponseContent defines model for SponsoredProductsUpdateSponsoredProductsTargetingClausesResponseContent.
type SponsoredProductsUpdateSponsoredProductsTargetingClausesResponseContent struct {
	TargetingClauses SponsoredProductsBulkTargetingClauseOperationResponse `json:"targetingClauses"`
}

// SponsoredProductsUpdateTargetingClause defines model for SponsoredProductsUpdateTargetingClause.
type SponsoredProductsUpdateTargetingClause struct {
	// Bid The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
	Bid *float64 `json:"bid"`

	// Expression The targeting expression.
	Expression     *[]SponsoredProductsTargetingExpressionPredicateWithoutOther `json:"expression,omitempty"`
	ExpressionType *SponsoredProductsExpressionTypeWithoutOther                 `json:"expressionType,omitempty"`

	// State Entity state for create or update operation
	State *SponsoredProductsCreateOrUpdateEntityState `json:"state,omitempty"`

	// TargetId The target identifier
	TargetId string `json:"targetId"`
}

// SponsoredProductsValueLimitErrorReason defines model for SponsoredProductsValueLimitErrorReason.
type SponsoredProductsValueLimitErrorReason string

// TargetableAsinCounts Response object to get number of targetable asins for refinements provided by the user
type TargetableAsinCounts struct {
	AsinCounts *IntegerRange `json:"asinCounts,omitempty"`
}

// TargetableCategories Response object containing all targetable categories for the advertiser's marketplace. ID is the category ID. NA is the name. CH is the list of child categories. TA is if the category is targetable. AsinCountRange is the AsinCounts of the node. Version 4 adds the number of targetable ASINs to each category.
type TargetableCategories struct {
	CategoryTree *string `json:"categoryTree,omitempty"`
}

// TargetableCategoriesLoP Response object containing all targetable categories for the advertiser's marketplace in a language of preference (LoP) provide by the locale query parameter. ID is the category ID. NA is the name. TN is the translated name in the language of preference. CH is the list of child categories. TA is if the category is targetable. AsinCountRange is the AsinCounts of the node. Version 4 adds the number of targetable ASINs to each category.
type TargetableCategoriesLoP struct {
	CategoryTree *string `json:"categoryTree,omitempty"`
}

// TargetingExpression The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases.
type TargetingExpression struct {
	Type TargetingExpressionType `json:"type"`

	// Value The targeting expression value.
	Value *string `json:"value,omitempty"`
}

// TargetingExpressionType defines model for TargetingExpression.Type.
type TargetingExpressionType string

// TargetingExpressionList The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.
type TargetingExpressionList = []TargetingExpression

// TargetingGroupBidRecommendation Contains suggested recommendation for the auto targeting group.
type TargetingGroupBidRecommendation struct {
	// Action Type of suggested action.
	Action *TargetingGroupBidRecommendationAction `json:"action,omitempty"`

	// AdGroupId The ad group identifier.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// SuggestedBid The suggested bid value associated with this targeting.
	SuggestedBid *float64 `json:"suggestedBid,omitempty"`

	// TargetId The target identifier.
	TargetId *string `json:"targetId,omitempty"`

	// TargetingGroupExpression The type of targeting group expression.
	// | Value | Description |
	// | --- | --- |
	// | `LOOSE_MATCH` | This will show your ad to shoppers who use search terms loosely related to your products.|
	// | `CLOSE_MATCH` | This will show your ad to shoppers who use search terms closely related to your products.|
	// | `COMPLEMENTS` | This will show your ad to shoppers who view the detail pages of products that complement your product.|
	// | `SUBSTITUTES` | This will show your ad to shoppers who use detail pages of products similar to yours.|
	TargetingGroupExpression *TargetingGroupBidRecommendationTargetingGroupExpression `json:"targetingGroupExpression,omitempty"`
}

// TargetingGroupBidRecommendationAction Type of suggested action.
type TargetingGroupBidRecommendationAction string

// TargetingGroupBidRecommendationTargetingGroupExpression The type of targeting group expression.
// | Value | Description |
// | --- | --- |
// | `LOOSE_MATCH` | This will show your ad to shoppers who use search terms loosely related to your products.|
// | `CLOSE_MATCH` | This will show your ad to shoppers who use search terms closely related to your products.|
// | `COMPLEMENTS` | This will show your ad to shoppers who view the detail pages of products that complement your product.|
// | `SUBSTITUTES` | This will show your ad to shoppers who use detail pages of products similar to yours.|
type TargetingGroupBidRecommendationTargetingGroupExpression string

// Theme The bid recommendation theme. This API currently supports `CONVERSION_OPPORTUNITIES`, `PRIME_DAY`, `FALL_PRIME_DEAL_EVENT`, and `BFCM_HOLIDAY` themes.
type Theme string

// ThemeBasedBidRecommendation defines model for ThemeBasedBidRecommendation.
type ThemeBasedBidRecommendation struct {
	// BidRecommendationsForTargetingExpressions The bid recommendations for targeting expressions listed in the request.
	BidRecommendationsForTargetingExpressions []BidRecommendationPerTargetingExpression `json:"bidRecommendationsForTargetingExpressions"`

	// ImpactMetrics For the CONVERSION_OPPORTUNITIES theme, the impact metrics are weekly clicks and orders received for similar products.
	// For other event-based themes, the impact metrics are clicks and orders received for similar products during the event days
	//
	// Note: This object is nullable
	ImpactMetrics *ImpactMetrics `json:"impactMetrics"`

	// Theme The bid recommendation theme. This API currently supports `CONVERSION_OPPORTUNITIES`, `PRIME_DAY`, `FALL_PRIME_DEAL_EVENT`, and `BFCM_HOLIDAY` themes.
	Theme Theme `json:"theme"`
}

// ThemeBasedBidRecommendationResponse A list of bid recommendation themes and associated bid recommendations.
type ThemeBasedBidRecommendationResponse struct {
	BidRecommendations []ThemeBasedBidRecommendation `json:"bidRecommendations"`
}

// ThemeRecommendation Recommended asins grouped by theme attribute.
type ThemeRecommendation struct {
	// Description A theme name representing the context around the recommended list of ASINs.
	Description *string `json:"description,omitempty"`

	// RecommendedAsins List of recommended ASINs under current theme.
	RecommendedAsins *[]string `json:"recommendedAsins,omitempty"`

	// Theme A theme name representing the context around the recommended list of ASINs.
	Theme *string `json:"theme,omitempty"`
}

// ThemedBid defines model for ThemedBid.
type ThemedBid struct {
	// Bid The bid value for the keyword. The default value will be the suggested bid.
	Bid *float64 `json:"bid,omitempty"`

	// MatchType Keyword match type. The default value will be BROAD.
	MatchType *ThemedBidMatchType `json:"matchType,omitempty"`

	// Rank The keyword target rank.
	Rank *float32 `json:"rank,omitempty"`

	// SuggestedBid Suggested bid range
	SuggestedBid *BidValues `json:"suggestedBid,omitempty"`

	// Theme The theme of the bid recommendation. The default theme is CONVERSION_OPPORTUNITIES.
	Theme *string `json:"theme,omitempty"`
}

// ThemedBidMatchType Keyword match type. The default value will be BROAD.
type ThemedBidMatchType string

// ThrottlingException Returns information about a ThrottlingException.
type ThrottlingException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// UnauthorizedException Returns information about an UnauthorizedException.
type UnauthorizedException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// UnprocessableEntityException Returns information about UnprocessableEntityException.
type UnprocessableEntityException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// UpdateBudgetRulesResponse defines model for UpdateBudgetRulesResponse.
type UpdateBudgetRulesResponse struct {
	Responses *[]BudgetRuleResponse `json:"responses,omitempty"`
}

// UpdateSPBudgetRulesRequest Request object for updating budget rule for SP campaign
type UpdateSPBudgetRulesRequest struct {
	// BudgetRulesDetails A list of budget rule details.
	BudgetRulesDetails *[]SPBudgetRule `json:"budgetRulesDetails,omitempty"`
}

// UpdateSPCampaignOptimizationRuleResponse defines model for UpdateSPCampaignOptimizationRuleResponse.
type UpdateSPCampaignOptimizationRuleResponse struct {
	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId *CampaignOptimizationId `json:"campaignOptimizationId,omitempty"`

	// Code An enumerated success or error code for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error, if unsuccessful
	Details *string `json:"details,omitempty"`
}

// UpdateSPCampaignOptimizationRulesRequest Request object for updating campaign optimization rule
type UpdateSPCampaignOptimizationRulesRequest struct {
	// CampaignIds A list of campaign ids
	CampaignIds []RuleCampaignId `json:"campaignIds"`

	// CampaignOptimizationId The persistent rule identifier.
	CampaignOptimizationId CampaignOptimizationId `json:"campaignOptimizationId"`

	// Recurrence The frequency of the rule application.
	Recurrence RecurrenceType `json:"recurrence"`

	// RuleAction The action taken when the campaign optimization rule is enabled. Defaults to adopt
	RuleAction    RuleAction        `json:"ruleAction"`
	RuleCondition RuleConditionList `json:"ruleCondition"`

	// RuleName The campaign optimization rule name.
	RuleName *RuleName `json:"ruleName,omitempty"`

	// RuleType The type of the campaign optimization rule. Only Support BID as of now
	RuleType RuleType `json:"ruleType"`
}

// ValidationException Returns information about a ValidationException.
type ValidationException struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// Values Metrics benchmark values.
type Values struct {
	// Clicks Clicks benchmark.
	Clicks *Clicks `json:"clicks,omitempty"`

	// Conversions Conversions benchmark.
	Conversions *Conversions `json:"conversions,omitempty"`

	// Impressions Impressions benchmark.
	Impressions *Impressions `json:"impressions,omitempty"`
}

// BudgetIncreaseBy defines model for budgetIncreaseBy.
type BudgetIncreaseBy struct {
	// Type The value by which to update the budget of the budget rule.
	Type BudgetChangeType `json:"type"`

	// Value The budget value.
	Value float64 `json:"value"`
}

// CampaignOptimizationId The persistent rule identifier.
type CampaignOptimizationId = string

// State The budget rule state.
type State string

// CreateSponsoredProductsAdGroupsParams defines parameters for CreateSponsoredProductsAdGroups.
type CreateSponsoredProductsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsAdGroupsParams defines parameters for UpdateSponsoredProductsAdGroups.
type UpdateSponsoredProductsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsAdGroupsParams defines parameters for DeleteSponsoredProductsAdGroups.
type DeleteSponsoredProductsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsAdGroupsParams defines parameters for ListSponsoredProductsAdGroups.
type ListSponsoredProductsAdGroupsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetSPBudgetRulesForAdvertiserParams defines parameters for GetSPBudgetRulesForAdvertiser.
type GetSPBudgetRulesForAdvertiserParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateBudgetRulesForSPCampaignsParams defines parameters for CreateBudgetRulesForSPCampaigns.
type CreateBudgetRulesForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateBudgetRulesForSPCampaignsParams defines parameters for UpdateBudgetRulesForSPCampaigns.
type UpdateBudgetRulesForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRuleByRuleIdForSPCampaignsParams defines parameters for GetBudgetRuleByRuleIdForSPCampaigns.
type GetBudgetRuleByRuleIdForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignsAssociatedWithSPBudgetRuleParams defines parameters for GetCampaignsAssociatedWithSPBudgetRule.
type GetCampaignsAssociatedWithSPBudgetRuleParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignRecommendationsParams defines parameters for GetCampaignRecommendations.
type GetCampaignRecommendationsParams struct {
	// NextToken Optional. Token to retrieve subsequent page of results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Optional. Limits the number of items to return in the response.
	MaxResults *string `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsCampaignNegativeKeywordsParams defines parameters for CreateSponsoredProductsCampaignNegativeKeywords.
type CreateSponsoredProductsCampaignNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsCampaignNegativeKeywordsParams defines parameters for UpdateSponsoredProductsCampaignNegativeKeywords.
type UpdateSponsoredProductsCampaignNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsCampaignNegativeKeywordsParams defines parameters for DeleteSponsoredProductsCampaignNegativeKeywords.
type DeleteSponsoredProductsCampaignNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsCampaignNegativeKeywordsParams defines parameters for ListSponsoredProductsCampaignNegativeKeywords.
type ListSponsoredProductsCampaignNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsCampaignNegativeTargetingClausesParams defines parameters for CreateSponsoredProductsCampaignNegativeTargetingClauses.
type CreateSponsoredProductsCampaignNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsCampaignNegativeTargetingClausesParams defines parameters for UpdateSponsoredProductsCampaignNegativeTargetingClauses.
type UpdateSponsoredProductsCampaignNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsCampaignNegativeTargetingClausesParams defines parameters for DeleteSponsoredProductsCampaignNegativeTargetingClauses.
type DeleteSponsoredProductsCampaignNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsCampaignNegativeTargetingClausesParams defines parameters for ListSponsoredProductsCampaignNegativeTargetingClauses.
type ListSponsoredProductsCampaignNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsCampaignsParams defines parameters for CreateSponsoredProductsCampaigns.
type CreateSponsoredProductsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsCampaignsParams defines parameters for UpdateSponsoredProductsCampaigns.
type UpdateSponsoredProductsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// SpCampaignsBudgetUsageParams defines parameters for SpCampaignsBudgetUsage.
type SpCampaignsBudgetUsageParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId interface{} `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope interface{} `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRecommendationsParams defines parameters for GetBudgetRecommendations.
type GetBudgetRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody defines parameters for SPGetBudgetRulesRecommendation.
type SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody struct {
	union json.RawMessage
}

// SPGetBudgetRulesRecommendationParams defines parameters for SPGetBudgetRulesRecommendation.
type SPGetBudgetRulesRecommendationParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteSponsoredProductsCampaignsParams defines parameters for DeleteSponsoredProductsCampaigns.
type DeleteSponsoredProductsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetBudgetRecommendationParams defines parameters for GetBudgetRecommendation.
type GetBudgetRecommendationParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsCampaignsParams defines parameters for ListSponsoredProductsCampaigns.
type ListSponsoredProductsCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListAssociatedBudgetRulesForSPCampaignsParams defines parameters for ListAssociatedBudgetRulesForSPCampaigns.
type ListAssociatedBudgetRulesForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateAssociatedBudgetRulesForSPCampaignsParams defines parameters for CreateAssociatedBudgetRulesForSPCampaigns.
type CreateAssociatedBudgetRulesForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetRuleBasedBudgetHistoryForSPCampaignsParams defines parameters for GetRuleBasedBudgetHistoryForSPCampaigns.
type GetRuleBasedBudgetHistoryForSPCampaignsParams struct {
	// NextToken To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// PageSize Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
	PageSize float32 `form:"pageSize" json:"pageSize"`

	// StartDate The start date of the budget history in YYYYMMDD format.
	StartDate string `form:"startDate" json:"startDate"`

	// EndDate The end date of the budget history in YYYYMMDD format.
	EndDate string `form:"endDate" json:"endDate"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DisassociateAssociatedBudgetRuleForSPCampaignsParams defines parameters for DisassociateAssociatedBudgetRuleForSPCampaigns.
type DisassociateAssociatedBudgetRuleForSPCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsKeywordsParams defines parameters for CreateSponsoredProductsKeywords.
type CreateSponsoredProductsKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsKeywordsParams defines parameters for UpdateSponsoredProductsKeywords.
type UpdateSponsoredProductsKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsKeywordsParams defines parameters for DeleteSponsoredProductsKeywords.
type DeleteSponsoredProductsKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsKeywordsParams defines parameters for ListSponsoredProductsKeywords.
type ListSponsoredProductsKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsNegativeKeywordsParams defines parameters for CreateSponsoredProductsNegativeKeywords.
type CreateSponsoredProductsNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsNegativeKeywordsParams defines parameters for UpdateSponsoredProductsNegativeKeywords.
type UpdateSponsoredProductsNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsNegativeKeywordsParams defines parameters for DeleteSponsoredProductsNegativeKeywords.
type DeleteSponsoredProductsNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsNegativeKeywordsParams defines parameters for ListSponsoredProductsNegativeKeywords.
type ListSponsoredProductsNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsNegativeTargetingClausesParams defines parameters for CreateSponsoredProductsNegativeTargetingClauses.
type CreateSponsoredProductsNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsNegativeTargetingClausesParams defines parameters for UpdateSponsoredProductsNegativeTargetingClauses.
type UpdateSponsoredProductsNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetNegativeBrandsParams defines parameters for GetNegativeBrands.
type GetNegativeBrandsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// SearchBrandsParams defines parameters for SearchBrands.
type SearchBrandsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsNegativeTargetingClausesParams defines parameters for DeleteSponsoredProductsNegativeTargetingClauses.
type DeleteSponsoredProductsNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsNegativeTargetingClausesParams defines parameters for ListSponsoredProductsNegativeTargetingClauses.
type ListSponsoredProductsNegativeTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsProductAdsParams defines parameters for CreateSponsoredProductsProductAds.
type CreateSponsoredProductsProductAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsProductAdsParams defines parameters for UpdateSponsoredProductsProductAds.
type UpdateSponsoredProductsProductAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// DeleteSponsoredProductsProductAdsParams defines parameters for DeleteSponsoredProductsProductAds.
type DeleteSponsoredProductsProductAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsProductAdsParams defines parameters for ListSponsoredProductsProductAds.
type ListSponsoredProductsProductAdsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateOptimizationRuleParams defines parameters for CreateOptimizationRule.
type CreateOptimizationRuleParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// UpdateOptimizationRuleParams defines parameters for UpdateOptimizationRule.
type UpdateOptimizationRuleParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetOptimizationRuleEligibilityParams defines parameters for GetOptimizationRuleEligibility.
type GetOptimizationRuleEligibilityParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetRuleNotificationParams defines parameters for GetRuleNotification.
type GetRuleNotificationParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteCampaignOptimizationRuleParams defines parameters for DeleteCampaignOptimizationRule.
type DeleteCampaignOptimizationRuleParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignOptimizationRuleParams defines parameters for GetCampaignOptimizationRule.
type GetCampaignOptimizationRuleParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsTargetingClausesParams defines parameters for CreateSponsoredProductsTargetingClauses.
type CreateSponsoredProductsTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// UpdateSponsoredProductsTargetingClausesParams defines parameters for UpdateSponsoredProductsTargetingClauses.
type UpdateSponsoredProductsTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer The "Prefer" header, as defined in [RFC7240], allows clients to request certain behavior from the service.
	// The service ignores preference values that are either not supported or not known by the service.
	// Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent
	// Supported preferences:
	// return=representation - return the full object when doing create/update/delete operations instead of ids.
	// Please note that the extendedData field will be part of the full object for /list endpoints only.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody defines parameters for GetThemeBasedBidRecommendationForAdGroupV1.
type GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody struct {
	union json.RawMessage
}

// GetThemeBasedBidRecommendationForAdGroupV1Params defines parameters for GetThemeBasedBidRecommendationForAdGroupV1.
type GetThemeBasedBidRecommendationForAdGroupV1Params struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetTargetableCategoriesParams defines parameters for GetTargetableCategories.
type GetTargetableCategoriesParams struct {
	// Locale The locale to which the caller wishes to translate the targetable categories to. For example, if the caller wishes to receive the targetable categories in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the returned targetable categories will be in the default language of the marketplace.
	Locale *GetTargetableCategoriesParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetTargetableCategoriesParamsLocale defines parameters for GetTargetableCategories.
type GetTargetableCategoriesParamsLocale string

// GetCategoryRecommendationsForASINsParams defines parameters for GetCategoryRecommendationsForASINs.
type GetCategoryRecommendationsForASINsParams struct {
	// Locale The locale to which the caller wishes to translate the list of category recommendations to. For example, if the caller wishes to receive a list of category recommendations in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the returned list of category recommendations will be in the default language of the marketplace.
	Locale *GetCategoryRecommendationsForASINsParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetCategoryRecommendationsForASINsParamsLocale defines parameters for GetCategoryRecommendationsForASINs.
type GetCategoryRecommendationsForASINsParamsLocale string

// GetRefinementsForCategoryParams defines parameters for GetRefinementsForCategory.
type GetRefinementsForCategoryParams struct {
	// Locale The locale to which the caller wishes to translate the refinements to. For example, if the caller wishes to receive the refinements in Simplified Chinese, the locale parameter should be set to zh_CN. If no locale is provided, the refinements will be in the default language of the marketplace.
	Locale *GetRefinementsForCategoryParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetRefinementsForCategoryParamsLocale defines parameters for GetRefinementsForCategory.
type GetRefinementsForCategoryParamsLocale string

// DeleteSponsoredProductsTargetingClausesParams defines parameters for DeleteSponsoredProductsTargetingClauses.
type DeleteSponsoredProductsTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONBody defines parameters for GetRankedKeywordRecommendation.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONBody struct {
	union json.RawMessage
}

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONBody defines parameters for GetRankedKeywordRecommendation.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONBody struct {
	union json.RawMessage
}

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONBody defines parameters for GetRankedKeywordRecommendation.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONBody struct {
	union json.RawMessage
}

// GetRankedKeywordRecommendationParams defines parameters for GetRankedKeywordRecommendation.
type GetRankedKeywordRecommendationParams struct {
	// AmazonAdvertisingAPIMarketplaceId The advertiser's Marketplace ID associated with the advertiser account.
	AmazonAdvertisingAPIMarketplaceId *string `json:"Amazon-Advertising-API-MarketplaceId,omitempty"`

	// AmazonAdvertisingAPIAdvertiserId The advertiser's ID associated with the advertiser account.
	AmazonAdvertisingAPIAdvertiserId *string `json:"Amazon-Advertising-API-AdvertiserId,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListSponsoredProductsTargetingClausesParams defines parameters for ListSponsoredProductsTargetingClauses.
type ListSponsoredProductsTargetingClausesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list
	// profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetTargetableASINCountsParams defines parameters for GetTargetableASINCounts.
type GetTargetableASINCountsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`

	// Prefer Used to indicate the behavior preferred by the client but is not required for successful completion of the request. Supported values will be updated in the future.
	Prefer *string `json:"Prefer,omitempty"`
}

// GetProductRecommendationsParams defines parameters for GetProductRecommendations.
type GetProductRecommendationsParams struct {
	// AmazonAdvertisingAPIAdvertiserId The Advertiser ID associated with the advertiser account.
	AmazonAdvertisingAPIAdvertiserId *string `json:"Amazon-Advertising-API-AdvertiserId,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody defines body for CreateSponsoredProductsAdGroups for application/vnd.spAdGroup.v3+json ContentType.
type CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsAdGroupsRequestContent

// UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody defines body for UpdateSponsoredProductsAdGroups for application/vnd.spAdGroup.v3+json ContentType.
type UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsAdGroupsRequestContent

// DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody defines body for DeleteSponsoredProductsAdGroups for application/vnd.spAdGroup.v3+json ContentType.
type DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsAdGroupsRequestContent

// ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody defines body for ListSponsoredProductsAdGroups for application/vnd.spAdGroup.v3+json ContentType.
type ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsAdGroupsRequestContent

// CreateBudgetRulesForSPCampaignsJSONRequestBody defines body for CreateBudgetRulesForSPCampaigns for application/json ContentType.
type CreateBudgetRulesForSPCampaignsJSONRequestBody = CreateSPBudgetRulesRequest

// UpdateBudgetRulesForSPCampaignsJSONRequestBody defines body for UpdateBudgetRulesForSPCampaigns for application/json ContentType.
type UpdateBudgetRulesForSPCampaignsJSONRequestBody = UpdateSPBudgetRulesRequest

// CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody defines body for CreateSponsoredProductsCampaignNegativeKeywords for application/vnd.spCampaignNegativeKeyword.v3+json ContentType.
type CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsRequestContent

// UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody defines body for UpdateSponsoredProductsCampaignNegativeKeywords for application/vnd.spCampaignNegativeKeyword.v3+json ContentType.
type UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsRequestContent

// DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody defines body for DeleteSponsoredProductsCampaignNegativeKeywords for application/vnd.spCampaignNegativeKeyword.v3+json ContentType.
type DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsRequestContent

// ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody defines body for ListSponsoredProductsCampaignNegativeKeywords for application/vnd.spCampaignNegativeKeyword.v3+json ContentType.
type ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsRequestContent

// CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody defines body for CreateSponsoredProductsCampaignNegativeTargetingClauses for application/vnd.spCampaignNegativeTargetingClause.v3+json ContentType.
type CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesRequestContent

// UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody defines body for UpdateSponsoredProductsCampaignNegativeTargetingClauses for application/vnd.spCampaignNegativeTargetingClause.v3+json ContentType.
type UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestContent

// DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody defines body for DeleteSponsoredProductsCampaignNegativeTargetingClauses for application/vnd.spCampaignNegativeTargetingClause.v3+json ContentType.
type DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestContent

// ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody defines body for ListSponsoredProductsCampaignNegativeTargetingClauses for application/vnd.spCampaignNegativeTargetingClause.v3+json ContentType.
type ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesRequestContent

// CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody defines body for CreateSponsoredProductsCampaigns for application/vnd.spCampaign.v3+json ContentType.
type CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsCampaignsRequestContent

// UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody defines body for UpdateSponsoredProductsCampaigns for application/vnd.spCampaign.v3+json ContentType.
type UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsCampaignsRequestContent

// SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody defines body for SpCampaignsBudgetUsage for application/vnd.spcampaignbudgetusage.v1+json ContentType.
type SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody = BudgetUsageCampaignRequest

// GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody defines body for GetBudgetRecommendations for application/vnd.budgetrecommendation.v3+json ContentType.
type GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody = BudgetRecommendationRequest

// SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody defines body for SPGetBudgetRulesRecommendation for application/vnd.spbudgetrulesrecommendation.v3+json ContentType.
type SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody

// DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody defines body for DeleteSponsoredProductsCampaigns for application/vnd.spCampaign.v3+json ContentType.
type DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsCampaignsRequestContent

// GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody defines body for GetBudgetRecommendation for application/vnd.spinitialbudgetrecommendation.v3.4+json ContentType.
type GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody = InitialBudgetRecommendationRequest

// ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody defines body for ListSponsoredProductsCampaigns for application/vnd.spCampaign.v3+json ContentType.
type ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsCampaignsRequestContent

// CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody defines body for CreateAssociatedBudgetRulesForSPCampaigns for application/json ContentType.
type CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody = CreateAssociatedBudgetRulesRequest

// CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody defines body for CreateSponsoredProductsKeywords for application/vnd.spKeyword.v3+json ContentType.
type CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsKeywordsRequestContent

// UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody defines body for UpdateSponsoredProductsKeywords for application/vnd.spKeyword.v3+json ContentType.
type UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsKeywordsRequestContent

// DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody defines body for DeleteSponsoredProductsKeywords for application/vnd.spKeyword.v3+json ContentType.
type DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsKeywordsRequestContent

// ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody defines body for ListSponsoredProductsKeywords for application/vnd.spKeyword.v3+json ContentType.
type ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsKeywordsRequestContent

// CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody defines body for CreateSponsoredProductsNegativeKeywords for application/vnd.spNegativeKeyword.v3+json ContentType.
type CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsNegativeKeywordsRequestContent

// UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody defines body for UpdateSponsoredProductsNegativeKeywords for application/vnd.spNegativeKeyword.v3+json ContentType.
type UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsNegativeKeywordsRequestContent

// DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody defines body for DeleteSponsoredProductsNegativeKeywords for application/vnd.spNegativeKeyword.v3+json ContentType.
type DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsNegativeKeywordsRequestContent

// ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody defines body for ListSponsoredProductsNegativeKeywords for application/vnd.spNegativeKeyword.v3+json ContentType.
type ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsNegativeKeywordsRequestContent

// CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody defines body for CreateSponsoredProductsNegativeTargetingClauses for application/vnd.spNegativeTargetingClause.v3+json ContentType.
type CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent

// UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody defines body for UpdateSponsoredProductsNegativeTargetingClauses for application/vnd.spNegativeTargetingClause.v3+json ContentType.
type UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent

// SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody defines body for SearchBrands for application/vnd.spproducttargeting.v3+json ContentType.
type SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody = SearchBrandsRequest

// DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody defines body for DeleteSponsoredProductsNegativeTargetingClauses for application/vnd.spNegativeTargetingClause.v3+json ContentType.
type DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent

// ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody defines body for ListSponsoredProductsNegativeTargetingClauses for application/vnd.spNegativeTargetingClause.v3+json ContentType.
type ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent

// CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody defines body for CreateSponsoredProductsProductAds for application/vnd.spProductAd.v3+json ContentType.
type CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsProductAdsRequestContent

// UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody defines body for UpdateSponsoredProductsProductAds for application/vnd.spProductAd.v3+json ContentType.
type UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsProductAdsRequestContent

// DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody defines body for DeleteSponsoredProductsProductAds for application/vnd.spProductAd.v3+json ContentType.
type DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsProductAdsRequestContent

// ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody defines body for ListSponsoredProductsProductAds for application/vnd.spProductAd.v3+json ContentType.
type ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsProductAdsRequestContent

// CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody defines body for CreateOptimizationRule for application/vnd.optimizationrules.v1+json ContentType.
type CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody = CreateSPCampaignOptimizationRulesRequest

// UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody defines body for UpdateOptimizationRule for application/vnd.optimizationrules.v1+json ContentType.
type UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody = UpdateSPCampaignOptimizationRulesRequest

// GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody defines body for GetOptimizationRuleEligibility for application/vnd.optimizationrules.v1+json ContentType.
type GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody = SPCampaignOptimizationRecommendationsAPIRequest

// GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody defines body for GetRuleNotification for application/vnd.optimizationrules.v1+json ContentType.
type GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody = SPCampaignOptimizationNotificationAPIRequest

// CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody defines body for CreateSponsoredProductsTargetingClauses for application/vnd.spTargetingClause.v3+json ContentType.
type CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody = SponsoredProductsCreateSponsoredProductsTargetingClausesRequestContent

// UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody defines body for UpdateSponsoredProductsTargetingClauses for application/vnd.spTargetingClause.v3+json ContentType.
type UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody = SponsoredProductsUpdateSponsoredProductsTargetingClausesRequestContent

// GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody defines body for GetThemeBasedBidRecommendationForAdGroupV1 for application/vnd.spthemebasedbidrecommendation.v3+json ContentType.
type GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody

// GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody defines body for GetCategoryRecommendationsForASINs for application/vnd.spproducttargeting.v3+json ContentType.
type GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody = GetCategoryRecommendationsForAsinsRequest

// DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody defines body for DeleteSponsoredProductsTargetingClauses for application/vnd.spTargetingClause.v3+json ContentType.
type DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody = SponsoredProductsDeleteSponsoredProductsTargetingClausesRequestContent

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody defines body for GetRankedKeywordRecommendation for application/vnd.spkeywordsrecommendation.v3+json ContentType.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONBody

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody defines body for GetRankedKeywordRecommendation for application/vnd.spkeywordsrecommendation.v4+json ContentType.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONBody

// GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody defines body for GetRankedKeywordRecommendation for application/vnd.spkeywordsrecommendation.v5+json ContentType.
type GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONBody

// ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody defines body for ListSponsoredProductsTargetingClauses for application/vnd.spTargetingClause.v3+json ContentType.
type ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody = SponsoredProductsListSponsoredProductsTargetingClausesRequestContent

// GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody defines body for GetTargetableASINCounts for application/vnd.spproducttargeting.v3+json ContentType.
type GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody = GetTargetableAsinCountsRequest

// GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody defines body for GetProductRecommendations for application/vnd.spproductrecommendation.v3+json ContentType.
type GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody = GetProductRecommendationsRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSponsoredProductsAdGroupsWithBody request with any body
	CreateSponsoredProductsAdGroupsWithBody(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, body CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsAdGroupsWithBody request with any body
	UpdateSponsoredProductsAdGroupsWithBody(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, body UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsAdGroupsWithBody request with any body
	DeleteSponsoredProductsAdGroupsWithBody(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, body DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsAdGroupsWithBody request with any body
	ListSponsoredProductsAdGroupsWithBody(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, body ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error)

	// GetSPBudgetRulesForAdvertiser request
	GetSPBudgetRulesForAdvertiser(ctx context.Context, params *GetSPBudgetRulesForAdvertiserParams) (*http.Response, error)

	// CreateBudgetRulesForSPCampaignsWithBody request with any body
	CreateBudgetRulesForSPCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateBudgetRulesForSPCampaigns(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, body CreateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error)

	// UpdateBudgetRulesForSPCampaignsWithBody request with any body
	UpdateBudgetRulesForSPCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateBudgetRulesForSPCampaigns(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, body UpdateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error)

	// GetBudgetRuleByRuleIdForSPCampaigns request
	GetBudgetRuleByRuleIdForSPCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSPCampaignsParams) (*http.Response, error)

	// GetCampaignsAssociatedWithSPBudgetRule request
	GetCampaignsAssociatedWithSPBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSPBudgetRuleParams) (*http.Response, error)

	// GetCampaignRecommendations request
	GetCampaignRecommendations(ctx context.Context, params *GetCampaignRecommendationsParams) (*http.Response, error)

	// CreateSponsoredProductsCampaignNegativeKeywordsWithBody request with any body
	CreateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, body CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsCampaignNegativeKeywordsWithBody request with any body
	UpdateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, body UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsCampaignNegativeKeywordsWithBody request with any body
	DeleteSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, body DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsCampaignNegativeKeywordsWithBody request with any body
	ListSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, body ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// CreateSponsoredProductsCampaignNegativeTargetingClausesWithBody request with any body
	CreateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, body CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBody request with any body
	UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, body UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBody request with any body
	DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, body DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsCampaignNegativeTargetingClausesWithBody request with any body
	ListSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, body ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// CreateSponsoredProductsCampaignsWithBody request with any body
	CreateSponsoredProductsCampaignsWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, body CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsCampaignsWithBody request with any body
	UpdateSponsoredProductsCampaignsWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, body UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error)

	// SpCampaignsBudgetUsageWithBody request with any body
	SpCampaignsBudgetUsageWithBody(ctx context.Context, params *SpCampaignsBudgetUsageParams, contentType string, body io.Reader) (*http.Response, error)

	SpCampaignsBudgetUsageWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SpCampaignsBudgetUsageParams, body SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody) (*http.Response, error)

	// GetBudgetRecommendationsWithBody request with any body
	GetBudgetRecommendationsWithBody(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	GetBudgetRecommendationsWithApplicationVndBudgetrecommendationV3PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody) (*http.Response, error)

	// SPGetBudgetRulesRecommendationWithBody request with any body
	SPGetBudgetRulesRecommendationWithBody(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*http.Response, error)

	SPGetBudgetRulesRecommendationWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, body SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsCampaignsWithBody request with any body
	DeleteSponsoredProductsCampaignsWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, body DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error)

	// GetBudgetRecommendationWithBody request with any body
	GetBudgetRecommendationWithBody(ctx context.Context, params *GetBudgetRecommendationParams, contentType string, body io.Reader) (*http.Response, error)

	GetBudgetRecommendationWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationParams, body GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsCampaignsWithBody request with any body
	ListSponsoredProductsCampaignsWithBody(ctx context.Context, params *ListSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignsParams, body ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error)

	// ListAssociatedBudgetRulesForSPCampaigns request
	ListAssociatedBudgetRulesForSPCampaigns(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSPCampaignsParams) (*http.Response, error)

	// CreateAssociatedBudgetRulesForSPCampaignsWithBody request with any body
	CreateAssociatedBudgetRulesForSPCampaignsWithBody(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateAssociatedBudgetRulesForSPCampaigns(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, body CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error)

	// GetRuleBasedBudgetHistoryForSPCampaigns request
	GetRuleBasedBudgetHistoryForSPCampaigns(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSPCampaignsParams) (*http.Response, error)

	// DisassociateAssociatedBudgetRuleForSPCampaigns request
	DisassociateAssociatedBudgetRuleForSPCampaigns(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSPCampaignsParams) (*http.Response, error)

	// CreateSponsoredProductsKeywordsWithBody request with any body
	CreateSponsoredProductsKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, body CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsKeywordsWithBody request with any body
	UpdateSponsoredProductsKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, body UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsKeywordsWithBody request with any body
	DeleteSponsoredProductsKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, body DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsKeywordsWithBody request with any body
	ListSponsoredProductsKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsKeywordsParams, body ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// CreateSponsoredProductsNegativeKeywordsWithBody request with any body
	CreateSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, body CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsNegativeKeywordsWithBody request with any body
	UpdateSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, body UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsNegativeKeywordsWithBody request with any body
	DeleteSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, body DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsNegativeKeywordsWithBody request with any body
	ListSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, body ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error)

	// CreateSponsoredProductsNegativeTargetingClausesWithBody request with any body
	CreateSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, body CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsNegativeTargetingClausesWithBody request with any body
	UpdateSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, body UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// GetNegativeBrands request
	GetNegativeBrands(ctx context.Context, params *GetNegativeBrandsParams) (*http.Response, error)

	// SearchBrandsWithBody request with any body
	SearchBrandsWithBody(ctx context.Context, params *SearchBrandsParams, contentType string, body io.Reader) (*http.Response, error)

	SearchBrandsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *SearchBrandsParams, body SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsNegativeTargetingClausesWithBody request with any body
	DeleteSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, body DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsNegativeTargetingClausesWithBody request with any body
	ListSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, body ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// CreateSponsoredProductsProductAdsWithBody request with any body
	CreateSponsoredProductsProductAdsWithBody(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, body CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsProductAdsWithBody request with any body
	UpdateSponsoredProductsProductAdsWithBody(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, body UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteSponsoredProductsProductAdsWithBody request with any body
	DeleteSponsoredProductsProductAdsWithBody(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, body DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsProductAdsWithBody request with any body
	ListSponsoredProductsProductAdsWithBody(ctx context.Context, params *ListSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsProductAdsParams, body ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error)

	// CreateOptimizationRuleWithBody request with any body
	CreateOptimizationRuleWithBody(ctx context.Context, params *CreateOptimizationRuleParams, contentType string, body io.Reader) (*http.Response, error)

	CreateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *CreateOptimizationRuleParams, body CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error)

	// UpdateOptimizationRuleWithBody request with any body
	UpdateOptimizationRuleWithBody(ctx context.Context, params *UpdateOptimizationRuleParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *UpdateOptimizationRuleParams, body UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error)

	// GetOptimizationRuleEligibilityWithBody request with any body
	GetOptimizationRuleEligibilityWithBody(ctx context.Context, params *GetOptimizationRuleEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	GetOptimizationRuleEligibilityWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *GetOptimizationRuleEligibilityParams, body GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error)

	// GetRuleNotificationWithBody request with any body
	GetRuleNotificationWithBody(ctx context.Context, params *GetRuleNotificationParams, contentType string, body io.Reader) (*http.Response, error)

	GetRuleNotificationWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *GetRuleNotificationParams, body GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error)

	// DeleteCampaignOptimizationRule request
	DeleteCampaignOptimizationRule(ctx context.Context, campaignOptimizationId string, params *DeleteCampaignOptimizationRuleParams) (*http.Response, error)

	// GetCampaignOptimizationRule request
	GetCampaignOptimizationRule(ctx context.Context, campaignOptimizationId string, params *GetCampaignOptimizationRuleParams) (*http.Response, error)

	// CreateSponsoredProductsTargetingClausesWithBody request with any body
	CreateSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, body CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateSponsoredProductsTargetingClausesWithBody request with any body
	UpdateSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, body UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// GetThemeBasedBidRecommendationForAdGroupV1WithBody request with any body
	GetThemeBasedBidRecommendationForAdGroupV1WithBody(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, contentType string, body io.Reader) (*http.Response, error)

	GetThemeBasedBidRecommendationForAdGroupV1WithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, body GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody) (*http.Response, error)

	// GetTargetableCategories request
	GetTargetableCategories(ctx context.Context, params *GetTargetableCategoriesParams) (*http.Response, error)

	// GetCategoryRecommendationsForASINsWithBody request with any body
	GetCategoryRecommendationsForASINsWithBody(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, contentType string, body io.Reader) (*http.Response, error)

	GetCategoryRecommendationsForASINsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, body GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error)

	// GetRefinementsForCategory request
	GetRefinementsForCategory(ctx context.Context, categoryId string, params *GetRefinementsForCategoryParams) (*http.Response, error)

	// DeleteSponsoredProductsTargetingClausesWithBody request with any body
	DeleteSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	DeleteSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, body DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// GetRankedKeywordRecommendationWithBody request with any body
	GetRankedKeywordRecommendationWithBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, contentType string, body io.Reader) (*http.Response, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody) (*http.Response, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody) (*http.Response, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody) (*http.Response, error)

	// ListSponsoredProductsTargetingClausesWithBody request with any body
	ListSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error)

	ListSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, body ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error)

	// GetTargetableASINCountsWithBody request with any body
	GetTargetableASINCountsWithBody(ctx context.Context, params *GetTargetableASINCountsParams, contentType string, body io.Reader) (*http.Response, error)

	GetTargetableASINCountsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *GetTargetableASINCountsParams, body GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error)

	// GetProductRecommendationsWithBody request with any body
	GetProductRecommendationsWithBody(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	GetProductRecommendationsWithApplicationVndSpproductrecommendationV3PlusJSONBody(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) CreateSponsoredProductsAdGroupsWithBody(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, body CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsAdGroupsWithBody(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, body UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsAdGroupsWithBody(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, body DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsAdGroupsWithBody(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsAdGroupsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, body ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSPBudgetRulesForAdvertiser(ctx context.Context, params *GetSPBudgetRulesForAdvertiserParams) (*http.Response, error) {
	req, err := NewGetSPBudgetRulesForAdvertiserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateBudgetRulesForSPCampaignsWithBody(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSPCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateBudgetRulesForSPCampaigns(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, body CreateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateBudgetRulesForSPCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateBudgetRulesForSPCampaignsWithBody(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSPCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateBudgetRulesForSPCampaigns(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, body UpdateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateBudgetRulesForSPCampaignsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBudgetRuleByRuleIdForSPCampaigns(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSPCampaignsParams) (*http.Response, error) {
	req, err := NewGetBudgetRuleByRuleIdForSPCampaignsRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCampaignsAssociatedWithSPBudgetRule(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSPBudgetRuleParams) (*http.Response, error) {
	req, err := NewGetCampaignsAssociatedWithSPBudgetRuleRequest(c.Server, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCampaignRecommendations(ctx context.Context, params *GetCampaignRecommendationsParams) (*http.Response, error) {
	req, err := NewGetCampaignRecommendationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, body CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, body UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, body DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignNegativeKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, body ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, body CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, body UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, body DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, body ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignsWithBody(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, body CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignsWithBody(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, body UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SpCampaignsBudgetUsageWithBody(ctx context.Context, params *SpCampaignsBudgetUsageParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSpCampaignsBudgetUsageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SpCampaignsBudgetUsageWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody(ctx context.Context, params *SpCampaignsBudgetUsageParams, body SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSpCampaignsBudgetUsageRequestWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBudgetRecommendationsWithBody(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBudgetRecommendationsWithApplicationVndBudgetrecommendationV3PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationsRequestWithApplicationVndBudgetrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SPGetBudgetRulesRecommendationWithBody(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSPGetBudgetRulesRecommendationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SPGetBudgetRulesRecommendationWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, body SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSPGetBudgetRulesRecommendationRequestWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignsWithBody(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, body DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBudgetRecommendationWithBody(ctx context.Context, params *GetBudgetRecommendationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBudgetRecommendationWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody(ctx context.Context, params *GetBudgetRecommendationParams, body GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetBudgetRecommendationRequestWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignsWithBody(ctx context.Context, params *ListSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsCampaignsParams, body ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListAssociatedBudgetRulesForSPCampaigns(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSPCampaignsParams) (*http.Response, error) {
	req, err := NewListAssociatedBudgetRulesForSPCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAssociatedBudgetRulesForSPCampaignsWithBody(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSPCampaignsRequestWithBody(c.Server, campaignId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAssociatedBudgetRulesForSPCampaigns(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, body CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateAssociatedBudgetRulesForSPCampaignsRequest(c.Server, campaignId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRuleBasedBudgetHistoryForSPCampaigns(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSPCampaignsParams) (*http.Response, error) {
	req, err := NewGetRuleBasedBudgetHistoryForSPCampaignsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DisassociateAssociatedBudgetRuleForSPCampaigns(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSPCampaignsParams) (*http.Response, error) {
	req, err := NewDisassociateAssociatedBudgetRuleForSPCampaignsRequest(c.Server, campaignId, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, body CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, body UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, body DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsKeywordsParams, body ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, body CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, body UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, body DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsNegativeKeywordsWithBody(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, body ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, body CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, body UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetNegativeBrands(ctx context.Context, params *GetNegativeBrandsParams) (*http.Response, error) {
	req, err := NewGetNegativeBrandsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SearchBrandsWithBody(ctx context.Context, params *SearchBrandsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSearchBrandsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SearchBrandsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *SearchBrandsParams, body SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSearchBrandsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, body DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsNegativeTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsNegativeTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, body ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsProductAdsWithBody(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsProductAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, body CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsProductAdsWithBody(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsProductAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, body UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsProductAdsWithBody(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsProductAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, body DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsProductAdsWithBody(ctx context.Context, params *ListSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsProductAdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsProductAdsParams, body ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOptimizationRuleWithBody(ctx context.Context, params *CreateOptimizationRuleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateOptimizationRuleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *CreateOptimizationRuleParams, body CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOptimizationRuleWithBody(ctx context.Context, params *UpdateOptimizationRuleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateOptimizationRuleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *UpdateOptimizationRuleParams, body UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOptimizationRuleEligibilityWithBody(ctx context.Context, params *GetOptimizationRuleEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetOptimizationRuleEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOptimizationRuleEligibilityWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *GetOptimizationRuleEligibilityParams, body GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetOptimizationRuleEligibilityRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRuleNotificationWithBody(ctx context.Context, params *GetRuleNotificationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetRuleNotificationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRuleNotificationWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx context.Context, params *GetRuleNotificationParams, body GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRuleNotificationRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteCampaignOptimizationRule(ctx context.Context, campaignOptimizationId string, params *DeleteCampaignOptimizationRuleParams) (*http.Response, error) {
	req, err := NewDeleteCampaignOptimizationRuleRequest(c.Server, campaignOptimizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCampaignOptimizationRule(ctx context.Context, campaignOptimizationId string, params *GetCampaignOptimizationRuleParams) (*http.Response, error) {
	req, err := NewGetCampaignOptimizationRuleRequest(c.Server, campaignOptimizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, body CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, body UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetThemeBasedBidRecommendationForAdGroupV1WithBody(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetThemeBasedBidRecommendationForAdGroupV1WithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, body GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTargetableCategories(ctx context.Context, params *GetTargetableCategoriesParams) (*http.Response, error) {
	req, err := NewGetTargetableCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCategoryRecommendationsForASINsWithBody(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetCategoryRecommendationsForASINsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCategoryRecommendationsForASINsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, body GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetCategoryRecommendationsForASINsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRefinementsForCategory(ctx context.Context, categoryId string, params *GetRefinementsForCategoryParams) (*http.Response, error) {
	req, err := NewGetRefinementsForCategoryRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, body DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRankedKeywordRecommendationWithBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetRankedKeywordRecommendationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsTargetingClausesWithBody(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListSponsoredProductsTargetingClausesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, body ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewListSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTargetableASINCountsWithBody(ctx context.Context, params *GetTargetableASINCountsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetTargetableASINCountsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTargetableASINCountsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx context.Context, params *GetTargetableASINCountsParams, body GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetTargetableASINCountsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductRecommendationsWithBody(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetProductRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductRecommendationsWithApplicationVndSpproductrecommendationV3PlusJSONBody(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetProductRecommendationsRequestWithApplicationVndSpproductrecommendationV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewCreateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody calls the generic CreateSponsoredProductsAdGroups builder with application/vnd.spAdGroup.v3+json body
func NewCreateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(server string, params *CreateSponsoredProductsAdGroupsParams, body CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsAdGroupsRequestWithBody(server, params, "application/vnd.spAdGroup.v3+json", bodyReader)
}

// NewCreateSponsoredProductsAdGroupsRequestWithBody generates requests for CreateSponsoredProductsAdGroups with any type of body
func NewCreateSponsoredProductsAdGroupsRequestWithBody(server string, params *CreateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/adGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody calls the generic UpdateSponsoredProductsAdGroups builder with application/vnd.spAdGroup.v3+json body
func NewUpdateSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(server string, params *UpdateSponsoredProductsAdGroupsParams, body UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsAdGroupsRequestWithBody(server, params, "application/vnd.spAdGroup.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsAdGroupsRequestWithBody generates requests for UpdateSponsoredProductsAdGroups with any type of body
func NewUpdateSponsoredProductsAdGroupsRequestWithBody(server string, params *UpdateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/adGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody calls the generic DeleteSponsoredProductsAdGroups builder with application/vnd.spAdGroup.v3+json body
func NewDeleteSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(server string, params *DeleteSponsoredProductsAdGroupsParams, body DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsAdGroupsRequestWithBody(server, params, "application/vnd.spAdGroup.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsAdGroupsRequestWithBody generates requests for DeleteSponsoredProductsAdGroups with any type of body
func NewDeleteSponsoredProductsAdGroupsRequestWithBody(server string, params *DeleteSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/adGroups/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody calls the generic ListSponsoredProductsAdGroups builder with application/vnd.spAdGroup.v3+json body
func NewListSponsoredProductsAdGroupsRequestWithApplicationVndSpAdGroupV3PlusJSONBody(server string, params *ListSponsoredProductsAdGroupsParams, body ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsAdGroupsRequestWithBody(server, params, "application/vnd.spAdGroup.v3+json", bodyReader)
}

// NewListSponsoredProductsAdGroupsRequestWithBody generates requests for ListSponsoredProductsAdGroups with any type of body
func NewListSponsoredProductsAdGroupsRequestWithBody(server string, params *ListSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/adGroups/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSPBudgetRulesForAdvertiserRequest generates requests for GetSPBudgetRulesForAdvertiser
func NewGetSPBudgetRulesForAdvertiserRequest(server string, params *GetSPBudgetRulesForAdvertiserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateBudgetRulesForSPCampaignsRequest calls the generic CreateBudgetRulesForSPCampaigns builder with application/json body
func NewCreateBudgetRulesForSPCampaignsRequest(server string, params *CreateBudgetRulesForSPCampaignsParams, body CreateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBudgetRulesForSPCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBudgetRulesForSPCampaignsRequestWithBody generates requests for CreateBudgetRulesForSPCampaigns with any type of body
func NewCreateBudgetRulesForSPCampaignsRequestWithBody(server string, params *CreateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateBudgetRulesForSPCampaignsRequest calls the generic UpdateBudgetRulesForSPCampaigns builder with application/json body
func NewUpdateBudgetRulesForSPCampaignsRequest(server string, params *UpdateBudgetRulesForSPCampaignsParams, body UpdateBudgetRulesForSPCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBudgetRulesForSPCampaignsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateBudgetRulesForSPCampaignsRequestWithBody generates requests for UpdateBudgetRulesForSPCampaigns with any type of body
func NewUpdateBudgetRulesForSPCampaignsRequestWithBody(server string, params *UpdateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/budgetRules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRuleByRuleIdForSPCampaignsRequest generates requests for GetBudgetRuleByRuleIdForSPCampaigns
func NewGetBudgetRuleByRuleIdForSPCampaignsRequest(server string, budgetRuleId string, params *GetBudgetRuleByRuleIdForSPCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/budgetRules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignsAssociatedWithSPBudgetRuleRequest generates requests for GetCampaignsAssociatedWithSPBudgetRule
func NewGetCampaignsAssociatedWithSPBudgetRuleRequest(server string, budgetRuleId string, params *GetCampaignsAssociatedWithSPBudgetRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/budgetRules/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignRecommendationsRequest generates requests for GetCampaignRecommendations
func NewGetCampaignRecommendationsRequest(server string, params *GetCampaignRecommendationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaign/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody calls the generic CreateSponsoredProductsCampaignNegativeKeywords builder with application/vnd.spCampaignNegativeKeyword.v3+json body
func NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(server string, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, body CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server, params, "application/vnd.spCampaignNegativeKeyword.v3+json", bodyReader)
}

// NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithBody generates requests for CreateSponsoredProductsCampaignNegativeKeywords with any type of body
func NewCreateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server string, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody calls the generic UpdateSponsoredProductsCampaignNegativeKeywords builder with application/vnd.spCampaignNegativeKeyword.v3+json body
func NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(server string, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, body UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server, params, "application/vnd.spCampaignNegativeKeyword.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithBody generates requests for UpdateSponsoredProductsCampaignNegativeKeywords with any type of body
func NewUpdateSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server string, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody calls the generic DeleteSponsoredProductsCampaignNegativeKeywords builder with application/vnd.spCampaignNegativeKeyword.v3+json body
func NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(server string, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, body DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server, params, "application/vnd.spCampaignNegativeKeyword.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithBody generates requests for DeleteSponsoredProductsCampaignNegativeKeywords with any type of body
func NewDeleteSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server string, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeKeywords/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody calls the generic ListSponsoredProductsCampaignNegativeKeywords builder with application/vnd.spCampaignNegativeKeyword.v3+json body
func NewListSponsoredProductsCampaignNegativeKeywordsRequestWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(server string, params *ListSponsoredProductsCampaignNegativeKeywordsParams, body ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server, params, "application/vnd.spCampaignNegativeKeyword.v3+json", bodyReader)
}

// NewListSponsoredProductsCampaignNegativeKeywordsRequestWithBody generates requests for ListSponsoredProductsCampaignNegativeKeywords with any type of body
func NewListSponsoredProductsCampaignNegativeKeywordsRequestWithBody(server string, params *ListSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeKeywords/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody calls the generic CreateSponsoredProductsCampaignNegativeTargetingClauses builder with application/vnd.spCampaignNegativeTargetingClause.v3+json body
func NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(server string, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, body CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spCampaignNegativeTargetingClause.v3+json", bodyReader)
}

// NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody generates requests for CreateSponsoredProductsCampaignNegativeTargetingClauses with any type of body
func NewCreateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server string, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody calls the generic UpdateSponsoredProductsCampaignNegativeTargetingClauses builder with application/vnd.spCampaignNegativeTargetingClause.v3+json body
func NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(server string, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, body UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spCampaignNegativeTargetingClause.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody generates requests for UpdateSponsoredProductsCampaignNegativeTargetingClauses with any type of body
func NewUpdateSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server string, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody calls the generic DeleteSponsoredProductsCampaignNegativeTargetingClauses builder with application/vnd.spCampaignNegativeTargetingClause.v3+json body
func NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(server string, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, body DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spCampaignNegativeTargetingClause.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody generates requests for DeleteSponsoredProductsCampaignNegativeTargetingClauses with any type of body
func NewDeleteSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server string, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeTargets/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody calls the generic ListSponsoredProductsCampaignNegativeTargetingClauses builder with application/vnd.spCampaignNegativeTargetingClause.v3+json body
func NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(server string, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, body ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spCampaignNegativeTargetingClause.v3+json", bodyReader)
}

// NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody generates requests for ListSponsoredProductsCampaignNegativeTargetingClauses with any type of body
func NewListSponsoredProductsCampaignNegativeTargetingClausesRequestWithBody(server string, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaignNegativeTargets/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody calls the generic CreateSponsoredProductsCampaigns builder with application/vnd.spCampaign.v3+json body
func NewCreateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(server string, params *CreateSponsoredProductsCampaignsParams, body CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsCampaignsRequestWithBody(server, params, "application/vnd.spCampaign.v3+json", bodyReader)
}

// NewCreateSponsoredProductsCampaignsRequestWithBody generates requests for CreateSponsoredProductsCampaigns with any type of body
func NewCreateSponsoredProductsCampaignsRequestWithBody(server string, params *CreateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody calls the generic UpdateSponsoredProductsCampaigns builder with application/vnd.spCampaign.v3+json body
func NewUpdateSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(server string, params *UpdateSponsoredProductsCampaignsParams, body UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsCampaignsRequestWithBody(server, params, "application/vnd.spCampaign.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsCampaignsRequestWithBody generates requests for UpdateSponsoredProductsCampaigns with any type of body
func NewUpdateSponsoredProductsCampaignsRequestWithBody(server string, params *UpdateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewSpCampaignsBudgetUsageRequestWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody calls the generic SpCampaignsBudgetUsage builder with application/vnd.spcampaignbudgetusage.v1+json body
func NewSpCampaignsBudgetUsageRequestWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody(server string, params *SpCampaignsBudgetUsageParams, body SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpCampaignsBudgetUsageRequestWithBody(server, params, "application/vnd.spcampaignbudgetusage.v1+json", bodyReader)
}

// NewSpCampaignsBudgetUsageRequestWithBody generates requests for SpCampaignsBudgetUsage with any type of body
func NewSpCampaignsBudgetUsageRequestWithBody(server string, params *SpCampaignsBudgetUsageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/budget/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRecommendationsRequestWithApplicationVndBudgetrecommendationV3PlusJSONBody calls the generic GetBudgetRecommendations builder with application/vnd.budgetrecommendation.v3+json body
func NewGetBudgetRecommendationsRequestWithApplicationVndBudgetrecommendationV3PlusJSONBody(server string, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBudgetRecommendationsRequestWithBody(server, params, "application/vnd.budgetrecommendation.v3+json", bodyReader)
}

// NewGetBudgetRecommendationsRequestWithBody generates requests for GetBudgetRecommendations with any type of body
func NewGetBudgetRecommendationsRequestWithBody(server string, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/budgetRecommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSPGetBudgetRulesRecommendationRequestWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody calls the generic SPGetBudgetRulesRecommendation builder with application/vnd.spbudgetrulesrecommendation.v3+json body
func NewSPGetBudgetRulesRecommendationRequestWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody(server string, params *SPGetBudgetRulesRecommendationParams, body SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSPGetBudgetRulesRecommendationRequestWithBody(server, params, "application/vnd.spbudgetrulesrecommendation.v3+json", bodyReader)
}

// NewSPGetBudgetRulesRecommendationRequestWithBody generates requests for SPGetBudgetRulesRecommendation with any type of body
func NewSPGetBudgetRulesRecommendationRequestWithBody(server string, params *SPGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/budgetRules/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody calls the generic DeleteSponsoredProductsCampaigns builder with application/vnd.spCampaign.v3+json body
func NewDeleteSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(server string, params *DeleteSponsoredProductsCampaignsParams, body DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsCampaignsRequestWithBody(server, params, "application/vnd.spCampaign.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsCampaignsRequestWithBody generates requests for DeleteSponsoredProductsCampaigns with any type of body
func NewDeleteSponsoredProductsCampaignsRequestWithBody(server string, params *DeleteSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBudgetRecommendationRequestWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody calls the generic GetBudgetRecommendation builder with application/vnd.spinitialbudgetrecommendation.v3.4+json body
func NewGetBudgetRecommendationRequestWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody(server string, params *GetBudgetRecommendationParams, body GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBudgetRecommendationRequestWithBody(server, params, "application/vnd.spinitialbudgetrecommendation.v3.4+json", bodyReader)
}

// NewGetBudgetRecommendationRequestWithBody generates requests for GetBudgetRecommendation with any type of body
func NewGetBudgetRecommendationRequestWithBody(server string, params *GetBudgetRecommendationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/initialBudgetRecommendation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody calls the generic ListSponsoredProductsCampaigns builder with application/vnd.spCampaign.v3+json body
func NewListSponsoredProductsCampaignsRequestWithApplicationVndSpCampaignV3PlusJSONBody(server string, params *ListSponsoredProductsCampaignsParams, body ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsCampaignsRequestWithBody(server, params, "application/vnd.spCampaign.v3+json", bodyReader)
}

// NewListSponsoredProductsCampaignsRequestWithBody generates requests for ListSponsoredProductsCampaigns with any type of body
func NewListSponsoredProductsCampaignsRequestWithBody(server string, params *ListSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAssociatedBudgetRulesForSPCampaignsRequest generates requests for ListAssociatedBudgetRulesForSPCampaigns
func NewListAssociatedBudgetRulesForSPCampaignsRequest(server string, campaignId int64, params *ListAssociatedBudgetRulesForSPCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateAssociatedBudgetRulesForSPCampaignsRequest calls the generic CreateAssociatedBudgetRulesForSPCampaigns builder with application/json body
func NewCreateAssociatedBudgetRulesForSPCampaignsRequest(server string, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, body CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssociatedBudgetRulesForSPCampaignsRequestWithBody(server, campaignId, params, "application/json", bodyReader)
}

// NewCreateAssociatedBudgetRulesForSPCampaignsRequestWithBody generates requests for CreateAssociatedBudgetRulesForSPCampaigns with any type of body
func NewCreateAssociatedBudgetRulesForSPCampaignsRequestWithBody(server string, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/%s/budgetRules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRuleBasedBudgetHistoryForSPCampaignsRequest generates requests for GetRuleBasedBudgetHistoryForSPCampaigns
func NewGetRuleBasedBudgetHistoryForSPCampaignsRequest(server string, campaignId int64, params *GetRuleBasedBudgetHistoryForSPCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/%s/budgetRules/budgetHistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDisassociateAssociatedBudgetRuleForSPCampaignsRequest generates requests for DisassociateAssociatedBudgetRuleForSPCampaigns
func NewDisassociateAssociatedBudgetRuleForSPCampaignsRequest(server string, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSPCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "budgetRuleId", runtime.ParamLocationPath, budgetRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/campaigns/%s/budgetRules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody calls the generic CreateSponsoredProductsKeywords builder with application/vnd.spKeyword.v3+json body
func NewCreateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(server string, params *CreateSponsoredProductsKeywordsParams, body CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsKeywordsRequestWithBody(server, params, "application/vnd.spKeyword.v3+json", bodyReader)
}

// NewCreateSponsoredProductsKeywordsRequestWithBody generates requests for CreateSponsoredProductsKeywords with any type of body
func NewCreateSponsoredProductsKeywordsRequestWithBody(server string, params *CreateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody calls the generic UpdateSponsoredProductsKeywords builder with application/vnd.spKeyword.v3+json body
func NewUpdateSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(server string, params *UpdateSponsoredProductsKeywordsParams, body UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsKeywordsRequestWithBody(server, params, "application/vnd.spKeyword.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsKeywordsRequestWithBody generates requests for UpdateSponsoredProductsKeywords with any type of body
func NewUpdateSponsoredProductsKeywordsRequestWithBody(server string, params *UpdateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody calls the generic DeleteSponsoredProductsKeywords builder with application/vnd.spKeyword.v3+json body
func NewDeleteSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(server string, params *DeleteSponsoredProductsKeywordsParams, body DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsKeywordsRequestWithBody(server, params, "application/vnd.spKeyword.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsKeywordsRequestWithBody generates requests for DeleteSponsoredProductsKeywords with any type of body
func NewDeleteSponsoredProductsKeywordsRequestWithBody(server string, params *DeleteSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/keywords/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody calls the generic ListSponsoredProductsKeywords builder with application/vnd.spKeyword.v3+json body
func NewListSponsoredProductsKeywordsRequestWithApplicationVndSpKeywordV3PlusJSONBody(server string, params *ListSponsoredProductsKeywordsParams, body ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsKeywordsRequestWithBody(server, params, "application/vnd.spKeyword.v3+json", bodyReader)
}

// NewListSponsoredProductsKeywordsRequestWithBody generates requests for ListSponsoredProductsKeywords with any type of body
func NewListSponsoredProductsKeywordsRequestWithBody(server string, params *ListSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/keywords/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody calls the generic CreateSponsoredProductsNegativeKeywords builder with application/vnd.spNegativeKeyword.v3+json body
func NewCreateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(server string, params *CreateSponsoredProductsNegativeKeywordsParams, body CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsNegativeKeywordsRequestWithBody(server, params, "application/vnd.spNegativeKeyword.v3+json", bodyReader)
}

// NewCreateSponsoredProductsNegativeKeywordsRequestWithBody generates requests for CreateSponsoredProductsNegativeKeywords with any type of body
func NewCreateSponsoredProductsNegativeKeywordsRequestWithBody(server string, params *CreateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody calls the generic UpdateSponsoredProductsNegativeKeywords builder with application/vnd.spNegativeKeyword.v3+json body
func NewUpdateSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(server string, params *UpdateSponsoredProductsNegativeKeywordsParams, body UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsNegativeKeywordsRequestWithBody(server, params, "application/vnd.spNegativeKeyword.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsNegativeKeywordsRequestWithBody generates requests for UpdateSponsoredProductsNegativeKeywords with any type of body
func NewUpdateSponsoredProductsNegativeKeywordsRequestWithBody(server string, params *UpdateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody calls the generic DeleteSponsoredProductsNegativeKeywords builder with application/vnd.spNegativeKeyword.v3+json body
func NewDeleteSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(server string, params *DeleteSponsoredProductsNegativeKeywordsParams, body DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsNegativeKeywordsRequestWithBody(server, params, "application/vnd.spNegativeKeyword.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsNegativeKeywordsRequestWithBody generates requests for DeleteSponsoredProductsNegativeKeywords with any type of body
func NewDeleteSponsoredProductsNegativeKeywordsRequestWithBody(server string, params *DeleteSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeKeywords/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody calls the generic ListSponsoredProductsNegativeKeywords builder with application/vnd.spNegativeKeyword.v3+json body
func NewListSponsoredProductsNegativeKeywordsRequestWithApplicationVndSpNegativeKeywordV3PlusJSONBody(server string, params *ListSponsoredProductsNegativeKeywordsParams, body ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsNegativeKeywordsRequestWithBody(server, params, "application/vnd.spNegativeKeyword.v3+json", bodyReader)
}

// NewListSponsoredProductsNegativeKeywordsRequestWithBody generates requests for ListSponsoredProductsNegativeKeywords with any type of body
func NewListSponsoredProductsNegativeKeywordsRequestWithBody(server string, params *ListSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeKeywords/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody calls the generic CreateSponsoredProductsNegativeTargetingClauses builder with application/vnd.spNegativeTargetingClause.v3+json body
func NewCreateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(server string, params *CreateSponsoredProductsNegativeTargetingClausesParams, body CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spNegativeTargetingClause.v3+json", bodyReader)
}

// NewCreateSponsoredProductsNegativeTargetingClausesRequestWithBody generates requests for CreateSponsoredProductsNegativeTargetingClauses with any type of body
func NewCreateSponsoredProductsNegativeTargetingClausesRequestWithBody(server string, params *CreateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody calls the generic UpdateSponsoredProductsNegativeTargetingClauses builder with application/vnd.spNegativeTargetingClause.v3+json body
func NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(server string, params *UpdateSponsoredProductsNegativeTargetingClausesParams, body UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spNegativeTargetingClause.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithBody generates requests for UpdateSponsoredProductsNegativeTargetingClauses with any type of body
func NewUpdateSponsoredProductsNegativeTargetingClausesRequestWithBody(server string, params *UpdateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewGetNegativeBrandsRequest generates requests for GetNegativeBrands
func NewGetNegativeBrandsRequest(server string, params *GetNegativeBrandsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets/brands/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewSearchBrandsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody calls the generic SearchBrands builder with application/vnd.spproducttargeting.v3+json body
func NewSearchBrandsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(server string, params *SearchBrandsParams, body SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchBrandsRequestWithBody(server, params, "application/vnd.spproducttargeting.v3+json", bodyReader)
}

// NewSearchBrandsRequestWithBody generates requests for SearchBrands with any type of body
func NewSearchBrandsRequestWithBody(server string, params *SearchBrandsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets/brands/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody calls the generic DeleteSponsoredProductsNegativeTargetingClauses builder with application/vnd.spNegativeTargetingClause.v3+json body
func NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(server string, params *DeleteSponsoredProductsNegativeTargetingClausesParams, body DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spNegativeTargetingClause.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithBody generates requests for DeleteSponsoredProductsNegativeTargetingClauses with any type of body
func NewDeleteSponsoredProductsNegativeTargetingClausesRequestWithBody(server string, params *DeleteSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody calls the generic ListSponsoredProductsNegativeTargetingClauses builder with application/vnd.spNegativeTargetingClause.v3+json body
func NewListSponsoredProductsNegativeTargetingClausesRequestWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(server string, params *ListSponsoredProductsNegativeTargetingClausesParams, body ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsNegativeTargetingClausesRequestWithBody(server, params, "application/vnd.spNegativeTargetingClause.v3+json", bodyReader)
}

// NewListSponsoredProductsNegativeTargetingClausesRequestWithBody generates requests for ListSponsoredProductsNegativeTargetingClauses with any type of body
func NewListSponsoredProductsNegativeTargetingClausesRequestWithBody(server string, params *ListSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/negativeTargets/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody calls the generic CreateSponsoredProductsProductAds builder with application/vnd.spProductAd.v3+json body
func NewCreateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(server string, params *CreateSponsoredProductsProductAdsParams, body CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsProductAdsRequestWithBody(server, params, "application/vnd.spProductAd.v3+json", bodyReader)
}

// NewCreateSponsoredProductsProductAdsRequestWithBody generates requests for CreateSponsoredProductsProductAds with any type of body
func NewCreateSponsoredProductsProductAdsRequestWithBody(server string, params *CreateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/productAds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody calls the generic UpdateSponsoredProductsProductAds builder with application/vnd.spProductAd.v3+json body
func NewUpdateSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(server string, params *UpdateSponsoredProductsProductAdsParams, body UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsProductAdsRequestWithBody(server, params, "application/vnd.spProductAd.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsProductAdsRequestWithBody generates requests for UpdateSponsoredProductsProductAds with any type of body
func NewUpdateSponsoredProductsProductAdsRequestWithBody(server string, params *UpdateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/productAds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody calls the generic DeleteSponsoredProductsProductAds builder with application/vnd.spProductAd.v3+json body
func NewDeleteSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(server string, params *DeleteSponsoredProductsProductAdsParams, body DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsProductAdsRequestWithBody(server, params, "application/vnd.spProductAd.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsProductAdsRequestWithBody generates requests for DeleteSponsoredProductsProductAds with any type of body
func NewDeleteSponsoredProductsProductAdsRequestWithBody(server string, params *DeleteSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/productAds/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody calls the generic ListSponsoredProductsProductAds builder with application/vnd.spProductAd.v3+json body
func NewListSponsoredProductsProductAdsRequestWithApplicationVndSpProductAdV3PlusJSONBody(server string, params *ListSponsoredProductsProductAdsParams, body ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsProductAdsRequestWithBody(server, params, "application/vnd.spProductAd.v3+json", bodyReader)
}

// NewListSponsoredProductsProductAdsRequestWithBody generates requests for ListSponsoredProductsProductAds with any type of body
func NewListSponsoredProductsProductAdsRequestWithBody(server string, params *ListSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/productAds/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody calls the generic CreateOptimizationRule builder with application/vnd.optimizationrules.v1+json body
func NewCreateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(server string, params *CreateOptimizationRuleParams, body CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOptimizationRuleRequestWithBody(server, params, "application/vnd.optimizationrules.v1+json", bodyReader)
}

// NewCreateOptimizationRuleRequestWithBody generates requests for CreateOptimizationRule with any type of body
func NewCreateOptimizationRuleRequestWithBody(server string, params *CreateOptimizationRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody calls the generic UpdateOptimizationRule builder with application/vnd.optimizationrules.v1+json body
func NewUpdateOptimizationRuleRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(server string, params *UpdateOptimizationRuleParams, body UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOptimizationRuleRequestWithBody(server, params, "application/vnd.optimizationrules.v1+json", bodyReader)
}

// NewUpdateOptimizationRuleRequestWithBody generates requests for UpdateOptimizationRule with any type of body
func NewUpdateOptimizationRuleRequestWithBody(server string, params *UpdateOptimizationRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetOptimizationRuleEligibilityRequestWithApplicationVndOptimizationrulesV1PlusJSONBody calls the generic GetOptimizationRuleEligibility builder with application/vnd.optimizationrules.v1+json body
func NewGetOptimizationRuleEligibilityRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(server string, params *GetOptimizationRuleEligibilityParams, body GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOptimizationRuleEligibilityRequestWithBody(server, params, "application/vnd.optimizationrules.v1+json", bodyReader)
}

// NewGetOptimizationRuleEligibilityRequestWithBody generates requests for GetOptimizationRuleEligibility with any type of body
func NewGetOptimizationRuleEligibilityRequestWithBody(server string, params *GetOptimizationRuleEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization/eligibility")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRuleNotificationRequestWithApplicationVndOptimizationrulesV1PlusJSONBody calls the generic GetRuleNotification builder with application/vnd.optimizationrules.v1+json body
func NewGetRuleNotificationRequestWithApplicationVndOptimizationrulesV1PlusJSONBody(server string, params *GetRuleNotificationParams, body GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRuleNotificationRequestWithBody(server, params, "application/vnd.optimizationrules.v1+json", bodyReader)
}

// NewGetRuleNotificationRequestWithBody generates requests for GetRuleNotification with any type of body
func NewGetRuleNotificationRequestWithBody(server string, params *GetRuleNotificationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteCampaignOptimizationRuleRequest generates requests for DeleteCampaignOptimizationRule
func NewDeleteCampaignOptimizationRuleRequest(server string, campaignOptimizationId string, params *DeleteCampaignOptimizationRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignOptimizationId", runtime.ParamLocationPath, campaignOptimizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignOptimizationRuleRequest generates requests for GetCampaignOptimizationRule
func NewGetCampaignOptimizationRuleRequest(server string, campaignOptimizationId string, params *GetCampaignOptimizationRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignOptimizationId", runtime.ParamLocationPath, campaignOptimizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/rules/campaignOptimization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody calls the generic CreateSponsoredProductsTargetingClauses builder with application/vnd.spTargetingClause.v3+json body
func NewCreateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(server string, params *CreateSponsoredProductsTargetingClausesParams, body CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSponsoredProductsTargetingClausesRequestWithBody(server, params, "application/vnd.spTargetingClause.v3+json", bodyReader)
}

// NewCreateSponsoredProductsTargetingClausesRequestWithBody generates requests for CreateSponsoredProductsTargetingClauses with any type of body
func NewCreateSponsoredProductsTargetingClausesRequestWithBody(server string, params *CreateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewUpdateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody calls the generic UpdateSponsoredProductsTargetingClauses builder with application/vnd.spTargetingClause.v3+json body
func NewUpdateSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(server string, params *UpdateSponsoredProductsTargetingClausesParams, body UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSponsoredProductsTargetingClausesRequestWithBody(server, params, "application/vnd.spTargetingClause.v3+json", bodyReader)
}

// NewUpdateSponsoredProductsTargetingClausesRequestWithBody generates requests for UpdateSponsoredProductsTargetingClauses with any type of body
func NewUpdateSponsoredProductsTargetingClausesRequestWithBody(server string, params *UpdateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody calls the generic GetThemeBasedBidRecommendationForAdGroupV1 builder with application/vnd.spthemebasedbidrecommendation.v3+json body
func NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody(server string, params *GetThemeBasedBidRecommendationForAdGroupV1Params, body GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithBody(server, params, "application/vnd.spthemebasedbidrecommendation.v3+json", bodyReader)
}

// NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithBody generates requests for GetThemeBasedBidRecommendationForAdGroupV1 with any type of body
func NewGetThemeBasedBidRecommendationForAdGroupV1RequestWithBody(server string, params *GetThemeBasedBidRecommendationForAdGroupV1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/bid/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetTargetableCategoriesRequest generates requests for GetTargetableCategories
func NewGetTargetableCategoriesRequest(server string, params *GetTargetableCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewGetCategoryRecommendationsForASINsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody calls the generic GetCategoryRecommendationsForASINs builder with application/vnd.spproducttargeting.v3+json body
func NewGetCategoryRecommendationsForASINsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(server string, params *GetCategoryRecommendationsForASINsParams, body GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCategoryRecommendationsForASINsRequestWithBody(server, params, "application/vnd.spproducttargeting.v3+json", bodyReader)
}

// NewGetCategoryRecommendationsForASINsRequestWithBody generates requests for GetCategoryRecommendationsForASINs with any type of body
func NewGetCategoryRecommendationsForASINsRequestWithBody(server string, params *GetCategoryRecommendationsForASINsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/categories/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewGetRefinementsForCategoryRequest generates requests for GetRefinementsForCategory
func NewGetRefinementsForCategoryRequest(server string, categoryId string, params *GetRefinementsForCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/category/%s/refinements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewDeleteSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody calls the generic DeleteSponsoredProductsTargetingClauses builder with application/vnd.spTargetingClause.v3+json body
func NewDeleteSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(server string, params *DeleteSponsoredProductsTargetingClausesParams, body DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSponsoredProductsTargetingClausesRequestWithBody(server, params, "application/vnd.spTargetingClause.v3+json", bodyReader)
}

// NewDeleteSponsoredProductsTargetingClausesRequestWithBody generates requests for DeleteSponsoredProductsTargetingClauses with any type of body
func NewDeleteSponsoredProductsTargetingClausesRequestWithBody(server string, params *DeleteSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody calls the generic GetRankedKeywordRecommendation builder with application/vnd.spkeywordsrecommendation.v3+json body
func NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody(server string, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRankedKeywordRecommendationRequestWithBody(server, params, "application/vnd.spkeywordsrecommendation.v3+json", bodyReader)
}

// NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody calls the generic GetRankedKeywordRecommendation builder with application/vnd.spkeywordsrecommendation.v4+json body
func NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody(server string, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRankedKeywordRecommendationRequestWithBody(server, params, "application/vnd.spkeywordsrecommendation.v4+json", bodyReader)
}

// NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody calls the generic GetRankedKeywordRecommendation builder with application/vnd.spkeywordsrecommendation.v5+json body
func NewGetRankedKeywordRecommendationRequestWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody(server string, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRankedKeywordRecommendationRequestWithBody(server, params, "application/vnd.spkeywordsrecommendation.v5+json", bodyReader)
}

// NewGetRankedKeywordRecommendationRequestWithBody generates requests for GetRankedKeywordRecommendation with any type of body
func NewGetRankedKeywordRecommendationRequestWithBody(server string, params *GetRankedKeywordRecommendationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/keywords/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AmazonAdvertisingAPIMarketplaceId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-MarketplaceId", runtime.ParamLocationHeader, *params.AmazonAdvertisingAPIMarketplaceId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Amazon-Advertising-API-MarketplaceId", headerParam0)
		}

		if params.AmazonAdvertisingAPIAdvertiserId != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-AdvertiserId", runtime.ParamLocationHeader, *params.AmazonAdvertisingAPIAdvertiserId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Amazon-Advertising-API-AdvertiserId", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam2)

		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam3)

	}

	return req, nil
}

// NewListSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody calls the generic ListSponsoredProductsTargetingClauses builder with application/vnd.spTargetingClause.v3+json body
func NewListSponsoredProductsTargetingClausesRequestWithApplicationVndSpTargetingClauseV3PlusJSONBody(server string, params *ListSponsoredProductsTargetingClausesParams, body ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSponsoredProductsTargetingClausesRequestWithBody(server, params, "application/vnd.spTargetingClause.v3+json", bodyReader)
}

// NewListSponsoredProductsTargetingClausesRequestWithBody generates requests for ListSponsoredProductsTargetingClauses with any type of body
func NewListSponsoredProductsTargetingClausesRequestWithBody(server string, params *ListSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetTargetableASINCountsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody calls the generic GetTargetableASINCounts builder with application/vnd.spproducttargeting.v3+json body
func NewGetTargetableASINCountsRequestWithApplicationVndSpproducttargetingV3PlusJSONBody(server string, params *GetTargetableASINCountsParams, body GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetableASINCountsRequestWithBody(server, params, "application/vnd.spproducttargeting.v3+json", bodyReader)
}

// NewGetTargetableASINCountsRequestWithBody generates requests for GetTargetableASINCounts with any type of body
func NewGetTargetableASINCountsRequestWithBody(server string, params *GetTargetableASINCountsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/products/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewGetProductRecommendationsRequestWithApplicationVndSpproductrecommendationV3PlusJSONBody calls the generic GetProductRecommendations builder with application/vnd.spproductrecommendation.v3+json body
func NewGetProductRecommendationsRequestWithApplicationVndSpproductrecommendationV3PlusJSONBody(server string, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductRecommendationsRequestWithBody(server, params, "application/vnd.spproductrecommendation.v3+json", bodyReader)
}

// NewGetProductRecommendationsRequestWithBody generates requests for GetProductRecommendations with any type of body
func NewGetProductRecommendationsRequestWithBody(server string, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/targets/products/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AmazonAdvertisingAPIAdvertiserId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-AdvertiserId", runtime.ParamLocationHeader, *params.AmazonAdvertisingAPIAdvertiserId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Amazon-Advertising-API-AdvertiserId", headerParam0)
		}

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam2)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSponsoredProductsAdGroupsWithBodyWithResponse request with any body
	CreateSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*CreateSponsoredProductsAdGroupsResp, error)

	CreateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, body CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*CreateSponsoredProductsAdGroupsResp, error)

	// UpdateSponsoredProductsAdGroupsWithBodyWithResponse request with any body
	UpdateSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsAdGroupsResp, error)

	UpdateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, body UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*UpdateSponsoredProductsAdGroupsResp, error)

	// DeleteSponsoredProductsAdGroupsWithBodyWithResponse request with any body
	DeleteSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsAdGroupsResp, error)

	DeleteSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, body DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*DeleteSponsoredProductsAdGroupsResp, error)

	// ListSponsoredProductsAdGroupsWithBodyWithResponse request with any body
	ListSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*ListSponsoredProductsAdGroupsResp, error)

	ListSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, body ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*ListSponsoredProductsAdGroupsResp, error)

	// GetSPBudgetRulesForAdvertiserWithResponse request
	GetSPBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSPBudgetRulesForAdvertiserParams) (*GetSPBudgetRulesForAdvertiserResp, error)

	// CreateBudgetRulesForSPCampaignsWithBodyWithResponse request with any body
	CreateBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*CreateBudgetRulesForSPCampaignsResp, error)

	CreateBudgetRulesForSPCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, body CreateBudgetRulesForSPCampaignsJSONRequestBody) (*CreateBudgetRulesForSPCampaignsResp, error)

	// UpdateBudgetRulesForSPCampaignsWithBodyWithResponse request with any body
	UpdateBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*UpdateBudgetRulesForSPCampaignsResp, error)

	UpdateBudgetRulesForSPCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, body UpdateBudgetRulesForSPCampaignsJSONRequestBody) (*UpdateBudgetRulesForSPCampaignsResp, error)

	// GetBudgetRuleByRuleIdForSPCampaignsWithResponse request
	GetBudgetRuleByRuleIdForSPCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSPCampaignsParams) (*GetBudgetRuleByRuleIdForSPCampaignsResp, error)

	// GetCampaignsAssociatedWithSPBudgetRuleWithResponse request
	GetCampaignsAssociatedWithSPBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSPBudgetRuleParams) (*GetCampaignsAssociatedWithSPBudgetRuleResp, error)

	// GetCampaignRecommendationsWithResponse request
	GetCampaignRecommendationsWithResponse(ctx context.Context, params *GetCampaignRecommendationsParams) (*GetCampaignRecommendationsResp, error)

	// CreateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with any body
	CreateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignNegativeKeywordsResp, error)

	CreateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, body CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignNegativeKeywordsResp, error)

	// UpdateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with any body
	UpdateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignNegativeKeywordsResp, error)

	UpdateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, body UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignNegativeKeywordsResp, error)

	// DeleteSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with any body
	DeleteSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignNegativeKeywordsResp, error)

	DeleteSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, body DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignNegativeKeywordsResp, error)

	// ListSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with any body
	ListSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignNegativeKeywordsResp, error)

	ListSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, body ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignNegativeKeywordsResp, error)

	// CreateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with any body
	CreateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	CreateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, body CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	// UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with any body
	UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	UpdateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, body UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	// DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with any body
	DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	DeleteSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, body DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	// ListSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with any body
	ListSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	ListSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, body ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignNegativeTargetingClausesResp, error)

	// CreateSponsoredProductsCampaignsWithBodyWithResponse request with any body
	CreateSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignsResp, error)

	CreateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, body CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignsResp, error)

	// UpdateSponsoredProductsCampaignsWithBodyWithResponse request with any body
	UpdateSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignsResp, error)

	UpdateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, body UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignsResp, error)

	// SpCampaignsBudgetUsageWithBodyWithResponse request with any body
	SpCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SpCampaignsBudgetUsageParams, contentType string, body io.Reader) (*SpCampaignsBudgetUsageResp, error)

	SpCampaignsBudgetUsageWithApplicationVndSpcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SpCampaignsBudgetUsageParams, body SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody) (*SpCampaignsBudgetUsageResp, error)

	// GetBudgetRecommendationsWithBodyWithResponse request with any body
	GetBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*GetBudgetRecommendationsResp, error)

	GetBudgetRecommendationsWithApplicationVndBudgetrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody) (*GetBudgetRecommendationsResp, error)

	// SPGetBudgetRulesRecommendationWithBodyWithResponse request with any body
	SPGetBudgetRulesRecommendationWithBodyWithResponse(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*SPGetBudgetRulesRecommendationResp, error)

	SPGetBudgetRulesRecommendationWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, body SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody) (*SPGetBudgetRulesRecommendationResp, error)

	// DeleteSponsoredProductsCampaignsWithBodyWithResponse request with any body
	DeleteSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignsResp, error)

	DeleteSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, body DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignsResp, error)

	// GetBudgetRecommendationWithBodyWithResponse request with any body
	GetBudgetRecommendationWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationParams, contentType string, body io.Reader) (*GetBudgetRecommendationResp, error)

	GetBudgetRecommendationWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationParams, body GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody) (*GetBudgetRecommendationResp, error)

	// ListSponsoredProductsCampaignsWithBodyWithResponse request with any body
	ListSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignsResp, error)

	ListSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignsParams, body ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignsResp, error)

	// ListAssociatedBudgetRulesForSPCampaignsWithResponse request
	ListAssociatedBudgetRulesForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSPCampaignsParams) (*ListAssociatedBudgetRulesForSPCampaignsResp, error)

	// CreateAssociatedBudgetRulesForSPCampaignsWithBodyWithResponse request with any body
	CreateAssociatedBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*CreateAssociatedBudgetRulesForSPCampaignsResp, error)

	CreateAssociatedBudgetRulesForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, body CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody) (*CreateAssociatedBudgetRulesForSPCampaignsResp, error)

	// GetRuleBasedBudgetHistoryForSPCampaignsWithResponse request
	GetRuleBasedBudgetHistoryForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSPCampaignsParams) (*GetRuleBasedBudgetHistoryForSPCampaignsResp, error)

	// DisassociateAssociatedBudgetRuleForSPCampaignsWithResponse request
	DisassociateAssociatedBudgetRuleForSPCampaignsWithResponse(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSPCampaignsParams) (*DisassociateAssociatedBudgetRuleForSPCampaignsResp, error)

	// CreateSponsoredProductsKeywordsWithBodyWithResponse request with any body
	CreateSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsKeywordsResp, error)

	CreateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, body CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsKeywordsResp, error)

	// UpdateSponsoredProductsKeywordsWithBodyWithResponse request with any body
	UpdateSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsKeywordsResp, error)

	UpdateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, body UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsKeywordsResp, error)

	// DeleteSponsoredProductsKeywordsWithBodyWithResponse request with any body
	DeleteSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsKeywordsResp, error)

	DeleteSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, body DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsKeywordsResp, error)

	// ListSponsoredProductsKeywordsWithBodyWithResponse request with any body
	ListSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsKeywordsResp, error)

	ListSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsKeywordsParams, body ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsKeywordsResp, error)

	// CreateSponsoredProductsNegativeKeywordsWithBodyWithResponse request with any body
	CreateSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsNegativeKeywordsResp, error)

	CreateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, body CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsNegativeKeywordsResp, error)

	// UpdateSponsoredProductsNegativeKeywordsWithBodyWithResponse request with any body
	UpdateSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsNegativeKeywordsResp, error)

	UpdateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, body UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsNegativeKeywordsResp, error)

	// DeleteSponsoredProductsNegativeKeywordsWithBodyWithResponse request with any body
	DeleteSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsNegativeKeywordsResp, error)

	DeleteSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, body DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsNegativeKeywordsResp, error)

	// ListSponsoredProductsNegativeKeywordsWithBodyWithResponse request with any body
	ListSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsNegativeKeywordsResp, error)

	ListSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, body ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsNegativeKeywordsResp, error)

	// CreateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with any body
	CreateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsNegativeTargetingClausesResp, error)

	CreateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, body CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsNegativeTargetingClausesResp, error)

	// UpdateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with any body
	UpdateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsNegativeTargetingClausesResp, error)

	UpdateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, body UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsNegativeTargetingClausesResp, error)

	// GetNegativeBrandsWithResponse request
	GetNegativeBrandsWithResponse(ctx context.Context, params *GetNegativeBrandsParams) (*GetNegativeBrandsResp, error)

	// SearchBrandsWithBodyWithResponse request with any body
	SearchBrandsWithBodyWithResponse(ctx context.Context, params *SearchBrandsParams, contentType string, body io.Reader) (*SearchBrandsResp, error)

	SearchBrandsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *SearchBrandsParams, body SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*SearchBrandsResp, error)

	// DeleteSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with any body
	DeleteSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsNegativeTargetingClausesResp, error)

	DeleteSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, body DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsNegativeTargetingClausesResp, error)

	// ListSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with any body
	ListSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsNegativeTargetingClausesResp, error)

	ListSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, body ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsNegativeTargetingClausesResp, error)

	// CreateSponsoredProductsProductAdsWithBodyWithResponse request with any body
	CreateSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*CreateSponsoredProductsProductAdsResp, error)

	CreateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, body CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*CreateSponsoredProductsProductAdsResp, error)

	// UpdateSponsoredProductsProductAdsWithBodyWithResponse request with any body
	UpdateSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsProductAdsResp, error)

	UpdateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, body UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*UpdateSponsoredProductsProductAdsResp, error)

	// DeleteSponsoredProductsProductAdsWithBodyWithResponse request with any body
	DeleteSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsProductAdsResp, error)

	DeleteSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, body DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*DeleteSponsoredProductsProductAdsResp, error)

	// ListSponsoredProductsProductAdsWithBodyWithResponse request with any body
	ListSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*ListSponsoredProductsProductAdsResp, error)

	ListSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsProductAdsParams, body ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*ListSponsoredProductsProductAdsResp, error)

	// CreateOptimizationRuleWithBodyWithResponse request with any body
	CreateOptimizationRuleWithBodyWithResponse(ctx context.Context, params *CreateOptimizationRuleParams, contentType string, body io.Reader) (*CreateOptimizationRuleResp, error)

	CreateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateOptimizationRuleParams, body CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*CreateOptimizationRuleResp, error)

	// UpdateOptimizationRuleWithBodyWithResponse request with any body
	UpdateOptimizationRuleWithBodyWithResponse(ctx context.Context, params *UpdateOptimizationRuleParams, contentType string, body io.Reader) (*UpdateOptimizationRuleResp, error)

	UpdateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOptimizationRuleParams, body UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*UpdateOptimizationRuleResp, error)

	// GetOptimizationRuleEligibilityWithBodyWithResponse request with any body
	GetOptimizationRuleEligibilityWithBodyWithResponse(ctx context.Context, params *GetOptimizationRuleEligibilityParams, contentType string, body io.Reader) (*GetOptimizationRuleEligibilityResp, error)

	GetOptimizationRuleEligibilityWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *GetOptimizationRuleEligibilityParams, body GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*GetOptimizationRuleEligibilityResp, error)

	// GetRuleNotificationWithBodyWithResponse request with any body
	GetRuleNotificationWithBodyWithResponse(ctx context.Context, params *GetRuleNotificationParams, contentType string, body io.Reader) (*GetRuleNotificationResp, error)

	GetRuleNotificationWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *GetRuleNotificationParams, body GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*GetRuleNotificationResp, error)

	// DeleteCampaignOptimizationRuleWithResponse request
	DeleteCampaignOptimizationRuleWithResponse(ctx context.Context, campaignOptimizationId string, params *DeleteCampaignOptimizationRuleParams) (*DeleteCampaignOptimizationRuleResp, error)

	// GetCampaignOptimizationRuleWithResponse request
	GetCampaignOptimizationRuleWithResponse(ctx context.Context, campaignOptimizationId string, params *GetCampaignOptimizationRuleParams) (*GetCampaignOptimizationRuleResp, error)

	// CreateSponsoredProductsTargetingClausesWithBodyWithResponse request with any body
	CreateSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsTargetingClausesResp, error)

	CreateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, body CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsTargetingClausesResp, error)

	// UpdateSponsoredProductsTargetingClausesWithBodyWithResponse request with any body
	UpdateSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsTargetingClausesResp, error)

	UpdateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, body UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsTargetingClausesResp, error)

	// GetThemeBasedBidRecommendationForAdGroupV1WithBodyWithResponse request with any body
	GetThemeBasedBidRecommendationForAdGroupV1WithBodyWithResponse(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, contentType string, body io.Reader) (*GetThemeBasedBidRecommendationForAdGroupV1Resp, error)

	GetThemeBasedBidRecommendationForAdGroupV1WithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, body GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody) (*GetThemeBasedBidRecommendationForAdGroupV1Resp, error)

	// GetTargetableCategoriesWithResponse request
	GetTargetableCategoriesWithResponse(ctx context.Context, params *GetTargetableCategoriesParams) (*GetTargetableCategoriesResp, error)

	// GetCategoryRecommendationsForASINsWithBodyWithResponse request with any body
	GetCategoryRecommendationsForASINsWithBodyWithResponse(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, contentType string, body io.Reader) (*GetCategoryRecommendationsForASINsResp, error)

	GetCategoryRecommendationsForASINsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, body GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*GetCategoryRecommendationsForASINsResp, error)

	// GetRefinementsForCategoryWithResponse request
	GetRefinementsForCategoryWithResponse(ctx context.Context, categoryId string, params *GetRefinementsForCategoryParams) (*GetRefinementsForCategoryResp, error)

	// DeleteSponsoredProductsTargetingClausesWithBodyWithResponse request with any body
	DeleteSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsTargetingClausesResp, error)

	DeleteSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, body DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsTargetingClausesResp, error)

	// GetRankedKeywordRecommendationWithBodyWithResponse request with any body
	GetRankedKeywordRecommendationWithBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, contentType string, body io.Reader) (*GetRankedKeywordRecommendationResp, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV4PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error)

	GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV5PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error)

	// ListSponsoredProductsTargetingClausesWithBodyWithResponse request with any body
	ListSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsTargetingClausesResp, error)

	ListSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, body ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsTargetingClausesResp, error)

	// GetTargetableASINCountsWithBodyWithResponse request with any body
	GetTargetableASINCountsWithBodyWithResponse(ctx context.Context, params *GetTargetableASINCountsParams, contentType string, body io.Reader) (*GetTargetableASINCountsResp, error)

	GetTargetableASINCountsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetableASINCountsParams, body GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*GetTargetableASINCountsResp, error)

	// GetProductRecommendationsWithBodyWithResponse request with any body
	GetProductRecommendationsWithBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*GetProductRecommendationsResp, error)

	GetProductRecommendationsWithApplicationVndSpproductrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody) (*GetProductRecommendationsResp, error)
}

type CreateSponsoredProductsAdGroupsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpAdGroupV3JSON207 *SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent
	JSON400                          *SponsoredProductsAdGroupMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsAdGroupsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpAdGroupV3JSON207 *SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent
	JSON400                          *SponsoredProductsAdGroupMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsAdGroupsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpAdGroupV3JSON207 *SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent
	JSON400                          *SponsoredProductsAdGroupMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsAdGroupsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpAdGroupV3JSON200 *SponsoredProductsListSponsoredProductsAdGroupsResponseContent
	JSON400                          *SponsoredProductsAdGroupAccessExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSPBudgetRulesForAdvertiserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSPBudgetRulesForAdvertiserResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetSPBudgetRulesForAdvertiserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSPBudgetRulesForAdvertiserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBudgetRulesForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateBudgetRulesForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBudgetRulesForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBudgetRulesForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *UpdateBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r UpdateBudgetRulesForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBudgetRulesForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRuleByRuleIdForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSPBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetBudgetRuleByRuleIdForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRuleByRuleIdForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsAssociatedWithSPBudgetRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SPGetAssociatedCampaignsResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetCampaignsAssociatedWithSPBudgetRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsAssociatedWithSPBudgetRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignRecommendationsResp struct {
	Body                                                        []byte
	HTTPResponse                                                *http.Response
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON200 *GetCampaignRecommendationsResponse
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON400 *ValidationException
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON401 *UnauthorizedException
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON403 *AccessDeniedException
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON422 *UnprocessableEntityException
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON429 *ThrottlingException
	ApplicationvndSpgetcampaignrecommendationsresponseV1JSON500 *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetCampaignRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsCampaignNegativeKeywordsResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpCampaignNegativeKeywordV3JSON207 *SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsResponseContent
	JSON400                                          *SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsCampaignNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsCampaignNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsCampaignNegativeKeywordsResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpCampaignNegativeKeywordV3JSON207 *SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsResponseContent
	JSON400                                          *SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsCampaignNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsCampaignNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsCampaignNegativeKeywordsResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpCampaignNegativeKeywordV3JSON207 *SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsResponseContent
	JSON400                                          *SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsCampaignNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsCampaignNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsCampaignNegativeKeywordsResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpCampaignNegativeKeywordV3JSON200 *SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsResponseContent
	JSON400                                          *SponsoredProductsCampaignNegativeKeywordAccessExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsCampaignNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsCampaignNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsCampaignNegativeTargetingClausesResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 *SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesResponseContent
	JSON400                                                  *SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
	JSON401                                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsCampaignNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsCampaignNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsCampaignNegativeTargetingClausesResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 *SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesResponseContent
	JSON400                                                  *SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
	JSON401                                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsCampaignNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsCampaignNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsCampaignNegativeTargetingClausesResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 *SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesResponseContent
	JSON400                                                  *SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
	JSON401                                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsCampaignNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsCampaignNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsCampaignNegativeTargetingClausesResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndSpCampaignNegativeTargetingClauseV3JSON200 *SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesResponseContent
	JSON400                                                  *SponsoredProductsCampaignNegativeTargetsAccessExceptionResponseContent
	JSON401                                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsCampaignNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsCampaignNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsCampaignsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSpCampaignV3JSON207 *SponsoredProductsCreateSponsoredProductsCampaignsResponseContent
	JSON400                           *SponsoredProductsCampaignMutationExceptionResponseContent
	JSON401                           *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                           *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                           *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                           *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                           *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsCampaignsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSpCampaignV3JSON207 *SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent
	JSON400                           *SponsoredProductsCampaignMutationExceptionResponseContent
	JSON401                           *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                           *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                           *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                           *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                           *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpCampaignsBudgetUsageResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndSpcampaignbudgetusageV1JSON207 *BudgetUsageCampaignResponse
	JSON400                                      *BudgetUsageError
	JSON401                                      *BudgetUsageError
	JSON403                                      *BudgetUsageError
	JSON422                                      *BudgetUsageError
	JSON429                                      *BudgetUsageError
	JSON500                                      *BudgetUsageError
}

// Status returns HTTPResponse.Status
func (r SpCampaignsBudgetUsageResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpCampaignsBudgetUsageResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRecommendationsResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndBudgetrecommendationV3JSON200 *BudgetRecommendationResponse
	ApplicationvndBudgetrecommendationV3JSON400 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON401 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON403 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON415 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON422 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON429 *SPTORBudgetRecommendationError
	ApplicationvndBudgetrecommendationV3JSON500 *SPTORBudgetRecommendationError
}

// Status returns HTTPResponse.Status
func (r GetBudgetRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SPGetBudgetRulesRecommendationResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndSpbudgetrulesrecommendationV3JSON200 *SPBudgetRulesRecommendationEventResponse
	ApplicationvndSpbudgetrulesrecommendationV3JSON400 *SPBudgetRulesRecommendationError
	ApplicationvndSpbudgetrulesrecommendationV3JSON429 *SPBudgetRulesRecommendationError
	ApplicationvndSpbudgetrulesrecommendationV3JSON500 *SPBudgetRulesRecommendationError
}

// Status returns HTTPResponse.Status
func (r SPGetBudgetRulesRecommendationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SPGetBudgetRulesRecommendationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsCampaignsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSpCampaignV3JSON207 *SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent
	JSON400                           *SponsoredProductsCampaignMutationExceptionResponseContent
	JSON401                           *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                           *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                           *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                           *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                           *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBudgetRecommendationResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndSpinitialbudgetrecommendationV34JSON200 *InitialBudgetRecommendationResponse
	ApplicationvndSpinitialbudgetrecommendationV34JSON400 *BudgetRecommendationNewCampaignsException
	ApplicationvndSpinitialbudgetrecommendationV34JSON401 *BudgetRecommendationNewCampaignsException
	ApplicationvndSpinitialbudgetrecommendationV34JSON403 *BudgetRecommendationNewCampaignsException
	ApplicationvndSpinitialbudgetrecommendationV34JSON415 *BudgetRecommendationNewCampaignsException
	ApplicationvndSpinitialbudgetrecommendationV34JSON429 *BudgetRecommendationNewCampaignsException
	ApplicationvndSpinitialbudgetrecommendationV34JSON500 *BudgetRecommendationNewCampaignsException
}

// Status returns HTTPResponse.Status
func (r GetBudgetRecommendationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBudgetRecommendationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsCampaignsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSpCampaignV3JSON200 *SponsoredProductsListSponsoredProductsCampaignsResponseContent
	JSON400                           *SponsoredProductsCampaignAccessExceptionResponseContent
	JSON401                           *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                           *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                           *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                           *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                           *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAssociatedBudgetRulesForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SPListAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r ListAssociatedBudgetRulesForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssociatedBudgetRulesForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssociatedBudgetRulesForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *CreateAssociatedBudgetRulesResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r CreateAssociatedBudgetRulesForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssociatedBudgetRulesForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleBasedBudgetHistoryForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SPBudgetHistory
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r GetRuleBasedBudgetHistoryForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleBasedBudgetHistoryForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateAssociatedBudgetRuleForSPCampaignsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisassociateAssociatedBudgetRuleResponse
	JSON400      *BudgetRuleError
	JSON401      *BudgetRuleError
	JSON403      *BudgetRuleError
	JSON422      *BudgetRuleError
	JSON429      *BudgetRuleError
	JSON500      *BudgetRuleError
}

// Status returns HTTPResponse.Status
func (r DisassociateAssociatedBudgetRuleForSPCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateAssociatedBudgetRuleForSPCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsKeywordsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpKeywordV3JSON207 *SponsoredProductsCreateSponsoredProductsKeywordsResponseContent
	JSON400                          *SponsoredProductsKeywordMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsKeywordsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpKeywordV3JSON207 *SponsoredProductsUpdateSponsoredProductsKeywordsResponseContent
	JSON400                          *SponsoredProductsKeywordMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsKeywordsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpKeywordV3JSON207 *SponsoredProductsDeleteSponsoredProductsKeywordsResponseContent
	JSON400                          *SponsoredProductsKeywordMutationExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsKeywordsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSpKeywordV3JSON200 *SponsoredProductsListSponsoredProductsKeywordsResponseContent
	JSON400                          *SponsoredProductsKeywordAccessExceptionResponseContent
	JSON401                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpNegativeKeywordV3JSON207 *SponsoredProductsCreateSponsoredProductsNegativeKeywordsResponseContent
	JSON400                                  *SponsoredProductsNegativeKeywordMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpNegativeKeywordV3JSON207 *SponsoredProductsUpdateSponsoredProductsNegativeKeywordsResponseContent
	JSON400                                  *SponsoredProductsNegativeKeywordMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpNegativeKeywordV3JSON207 *SponsoredProductsDeleteSponsoredProductsNegativeKeywordsResponseContent
	JSON400                                  *SponsoredProductsNegativeKeywordMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpNegativeKeywordV3JSON200 *SponsoredProductsListSponsoredProductsNegativeKeywordsResponseContent
	JSON400                                  *SponsoredProductsNegativeKeywordAccessExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsNegativeTargetingClausesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpNegativeTargetingClauseV3JSON207 *SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent
	JSON400                                          *SponsoredProductsNegativeTargetMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsNegativeTargetingClausesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpNegativeTargetingClauseV3JSON207 *SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent
	JSON400                                          *SponsoredProductsNegativeTargetMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNegativeBrandsResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *Brands
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON403                                           *AccessDeniedException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetNegativeBrandsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNegativeBrandsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchBrandsResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *Brands
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r SearchBrandsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchBrandsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsNegativeTargetingClausesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpNegativeTargetingClauseV3JSON207 *SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent
	JSON400                                          *SponsoredProductsNegativeTargetMutationExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsNegativeTargetingClausesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndSpNegativeTargetingClauseV3JSON200 *SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent
	JSON400                                          *SponsoredProductsNegativeTargetAccessExceptionResponseContent
	JSON401                                          *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                          *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                          *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                          *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                          *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsNegativeTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsNegativeTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsProductAdsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSpProductAdV3JSON207 *SponsoredProductsCreateSponsoredProductsProductAdsResponseContent
	JSON400                            *SponsoredProductsProductAdMutationExceptionResponseContent
	JSON401                            *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                            *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                            *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                            *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                            *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsProductAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsProductAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsProductAdsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSpProductAdV3JSON207 *SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent
	JSON400                            *SponsoredProductsProductAdMutationExceptionResponseContent
	JSON401                            *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                            *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                            *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                            *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                            *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsProductAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsProductAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsProductAdsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSpProductAdV3JSON207 *SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent
	JSON400                            *SponsoredProductsProductAdMutationExceptionResponseContent
	JSON401                            *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                            *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                            *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                            *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                            *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsProductAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsProductAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsProductAdsResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSpProductAdV3JSON200 *SponsoredProductsListSponsoredProductsProductAdsResponseContent
	JSON400                            *SponsoredProductsProductAdAccessExceptionResponseContent
	JSON401                            *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                            *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                            *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                            *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                            *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsProductAdsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsProductAdsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOptimizationRuleResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *CreateSPCampaignOptimizationRulesResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r CreateOptimizationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOptimizationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOptimizationRuleResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *UpdateSPCampaignOptimizationRuleResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r UpdateOptimizationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOptimizationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOptimizationRuleEligibilityResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *SPCampaignOptimizationRecommendationAPIResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r GetOptimizationRuleEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOptimizationRuleEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleNotificationResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *SPCampaignOptimizationNotificationAPIResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r GetRuleNotificationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleNotificationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaignOptimizationRuleResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *DeleteSPCampaignOptimizationRuleResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON404                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r DeleteCampaignOptimizationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaignOptimizationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignOptimizationRuleResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndOptimizationrulesV1JSON200 *GetSPCampaignOptimizationRuleResponse
	JSON400                                  *CampaignOptimizationRuleError
	JSON401                                  *CampaignOptimizationRuleError
	JSON403                                  *CampaignOptimizationRuleError
	JSON404                                  *CampaignOptimizationRuleError
	JSON422                                  *CampaignOptimizationRuleError
	JSON429                                  *CampaignOptimizationRuleError
	JSON500                                  *CampaignOptimizationRuleError
}

// Status returns HTTPResponse.Status
func (r GetCampaignOptimizationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignOptimizationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSponsoredProductsTargetingClausesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpTargetingClauseV3JSON207 *SponsoredProductsCreateSponsoredProductsTargetingClausesResponseContent
	JSON400                                  *SponsoredProductsTargetMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r CreateSponsoredProductsTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSponsoredProductsTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSponsoredProductsTargetingClausesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpTargetingClauseV3JSON207 *SponsoredProductsUpdateSponsoredProductsTargetingClausesResponseContent
	JSON400                                  *SponsoredProductsTargetMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r UpdateSponsoredProductsTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSponsoredProductsTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThemeBasedBidRecommendationForAdGroupV1Resp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndSpthemebasedbidrecommendationV3JSON200 *ThemeBasedBidRecommendationResponse
	JSON400                                              *BidRecommendationError
	JSON401                                              *BidRecommendationError
	JSON405                                              *BidRecommendationError
	JSON406                                              *BidRecommendationError
	JSON415                                              *BidRecommendationError
	JSON422                                              *BidRecommendationError
	JSON429                                              *BidRecommendationError
	JSON500                                              *BidRecommendationError
}

// Status returns HTTPResponse.Status
func (r GetThemeBasedBidRecommendationForAdGroupV1Resp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThemeBasedBidRecommendationForAdGroupV1Resp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetableCategoriesResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *TargetableCategories
	ApplicationvndSpproducttargetingresponseV4JSON200 *TargetableCategories
	ApplicationvndSpproducttargetingresponseV5JSON200 *TargetableCategoriesLoP
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetTargetableCategoriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetableCategoriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryRecommendationsForASINsResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *CategoryRecommendations
	ApplicationvndSpproducttargetingresponseV4JSON200 *CategoryRecommendationsWithAsinCounts
	ApplicationvndSpproducttargetingresponseV5JSON200 *CategoryRecommendationsWithAsinCountsLoP
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON422                                           *UnprocessableEntityException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetCategoryRecommendationsForASINsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryRecommendationsForASINsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRefinementsForCategoryResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *Refinements
	ApplicationvndSpproducttargetingresponseV4JSON200 *RefinementsLoP
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON422                                           *UnprocessableEntityException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetRefinementsForCategoryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRefinementsForCategoryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSponsoredProductsTargetingClausesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpTargetingClauseV3JSON207 *SponsoredProductsDeleteSponsoredProductsTargetingClausesResponseContent
	JSON400                                  *SponsoredProductsTargetMutationExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r DeleteSponsoredProductsTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSponsoredProductsTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankedKeywordRecommendationResp struct {
	Body                                            []byte
	HTTPResponse                                    *http.Response
	ApplicationvndSpkeywordsrecommendationV3JSON200 *[]KeywordTargetResponse
	ApplicationvndSpkeywordsrecommendationV4JSON200 *RankedTargetResponse
	ApplicationvndSpkeywordsrecommendationV5JSON200 *RankedTargetWithThemedBidsResponse
	ApplicationvndSpkeywordsrecommendationV3JSON400 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV4JSON400 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV3JSON401 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV4JSON401 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV3JSON422 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV4JSON422 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV3JSON429 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV4JSON429 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV3JSON500 *SPTargetingError
	ApplicationvndSpkeywordsrecommendationV4JSON500 *SPTargetingError
}

// Status returns HTTPResponse.Status
func (r GetRankedKeywordRecommendationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankedKeywordRecommendationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSponsoredProductsTargetingClausesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSpTargetingClauseV3JSON200 *SponsoredProductsListSponsoredProductsTargetingClausesResponseContent
	JSON400                                  *SponsoredProductsTargetAccessExceptionResponseContent
	JSON401                                  *SponsoredProductsUnauthorizedExceptionResponseContent
	JSON403                                  *SponsoredProductsAccessDeniedExceptionResponseContent
	JSON415                                  *SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
	JSON429                                  *SponsoredProductsThrottlingExceptionResponseContent
	JSON500                                  *SponsoredProductsInternalServerExceptionResponseContent
}

// Status returns HTTPResponse.Status
func (r ListSponsoredProductsTargetingClausesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSponsoredProductsTargetingClausesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetableASINCountsResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndSpproducttargetingresponseV3JSON200 *TargetableAsinCounts
	JSON400                                           *BadRequestException
	JSON401                                           *UnauthorizedException
	JSON422                                           *UnprocessableEntityException
	JSON429                                           *ThrottlingException
	JSON500                                           *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetTargetableASINCountsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetableASINCountsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductRecommendationsResp struct {
	Body                                                         []byte
	HTTPResponse                                                 *http.Response
	ApplicationvndSpproductrecommendationresponseAsinsV3JSON200  *ProductRecommendationsByASIN
	ApplicationvndSpproductrecommendationresponseThemesV3JSON200 *ProductRecommendationsByTheme
	JSON400                                                      *BadRequestException
	JSON422                                                      *UnprocessableEntityException
	JSON429                                                      *ThrottlingException
	JSON500                                                      *InternalServerException
}

// Status returns HTTPResponse.Status
func (r GetProductRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSponsoredProductsAdGroupsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsAdGroupsResp
func (c *ClientWithResponses) CreateSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*CreateSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.CreateSponsoredProductsAdGroupsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsAdGroupsParams, body CreateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*CreateSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.CreateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsAdGroupsResp(rsp)
}

// UpdateSponsoredProductsAdGroupsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsAdGroupsResp
func (c *ClientWithResponses) UpdateSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.UpdateSponsoredProductsAdGroupsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsAdGroupsParams, body UpdateSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*UpdateSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.UpdateSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsAdGroupsResp(rsp)
}

// DeleteSponsoredProductsAdGroupsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsAdGroupsResp
func (c *ClientWithResponses) DeleteSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.DeleteSponsoredProductsAdGroupsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsAdGroupsParams, body DeleteSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*DeleteSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.DeleteSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsAdGroupsResp(rsp)
}

// ListSponsoredProductsAdGroupsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsAdGroupsResp
func (c *ClientWithResponses) ListSponsoredProductsAdGroupsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, contentType string, body io.Reader) (*ListSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.ListSponsoredProductsAdGroupsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsAdGroupsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsAdGroupsParams, body ListSponsoredProductsAdGroupsApplicationVndSpAdGroupV3PlusJSONRequestBody) (*ListSponsoredProductsAdGroupsResp, error) {
	rsp, err := c.ListSponsoredProductsAdGroupsWithApplicationVndSpAdGroupV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsAdGroupsResp(rsp)
}

// GetSPBudgetRulesForAdvertiserWithResponse request returning *GetSPBudgetRulesForAdvertiserResp
func (c *ClientWithResponses) GetSPBudgetRulesForAdvertiserWithResponse(ctx context.Context, params *GetSPBudgetRulesForAdvertiserParams) (*GetSPBudgetRulesForAdvertiserResp, error) {
	rsp, err := c.GetSPBudgetRulesForAdvertiser(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSPBudgetRulesForAdvertiserResp(rsp)
}

// CreateBudgetRulesForSPCampaignsWithBodyWithResponse request with arbitrary body returning *CreateBudgetRulesForSPCampaignsResp
func (c *ClientWithResponses) CreateBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*CreateBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSPCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSPCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateBudgetRulesForSPCampaignsWithResponse(ctx context.Context, params *CreateBudgetRulesForSPCampaignsParams, body CreateBudgetRulesForSPCampaignsJSONRequestBody) (*CreateBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.CreateBudgetRulesForSPCampaigns(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateBudgetRulesForSPCampaignsResp(rsp)
}

// UpdateBudgetRulesForSPCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateBudgetRulesForSPCampaignsResp
func (c *ClientWithResponses) UpdateBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*UpdateBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSPCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSPCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateBudgetRulesForSPCampaignsWithResponse(ctx context.Context, params *UpdateBudgetRulesForSPCampaignsParams, body UpdateBudgetRulesForSPCampaignsJSONRequestBody) (*UpdateBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.UpdateBudgetRulesForSPCampaigns(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBudgetRulesForSPCampaignsResp(rsp)
}

// GetBudgetRuleByRuleIdForSPCampaignsWithResponse request returning *GetBudgetRuleByRuleIdForSPCampaignsResp
func (c *ClientWithResponses) GetBudgetRuleByRuleIdForSPCampaignsWithResponse(ctx context.Context, budgetRuleId string, params *GetBudgetRuleByRuleIdForSPCampaignsParams) (*GetBudgetRuleByRuleIdForSPCampaignsResp, error) {
	rsp, err := c.GetBudgetRuleByRuleIdForSPCampaigns(ctx, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRuleByRuleIdForSPCampaignsResp(rsp)
}

// GetCampaignsAssociatedWithSPBudgetRuleWithResponse request returning *GetCampaignsAssociatedWithSPBudgetRuleResp
func (c *ClientWithResponses) GetCampaignsAssociatedWithSPBudgetRuleWithResponse(ctx context.Context, budgetRuleId string, params *GetCampaignsAssociatedWithSPBudgetRuleParams) (*GetCampaignsAssociatedWithSPBudgetRuleResp, error) {
	rsp, err := c.GetCampaignsAssociatedWithSPBudgetRule(ctx, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsAssociatedWithSPBudgetRuleResp(rsp)
}

// GetCampaignRecommendationsWithResponse request returning *GetCampaignRecommendationsResp
func (c *ClientWithResponses) GetCampaignRecommendationsWithResponse(ctx context.Context, params *GetCampaignRecommendationsParams) (*GetCampaignRecommendationsResp, error) {
	rsp, err := c.GetCampaignRecommendations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignRecommendationsResp(rsp)
}

// CreateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsCampaignNegativeKeywordsResp
func (c *ClientWithResponses) CreateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeKeywordsParams, body CreateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

// UpdateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsCampaignNegativeKeywordsResp
func (c *ClientWithResponses) UpdateSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeKeywordsParams, body UpdateSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

// DeleteSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsCampaignNegativeKeywordsResp
func (c *ClientWithResponses) DeleteSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeKeywordsParams, body DeleteSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

// ListSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsCampaignNegativeKeywordsResp
func (c *ClientWithResponses) ListSponsoredProductsCampaignNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeKeywordsParams, body ListSponsoredProductsCampaignNegativeKeywordsApplicationVndSpCampaignNegativeKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignNegativeKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignNegativeKeywordsWithApplicationVndSpCampaignNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignNegativeKeywordsResp(rsp)
}

// CreateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsCampaignNegativeTargetingClausesResp
func (c *ClientWithResponses) CreateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignNegativeTargetingClausesParams, body CreateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

// UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsCampaignNegativeTargetingClausesResp
func (c *ClientWithResponses) UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignNegativeTargetingClausesParams, body UpdateSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

// DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsCampaignNegativeTargetingClausesResp
func (c *ClientWithResponses) DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignNegativeTargetingClausesParams, body DeleteSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

// ListSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsCampaignNegativeTargetingClausesResp
func (c *ClientWithResponses) ListSponsoredProductsCampaignNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignNegativeTargetingClausesParams, body ListSponsoredProductsCampaignNegativeTargetingClausesApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignNegativeTargetingClausesWithApplicationVndSpCampaignNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignNegativeTargetingClausesResp(rsp)
}

// CreateSponsoredProductsCampaignsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsCampaignsResp
func (c *ClientWithResponses) CreateSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*CreateSponsoredProductsCampaignsResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsCampaignsParams, body CreateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*CreateSponsoredProductsCampaignsResp, error) {
	rsp, err := c.CreateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsCampaignsResp(rsp)
}

// UpdateSponsoredProductsCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsCampaignsResp
func (c *ClientWithResponses) UpdateSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsCampaignsResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsCampaignsParams, body UpdateSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*UpdateSponsoredProductsCampaignsResp, error) {
	rsp, err := c.UpdateSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsCampaignsResp(rsp)
}

// SpCampaignsBudgetUsageWithBodyWithResponse request with arbitrary body returning *SpCampaignsBudgetUsageResp
func (c *ClientWithResponses) SpCampaignsBudgetUsageWithBodyWithResponse(ctx context.Context, params *SpCampaignsBudgetUsageParams, contentType string, body io.Reader) (*SpCampaignsBudgetUsageResp, error) {
	rsp, err := c.SpCampaignsBudgetUsageWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSpCampaignsBudgetUsageResp(rsp)
}

func (c *ClientWithResponses) SpCampaignsBudgetUsageWithApplicationVndSpcampaignbudgetusageV1PlusJSONBodyWithResponse(ctx context.Context, params *SpCampaignsBudgetUsageParams, body SpCampaignsBudgetUsageApplicationVndSpcampaignbudgetusageV1PlusJSONRequestBody) (*SpCampaignsBudgetUsageResp, error) {
	rsp, err := c.SpCampaignsBudgetUsageWithApplicationVndSpcampaignbudgetusageV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSpCampaignsBudgetUsageResp(rsp)
}

// GetBudgetRecommendationsWithBodyWithResponse request with arbitrary body returning *GetBudgetRecommendationsResp
func (c *ClientWithResponses) GetBudgetRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, contentType string, body io.Reader) (*GetBudgetRecommendationsResp, error) {
	rsp, err := c.GetBudgetRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetBudgetRecommendationsWithApplicationVndBudgetrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationsParams, body GetBudgetRecommendationsApplicationVndBudgetrecommendationV3PlusJSONRequestBody) (*GetBudgetRecommendationsResp, error) {
	rsp, err := c.GetBudgetRecommendationsWithApplicationVndBudgetrecommendationV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationsResp(rsp)
}

// SPGetBudgetRulesRecommendationWithBodyWithResponse request with arbitrary body returning *SPGetBudgetRulesRecommendationResp
func (c *ClientWithResponses) SPGetBudgetRulesRecommendationWithBodyWithResponse(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, contentType string, body io.Reader) (*SPGetBudgetRulesRecommendationResp, error) {
	rsp, err := c.SPGetBudgetRulesRecommendationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSPGetBudgetRulesRecommendationResp(rsp)
}

func (c *ClientWithResponses) SPGetBudgetRulesRecommendationWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *SPGetBudgetRulesRecommendationParams, body SPGetBudgetRulesRecommendationApplicationVndSpbudgetrulesrecommendationV3PlusJSONRequestBody) (*SPGetBudgetRulesRecommendationResp, error) {
	rsp, err := c.SPGetBudgetRulesRecommendationWithApplicationVndSpbudgetrulesrecommendationV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSPGetBudgetRulesRecommendationResp(rsp)
}

// DeleteSponsoredProductsCampaignsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsCampaignsResp
func (c *ClientWithResponses) DeleteSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsCampaignsResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsCampaignsParams, body DeleteSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*DeleteSponsoredProductsCampaignsResp, error) {
	rsp, err := c.DeleteSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsCampaignsResp(rsp)
}

// GetBudgetRecommendationWithBodyWithResponse request with arbitrary body returning *GetBudgetRecommendationResp
func (c *ClientWithResponses) GetBudgetRecommendationWithBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationParams, contentType string, body io.Reader) (*GetBudgetRecommendationResp, error) {
	rsp, err := c.GetBudgetRecommendationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationResp(rsp)
}

func (c *ClientWithResponses) GetBudgetRecommendationWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBodyWithResponse(ctx context.Context, params *GetBudgetRecommendationParams, body GetBudgetRecommendationApplicationVndSpinitialbudgetrecommendationV34PlusJSONRequestBody) (*GetBudgetRecommendationResp, error) {
	rsp, err := c.GetBudgetRecommendationWithApplicationVndSpinitialbudgetrecommendationV34PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBudgetRecommendationResp(rsp)
}

// ListSponsoredProductsCampaignsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsCampaignsResp
func (c *ClientWithResponses) ListSponsoredProductsCampaignsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignsParams, contentType string, body io.Reader) (*ListSponsoredProductsCampaignsResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsCampaignsParams, body ListSponsoredProductsCampaignsApplicationVndSpCampaignV3PlusJSONRequestBody) (*ListSponsoredProductsCampaignsResp, error) {
	rsp, err := c.ListSponsoredProductsCampaignsWithApplicationVndSpCampaignV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsCampaignsResp(rsp)
}

// ListAssociatedBudgetRulesForSPCampaignsWithResponse request returning *ListAssociatedBudgetRulesForSPCampaignsResp
func (c *ClientWithResponses) ListAssociatedBudgetRulesForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *ListAssociatedBudgetRulesForSPCampaignsParams) (*ListAssociatedBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.ListAssociatedBudgetRulesForSPCampaigns(ctx, campaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseListAssociatedBudgetRulesForSPCampaignsResp(rsp)
}

// CreateAssociatedBudgetRulesForSPCampaignsWithBodyWithResponse request with arbitrary body returning *CreateAssociatedBudgetRulesForSPCampaignsResp
func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSPCampaignsWithBodyWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, contentType string, body io.Reader) (*CreateAssociatedBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSPCampaignsWithBody(ctx, campaignId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSPCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateAssociatedBudgetRulesForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *CreateAssociatedBudgetRulesForSPCampaignsParams, body CreateAssociatedBudgetRulesForSPCampaignsJSONRequestBody) (*CreateAssociatedBudgetRulesForSPCampaignsResp, error) {
	rsp, err := c.CreateAssociatedBudgetRulesForSPCampaigns(ctx, campaignId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociatedBudgetRulesForSPCampaignsResp(rsp)
}

// GetRuleBasedBudgetHistoryForSPCampaignsWithResponse request returning *GetRuleBasedBudgetHistoryForSPCampaignsResp
func (c *ClientWithResponses) GetRuleBasedBudgetHistoryForSPCampaignsWithResponse(ctx context.Context, campaignId int64, params *GetRuleBasedBudgetHistoryForSPCampaignsParams) (*GetRuleBasedBudgetHistoryForSPCampaignsResp, error) {
	rsp, err := c.GetRuleBasedBudgetHistoryForSPCampaigns(ctx, campaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleBasedBudgetHistoryForSPCampaignsResp(rsp)
}

// DisassociateAssociatedBudgetRuleForSPCampaignsWithResponse request returning *DisassociateAssociatedBudgetRuleForSPCampaignsResp
func (c *ClientWithResponses) DisassociateAssociatedBudgetRuleForSPCampaignsWithResponse(ctx context.Context, campaignId int64, budgetRuleId string, params *DisassociateAssociatedBudgetRuleForSPCampaignsParams) (*DisassociateAssociatedBudgetRuleForSPCampaignsResp, error) {
	rsp, err := c.DisassociateAssociatedBudgetRuleForSPCampaigns(ctx, campaignId, budgetRuleId, params)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateAssociatedBudgetRuleForSPCampaignsResp(rsp)
}

// CreateSponsoredProductsKeywordsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsKeywordsResp
func (c *ClientWithResponses) CreateSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsKeywordsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsKeywordsParams, body CreateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsKeywordsResp(rsp)
}

// UpdateSponsoredProductsKeywordsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsKeywordsResp
func (c *ClientWithResponses) UpdateSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsKeywordsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsKeywordsParams, body UpdateSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsKeywordsResp(rsp)
}

// DeleteSponsoredProductsKeywordsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsKeywordsResp
func (c *ClientWithResponses) DeleteSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsKeywordsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsKeywordsParams, body DeleteSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsKeywordsResp(rsp)
}

// ListSponsoredProductsKeywordsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsKeywordsResp
func (c *ClientWithResponses) ListSponsoredProductsKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsKeywordsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsKeywordsParams, body ListSponsoredProductsKeywordsApplicationVndSpKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsKeywordsWithApplicationVndSpKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsKeywordsResp(rsp)
}

// CreateSponsoredProductsNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsNegativeKeywordsResp
func (c *ClientWithResponses) CreateSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*CreateSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeKeywordsParams, body CreateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*CreateSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.CreateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsNegativeKeywordsResp(rsp)
}

// UpdateSponsoredProductsNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsNegativeKeywordsResp
func (c *ClientWithResponses) UpdateSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeKeywordsParams, body UpdateSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*UpdateSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.UpdateSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsNegativeKeywordsResp(rsp)
}

// DeleteSponsoredProductsNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsNegativeKeywordsResp
func (c *ClientWithResponses) DeleteSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeKeywordsParams, body DeleteSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*DeleteSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.DeleteSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsNegativeKeywordsResp(rsp)
}

// ListSponsoredProductsNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsNegativeKeywordsResp
func (c *ClientWithResponses) ListSponsoredProductsNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, contentType string, body io.Reader) (*ListSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeKeywordsParams, body ListSponsoredProductsNegativeKeywordsApplicationVndSpNegativeKeywordV3PlusJSONRequestBody) (*ListSponsoredProductsNegativeKeywordsResp, error) {
	rsp, err := c.ListSponsoredProductsNegativeKeywordsWithApplicationVndSpNegativeKeywordV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsNegativeKeywordsResp(rsp)
}

// CreateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsNegativeTargetingClausesResp
func (c *ClientWithResponses) CreateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsNegativeTargetingClausesParams, body CreateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsNegativeTargetingClausesResp(rsp)
}

// UpdateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsNegativeTargetingClausesResp
func (c *ClientWithResponses) UpdateSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsNegativeTargetingClausesParams, body UpdateSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsNegativeTargetingClausesResp(rsp)
}

// GetNegativeBrandsWithResponse request returning *GetNegativeBrandsResp
func (c *ClientWithResponses) GetNegativeBrandsWithResponse(ctx context.Context, params *GetNegativeBrandsParams) (*GetNegativeBrandsResp, error) {
	rsp, err := c.GetNegativeBrands(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNegativeBrandsResp(rsp)
}

// SearchBrandsWithBodyWithResponse request with arbitrary body returning *SearchBrandsResp
func (c *ClientWithResponses) SearchBrandsWithBodyWithResponse(ctx context.Context, params *SearchBrandsParams, contentType string, body io.Reader) (*SearchBrandsResp, error) {
	rsp, err := c.SearchBrandsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSearchBrandsResp(rsp)
}

func (c *ClientWithResponses) SearchBrandsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *SearchBrandsParams, body SearchBrandsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*SearchBrandsResp, error) {
	rsp, err := c.SearchBrandsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSearchBrandsResp(rsp)
}

// DeleteSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsNegativeTargetingClausesResp
func (c *ClientWithResponses) DeleteSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsNegativeTargetingClausesParams, body DeleteSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsNegativeTargetingClausesResp(rsp)
}

// ListSponsoredProductsNegativeTargetingClausesWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsNegativeTargetingClausesResp
func (c *ClientWithResponses) ListSponsoredProductsNegativeTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsNegativeTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsNegativeTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsNegativeTargetingClausesParams, body ListSponsoredProductsNegativeTargetingClausesApplicationVndSpNegativeTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsNegativeTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsNegativeTargetingClausesWithApplicationVndSpNegativeTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsNegativeTargetingClausesResp(rsp)
}

// CreateSponsoredProductsProductAdsWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsProductAdsResp
func (c *ClientWithResponses) CreateSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*CreateSponsoredProductsProductAdsResp, error) {
	rsp, err := c.CreateSponsoredProductsProductAdsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsProductAdsResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsProductAdsParams, body CreateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*CreateSponsoredProductsProductAdsResp, error) {
	rsp, err := c.CreateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsProductAdsResp(rsp)
}

// UpdateSponsoredProductsProductAdsWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsProductAdsResp
func (c *ClientWithResponses) UpdateSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*UpdateSponsoredProductsProductAdsResp, error) {
	rsp, err := c.UpdateSponsoredProductsProductAdsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsProductAdsResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsProductAdsParams, body UpdateSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*UpdateSponsoredProductsProductAdsResp, error) {
	rsp, err := c.UpdateSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsProductAdsResp(rsp)
}

// DeleteSponsoredProductsProductAdsWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsProductAdsResp
func (c *ClientWithResponses) DeleteSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*DeleteSponsoredProductsProductAdsResp, error) {
	rsp, err := c.DeleteSponsoredProductsProductAdsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsProductAdsResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsProductAdsParams, body DeleteSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*DeleteSponsoredProductsProductAdsResp, error) {
	rsp, err := c.DeleteSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsProductAdsResp(rsp)
}

// ListSponsoredProductsProductAdsWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsProductAdsResp
func (c *ClientWithResponses) ListSponsoredProductsProductAdsWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsProductAdsParams, contentType string, body io.Reader) (*ListSponsoredProductsProductAdsResp, error) {
	rsp, err := c.ListSponsoredProductsProductAdsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsProductAdsResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsProductAdsParams, body ListSponsoredProductsProductAdsApplicationVndSpProductAdV3PlusJSONRequestBody) (*ListSponsoredProductsProductAdsResp, error) {
	rsp, err := c.ListSponsoredProductsProductAdsWithApplicationVndSpProductAdV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsProductAdsResp(rsp)
}

// CreateOptimizationRuleWithBodyWithResponse request with arbitrary body returning *CreateOptimizationRuleResp
func (c *ClientWithResponses) CreateOptimizationRuleWithBodyWithResponse(ctx context.Context, params *CreateOptimizationRuleParams, contentType string, body io.Reader) (*CreateOptimizationRuleResp, error) {
	rsp, err := c.CreateOptimizationRuleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOptimizationRuleResp(rsp)
}

func (c *ClientWithResponses) CreateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateOptimizationRuleParams, body CreateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*CreateOptimizationRuleResp, error) {
	rsp, err := c.CreateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOptimizationRuleResp(rsp)
}

// UpdateOptimizationRuleWithBodyWithResponse request with arbitrary body returning *UpdateOptimizationRuleResp
func (c *ClientWithResponses) UpdateOptimizationRuleWithBodyWithResponse(ctx context.Context, params *UpdateOptimizationRuleParams, contentType string, body io.Reader) (*UpdateOptimizationRuleResp, error) {
	rsp, err := c.UpdateOptimizationRuleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOptimizationRuleResp(rsp)
}

func (c *ClientWithResponses) UpdateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOptimizationRuleParams, body UpdateOptimizationRuleApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*UpdateOptimizationRuleResp, error) {
	rsp, err := c.UpdateOptimizationRuleWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOptimizationRuleResp(rsp)
}

// GetOptimizationRuleEligibilityWithBodyWithResponse request with arbitrary body returning *GetOptimizationRuleEligibilityResp
func (c *ClientWithResponses) GetOptimizationRuleEligibilityWithBodyWithResponse(ctx context.Context, params *GetOptimizationRuleEligibilityParams, contentType string, body io.Reader) (*GetOptimizationRuleEligibilityResp, error) {
	rsp, err := c.GetOptimizationRuleEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetOptimizationRuleEligibilityResp(rsp)
}

func (c *ClientWithResponses) GetOptimizationRuleEligibilityWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *GetOptimizationRuleEligibilityParams, body GetOptimizationRuleEligibilityApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*GetOptimizationRuleEligibilityResp, error) {
	rsp, err := c.GetOptimizationRuleEligibilityWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetOptimizationRuleEligibilityResp(rsp)
}

// GetRuleNotificationWithBodyWithResponse request with arbitrary body returning *GetRuleNotificationResp
func (c *ClientWithResponses) GetRuleNotificationWithBodyWithResponse(ctx context.Context, params *GetRuleNotificationParams, contentType string, body io.Reader) (*GetRuleNotificationResp, error) {
	rsp, err := c.GetRuleNotificationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleNotificationResp(rsp)
}

func (c *ClientWithResponses) GetRuleNotificationWithApplicationVndOptimizationrulesV1PlusJSONBodyWithResponse(ctx context.Context, params *GetRuleNotificationParams, body GetRuleNotificationApplicationVndOptimizationrulesV1PlusJSONRequestBody) (*GetRuleNotificationResp, error) {
	rsp, err := c.GetRuleNotificationWithApplicationVndOptimizationrulesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleNotificationResp(rsp)
}

// DeleteCampaignOptimizationRuleWithResponse request returning *DeleteCampaignOptimizationRuleResp
func (c *ClientWithResponses) DeleteCampaignOptimizationRuleWithResponse(ctx context.Context, campaignOptimizationId string, params *DeleteCampaignOptimizationRuleParams) (*DeleteCampaignOptimizationRuleResp, error) {
	rsp, err := c.DeleteCampaignOptimizationRule(ctx, campaignOptimizationId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignOptimizationRuleResp(rsp)
}

// GetCampaignOptimizationRuleWithResponse request returning *GetCampaignOptimizationRuleResp
func (c *ClientWithResponses) GetCampaignOptimizationRuleWithResponse(ctx context.Context, campaignOptimizationId string, params *GetCampaignOptimizationRuleParams) (*GetCampaignOptimizationRuleResp, error) {
	rsp, err := c.GetCampaignOptimizationRule(ctx, campaignOptimizationId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignOptimizationRuleResp(rsp)
}

// CreateSponsoredProductsTargetingClausesWithBodyWithResponse request with arbitrary body returning *CreateSponsoredProductsTargetingClausesResp
func (c *ClientWithResponses) CreateSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*CreateSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) CreateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateSponsoredProductsTargetingClausesParams, body CreateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*CreateSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.CreateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSponsoredProductsTargetingClausesResp(rsp)
}

// UpdateSponsoredProductsTargetingClausesWithBodyWithResponse request with arbitrary body returning *UpdateSponsoredProductsTargetingClausesResp
func (c *ClientWithResponses) UpdateSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*UpdateSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) UpdateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSponsoredProductsTargetingClausesParams, body UpdateSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*UpdateSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.UpdateSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSponsoredProductsTargetingClausesResp(rsp)
}

// GetThemeBasedBidRecommendationForAdGroupV1WithBodyWithResponse request with arbitrary body returning *GetThemeBasedBidRecommendationForAdGroupV1Resp
func (c *ClientWithResponses) GetThemeBasedBidRecommendationForAdGroupV1WithBodyWithResponse(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, contentType string, body io.Reader) (*GetThemeBasedBidRecommendationForAdGroupV1Resp, error) {
	rsp, err := c.GetThemeBasedBidRecommendationForAdGroupV1WithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetThemeBasedBidRecommendationForAdGroupV1Resp(rsp)
}

func (c *ClientWithResponses) GetThemeBasedBidRecommendationForAdGroupV1WithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetThemeBasedBidRecommendationForAdGroupV1Params, body GetThemeBasedBidRecommendationForAdGroupV1ApplicationVndSpthemebasedbidrecommendationV3PlusJSONRequestBody) (*GetThemeBasedBidRecommendationForAdGroupV1Resp, error) {
	rsp, err := c.GetThemeBasedBidRecommendationForAdGroupV1WithApplicationVndSpthemebasedbidrecommendationV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetThemeBasedBidRecommendationForAdGroupV1Resp(rsp)
}

// GetTargetableCategoriesWithResponse request returning *GetTargetableCategoriesResp
func (c *ClientWithResponses) GetTargetableCategoriesWithResponse(ctx context.Context, params *GetTargetableCategoriesParams) (*GetTargetableCategoriesResp, error) {
	rsp, err := c.GetTargetableCategories(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetableCategoriesResp(rsp)
}

// GetCategoryRecommendationsForASINsWithBodyWithResponse request with arbitrary body returning *GetCategoryRecommendationsForASINsResp
func (c *ClientWithResponses) GetCategoryRecommendationsForASINsWithBodyWithResponse(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, contentType string, body io.Reader) (*GetCategoryRecommendationsForASINsResp, error) {
	rsp, err := c.GetCategoryRecommendationsForASINsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryRecommendationsForASINsResp(rsp)
}

func (c *ClientWithResponses) GetCategoryRecommendationsForASINsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *GetCategoryRecommendationsForASINsParams, body GetCategoryRecommendationsForASINsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*GetCategoryRecommendationsForASINsResp, error) {
	rsp, err := c.GetCategoryRecommendationsForASINsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryRecommendationsForASINsResp(rsp)
}

// GetRefinementsForCategoryWithResponse request returning *GetRefinementsForCategoryResp
func (c *ClientWithResponses) GetRefinementsForCategoryWithResponse(ctx context.Context, categoryId string, params *GetRefinementsForCategoryParams) (*GetRefinementsForCategoryResp, error) {
	rsp, err := c.GetRefinementsForCategory(ctx, categoryId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRefinementsForCategoryResp(rsp)
}

// DeleteSponsoredProductsTargetingClausesWithBodyWithResponse request with arbitrary body returning *DeleteSponsoredProductsTargetingClausesResp
func (c *ClientWithResponses) DeleteSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*DeleteSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) DeleteSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *DeleteSponsoredProductsTargetingClausesParams, body DeleteSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*DeleteSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.DeleteSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSponsoredProductsTargetingClausesResp(rsp)
}

// GetRankedKeywordRecommendationWithBodyWithResponse request with arbitrary body returning *GetRankedKeywordRecommendationResp
func (c *ClientWithResponses) GetRankedKeywordRecommendationWithBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, contentType string, body io.Reader) (*GetRankedKeywordRecommendationResp, error) {
	rsp, err := c.GetRankedKeywordRecommendationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRankedKeywordRecommendationResp(rsp)
}

func (c *ClientWithResponses) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV3PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error) {
	rsp, err := c.GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRankedKeywordRecommendationResp(rsp)
}

func (c *ClientWithResponses) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV4PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV4PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error) {
	rsp, err := c.GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV4PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRankedKeywordRecommendationResp(rsp)
}

func (c *ClientWithResponses) GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV5PlusJSONBodyWithResponse(ctx context.Context, params *GetRankedKeywordRecommendationParams, body GetRankedKeywordRecommendationApplicationVndSpkeywordsrecommendationV5PlusJSONRequestBody) (*GetRankedKeywordRecommendationResp, error) {
	rsp, err := c.GetRankedKeywordRecommendationWithApplicationVndSpkeywordsrecommendationV5PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetRankedKeywordRecommendationResp(rsp)
}

// ListSponsoredProductsTargetingClausesWithBodyWithResponse request with arbitrary body returning *ListSponsoredProductsTargetingClausesResp
func (c *ClientWithResponses) ListSponsoredProductsTargetingClausesWithBodyWithResponse(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, contentType string, body io.Reader) (*ListSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsTargetingClausesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsTargetingClausesResp(rsp)
}

func (c *ClientWithResponses) ListSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBodyWithResponse(ctx context.Context, params *ListSponsoredProductsTargetingClausesParams, body ListSponsoredProductsTargetingClausesApplicationVndSpTargetingClauseV3PlusJSONRequestBody) (*ListSponsoredProductsTargetingClausesResp, error) {
	rsp, err := c.ListSponsoredProductsTargetingClausesWithApplicationVndSpTargetingClauseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListSponsoredProductsTargetingClausesResp(rsp)
}

// GetTargetableASINCountsWithBodyWithResponse request with arbitrary body returning *GetTargetableASINCountsResp
func (c *ClientWithResponses) GetTargetableASINCountsWithBodyWithResponse(ctx context.Context, params *GetTargetableASINCountsParams, contentType string, body io.Reader) (*GetTargetableASINCountsResp, error) {
	rsp, err := c.GetTargetableASINCountsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetableASINCountsResp(rsp)
}

func (c *ClientWithResponses) GetTargetableASINCountsWithApplicationVndSpproducttargetingV3PlusJSONBodyWithResponse(ctx context.Context, params *GetTargetableASINCountsParams, body GetTargetableASINCountsApplicationVndSpproducttargetingV3PlusJSONRequestBody) (*GetTargetableASINCountsResp, error) {
	rsp, err := c.GetTargetableASINCountsWithApplicationVndSpproducttargetingV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetableASINCountsResp(rsp)
}

// GetProductRecommendationsWithBodyWithResponse request with arbitrary body returning *GetProductRecommendationsResp
func (c *ClientWithResponses) GetProductRecommendationsWithBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*GetProductRecommendationsResp, error) {
	rsp, err := c.GetProductRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetProductRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetProductRecommendationsWithApplicationVndSpproductrecommendationV3PlusJSONBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSpproductrecommendationV3PlusJSONRequestBody) (*GetProductRecommendationsResp, error) {
	rsp, err := c.GetProductRecommendationsWithApplicationVndSpproductrecommendationV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetProductRecommendationsResp(rsp)
}

// ParseCreateSponsoredProductsAdGroupsResp parses an HTTP response from a CreateSponsoredProductsAdGroupsWithResponse call
func ParseCreateSponsoredProductsAdGroupsResp(rsp *http.Response) (*CreateSponsoredProductsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpAdGroupV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsAdGroupMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsAdGroupsResp parses an HTTP response from a UpdateSponsoredProductsAdGroupsWithResponse call
func ParseUpdateSponsoredProductsAdGroupsResp(rsp *http.Response) (*UpdateSponsoredProductsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpAdGroupV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsAdGroupMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsAdGroupsResp parses an HTTP response from a DeleteSponsoredProductsAdGroupsWithResponse call
func ParseDeleteSponsoredProductsAdGroupsResp(rsp *http.Response) (*DeleteSponsoredProductsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpAdGroupV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsAdGroupMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsAdGroupsResp parses an HTTP response from a ListSponsoredProductsAdGroupsWithResponse call
func ParseListSponsoredProductsAdGroupsResp(rsp *http.Response) (*ListSponsoredProductsAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsAdGroupsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpAdGroupV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsAdGroupAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSPBudgetRulesForAdvertiserResp parses an HTTP response from a GetSPBudgetRulesForAdvertiserWithResponse call
func ParseGetSPBudgetRulesForAdvertiserResp(rsp *http.Response) (*GetSPBudgetRulesForAdvertiserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSPBudgetRulesForAdvertiserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSPBudgetRulesForAdvertiserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateBudgetRulesForSPCampaignsResp parses an HTTP response from a CreateBudgetRulesForSPCampaignsWithResponse call
func ParseCreateBudgetRulesForSPCampaignsResp(rsp *http.Response) (*CreateBudgetRulesForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBudgetRulesForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateBudgetRulesForSPCampaignsResp parses an HTTP response from a UpdateBudgetRulesForSPCampaignsWithResponse call
func ParseUpdateBudgetRulesForSPCampaignsResp(rsp *http.Response) (*UpdateBudgetRulesForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBudgetRulesForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRuleByRuleIdForSPCampaignsResp parses an HTTP response from a GetBudgetRuleByRuleIdForSPCampaignsWithResponse call
func ParseGetBudgetRuleByRuleIdForSPCampaignsResp(rsp *http.Response) (*GetBudgetRuleByRuleIdForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRuleByRuleIdForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSPBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignsAssociatedWithSPBudgetRuleResp parses an HTTP response from a GetCampaignsAssociatedWithSPBudgetRuleWithResponse call
func ParseGetCampaignsAssociatedWithSPBudgetRuleResp(rsp *http.Response) (*GetCampaignsAssociatedWithSPBudgetRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsAssociatedWithSPBudgetRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPGetAssociatedCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignRecommendationsResp parses an HTTP response from a GetCampaignRecommendationsWithResponse call
func ParseGetCampaignRecommendationsResp(rsp *http.Response) (*GetCampaignRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpgetcampaignrecommendationsresponseV1JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsCampaignNegativeKeywordsResp parses an HTTP response from a CreateSponsoredProductsCampaignNegativeKeywordsWithResponse call
func ParseCreateSponsoredProductsCampaignNegativeKeywordsResp(rsp *http.Response) (*CreateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsCampaignNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsCampaignNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsCampaignNegativeKeywordsResp parses an HTTP response from a UpdateSponsoredProductsCampaignNegativeKeywordsWithResponse call
func ParseUpdateSponsoredProductsCampaignNegativeKeywordsResp(rsp *http.Response) (*UpdateSponsoredProductsCampaignNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsCampaignNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsCampaignNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsCampaignNegativeKeywordsResp parses an HTTP response from a DeleteSponsoredProductsCampaignNegativeKeywordsWithResponse call
func ParseDeleteSponsoredProductsCampaignNegativeKeywordsResp(rsp *http.Response) (*DeleteSponsoredProductsCampaignNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsCampaignNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsCampaignNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsCampaignNegativeKeywordsResp parses an HTTP response from a ListSponsoredProductsCampaignNegativeKeywordsWithResponse call
func ParseListSponsoredProductsCampaignNegativeKeywordsResp(rsp *http.Response) (*ListSponsoredProductsCampaignNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsCampaignNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsCampaignNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeKeywordV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeKeywordAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsCampaignNegativeTargetingClausesResp parses an HTTP response from a CreateSponsoredProductsCampaignNegativeTargetingClausesWithResponse call
func ParseCreateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp *http.Response) (*CreateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsCampaignNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsCampaignNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsCampaignNegativeTargetingClausesResp parses an HTTP response from a UpdateSponsoredProductsCampaignNegativeTargetingClausesWithResponse call
func ParseUpdateSponsoredProductsCampaignNegativeTargetingClausesResp(rsp *http.Response) (*UpdateSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsCampaignNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsCampaignNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsCampaignNegativeTargetingClausesResp parses an HTTP response from a DeleteSponsoredProductsCampaignNegativeTargetingClausesWithResponse call
func ParseDeleteSponsoredProductsCampaignNegativeTargetingClausesResp(rsp *http.Response) (*DeleteSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsCampaignNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsCampaignNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeTargetsMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsCampaignNegativeTargetingClausesResp parses an HTTP response from a ListSponsoredProductsCampaignNegativeTargetingClausesWithResponse call
func ParseListSponsoredProductsCampaignNegativeTargetingClausesResp(rsp *http.Response) (*ListSponsoredProductsCampaignNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsCampaignNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsCampaignNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignNegativeTargetingClauseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignNegativeTargetsAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsCampaignsResp parses an HTTP response from a CreateSponsoredProductsCampaignsWithResponse call
func ParseCreateSponsoredProductsCampaignsResp(rsp *http.Response) (*CreateSponsoredProductsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsCampaignsResp parses an HTTP response from a UpdateSponsoredProductsCampaignsWithResponse call
func ParseUpdateSponsoredProductsCampaignsResp(rsp *http.Response) (*UpdateSponsoredProductsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSpCampaignsBudgetUsageResp parses an HTTP response from a SpCampaignsBudgetUsageWithResponse call
func ParseSpCampaignsBudgetUsageResp(rsp *http.Response) (*SpCampaignsBudgetUsageResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpCampaignsBudgetUsageResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BudgetUsageCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpcampaignbudgetusageV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetUsageError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRecommendationsResp parses an HTTP response from a GetBudgetRecommendationsWithResponse call
func ParseGetBudgetRecommendationsResp(rsp *http.Response) (*GetBudgetRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BudgetRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SPTORBudgetRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBudgetrecommendationV3JSON500 = &dest

	}

	return response, nil
}

// ParseSPGetBudgetRulesRecommendationResp parses an HTTP response from a SPGetBudgetRulesRecommendationWithResponse call
func ParseSPGetBudgetRulesRecommendationResp(rsp *http.Response) (*SPGetBudgetRulesRecommendationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SPGetBudgetRulesRecommendationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPBudgetRulesRecommendationEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpbudgetrulesrecommendationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SPBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpbudgetrulesrecommendationV3JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SPBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpbudgetrulesrecommendationV3JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SPBudgetRulesRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpbudgetrulesrecommendationV3JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsCampaignsResp parses an HTTP response from a DeleteSponsoredProductsCampaignsWithResponse call
func ParseDeleteSponsoredProductsCampaignsResp(rsp *http.Response) (*DeleteSponsoredProductsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBudgetRecommendationResp parses an HTTP response from a GetBudgetRecommendationWithResponse call
func ParseGetBudgetRecommendationResp(rsp *http.Response) (*GetBudgetRecommendationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBudgetRecommendationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InitialBudgetRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRecommendationNewCampaignsException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpinitialbudgetrecommendationV34JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsCampaignsResp parses an HTTP response from a ListSponsoredProductsCampaignsWithResponse call
func ParseListSponsoredProductsCampaignsResp(rsp *http.Response) (*ListSponsoredProductsCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsCampaignsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpCampaignV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsCampaignAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAssociatedBudgetRulesForSPCampaignsResp parses an HTTP response from a ListAssociatedBudgetRulesForSPCampaignsWithResponse call
func ParseListAssociatedBudgetRulesForSPCampaignsResp(rsp *http.Response) (*ListAssociatedBudgetRulesForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssociatedBudgetRulesForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPListAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAssociatedBudgetRulesForSPCampaignsResp parses an HTTP response from a CreateAssociatedBudgetRulesForSPCampaignsWithResponse call
func ParseCreateAssociatedBudgetRulesForSPCampaignsResp(rsp *http.Response) (*CreateAssociatedBudgetRulesForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssociatedBudgetRulesForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest CreateAssociatedBudgetRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRuleBasedBudgetHistoryForSPCampaignsResp parses an HTTP response from a GetRuleBasedBudgetHistoryForSPCampaignsWithResponse call
func ParseGetRuleBasedBudgetHistoryForSPCampaignsResp(rsp *http.Response) (*GetRuleBasedBudgetHistoryForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleBasedBudgetHistoryForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPBudgetHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDisassociateAssociatedBudgetRuleForSPCampaignsResp parses an HTTP response from a DisassociateAssociatedBudgetRuleForSPCampaignsWithResponse call
func ParseDisassociateAssociatedBudgetRuleForSPCampaignsResp(rsp *http.Response) (*DisassociateAssociatedBudgetRuleForSPCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateAssociatedBudgetRuleForSPCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisassociateAssociatedBudgetRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BudgetRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsKeywordsResp parses an HTTP response from a CreateSponsoredProductsKeywordsWithResponse call
func ParseCreateSponsoredProductsKeywordsResp(rsp *http.Response) (*CreateSponsoredProductsKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsKeywordsResp parses an HTTP response from a UpdateSponsoredProductsKeywordsWithResponse call
func ParseUpdateSponsoredProductsKeywordsResp(rsp *http.Response) (*UpdateSponsoredProductsKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsKeywordsResp parses an HTTP response from a DeleteSponsoredProductsKeywordsWithResponse call
func ParseDeleteSponsoredProductsKeywordsResp(rsp *http.Response) (*DeleteSponsoredProductsKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsKeywordsResp parses an HTTP response from a ListSponsoredProductsKeywordsWithResponse call
func ParseListSponsoredProductsKeywordsResp(rsp *http.Response) (*ListSponsoredProductsKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpKeywordV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsKeywordAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsNegativeKeywordsResp parses an HTTP response from a CreateSponsoredProductsNegativeKeywordsWithResponse call
func ParseCreateSponsoredProductsNegativeKeywordsResp(rsp *http.Response) (*CreateSponsoredProductsNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsNegativeKeywordsResp parses an HTTP response from a UpdateSponsoredProductsNegativeKeywordsWithResponse call
func ParseUpdateSponsoredProductsNegativeKeywordsResp(rsp *http.Response) (*UpdateSponsoredProductsNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsNegativeKeywordsResp parses an HTTP response from a DeleteSponsoredProductsNegativeKeywordsWithResponse call
func ParseDeleteSponsoredProductsNegativeKeywordsResp(rsp *http.Response) (*DeleteSponsoredProductsNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeKeywordV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeKeywordMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsNegativeKeywordsResp parses an HTTP response from a ListSponsoredProductsNegativeKeywordsWithResponse call
func ParseListSponsoredProductsNegativeKeywordsResp(rsp *http.Response) (*ListSponsoredProductsNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsNegativeKeywordsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeKeywordV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeKeywordAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsNegativeTargetingClausesResp parses an HTTP response from a CreateSponsoredProductsNegativeTargetingClausesWithResponse call
func ParseCreateSponsoredProductsNegativeTargetingClausesResp(rsp *http.Response) (*CreateSponsoredProductsNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsNegativeTargetingClausesResp parses an HTTP response from a UpdateSponsoredProductsNegativeTargetingClausesWithResponse call
func ParseUpdateSponsoredProductsNegativeTargetingClausesResp(rsp *http.Response) (*UpdateSponsoredProductsNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNegativeBrandsResp parses an HTTP response from a GetNegativeBrandsWithResponse call
func ParseGetNegativeBrandsResp(rsp *http.Response) (*GetNegativeBrandsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNegativeBrandsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Brands
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDeniedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSearchBrandsResp parses an HTTP response from a SearchBrandsWithResponse call
func ParseSearchBrandsResp(rsp *http.Response) (*SearchBrandsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchBrandsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Brands
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsNegativeTargetingClausesResp parses an HTTP response from a DeleteSponsoredProductsNegativeTargetingClausesWithResponse call
func ParseDeleteSponsoredProductsNegativeTargetingClausesResp(rsp *http.Response) (*DeleteSponsoredProductsNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsNegativeTargetingClausesResp parses an HTTP response from a ListSponsoredProductsNegativeTargetingClausesWithResponse call
func ParseListSponsoredProductsNegativeTargetingClausesResp(rsp *http.Response) (*ListSponsoredProductsNegativeTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsNegativeTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpNegativeTargetingClauseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsNegativeTargetAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsProductAdsResp parses an HTTP response from a CreateSponsoredProductsProductAdsWithResponse call
func ParseCreateSponsoredProductsProductAdsResp(rsp *http.Response) (*CreateSponsoredProductsProductAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsProductAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsProductAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpProductAdV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsProductAdMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsProductAdsResp parses an HTTP response from a UpdateSponsoredProductsProductAdsWithResponse call
func ParseUpdateSponsoredProductsProductAdsResp(rsp *http.Response) (*UpdateSponsoredProductsProductAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsProductAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpProductAdV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsProductAdMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsProductAdsResp parses an HTTP response from a DeleteSponsoredProductsProductAdsWithResponse call
func ParseDeleteSponsoredProductsProductAdsResp(rsp *http.Response) (*DeleteSponsoredProductsProductAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsProductAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpProductAdV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsProductAdMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsProductAdsResp parses an HTTP response from a ListSponsoredProductsProductAdsWithResponse call
func ParseListSponsoredProductsProductAdsResp(rsp *http.Response) (*ListSponsoredProductsProductAdsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsProductAdsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsProductAdsResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpProductAdV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsProductAdAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOptimizationRuleResp parses an HTTP response from a CreateOptimizationRuleWithResponse call
func ParseCreateOptimizationRuleResp(rsp *http.Response) (*CreateOptimizationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOptimizationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateSPCampaignOptimizationRulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOptimizationRuleResp parses an HTTP response from a UpdateOptimizationRuleWithResponse call
func ParseUpdateOptimizationRuleResp(rsp *http.Response) (*UpdateOptimizationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOptimizationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateSPCampaignOptimizationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOptimizationRuleEligibilityResp parses an HTTP response from a GetOptimizationRuleEligibilityWithResponse call
func ParseGetOptimizationRuleEligibilityResp(rsp *http.Response) (*GetOptimizationRuleEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOptimizationRuleEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPCampaignOptimizationRecommendationAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRuleNotificationResp parses an HTTP response from a GetRuleNotificationWithResponse call
func ParseGetRuleNotificationResp(rsp *http.Response) (*GetRuleNotificationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleNotificationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SPCampaignOptimizationNotificationAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCampaignOptimizationRuleResp parses an HTTP response from a DeleteCampaignOptimizationRuleWithResponse call
func ParseDeleteCampaignOptimizationRuleResp(rsp *http.Response) (*DeleteCampaignOptimizationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaignOptimizationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteSPCampaignOptimizationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCampaignOptimizationRuleResp parses an HTTP response from a GetCampaignOptimizationRuleWithResponse call
func ParseGetCampaignOptimizationRuleResp(rsp *http.Response) (*GetCampaignOptimizationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignOptimizationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSPCampaignOptimizationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOptimizationrulesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CampaignOptimizationRuleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSponsoredProductsTargetingClausesResp parses an HTTP response from a CreateSponsoredProductsTargetingClausesWithResponse call
func ParseCreateSponsoredProductsTargetingClausesResp(rsp *http.Response) (*CreateSponsoredProductsTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSponsoredProductsTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsCreateSponsoredProductsTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSponsoredProductsTargetingClausesResp parses an HTTP response from a UpdateSponsoredProductsTargetingClausesWithResponse call
func ParseUpdateSponsoredProductsTargetingClausesResp(rsp *http.Response) (*UpdateSponsoredProductsTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSponsoredProductsTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsUpdateSponsoredProductsTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetThemeBasedBidRecommendationForAdGroupV1Resp parses an HTTP response from a GetThemeBasedBidRecommendationForAdGroupV1WithResponse call
func ParseGetThemeBasedBidRecommendationForAdGroupV1Resp(rsp *http.Response) (*GetThemeBasedBidRecommendationForAdGroupV1Resp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThemeBasedBidRecommendationForAdGroupV1Resp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThemeBasedBidRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpthemebasedbidrecommendationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BidRecommendationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetableCategoriesResp parses an HTTP response from a GetTargetableCategoriesWithResponse call
func ParseGetTargetableCategoriesResp(rsp *http.Response) (*GetTargetableCategoriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetableCategoriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v3+json" && rsp.StatusCode == 200:
		var dest TargetableCategories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v4+json" && rsp.StatusCode == 200:
		var dest TargetableCategories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV4JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v5+json" && rsp.StatusCode == 200:
		var dest TargetableCategoriesLoP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV5JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCategoryRecommendationsForASINsResp parses an HTTP response from a GetCategoryRecommendationsForASINsWithResponse call
func ParseGetCategoryRecommendationsForASINsResp(rsp *http.Response) (*GetCategoryRecommendationsForASINsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryRecommendationsForASINsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v3+json" && rsp.StatusCode == 200:
		var dest CategoryRecommendations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v4+json" && rsp.StatusCode == 200:
		var dest CategoryRecommendationsWithAsinCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV4JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v5+json" && rsp.StatusCode == 200:
		var dest CategoryRecommendationsWithAsinCountsLoP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV5JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRefinementsForCategoryResp parses an HTTP response from a GetRefinementsForCategoryWithResponse call
func ParseGetRefinementsForCategoryResp(rsp *http.Response) (*GetRefinementsForCategoryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRefinementsForCategoryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v3+json" && rsp.StatusCode == 200:
		var dest Refinements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproducttargetingresponse.v4+json" && rsp.StatusCode == 200:
		var dest RefinementsLoP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV4JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSponsoredProductsTargetingClausesResp parses an HTTP response from a DeleteSponsoredProductsTargetingClausesWithResponse call
func ParseDeleteSponsoredProductsTargetingClausesResp(rsp *http.Response) (*DeleteSponsoredProductsTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSponsoredProductsTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SponsoredProductsDeleteSponsoredProductsTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpTargetingClauseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsTargetMutationExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRankedKeywordRecommendationResp parses an HTTP response from a GetRankedKeywordRecommendationWithResponse call
func ParseGetRankedKeywordRecommendationResp(rsp *http.Response) (*GetRankedKeywordRecommendationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankedKeywordRecommendationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 200:
		var dest []KeywordTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 400:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 401:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 422:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 429:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v3+json" && rsp.StatusCode == 500:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 200:
		var dest RankedTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 400:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 401:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 422:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 429:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v4+json" && rsp.StatusCode == 500:
		var dest SPTargetingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV4JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spkeywordsrecommendation.v5+json" && rsp.StatusCode == 200:
		var dest RankedTargetWithThemedBidsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpkeywordsrecommendationV5JSON200 = &dest

	}

	return response, nil
}

// ParseListSponsoredProductsTargetingClausesResp parses an HTTP response from a ListSponsoredProductsTargetingClausesWithResponse call
func ParseListSponsoredProductsTargetingClausesResp(rsp *http.Response) (*ListSponsoredProductsTargetingClausesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSponsoredProductsTargetingClausesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsoredProductsListSponsoredProductsTargetingClausesResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpTargetingClauseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SponsoredProductsTargetAccessExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SponsoredProductsUnauthorizedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SponsoredProductsAccessDeniedExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SponsoredProductsUnsupportedMediaTypeExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SponsoredProductsThrottlingExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SponsoredProductsInternalServerExceptionResponseContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetableASINCountsResp parses an HTTP response from a GetTargetableASINCountsWithResponse call
func ParseGetTargetableASINCountsResp(rsp *http.Response) (*GetTargetableASINCountsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetableASINCountsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetableAsinCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproducttargetingresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProductRecommendationsResp parses an HTTP response from a GetProductRecommendationsWithResponse call
func ParseGetProductRecommendationsResp(rsp *http.Response) (*GetProductRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.spproductrecommendationresponse.asins.v3+json" && rsp.StatusCode == 200:
		var dest ProductRecommendationsByASIN
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproductrecommendationresponseAsinsV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.spproductrecommendationresponse.themes.v3+json" && rsp.StatusCode == 200:
		var dest ProductRecommendationsByTheme
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSpproductrecommendationresponseThemesV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ThrottlingException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerException
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
