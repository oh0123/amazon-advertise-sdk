// Package sponsoredproductssnapshots provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package sponsoredproductssnapshots

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for AdGroupSuggestedKeywordsResponseExState.
const (
	AdGroupSuggestedKeywordsResponseExStateEnabled AdGroupSuggestedKeywordsResponseExState = "enabled"
	AdGroupSuggestedKeywordsResponseExStatePaused  AdGroupSuggestedKeywordsResponseExState = "paused"
)

// Defines values for BidRecommendationsCode.
const (
	BidRecommendationsCodeINTERNALERROR   BidRecommendationsCode = "INTERNAL_ERROR"
	BidRecommendationsCodeINVALIDARGUMENT BidRecommendationsCode = "INVALID_ARGUMENT"
	BidRecommendationsCodeNOTFOUND        BidRecommendationsCode = "NOT_FOUND"
	BidRecommendationsCodeSERVERISBUSY    BidRecommendationsCode = "SERVER_IS_BUSY"
	BidRecommendationsCodeSUCCESS         BidRecommendationsCode = "SUCCESS"
	BidRecommendationsCodeUNAUTHORIZED    BidRecommendationsCode = "UNAUTHORIZED"
)

// Defines values for BidRecommendationsResponseRecommendationsCode.
const (
	BidRecommendationsResponseRecommendationsCodeNOTFOUND BidRecommendationsResponseRecommendationsCode = "NOT_FOUND"
	BidRecommendationsResponseRecommendationsCodeSUCCESS  BidRecommendationsResponseRecommendationsCode = "SUCCESS"
)

// Defines values for MatchType.
const (
	Broad  MatchType = "broad"
	Exact  MatchType = "exact"
	Phrase MatchType = "phrase"
)

// Defines values for SnapshotRequestStateFilter.
const (
	SnapshotRequestStateFilterArchived              SnapshotRequestStateFilter = "archived"
	SnapshotRequestStateFilterEnabled               SnapshotRequestStateFilter = "enabled"
	SnapshotRequestStateFilterEnabledArchived       SnapshotRequestStateFilter = "enabled, archived"
	SnapshotRequestStateFilterEnabledPaused         SnapshotRequestStateFilter = "enabled, paused"
	SnapshotRequestStateFilterEnabledPausedArchived SnapshotRequestStateFilter = "enabled, paused, archived"
	SnapshotRequestStateFilterPaused                SnapshotRequestStateFilter = "paused"
	SnapshotRequestStateFilterPausedArchived        SnapshotRequestStateFilter = "paused, archived"
)

// Defines values for SnapshotResponseRecordType.
const (
	SnapshotResponseRecordTypeAdGroups                 SnapshotResponseRecordType = "adGroups"
	SnapshotResponseRecordTypeCampaignNegativeKeywords SnapshotResponseRecordType = "campaignNegativeKeywords"
	SnapshotResponseRecordTypeCampaigns                SnapshotResponseRecordType = "campaigns"
	SnapshotResponseRecordTypeKeywords                 SnapshotResponseRecordType = "keywords"
	SnapshotResponseRecordTypeNegativeKeywords         SnapshotResponseRecordType = "negativeKeywords"
	SnapshotResponseRecordTypeNegativeTargets          SnapshotResponseRecordType = "negativeTargets"
	SnapshotResponseRecordTypeProductAds               SnapshotResponseRecordType = "productAds"
	SnapshotResponseRecordTypeTargets                  SnapshotResponseRecordType = "targets"
)

// Defines values for SnapshotResponseStatus.
const (
	FAILURE    SnapshotResponseStatus = "FAILURE"
	INPROGRESS SnapshotResponseStatus = "IN_PROGRESS"
	SUCCESS    SnapshotResponseStatus = "SUCCESS"
)

// Defines values for TargetingExpressionPredicateType.
const (
	AsinAccessoryRelated        TargetingExpressionPredicateType = "asinAccessoryRelated"
	AsinAgeRangeSameAs          TargetingExpressionPredicateType = "asinAgeRangeSameAs"
	AsinBrandSameAs             TargetingExpressionPredicateType = "asinBrandSameAs"
	AsinCategorySameAs          TargetingExpressionPredicateType = "asinCategorySameAs"
	AsinExpandedFrom            TargetingExpressionPredicateType = "asinExpandedFrom"
	AsinGenreSameAs             TargetingExpressionPredicateType = "asinGenreSameAs"
	AsinIsPrimeShippingEligible TargetingExpressionPredicateType = "asinIsPrimeShippingEligible"
	AsinPriceBetween            TargetingExpressionPredicateType = "asinPriceBetween"
	AsinPriceGreaterThan        TargetingExpressionPredicateType = "asinPriceGreaterThan"
	AsinPriceLessThan           TargetingExpressionPredicateType = "asinPriceLessThan"
	AsinReviewRatingBetween     TargetingExpressionPredicateType = "asinReviewRatingBetween"
	AsinReviewRatingGreaterThan TargetingExpressionPredicateType = "asinReviewRatingGreaterThan"
	AsinReviewRatingLessThan    TargetingExpressionPredicateType = "asinReviewRatingLessThan"
	AsinSameAs                  TargetingExpressionPredicateType = "asinSameAs"
	AsinSubstituteRelated       TargetingExpressionPredicateType = "asinSubstituteRelated"
	QueryBroadMatches           TargetingExpressionPredicateType = "queryBroadMatches"
	QueryBroadRelMatches        TargetingExpressionPredicateType = "queryBroadRelMatches"
	QueryExactMatches           TargetingExpressionPredicateType = "queryExactMatches"
	QueryHighRelMatches         TargetingExpressionPredicateType = "queryHighRelMatches"
	QueryPhraseMatches          TargetingExpressionPredicateType = "queryPhraseMatches"
)

// Defines values for AdStateFilter.
const (
	AdStateFilterArchived              AdStateFilter = "archived"
	AdStateFilterEnabled               AdStateFilter = "enabled"
	AdStateFilterEnabledArchived       AdStateFilter = "enabled, archived"
	AdStateFilterEnabledPaused         AdStateFilter = "enabled, paused"
	AdStateFilterEnabledPausedArchived AdStateFilter = "enabled, paused, archived"
	AdStateFilterPaused                AdStateFilter = "paused"
	AdStateFilterPausedArchived        AdStateFilter = "paused, archived"
)

// Defines values for GetAdGroupSuggestedKeywordsParamsAdStateFilter.
const (
	GetAdGroupSuggestedKeywordsParamsAdStateFilterArchived              GetAdGroupSuggestedKeywordsParamsAdStateFilter = "archived"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterEnabled               GetAdGroupSuggestedKeywordsParamsAdStateFilter = "enabled"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterEnabledArchived       GetAdGroupSuggestedKeywordsParamsAdStateFilter = "enabled, archived"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterEnabledPaused         GetAdGroupSuggestedKeywordsParamsAdStateFilter = "enabled, paused"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterEnabledPausedArchived GetAdGroupSuggestedKeywordsParamsAdStateFilter = "enabled, paused, archived"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterPaused                GetAdGroupSuggestedKeywordsParamsAdStateFilter = "paused"
	GetAdGroupSuggestedKeywordsParamsAdStateFilterPausedArchived        GetAdGroupSuggestedKeywordsParamsAdStateFilter = "paused, archived"
)

// Defines values for GetAdGroupSuggestedKeywordsExParamsSuggestBids.
const (
	No  GetAdGroupSuggestedKeywordsExParamsSuggestBids = "no"
	Yes GetAdGroupSuggestedKeywordsExParamsSuggestBids = "yes"
)

// Defines values for GetAdGroupSuggestedKeywordsExParamsAdStateFilter.
const (
	Archived              GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "archived"
	Enabled               GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "enabled"
	EnabledArchived       GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "enabled, archived"
	EnabledPaused         GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "enabled, paused"
	EnabledPausedArchived GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "enabled, paused, archived"
	Paused                GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "paused"
	PausedArchived        GetAdGroupSuggestedKeywordsExParamsAdStateFilter = "paused, archived"
)

// Defines values for RequestSnapshotParamsRecordType.
const (
	RequestSnapshotParamsRecordTypeAdGroups                 RequestSnapshotParamsRecordType = "adGroups"
	RequestSnapshotParamsRecordTypeCampaignNegativeKeywords RequestSnapshotParamsRecordType = "campaignNegativeKeywords"
	RequestSnapshotParamsRecordTypeCampaigns                RequestSnapshotParamsRecordType = "campaigns"
	RequestSnapshotParamsRecordTypeKeywords                 RequestSnapshotParamsRecordType = "keywords"
	RequestSnapshotParamsRecordTypeNegativeKeywords         RequestSnapshotParamsRecordType = "negativeKeywords"
	RequestSnapshotParamsRecordTypeNegativeTargets          RequestSnapshotParamsRecordType = "negativeTargets"
	RequestSnapshotParamsRecordTypeProductAds               RequestSnapshotParamsRecordType = "productAds"
	RequestSnapshotParamsRecordTypeTargets                  RequestSnapshotParamsRecordType = "targets"
)

// AdGroupBidRecommendationsResponse defines model for AdGroupBidRecommendationsResponse.
type AdGroupBidRecommendationsResponse struct {
	// AdGroupId The identifier of the ad group.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// SuggestedBid Information about the recommended bid.
	SuggestedBid *SuggestedBid `json:"suggestedBid,omitempty"`
}

// AdGroupSuggestedKeywordsResponse defines model for AdGroupSuggestedKeywordsResponse.
type AdGroupSuggestedKeywordsResponse struct {
	// AdGroupId The ad group identifier.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// SuggestededKeywords An array of suggested keywords.
	SuggestededKeywords *[]string `json:"suggestededKeywords,omitempty"`
}

// AdGroupSuggestedKeywordsResponseEx defines model for AdGroupSuggestedKeywordsResponseEx.
type AdGroupSuggestedKeywordsResponseEx struct {
	// AdGroupId The ad group identifier.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// Bid The suggested bid for the suggested keyword. Note that this field will not be included in the response if the `suggestBids` query parameter is set to `no` in the request.
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *float32 `json:"campaignId,omitempty"`

	// KeywordText The suggested keyword.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`

	// State The state of the ad for which the keyword is suggested.
	State *AdGroupSuggestedKeywordsResponseExState `json:"state,omitempty"`
}

// AdGroupSuggestedKeywordsResponseExState The state of the ad for which the keyword is suggested.
type AdGroupSuggestedKeywordsResponseExState string

// BidRecommendationsCode The response code.
type BidRecommendationsCode string

// BidRecommendationsResponse defines model for BidRecommendationsResponse.
type BidRecommendationsResponse struct {
	// AdGroupId The identifier of the ad group that the recommendations are associated with.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// Recommendations An array of bid recommendation objects.
	Recommendations *[]struct {
		// Code The resulting status code for retrieving the bid.
		Code *BidRecommendationsResponseRecommendationsCode `json:"code,omitempty"`

		// Keyword The keyword text.
		Keyword *string `json:"keyword,omitempty"`

		// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// SuggestedBid Information about the recommended bid.
		SuggestedBid *SuggestedBid `json:"suggestedBid,omitempty"`
	} `json:"recommendations,omitempty"`
}

// BidRecommendationsResponseRecommendationsCode The resulting status code for retrieving the bid.
type BidRecommendationsResponseRecommendationsCode string

// BulkGetAsinSuggestedKeywordsResponse defines model for BulkGetAsinSuggestedKeywordsResponse.
type BulkGetAsinSuggestedKeywordsResponse = []struct {
	// KeywordText The keyword text.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code An enumerated error for machine use.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error.
	Details *string `json:"details,omitempty"`
}

// GetAsinSuggestedKeywordsResponse defines model for GetAsinSuggestedKeywordsResponse.
type GetAsinSuggestedKeywordsResponse struct {
	// Asin The ASIN for which keywords are suggested.
	Asin *string `json:"asin,omitempty"`

	// SuggestedKeywords The list of suggested keywords.
	SuggestedKeywords *[]struct {
		// KeywordText The text of the suggested keyword.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"suggestedKeywords,omitempty"`
}

// KeywordBidRecommendationsData defines model for KeywordBidRecommendationsData.
type KeywordBidRecommendationsData struct {
	// AdGroupId The identifier of the ad group that the keywords are associated with.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// Keywords An array of keyword data objects.
	Keywords *[]struct {
		// Keyword The keyword text.
		Keyword *string `json:"keyword,omitempty"`

		// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"keywords,omitempty"`
}

// KeywordBidRecommendationsResponse defines model for KeywordBidRecommendationsResponse.
type KeywordBidRecommendationsResponse struct {
	// AdGroupId The identifier of the ad group that the bid is associated with.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// KeywordId The identifier of the keyword that the bid is associated with.
	KeywordId *float32 `json:"keywordId,omitempty"`

	// SuggestedBid Information about the recommended bid.
	SuggestedBid *SuggestedBid `json:"suggestedBid,omitempty"`
}

// MatchType The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
type MatchType string

// SnapshotRequest defines model for SnapshotRequest.
type SnapshotRequest struct {
	StateFilter *SnapshotRequestStateFilter `json:"stateFilter,omitempty"`
}

// SnapshotRequestStateFilter defines model for SnapshotRequest.StateFilter.
type SnapshotRequestStateFilter string

// SnapshotResponse defines model for SnapshotResponse.
type SnapshotResponse struct {
	// RecordType The record type of the report.
	RecordType *SnapshotResponseRecordType `json:"recordType,omitempty"`

	// SnapshotId The snapshot identifier.
	SnapshotId *string `json:"snapshotId,omitempty"`

	// Status The generation status of the snapshot.
	Status *SnapshotResponseStatus `json:"status,omitempty"`
}

// SnapshotResponseRecordType The record type of the report.
type SnapshotResponseRecordType string

// SnapshotResponseStatus The generation status of the snapshot.
type SnapshotResponseStatus string

// SuggestedBid Information about the recommended bid.
type SuggestedBid struct {
	// RangeEnd The upper bound bid recommendation.
	RangeEnd *float32 `json:"rangeEnd,omitempty"`

	// RangeStart The lower bound bid recommendation.
	RangeStart *float32 `json:"rangeStart,omitempty"`

	// Suggested The bid recommendation.
	Suggested *float32 `json:"suggested,omitempty"`
}

// TargetingExpressionPredicate defines model for TargetingExpressionPredicate.
type TargetingExpressionPredicate struct {
	// Type The type of targeting expression. You can specify values for the following predicates:
	// | Predicate | Description |
	// | --- | --- |
	// | `asinCategorySameAs` | Negatively Target the same category as the category expressed. |
	// | `asinBrandSameAs` | Target the brand that is the same as the brand expressed. |
	// | `asinPriceLessThan` | Target a price that is less than the price expressed. |
	// | `asinPriceBetween` | Target a price that is between the prices expressed. |
	// | `asinPriceGreaterThan` | Target a price that is greater than the price expressed. |
	// | `asinReviewRatingLessThan` | Target a review rating less than the review rating that is expressed. |
	// | `asinReviewRatingBetween` | Target a review rating that is between the review ratings expressed. |
	// | `asinReviewRatingGreaterThan` | Target a review rating that is greater than the review rating expressed. |
	// | `asinSameAs` | Target an ASIN that is the same as the ASIN expressed. |
	// | `asinIsPrimeShippingEligible` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
	// | `asinAgeRangeSameAs` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
	// | `asinGenreSameAs` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
	// | `asinExpandedFrom` | Target a single product along with others closely related to it, including substitutes and complements.   |
	// | `queryExactMatches` | Use this enum to exactly match your query with search queries.   |
	// | `queryPhraseMatches` | Use this enum to match your query with search phrases.   |
	// | `queryBroadMatches` | Use this enum to broadly match your query with search queries.   |
	Type *TargetingExpressionPredicateType `json:"type,omitempty"`

	// Value The expression value
	Value *string `json:"value,omitempty"`
}

// TargetingExpressionPredicateType The type of targeting expression. You can specify values for the following predicates:
// | Predicate | Description |
// | --- | --- |
// | `asinCategorySameAs` | Negatively Target the same category as the category expressed. |
// | `asinBrandSameAs` | Target the brand that is the same as the brand expressed. |
// | `asinPriceLessThan` | Target a price that is less than the price expressed. |
// | `asinPriceBetween` | Target a price that is between the prices expressed. |
// | `asinPriceGreaterThan` | Target a price that is greater than the price expressed. |
// | `asinReviewRatingLessThan` | Target a review rating less than the review rating that is expressed. |
// | `asinReviewRatingBetween` | Target a review rating that is between the review ratings expressed. |
// | `asinReviewRatingGreaterThan` | Target a review rating that is greater than the review rating expressed. |
// | `asinSameAs` | Target an ASIN that is the same as the ASIN expressed. |
// | `asinIsPrimeShippingEligible` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. |
// | `asinAgeRangeSameAs` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. |
// | `asinGenreSameAs` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
// | `asinExpandedFrom` | Target a single product along with others closely related to it, including substitutes and complements.   |
// | `queryExactMatches` | Use this enum to exactly match your query with search queries.   |
// | `queryPhraseMatches` | Use this enum to match your query with search phrases.   |
// | `queryBroadMatches` | Use this enum to broadly match your query with search queries.   |
type TargetingExpressionPredicateType string

// AdGroupId defines model for adGroupId.
type AdGroupId = float32

// AdStateFilter defines model for adStateFilter.
type AdStateFilter string

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// MaxNumSuggestions defines model for maxNumSuggestions.
type MaxNumSuggestions = int

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InvalidQueryParam defines model for InvalidQueryParam.
type InvalidQueryParam = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ResourceNotFound defines model for ResourceNotFound.
type ResourceNotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetAdGroupBidRecommendationsParams defines parameters for GetAdGroupBidRecommendations.
type GetAdGroupBidRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetAdGroupSuggestedKeywordsParams defines parameters for GetAdGroupSuggestedKeywords.
type GetAdGroupSuggestedKeywordsParams struct {
	// MaxNumSuggestions The maximum number of suggested keywords for the response.
	MaxNumSuggestions *MaxNumSuggestions `form:"maxNumSuggestions,omitempty" json:"maxNumSuggestions,omitempty"`

	// AdStateFilter Filters results to ad groups with state matching the comma-delimited list.
	AdStateFilter *GetAdGroupSuggestedKeywordsParamsAdStateFilter `form:"adStateFilter,omitempty" json:"adStateFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetAdGroupSuggestedKeywordsParamsAdStateFilter defines parameters for GetAdGroupSuggestedKeywords.
type GetAdGroupSuggestedKeywordsParamsAdStateFilter string

// GetAdGroupSuggestedKeywordsExParams defines parameters for GetAdGroupSuggestedKeywordsEx.
type GetAdGroupSuggestedKeywordsExParams struct {
	// MaxNumSuggestions The maximum number of suggested keywords for the response.
	MaxNumSuggestions *MaxNumSuggestions `form:"maxNumSuggestions,omitempty" json:"maxNumSuggestions,omitempty"`

	// SuggestBids Set to `yes` to include a suggest bid for the suggested keyword in the response. Otherwise, set to `no`.
	SuggestBids *GetAdGroupSuggestedKeywordsExParamsSuggestBids `form:"suggestBids,omitempty" json:"suggestBids,omitempty"`

	// AdStateFilter Filters results to ad groups with state matching the comma-delimited list.
	AdStateFilter *GetAdGroupSuggestedKeywordsExParamsAdStateFilter `form:"adStateFilter,omitempty" json:"adStateFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetAdGroupSuggestedKeywordsExParamsSuggestBids defines parameters for GetAdGroupSuggestedKeywordsEx.
type GetAdGroupSuggestedKeywordsExParamsSuggestBids string

// GetAdGroupSuggestedKeywordsExParamsAdStateFilter defines parameters for GetAdGroupSuggestedKeywordsEx.
type GetAdGroupSuggestedKeywordsExParamsAdStateFilter string

// BulkGetAsinSuggestedKeywordsJSONBody defines parameters for BulkGetAsinSuggestedKeywords.
type BulkGetAsinSuggestedKeywordsJSONBody struct {
	// Asins A list of ASINs.
	Asins *[]string `json:"asins,omitempty"`

	// MaxNumSuggestions The maximum number of suggested keywords in the response.
	MaxNumSuggestions *int `json:"maxNumSuggestions,omitempty"`
}

// BulkGetAsinSuggestedKeywordsParams defines parameters for BulkGetAsinSuggestedKeywords.
type BulkGetAsinSuggestedKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetAsinSuggestedKeywordsParams defines parameters for GetAsinSuggestedKeywords.
type GetAsinSuggestedKeywordsParams struct {
	// MaxNumSuggestions The maximum number of suggested keywords for the response.
	MaxNumSuggestions *MaxNumSuggestions `form:"maxNumSuggestions,omitempty" json:"maxNumSuggestions,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateKeywordBidRecommendationsParams defines parameters for CreateKeywordBidRecommendations.
type CreateKeywordBidRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetKeywordBidRecommendationsParams defines parameters for GetKeywordBidRecommendations.
type GetKeywordBidRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSnapshotStatusParams defines parameters for GetSnapshotStatus.
type GetSnapshotStatusParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// DownloadSnapshotParams defines parameters for DownloadSnapshot.
type DownloadSnapshotParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetBidRecommendationsJSONBody defines parameters for GetBidRecommendations.
type GetBidRecommendationsJSONBody struct {
	// AdGroupId The ad group identifier.
	AdGroupId *float32 `json:"adGroupId,omitempty"`

	// Expressions The list of targeting expressions.
	Expressions *[][]TargetingExpressionPredicate `json:"expressions,omitempty"`
}

// RequestSnapshotParams defines parameters for RequestSnapshot.
type RequestSnapshotParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" developer account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// RequestSnapshotParamsRecordType defines parameters for RequestSnapshot.
type RequestSnapshotParamsRecordType string

// BulkGetAsinSuggestedKeywordsJSONRequestBody defines body for BulkGetAsinSuggestedKeywords for application/json ContentType.
type BulkGetAsinSuggestedKeywordsJSONRequestBody BulkGetAsinSuggestedKeywordsJSONBody

// CreateKeywordBidRecommendationsJSONRequestBody defines body for CreateKeywordBidRecommendations for application/json ContentType.
type CreateKeywordBidRecommendationsJSONRequestBody = KeywordBidRecommendationsData

// GetBidRecommendationsJSONRequestBody defines body for GetBidRecommendations for application/json ContentType.
type GetBidRecommendationsJSONRequestBody GetBidRecommendationsJSONBody

// RequestSnapshotJSONRequestBody defines body for RequestSnapshot for application/json ContentType.
type RequestSnapshotJSONRequestBody = SnapshotRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdGroupBidRecommendations request
	GetAdGroupBidRecommendations(ctx context.Context, adGroupId float32, params *GetAdGroupBidRecommendationsParams) (*http.Response, error)

	// GetAdGroupSuggestedKeywords request
	GetAdGroupSuggestedKeywords(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsParams) (*http.Response, error)

	// GetAdGroupSuggestedKeywordsEx request
	GetAdGroupSuggestedKeywordsEx(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsExParams) (*http.Response, error)

	// BulkGetAsinSuggestedKeywordsWithBody request with any body
	BulkGetAsinSuggestedKeywordsWithBody(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	BulkGetAsinSuggestedKeywords(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, body BulkGetAsinSuggestedKeywordsJSONRequestBody) (*http.Response, error)

	// GetAsinSuggestedKeywords request
	GetAsinSuggestedKeywords(ctx context.Context, asinValue string, params *GetAsinSuggestedKeywordsParams) (*http.Response, error)

	// CreateKeywordBidRecommendationsWithBody request with any body
	CreateKeywordBidRecommendationsWithBody(ctx context.Context, params *CreateKeywordBidRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateKeywordBidRecommendations(ctx context.Context, params *CreateKeywordBidRecommendationsParams, body CreateKeywordBidRecommendationsJSONRequestBody) (*http.Response, error)

	// GetKeywordBidRecommendations request
	GetKeywordBidRecommendations(ctx context.Context, keywordId float32, params *GetKeywordBidRecommendationsParams) (*http.Response, error)

	// GetSnapshotStatus request
	GetSnapshotStatus(ctx context.Context, snapshotId float32, params *GetSnapshotStatusParams) (*http.Response, error)

	// DownloadSnapshot request
	DownloadSnapshot(ctx context.Context, snapshotId float32, params *DownloadSnapshotParams) (*http.Response, error)

	// GetBidRecommendationsWithBody request with any body
	GetBidRecommendationsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetBidRecommendations(ctx context.Context, body GetBidRecommendationsJSONRequestBody) (*http.Response, error)

	// RequestSnapshotWithBody request with any body
	RequestSnapshotWithBody(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, contentType string, body io.Reader) (*http.Response, error)

	RequestSnapshot(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, body RequestSnapshotJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetAdGroupBidRecommendations(ctx context.Context, adGroupId float32, params *GetAdGroupBidRecommendationsParams) (*http.Response, error) {
	req, err := NewGetAdGroupBidRecommendationsRequest(c.Server, adGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAdGroupSuggestedKeywords(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsParams) (*http.Response, error) {
	req, err := NewGetAdGroupSuggestedKeywordsRequest(c.Server, adGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAdGroupSuggestedKeywordsEx(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsExParams) (*http.Response, error) {
	req, err := NewGetAdGroupSuggestedKeywordsExRequest(c.Server, adGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) BulkGetAsinSuggestedKeywordsWithBody(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewBulkGetAsinSuggestedKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) BulkGetAsinSuggestedKeywords(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, body BulkGetAsinSuggestedKeywordsJSONRequestBody) (*http.Response, error) {
	req, err := NewBulkGetAsinSuggestedKeywordsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAsinSuggestedKeywords(ctx context.Context, asinValue string, params *GetAsinSuggestedKeywordsParams) (*http.Response, error) {
	req, err := NewGetAsinSuggestedKeywordsRequest(c.Server, asinValue, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateKeywordBidRecommendationsWithBody(ctx context.Context, params *CreateKeywordBidRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateKeywordBidRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateKeywordBidRecommendations(ctx context.Context, params *CreateKeywordBidRecommendationsParams, body CreateKeywordBidRecommendationsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateKeywordBidRecommendationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetKeywordBidRecommendations(ctx context.Context, keywordId float32, params *GetKeywordBidRecommendationsParams) (*http.Response, error) {
	req, err := NewGetKeywordBidRecommendationsRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSnapshotStatus(ctx context.Context, snapshotId float32, params *GetSnapshotStatusParams) (*http.Response, error) {
	req, err := NewGetSnapshotStatusRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DownloadSnapshot(ctx context.Context, snapshotId float32, params *DownloadSnapshotParams) (*http.Response, error) {
	req, err := NewDownloadSnapshotRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBidRecommendationsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetBidRecommendationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBidRecommendations(ctx context.Context, body GetBidRecommendationsJSONRequestBody) (*http.Response, error) {
	req, err := NewGetBidRecommendationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) RequestSnapshotWithBody(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRequestSnapshotRequestWithBody(c.Server, recordType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) RequestSnapshot(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, body RequestSnapshotJSONRequestBody) (*http.Response, error) {
	req, err := NewRequestSnapshotRequest(c.Server, recordType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAdGroupBidRecommendationsRequest generates requests for GetAdGroupBidRecommendations
func NewGetAdGroupBidRecommendationsRequest(server string, adGroupId float32, params *GetAdGroupBidRecommendationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adGroupId", runtime.ParamLocationPath, adGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/adGroups/%s/bidRecommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAdGroupSuggestedKeywordsRequest generates requests for GetAdGroupSuggestedKeywords
func NewGetAdGroupSuggestedKeywordsRequest(server string, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adGroupId", runtime.ParamLocationPath, adGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/adGroups/%s/suggested/keywords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxNumSuggestions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxNumSuggestions", runtime.ParamLocationQuery, *params.MaxNumSuggestions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdStateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adStateFilter", runtime.ParamLocationQuery, *params.AdStateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAdGroupSuggestedKeywordsExRequest generates requests for GetAdGroupSuggestedKeywordsEx
func NewGetAdGroupSuggestedKeywordsExRequest(server string, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsExParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adGroupId", runtime.ParamLocationPath, adGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/adGroups/%s/suggested/keywords/extended", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxNumSuggestions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxNumSuggestions", runtime.ParamLocationQuery, *params.MaxNumSuggestions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.SuggestBids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "suggestBids", runtime.ParamLocationQuery, *params.SuggestBids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdStateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adStateFilter", runtime.ParamLocationQuery, *params.AdStateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewBulkGetAsinSuggestedKeywordsRequest calls the generic BulkGetAsinSuggestedKeywords builder with application/json body
func NewBulkGetAsinSuggestedKeywordsRequest(server string, params *BulkGetAsinSuggestedKeywordsParams, body BulkGetAsinSuggestedKeywordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkGetAsinSuggestedKeywordsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBulkGetAsinSuggestedKeywordsRequestWithBody generates requests for BulkGetAsinSuggestedKeywords with any type of body
func NewBulkGetAsinSuggestedKeywordsRequestWithBody(server string, params *BulkGetAsinSuggestedKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/asins/suggested/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAsinSuggestedKeywordsRequest generates requests for GetAsinSuggestedKeywords
func NewGetAsinSuggestedKeywordsRequest(server string, asinValue string, params *GetAsinSuggestedKeywordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asinValue", runtime.ParamLocationPath, asinValue)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/asins/%s/suggested/keywords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxNumSuggestions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxNumSuggestions", runtime.ParamLocationQuery, *params.MaxNumSuggestions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateKeywordBidRecommendationsRequest calls the generic CreateKeywordBidRecommendations builder with application/json body
func NewCreateKeywordBidRecommendationsRequest(server string, params *CreateKeywordBidRecommendationsParams, body CreateKeywordBidRecommendationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeywordBidRecommendationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateKeywordBidRecommendationsRequestWithBody generates requests for CreateKeywordBidRecommendations with any type of body
func NewCreateKeywordBidRecommendationsRequestWithBody(server string, params *CreateKeywordBidRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/keywords/bidRecommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetKeywordBidRecommendationsRequest generates requests for GetKeywordBidRecommendations
func NewGetKeywordBidRecommendationsRequest(server string, keywordId float32, params *GetKeywordBidRecommendationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/keywords/%s/bidRecommendations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSnapshotStatusRequest generates requests for GetSnapshotStatus
func NewGetSnapshotStatusRequest(server string, snapshotId float32, params *GetSnapshotStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDownloadSnapshotRequest generates requests for DownloadSnapshot
func NewDownloadSnapshotRequest(server string, snapshotId float32, params *DownloadSnapshotParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/snapshots/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBidRecommendationsRequest calls the generic GetBidRecommendations builder with application/json body
func NewGetBidRecommendationsRequest(server string, body GetBidRecommendationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBidRecommendationsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetBidRecommendationsRequestWithBody generates requests for GetBidRecommendations with any type of body
func NewGetBidRecommendationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/targets/bidRecommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestSnapshotRequest calls the generic RequestSnapshot builder with application/json body
func NewRequestSnapshotRequest(server string, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, body RequestSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestSnapshotRequestWithBody(server, recordType, params, "application/json", bodyReader)
}

// NewRequestSnapshotRequestWithBody generates requests for RequestSnapshot with any type of body
func NewRequestSnapshotRequestWithBody(server string, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recordType", runtime.ParamLocationPath, recordType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sp/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdGroupBidRecommendationsWithResponse request
	GetAdGroupBidRecommendationsWithResponse(ctx context.Context, adGroupId float32, params *GetAdGroupBidRecommendationsParams) (*GetAdGroupBidRecommendationsResp, error)

	// GetAdGroupSuggestedKeywordsWithResponse request
	GetAdGroupSuggestedKeywordsWithResponse(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsParams) (*GetAdGroupSuggestedKeywordsResp, error)

	// GetAdGroupSuggestedKeywordsExWithResponse request
	GetAdGroupSuggestedKeywordsExWithResponse(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsExParams) (*GetAdGroupSuggestedKeywordsExResp, error)

	// BulkGetAsinSuggestedKeywordsWithBodyWithResponse request with any body
	BulkGetAsinSuggestedKeywordsWithBodyWithResponse(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, contentType string, body io.Reader) (*BulkGetAsinSuggestedKeywordsResp, error)

	BulkGetAsinSuggestedKeywordsWithResponse(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, body BulkGetAsinSuggestedKeywordsJSONRequestBody) (*BulkGetAsinSuggestedKeywordsResp, error)

	// GetAsinSuggestedKeywordsWithResponse request
	GetAsinSuggestedKeywordsWithResponse(ctx context.Context, asinValue string, params *GetAsinSuggestedKeywordsParams) (*GetAsinSuggestedKeywordsResp, error)

	// CreateKeywordBidRecommendationsWithBodyWithResponse request with any body
	CreateKeywordBidRecommendationsWithBodyWithResponse(ctx context.Context, params *CreateKeywordBidRecommendationsParams, contentType string, body io.Reader) (*CreateKeywordBidRecommendationsResp, error)

	CreateKeywordBidRecommendationsWithResponse(ctx context.Context, params *CreateKeywordBidRecommendationsParams, body CreateKeywordBidRecommendationsJSONRequestBody) (*CreateKeywordBidRecommendationsResp, error)

	// GetKeywordBidRecommendationsWithResponse request
	GetKeywordBidRecommendationsWithResponse(ctx context.Context, keywordId float32, params *GetKeywordBidRecommendationsParams) (*GetKeywordBidRecommendationsResp, error)

	// GetSnapshotStatusWithResponse request
	GetSnapshotStatusWithResponse(ctx context.Context, snapshotId float32, params *GetSnapshotStatusParams) (*GetSnapshotStatusResp, error)

	// DownloadSnapshotWithResponse request
	DownloadSnapshotWithResponse(ctx context.Context, snapshotId float32, params *DownloadSnapshotParams) (*DownloadSnapshotResp, error)

	// GetBidRecommendationsWithBodyWithResponse request with any body
	GetBidRecommendationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetBidRecommendationsResp, error)

	GetBidRecommendationsWithResponse(ctx context.Context, body GetBidRecommendationsJSONRequestBody) (*GetBidRecommendationsResp, error)

	// RequestSnapshotWithBodyWithResponse request with any body
	RequestSnapshotWithBodyWithResponse(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, contentType string, body io.Reader) (*RequestSnapshotResp, error)

	RequestSnapshotWithResponse(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, body RequestSnapshotJSONRequestBody) (*RequestSnapshotResp, error)
}

type GetAdGroupBidRecommendationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdGroupBidRecommendationsResponse
	JSON400      *BadRequest
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetAdGroupBidRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdGroupBidRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdGroupSuggestedKeywordsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdGroupSuggestedKeywordsResponse
	JSON400      *ResourceNotFound
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetAdGroupSuggestedKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdGroupSuggestedKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdGroupSuggestedKeywordsExResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AdGroupSuggestedKeywordsResponseEx
	JSON400      *InvalidQueryParam
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetAdGroupSuggestedKeywordsExResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdGroupSuggestedKeywordsExResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkGetAsinSuggestedKeywordsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkGetAsinSuggestedKeywordsResponse
	JSON400      *InvalidQueryParam
}

// Status returns HTTPResponse.Status
func (r BulkGetAsinSuggestedKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkGetAsinSuggestedKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAsinSuggestedKeywordsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAsinSuggestedKeywordsResponse
	JSON400      *InvalidQueryParam
}

// Status returns HTTPResponse.Status
func (r GetAsinSuggestedKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAsinSuggestedKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeywordBidRecommendationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *BidRecommendationsResponse
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r CreateKeywordBidRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeywordBidRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeywordBidRecommendationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeywordBidRecommendationsResponse
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetKeywordBidRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeywordBidRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetSnapshotStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadSnapshotResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DownloadSnapshotResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadSnapshotResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBidRecommendationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AdGroupId The ad group identifier.
		AdGroupId *float32 `json:"adGroupId,omitempty"`

		// Recommendations The list of recommended bids with associated targeting expressions.
		Recommendations *[]struct {
			// Code The response code.
			Code       *BidRecommendationsCode       `json:"code,omitempty"`
			Expression *TargetingExpressionPredicate `json:"expression,omitempty"`

			// SuggestedBid Information about the recommended bid.
			SuggestedBid *SuggestedBid `json:"suggestedBid,omitempty"`
		} `json:"recommendations,omitempty"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetBidRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBidRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestSnapshotResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SnapshotResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r RequestSnapshotResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestSnapshotResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdGroupBidRecommendationsWithResponse request returning *GetAdGroupBidRecommendationsResp
func (c *ClientWithResponses) GetAdGroupBidRecommendationsWithResponse(ctx context.Context, adGroupId float32, params *GetAdGroupBidRecommendationsParams) (*GetAdGroupBidRecommendationsResp, error) {
	rsp, err := c.GetAdGroupBidRecommendations(ctx, adGroupId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdGroupBidRecommendationsResp(rsp)
}

// GetAdGroupSuggestedKeywordsWithResponse request returning *GetAdGroupSuggestedKeywordsResp
func (c *ClientWithResponses) GetAdGroupSuggestedKeywordsWithResponse(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsParams) (*GetAdGroupSuggestedKeywordsResp, error) {
	rsp, err := c.GetAdGroupSuggestedKeywords(ctx, adGroupId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdGroupSuggestedKeywordsResp(rsp)
}

// GetAdGroupSuggestedKeywordsExWithResponse request returning *GetAdGroupSuggestedKeywordsExResp
func (c *ClientWithResponses) GetAdGroupSuggestedKeywordsExWithResponse(ctx context.Context, adGroupId AdGroupId, params *GetAdGroupSuggestedKeywordsExParams) (*GetAdGroupSuggestedKeywordsExResp, error) {
	rsp, err := c.GetAdGroupSuggestedKeywordsEx(ctx, adGroupId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdGroupSuggestedKeywordsExResp(rsp)
}

// BulkGetAsinSuggestedKeywordsWithBodyWithResponse request with arbitrary body returning *BulkGetAsinSuggestedKeywordsResp
func (c *ClientWithResponses) BulkGetAsinSuggestedKeywordsWithBodyWithResponse(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, contentType string, body io.Reader) (*BulkGetAsinSuggestedKeywordsResp, error) {
	rsp, err := c.BulkGetAsinSuggestedKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetAsinSuggestedKeywordsResp(rsp)
}

func (c *ClientWithResponses) BulkGetAsinSuggestedKeywordsWithResponse(ctx context.Context, params *BulkGetAsinSuggestedKeywordsParams, body BulkGetAsinSuggestedKeywordsJSONRequestBody) (*BulkGetAsinSuggestedKeywordsResp, error) {
	rsp, err := c.BulkGetAsinSuggestedKeywords(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetAsinSuggestedKeywordsResp(rsp)
}

// GetAsinSuggestedKeywordsWithResponse request returning *GetAsinSuggestedKeywordsResp
func (c *ClientWithResponses) GetAsinSuggestedKeywordsWithResponse(ctx context.Context, asinValue string, params *GetAsinSuggestedKeywordsParams) (*GetAsinSuggestedKeywordsResp, error) {
	rsp, err := c.GetAsinSuggestedKeywords(ctx, asinValue, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAsinSuggestedKeywordsResp(rsp)
}

// CreateKeywordBidRecommendationsWithBodyWithResponse request with arbitrary body returning *CreateKeywordBidRecommendationsResp
func (c *ClientWithResponses) CreateKeywordBidRecommendationsWithBodyWithResponse(ctx context.Context, params *CreateKeywordBidRecommendationsParams, contentType string, body io.Reader) (*CreateKeywordBidRecommendationsResp, error) {
	rsp, err := c.CreateKeywordBidRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeywordBidRecommendationsResp(rsp)
}

func (c *ClientWithResponses) CreateKeywordBidRecommendationsWithResponse(ctx context.Context, params *CreateKeywordBidRecommendationsParams, body CreateKeywordBidRecommendationsJSONRequestBody) (*CreateKeywordBidRecommendationsResp, error) {
	rsp, err := c.CreateKeywordBidRecommendations(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeywordBidRecommendationsResp(rsp)
}

// GetKeywordBidRecommendationsWithResponse request returning *GetKeywordBidRecommendationsResp
func (c *ClientWithResponses) GetKeywordBidRecommendationsWithResponse(ctx context.Context, keywordId float32, params *GetKeywordBidRecommendationsParams) (*GetKeywordBidRecommendationsResp, error) {
	rsp, err := c.GetKeywordBidRecommendations(ctx, keywordId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKeywordBidRecommendationsResp(rsp)
}

// GetSnapshotStatusWithResponse request returning *GetSnapshotStatusResp
func (c *ClientWithResponses) GetSnapshotStatusWithResponse(ctx context.Context, snapshotId float32, params *GetSnapshotStatusParams) (*GetSnapshotStatusResp, error) {
	rsp, err := c.GetSnapshotStatus(ctx, snapshotId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotStatusResp(rsp)
}

// DownloadSnapshotWithResponse request returning *DownloadSnapshotResp
func (c *ClientWithResponses) DownloadSnapshotWithResponse(ctx context.Context, snapshotId float32, params *DownloadSnapshotParams) (*DownloadSnapshotResp, error) {
	rsp, err := c.DownloadSnapshot(ctx, snapshotId, params)
	if err != nil {
		return nil, err
	}
	return ParseDownloadSnapshotResp(rsp)
}

// GetBidRecommendationsWithBodyWithResponse request with arbitrary body returning *GetBidRecommendationsResp
func (c *ClientWithResponses) GetBidRecommendationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetBidRecommendationsResp, error) {
	rsp, err := c.GetBidRecommendationsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBidRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetBidRecommendationsWithResponse(ctx context.Context, body GetBidRecommendationsJSONRequestBody) (*GetBidRecommendationsResp, error) {
	rsp, err := c.GetBidRecommendations(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBidRecommendationsResp(rsp)
}

// RequestSnapshotWithBodyWithResponse request with arbitrary body returning *RequestSnapshotResp
func (c *ClientWithResponses) RequestSnapshotWithBodyWithResponse(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, contentType string, body io.Reader) (*RequestSnapshotResp, error) {
	rsp, err := c.RequestSnapshotWithBody(ctx, recordType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRequestSnapshotResp(rsp)
}

func (c *ClientWithResponses) RequestSnapshotWithResponse(ctx context.Context, recordType RequestSnapshotParamsRecordType, params *RequestSnapshotParams, body RequestSnapshotJSONRequestBody) (*RequestSnapshotResp, error) {
	rsp, err := c.RequestSnapshot(ctx, recordType, params, body)
	if err != nil {
		return nil, err
	}
	return ParseRequestSnapshotResp(rsp)
}

// ParseGetAdGroupBidRecommendationsResp parses an HTTP response from a GetAdGroupBidRecommendationsWithResponse call
func ParseGetAdGroupBidRecommendationsResp(rsp *http.Response) (*GetAdGroupBidRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdGroupBidRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdGroupBidRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAdGroupSuggestedKeywordsResp parses an HTTP response from a GetAdGroupSuggestedKeywordsWithResponse call
func ParseGetAdGroupSuggestedKeywordsResp(rsp *http.Response) (*GetAdGroupSuggestedKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdGroupSuggestedKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdGroupSuggestedKeywordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResourceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAdGroupSuggestedKeywordsExResp parses an HTTP response from a GetAdGroupSuggestedKeywordsExWithResponse call
func ParseGetAdGroupSuggestedKeywordsExResp(rsp *http.Response) (*GetAdGroupSuggestedKeywordsExResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdGroupSuggestedKeywordsExResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AdGroupSuggestedKeywordsResponseEx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidQueryParam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBulkGetAsinSuggestedKeywordsResp parses an HTTP response from a BulkGetAsinSuggestedKeywordsWithResponse call
func ParseBulkGetAsinSuggestedKeywordsResp(rsp *http.Response) (*BulkGetAsinSuggestedKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkGetAsinSuggestedKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkGetAsinSuggestedKeywordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidQueryParam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAsinSuggestedKeywordsResp parses an HTTP response from a GetAsinSuggestedKeywordsWithResponse call
func ParseGetAsinSuggestedKeywordsResp(rsp *http.Response) (*GetAsinSuggestedKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAsinSuggestedKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAsinSuggestedKeywordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidQueryParam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateKeywordBidRecommendationsResp parses an HTTP response from a CreateKeywordBidRecommendationsWithResponse call
func ParseCreateKeywordBidRecommendationsResp(rsp *http.Response) (*CreateKeywordBidRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeywordBidRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BidRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetKeywordBidRecommendationsResp parses an HTTP response from a GetKeywordBidRecommendationsWithResponse call
func ParseGetKeywordBidRecommendationsResp(rsp *http.Response) (*GetKeywordBidRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeywordBidRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeywordBidRecommendationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSnapshotStatusResp parses an HTTP response from a GetSnapshotStatusWithResponse call
func ParseGetSnapshotStatusResp(rsp *http.Response) (*GetSnapshotStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDownloadSnapshotResp parses an HTTP response from a DownloadSnapshotWithResponse call
func ParseDownloadSnapshotResp(rsp *http.Response) (*DownloadSnapshotResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadSnapshotResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBidRecommendationsResp parses an HTTP response from a GetBidRecommendationsWithResponse call
func ParseGetBidRecommendationsResp(rsp *http.Response) (*GetBidRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBidRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AdGroupId The ad group identifier.
			AdGroupId *float32 `json:"adGroupId,omitempty"`

			// Recommendations The list of recommended bids with associated targeting expressions.
			Recommendations *[]struct {
				// Code The response code.
				Code       *BidRecommendationsCode       `json:"code,omitempty"`
				Expression *TargetingExpressionPredicate `json:"expression,omitempty"`

				// SuggestedBid Information about the recommended bid.
				SuggestedBid *SuggestedBid `json:"suggestedBid,omitempty"`
			} `json:"recommendations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRequestSnapshotResp parses an HTTP response from a RequestSnapshotWithResponse call
func ParseRequestSnapshotResp(rsp *http.Response) (*RequestSnapshotResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestSnapshotResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SnapshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
