// Package changehistory provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package changehistory

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for HistoryEventTypeFilters.
const (
	HistoryEventTypeFiltersBUDGETAMOUNT         HistoryEventTypeFilters = "BUDGET_AMOUNT"
	HistoryEventTypeFiltersDEFAULTBIDAMOUNT     HistoryEventTypeFilters = "DEFAULT_BID_AMOUNT"
	HistoryEventTypeFiltersENDDATE              HistoryEventTypeFilters = "END_DATE"
	HistoryEventTypeFiltersINBUDGET             HistoryEventTypeFilters = "IN_BUDGET"
	HistoryEventTypeFiltersNAME                 HistoryEventTypeFilters = "NAME"
	HistoryEventTypeFiltersPLACEMENTGROUP       HistoryEventTypeFilters = "PLACEMENT_GROUP"
	HistoryEventTypeFiltersSMARTBIDDINGSTRATEGY HistoryEventTypeFilters = "SMART_BIDDING_STRATEGY"
	HistoryEventTypeFiltersSTARTDATE            HistoryEventTypeFilters = "START_DATE"
	HistoryEventTypeFiltersSTATUS               HistoryEventTypeFilters = "STATUS"
)

// Defines values for HistoryResponseEventsChangeType.
const (
	HistoryResponseEventsChangeTypeBIDAMOUNT            HistoryResponseEventsChangeType = "BID_AMOUNT"
	HistoryResponseEventsChangeTypeBUDGETAMOUNT         HistoryResponseEventsChangeType = "BUDGET_AMOUNT"
	HistoryResponseEventsChangeTypeDEFAULTBIDAMOUNT     HistoryResponseEventsChangeType = "DEFAULT_BID_AMOUNT"
	HistoryResponseEventsChangeTypeENDDATE              HistoryResponseEventsChangeType = "END_DATE"
	HistoryResponseEventsChangeTypeINBUDGET             HistoryResponseEventsChangeType = "IN_BUDGET"
	HistoryResponseEventsChangeTypeNAME                 HistoryResponseEventsChangeType = "NAME"
	HistoryResponseEventsChangeTypePLACEMENTGROUP       HistoryResponseEventsChangeType = "PLACEMENT_GROUP"
	HistoryResponseEventsChangeTypePORTFOLIO            HistoryResponseEventsChangeType = "PORTFOLIO"
	HistoryResponseEventsChangeTypeSMARTBIDDINGSTRATEGY HistoryResponseEventsChangeType = "SMART_BIDDING_STRATEGY"
	HistoryResponseEventsChangeTypeSTARTDATE            HistoryResponseEventsChangeType = "START_DATE"
	HistoryResponseEventsChangeTypeSTATUS               HistoryResponseEventsChangeType = "STATUS"
)

// Defines values for HistoryResponseEventsEntityType.
const (
	AD               HistoryResponseEventsEntityType = "AD"
	ADGROUP          HistoryResponseEventsEntityType = "AD_GROUP"
	CAMPAIGN         HistoryResponseEventsEntityType = "CAMPAIGN"
	KEYWORD          HistoryResponseEventsEntityType = "KEYWORD"
	NEGATIVEKEYWORD  HistoryResponseEventsEntityType = "NEGATIVE_KEYWORD"
	PRODUCTTARGETING HistoryResponseEventsEntityType = "PRODUCT_TARGETING"
)

// Defines values for HistoryResponseEventsMetadataCampaignBudgetType.
const (
	DAILY          HistoryResponseEventsMetadataCampaignBudgetType = "DAILY"
	LIFETIMEBUDGET HistoryResponseEventsMetadataCampaignBudgetType = "LIFETIME_BUDGET"
)

// Defines values for HistoryResponseEventsMetadataKeywordType.
const (
	KEYWORDBROAD  HistoryResponseEventsMetadataKeywordType = "KEYWORD_BROAD"
	KEYWORDEXACT  HistoryResponseEventsMetadataKeywordType = "KEYWORD_EXACT"
	KEYWORDPHRASE HistoryResponseEventsMetadataKeywordType = "KEYWORD_PHRASE"
)

// Defines values for HistoryResponseEventsMetadataNegativeTargetingType.
const (
	NEGATIVEKEYWORDEXACT  HistoryResponseEventsMetadataNegativeTargetingType = "NEGATIVE_KEYWORD_EXACT"
	NEGATIVEKEYWORDPHRASE HistoryResponseEventsMetadataNegativeTargetingType = "NEGATIVE_KEYWORD_PHRASE"
)

// Defines values for HistoryResponseEventsMetadataPlacementGroupPosition.
const (
	DETAILPAGE  HistoryResponseEventsMetadataPlacementGroupPosition = "DETAIL_PAGE"
	TOPOFSEARCH HistoryResponseEventsMetadataPlacementGroupPosition = "TOP_OF_SEARCH"
)

// Defines values for HistoryResponseEventsMetadataPredefinedTarget.
const (
	CLOSEMATCH  HistoryResponseEventsMetadataPredefinedTarget = "CLOSE-MATCH"
	COMPLEMENTS HistoryResponseEventsMetadataPredefinedTarget = "COMPLEMENTS"
	LOOSEMATCH  HistoryResponseEventsMetadataPredefinedTarget = "LOOSE-MATCH"
	SUBSTITUTES HistoryResponseEventsMetadataPredefinedTarget = "SUBSTITUTES"
)

// Defines values for HistoryResponseEventsMetadataProductTargetingType.
const (
	EXPRESSION HistoryResponseEventsMetadataProductTargetingType = "EXPRESSION"
	PREDEFINED HistoryResponseEventsMetadataProductTargetingType = "PREDEFINED"
)

// Defines values for HistorySortParameterDirection.
const (
	ASC  HistorySortParameterDirection = "ASC"
	DESC HistorySortParameterDirection = "DESC"
)

// Defines values for HistorySortParameterKey.
const (
	DATE HistorySortParameterKey = "DATE"
)

// HistoryError The error response object.
type HistoryError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// HistoryEventType defines model for HistoryEventType.
type HistoryEventType struct {
	// EventTypeIds max of 10 event types. IDs here belong to the EventType. For example, if requesting CAMPAGIN as the eventType, these are campaignIds.
	EventTypeIds *[]string `json:"eventTypeIds,omitempty"`

	// Filters | Filter | Entity Types |
	// ||-|
	// | BUDGET_AMOUNT | CAMPAIGN |
	// | IN_BUDGET | CAMPAIGN |
	// | STATUS | CAMPAIGN, AD_GROUP, AD, KEYWORD, PRODUCT_TARGET, NEGATIVE_KEYWORD |
	// | END_DATE | CAMPAIGN |
	// | START_DATE | CAMPAIGN |
	// | PLACEMENT_GROUP | CAMPAIGN|
	// | SMART_BIDDING_STRATEGY | CAMPAIGN |
	// | DEFAULT_BID_AMOUNT | AD_GROUP |
	// | NAME | CAMPAIGN, AD_GROUP |
	Filters *[]HistoryEventTypeFilters `json:"filters,omitempty"`

	// Parents maximum of 10 parents
	Parents *[]struct {
		AdGroupId  *string `json:"adGroupId,omitempty"`
		CampaignId *string `json:"campaignId,omitempty"`

		// UseProfileIdAdvertiser If true, retrieves events which belong to the associated advertiser
		UseProfileIdAdvertiser *bool `json:"useProfileIdAdvertiser,omitempty"`
	} `json:"parents,omitempty"`
}

// HistoryEventTypeFilters defines model for HistoryEventType.Filters.
type HistoryEventTypeFilters string

// HistoryEventTypes defines model for HistoryEventTypes.
type HistoryEventTypes struct {
	AD               *HistoryEventType `json:"AD,omitempty"`
	ADGROUP          *HistoryEventType `json:"AD_GROUP,omitempty"`
	CAMPAIGN         *HistoryEventType `json:"CAMPAIGN,omitempty"`
	KEYWORD          *HistoryEventType `json:"KEYWORD,omitempty"`
	NEGATIVEKEYWORD  *HistoryEventType `json:"NEGATIVE_KEYWORD,omitempty"`
	PRODUCTTARGETING *HistoryEventType `json:"PRODUCT_TARGETING,omitempty"`
}

// HistoryResponseEvents defines model for HistoryResponseEvents.
type HistoryResponseEvents = []struct {
	// ChangeType
	// ChangeTypes for EntityTypes
	// | EntityType | Valid Change Types |
	// ||--|
	// |CAMPAIGN | STATUS, IN_BUDGET, PORTFOLIO, BUDGET_AMOUNT, NAME, START_DATE, END_DATE, SMART_BIDDING_STRATEGY, PLACEMENT_GROUP, CREATED, IS_PREMIUM_BID_ENABLED, PORTFOLIO_ID, BUDGET_DOCUMENT_VERSION, IS_PROCESSING, RULE_BASED_BUDGET_VALUE, APPLICABLE_RULE_NAME, APPLICABLE_RULE_ID, CREATION_DATE, AUTO_TARGETED |
	// |AD_GROUP | STATUS, NAME, DEFAULT_BID_AMOUNT|
	// |AD | STATUS|
	// |KEYWORD | STATUS, BID_AMOUNT|
	// |PRODUCT_TARGETING | STATUS, BID_AMOUNT|
	// |NEGATIVE_KEYWORD | STATUS|
	ChangeType *HistoryResponseEventsChangeType `json:"changeType,omitempty"`
	EntityId   *string                          `json:"entityId,omitempty"`
	EntityType *HistoryResponseEventsEntityType `json:"entityType,omitempty"`
	Metadata   *struct {
		// AdAsin Field only for ads
		AdAsin    *string `json:"adAsin,omitempty"`
		AdGroupId *string `json:"adGroupId,omitempty"`

		// CampaignBudgetType Field only for campaigns
		CampaignBudgetType *HistoryResponseEventsMetadataCampaignBudgetType `json:"campaignBudgetType,omitempty"`
		CampaignId         *string                                          `json:"campaignId,omitempty"`

		// Keyword Field only for keywords or negative keywords. The keyword or phrase this matches.
		Keyword *string `json:"keyword,omitempty"`

		// KeywordType Field only for keywords
		KeywordType *HistoryResponseEventsMetadataKeywordType `json:"keywordType,omitempty"`

		// NegativeTargetingType Field only for negative targeting.
		NegativeTargetingType *HistoryResponseEventsMetadataNegativeTargetingType `json:"negativeTargetingType,omitempty"`

		// PlacementGroupPosition Field only for campaign placement group change types
		PlacementGroupPosition *HistoryResponseEventsMetadataPlacementGroupPosition `json:"placementGroupPosition,omitempty"`
		PredefinedTarget       *HistoryResponseEventsMetadataPredefinedTarget       `json:"predefinedTarget,omitempty"`

		// ProductTargetingType Field only for Product Targeting
		ProductTargetingType *HistoryResponseEventsMetadataProductTargetingType `json:"productTargetingType,omitempty"`

		// TargetingExpression Field only for Product Targeting where type = EXPRESSION. Some examples:
		// category="Car Seat Canopies & Covers" brand="Munchkin" price<14.9 rating>4.6
		// asin="B000NPPATS"
		// category="Women's Handbag Accessories"
		TargetingExpression *string `json:"targetingExpression,omitempty"`
	} `json:"metadata,omitempty"`

	// NewValue
	// | EntityType | Change Type | Values |
	// ||-|--|
	// | CAMPAIGN | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED|
	// | CAMPAIGN | IN_BUDGET | true or false|
	// | CAMPAIGN | PORTFOLIO | portfolioId|
	// | CAMPAIGN | BUDGET_AMOUNT | amount in marketplace currency |
	// | CAMPAIGN | NAME | campaign name string|
	// | CAMPAIGN | START_DATE | unix time|
	// | CAMPAIGN | END_DATE | unix time|
	// | CAMPAIGN | SMART_BIDDING_STRATEGY | OPTIMIZE_FOR_SALES, LEGACY, MANUAL|
	// | CAMPAIGN | PLACEMENT_GROUP | number as percent |
	// | AD_GROUP | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | AD_GROUP | NAME | ad group name string |
	// | AD_GROUP | DEFAULT_BID_AMOUNT | amount in marketplace currency |
	// | AD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | KEYWORD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | KEYWORD | BID_AMOUNT | amount in marketplace currency |
	// | PRODUCT_TARGETING | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | PRODUCT_TARGETING | BID_AMOUNT | amount in marketplace currency |
	// | NEGATIVE_KEYWORD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	NewValue *string `json:"newValue,omitempty"`

	// PreviousValue
	// | EntityType | Change Type | Values |
	// ||-|--|
	// | CAMPAIGN | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED|
	// | CAMPAIGN | IN_BUDGET | true or false|
	// | CAMPAIGN | PORTFOLIO | portfolioId|
	// | CAMPAIGN | BUDGET_AMOUNT | amount in marketplace currency |
	// | CAMPAIGN | NAME | campaign name string|
	// | CAMPAIGN | START_DATE | unix time|
	// | CAMPAIGN | END_DATE | unix time|
	// | CAMPAIGN | SMART_BIDDING_STRATEGY | OPTIMIZE_FOR_SALES, LEGACY, MANUAL|
	// | CAMPAIGN | PLACEMENT_GROUP | number as percent |
	// | AD_GROUP | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | AD_GROUP | NAME | ad group name string |
	// | AD_GROUP | DEFAULT_BID_AMOUNT | amount in marketplace currency |
	// | AD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | KEYWORD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | KEYWORD | BID_AMOUNT | amount in marketplace currency |
	// | PRODUCT_TARGETING | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	// | PRODUCT_TARGETING | BID_AMOUNT | amount in marketplace currency |
	// | NEGATIVE_KEYWORD | STATUS | CREATED, ENABLED, PAUSED, ARCHIVED |
	PreviousValue *string `json:"previousValue,omitempty"`

	// Timestamp unix time
	Timestamp *int `json:"timestamp,omitempty"`
}

// HistoryResponseEventsChangeType
// ChangeTypes for EntityTypes
// | EntityType | Valid Change Types |
// ||--|
// |CAMPAIGN | STATUS, IN_BUDGET, PORTFOLIO, BUDGET_AMOUNT, NAME, START_DATE, END_DATE, SMART_BIDDING_STRATEGY, PLACEMENT_GROUP, CREATED, IS_PREMIUM_BID_ENABLED, PORTFOLIO_ID, BUDGET_DOCUMENT_VERSION, IS_PROCESSING, RULE_BASED_BUDGET_VALUE, APPLICABLE_RULE_NAME, APPLICABLE_RULE_ID, CREATION_DATE, AUTO_TARGETED |
// |AD_GROUP | STATUS, NAME, DEFAULT_BID_AMOUNT|
// |AD | STATUS|
// |KEYWORD | STATUS, BID_AMOUNT|
// |PRODUCT_TARGETING | STATUS, BID_AMOUNT|
// |NEGATIVE_KEYWORD | STATUS|
type HistoryResponseEventsChangeType string

// HistoryResponseEventsEntityType defines model for HistoryResponseEvents.EntityType.
type HistoryResponseEventsEntityType string

// HistoryResponseEventsMetadataCampaignBudgetType Field only for campaigns
type HistoryResponseEventsMetadataCampaignBudgetType string

// HistoryResponseEventsMetadataKeywordType Field only for keywords
type HistoryResponseEventsMetadataKeywordType string

// HistoryResponseEventsMetadataNegativeTargetingType Field only for negative targeting.
type HistoryResponseEventsMetadataNegativeTargetingType string

// HistoryResponseEventsMetadataPlacementGroupPosition Field only for campaign placement group change types
type HistoryResponseEventsMetadataPlacementGroupPosition string

// HistoryResponseEventsMetadataPredefinedTarget defines model for HistoryResponseEvents.Metadata.PredefinedTarget.
type HistoryResponseEventsMetadataPredefinedTarget string

// HistoryResponseEventsMetadataProductTargetingType Field only for Product Targeting
type HistoryResponseEventsMetadataProductTargetingType string

// HistorySortParameter defines model for HistorySortParameter.
type HistorySortParameter struct {
	Direction *HistorySortParameterDirection `json:"direction,omitempty"`
	Key       *HistorySortParameterKey       `json:"key,omitempty"`
}

// HistorySortParameterDirection defines model for HistorySortParameter.Direction.
type HistorySortParameterDirection string

// HistorySortParameterKey defines model for HistorySortParameter.Key.
type HistorySortParameterKey string

// GetHistoryJSONBody defines parameters for GetHistory.
type GetHistoryJSONBody struct {
	// Count Requested number of results. Default 100. Minimum 50. Maximum 200.
	Count      *int              `json:"count,omitempty"`
	EventTypes HistoryEventTypes `json:"eventTypes"`

	// FromDate Max 90 days of history.
	FromDate int `json:"fromDate"`

	// NextToken token from previous response to get next set of data.
	NextToken *string `json:"nextToken,omitempty"`

	// PageOffset Mutually exclusive with 'nextToken'. Max results with pageOffset is 10000. Use nextToken instead for more results.
	PageOffset *int                  `json:"pageOffset,omitempty"`
	Sort       *HistorySortParameter `json:"sort,omitempty"`
	ToDate     int                   `json:"toDate"`
}

// GetHistoryJSONRequestBody defines body for GetHistory for application/json ContentType.
type GetHistoryJSONRequestBody GetHistoryJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHistoryWithBody request with any body
	GetHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetHistory(ctx context.Context, body GetHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHistory(ctx context.Context, body GetHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHistoryRequest calls the generic GetHistory builder with application/json body
func NewGetHistoryRequest(server string, body GetHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewGetHistoryRequestWithBody generates requests for GetHistory with any type of body
func NewGetHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHistoryWithBodyWithResponse request with any body
	GetHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHistoryResp, error)

	GetHistoryWithResponse(ctx context.Context, body GetHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHistoryResp, error)
}

type GetHistoryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Events *HistoryResponseEvents `json:"events,omitempty"`

		// NextToken returned if not using pageOffset. Can be used in the request to request the next set of results.
		NextToken *string `json:"nextToken,omitempty"`

		// TotalResults total results matching the query. Only provided for pageOffset queries and capped at 10000.
		TotalResults *int `json:"totalResults,omitempty"`
	}
	JSON400 *HistoryError
	JSON401 *HistoryError
	JSON403 *HistoryError
	JSON429 *HistoryError
	JSON500 *HistoryError
}

// Status returns HTTPResponse.Status
func (r GetHistoryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHistoryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHistoryWithBodyWithResponse request with arbitrary body returning *GetHistoryResp
func (c *ClientWithResponses) GetHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetHistoryResp, error) {
	rsp, err := c.GetHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoryResp(rsp)
}

func (c *ClientWithResponses) GetHistoryWithResponse(ctx context.Context, body GetHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetHistoryResp, error) {
	rsp, err := c.GetHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoryResp(rsp)
}

// ParseGetHistoryResp parses an HTTP response from a GetHistoryWithResponse call
func ParseGetHistoryResp(rsp *http.Response) (*GetHistoryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHistoryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Events *HistoryResponseEvents `json:"events,omitempty"`

			// NextToken returned if not using pageOffset. Can be used in the request to request the next set of results.
			NextToken *string `json:"nextToken,omitempty"`

			// TotalResults total results matching the query. Only provided for pageOffset queries and capped at 10000.
			TotalResults *int `json:"totalResults,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HistoryError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HistoryError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HistoryError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HistoryError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HistoryError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
