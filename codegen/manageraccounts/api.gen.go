// Package manageraccounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package manageraccounts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AccountRelationshipRole.
const (
	ENTITYOWNER  AccountRelationshipRole = "ENTITY_OWNER"
	ENTITYUSER   AccountRelationshipRole = "ENTITY_USER"
	ENTITYVIEWER AccountRelationshipRole = "ENTITY_VIEWER"
	SELLERUSER   AccountRelationshipRole = "SELLER_USER"
)

// Defines values for AccountToUpdateType.
const (
	ACCOUNTID       AccountToUpdateType = "ACCOUNT_ID"
	DSPADVERTISERID AccountToUpdateType = "DSP_ADVERTISER_ID"
)

// Defines values for AccountType.
const (
	DSPADVERTISINGACCOUNT AccountType = "DSP_ADVERTISING_ACCOUNT"
	MARKETINGCLOUD        AccountType = "MARKETING_CLOUD"
	SELLER                AccountType = "SELLER"
	VENDOR                AccountType = "VENDOR"
)

// Defines values for CreateManagerAccountRequestManagerAccountType.
const (
	Advertiser CreateManagerAccountRequestManagerAccountType = "Advertiser"
	Agency     CreateManagerAccountRequestManagerAccountType = "Agency"
)

// Defines values for ErrorDetailCode.
const (
	BADREQUEST           ErrorDetailCode = "BAD_REQUEST"
	FORBIDDEN            ErrorDetailCode = "FORBIDDEN"
	INTERNALSERVICEERROR ErrorDetailCode = "INTERNAL_SERVICE_ERROR"
	TOOMANYREQUESTS      ErrorDetailCode = "TOO_MANY_REQUESTS"
	UNAUTHORIZED         ErrorDetailCode = "UNAUTHORIZED"
)

// Account Object representation of an Amazon Advertising account.
type Account struct {
	// AccountId Id of the Amazon Advertising account.
	AccountId *string `json:"accountId,omitempty"`

	// AccountName The name given to the Amazon Advertising account.
	AccountName *string `json:"accountName,omitempty"`

	// AccountType Type of the Amazon Advertising account.
	AccountType *AccountType `json:"accountType,omitempty"`

	// DspAdvertiserId The identifier of a DSP advertiser. Note that this value is only populated for accounts with type `DSP_ADVERTISING_ACCOUNT`. It will be `null` for accounts of other types.
	DspAdvertiserId *string `json:"dspAdvertiserId,omitempty"`

	// MarketplaceId The identifier of the marketplace to which the account is associated. See [this table](https://docs.developer.amazonservices.com/en_US/dev_guide/DG_Endpoints.html) for `marketplaceId` mappings.
	MarketplaceId *string `json:"marketplaceId,omitempty"`

	// ProfileId The identifier of a profile associated with the advertiser account. Note that this value is only populated for a subset of account types: `[ SELLER, VENDOR, MARKETING_CLOUD ]`. It will be `null` for accounts of other types.
	ProfileId *string `json:"profileId,omitempty"`
}

// AccountRelationshipRole The type of a role used in account relationships.
type AccountRelationshipRole string

// AccountToUpdate String identifier for an Amazon Advertising account or advertiser. `ACCOUNT_ID` is an identifier that is returned by the [Profiles resource](https://advertising.amazon.com/API/docs/en-us/reference/2/profiles#/Profiles/listProfiles), within the `AccountInfo.id` data member. `ACCOUNT_ID` may begin with the string `"ENTITY"`.
// `DSP_ADVERTISER_ID` is an identifier for a DSP advertiser, which is returned by the [DSP resource](https://advertising.amazon.com/API/docs/en-us/dsp-advertiser/#/Advertiser/get_dsp_advertisers).
type AccountToUpdate struct {
	// Id Id of the Amazon Advertising account.
	Id *string `json:"id,omitempty"`

	// Roles The types of role that will exist with the Amazon Advertising account. Depending on account type, the default role will be ENTITY_USER or SELLER_USER. Only one role at a time is currently supported
	Roles *[]AccountRelationshipRole `json:"roles,omitempty"`

	// Type The type of the Id
	Type *AccountToUpdateType `json:"type,omitempty"`
}

// AccountToUpdateType The type of the Id
type AccountToUpdateType string

// AccountToUpdateFailure Object representation of an Amazon Advertising account or [DSP advertiser](https://advertising.amazon.com/API/docs/en-us/dsp-advertiser/#/) that failed to update.
type AccountToUpdateFailure struct {
	// Account String identifier for an Amazon Advertising account or advertiser. `ACCOUNT_ID` is an identifier that is returned by the [Profiles resource](https://advertising.amazon.com/API/docs/en-us/reference/2/profiles#/Profiles/listProfiles), within the `AccountInfo.id` data member. `ACCOUNT_ID` may begin with the string `"ENTITY"`.
	// `DSP_ADVERTISER_ID` is an identifier for a DSP advertiser, which is returned by the [DSP resource](https://advertising.amazon.com/API/docs/en-us/dsp-advertiser/#/Advertiser/get_dsp_advertisers).
	Account *AccountToUpdate `json:"account,omitempty"`

	// Error The error response object.
	Error *ErrorDetail `json:"error,omitempty"`
}

// AccountType Type of the Amazon Advertising account.
type AccountType string

// CreateManagerAccountRequest Request object that defines the fields required to create a Manager account.
type CreateManagerAccountRequest struct {
	// ManagerAccountName Name of the Manager account.
	ManagerAccountName *string `json:"managerAccountName,omitempty"`

	// ManagerAccountType Type of the Manager account, which indicates how the Manager account will be used. Use `Advertiser` if the Manager account will be used for **your own** products and services, or `Agency` if you are managing accounts **on behalf of your clients**.
	ManagerAccountType *CreateManagerAccountRequestManagerAccountType `json:"managerAccountType,omitempty"`
}

// CreateManagerAccountRequestManagerAccountType Type of the Manager account, which indicates how the Manager account will be used. Use `Advertiser` if the Manager account will be used for **your own** products and services, or `Agency` if you are managing accounts **on behalf of your clients**.
type CreateManagerAccountRequestManagerAccountType string

// ErrorDetail The error response object.
type ErrorDetail struct {
	Code *ErrorDetailCode `json:"code,omitempty"`

	// Message A human-readable description of the error.
	Message *string `json:"message,omitempty"`
}

// ErrorDetailCode defines model for ErrorDetail.Code.
type ErrorDetailCode string

// GetManagerAccountsResponse Response containing a list of Manager Accounts that a given user has access to.
type GetManagerAccountsResponse struct {
	// ManagerAccounts List of Manager Accounts that the user has access to
	ManagerAccounts *[]ManagerAccount `json:"managerAccounts,omitempty"`
}

// ManagerAccount Object representation of an Amazon Advertising Manager Account.
type ManagerAccount struct {
	LinkedAccounts *[]Account `json:"linkedAccounts,omitempty"`

	// ManagerAccountId Id of the Manager Account.
	ManagerAccountId *string `json:"managerAccountId,omitempty"`

	// ManagerAccountName The name given to a Manager Account.
	ManagerAccountName *string `json:"managerAccountName,omitempty"`
}

// UpdateAdvertisingAccountsInManagerAccountRequest A list of Advertising accounts or advertisers to link/unlink with [Manager Account](https://advertising.amazon.com/help?ref_=a20m_us_blog_whtsnewfb2020_040120#GU3YDB26FR7XT3C8). User can pass a list with a maximum of 20 accounts/advertisers using any mix of identifiers.
type UpdateAdvertisingAccountsInManagerAccountRequest struct {
	// Accounts List of Advertising accounts or advertisers to link/unlink with [Manager Account](https://advertising.amazon.com/help?ref_=a20m_us_blog_whtsnewfb2020_040120#GU3YDB26FR7XT3C8). User can pass a list with a maximum of 20 accounts/advertisers using any mix of identifiers.
	Accounts *[]AccountToUpdate `json:"accounts,omitempty"`
}

// UpdateAdvertisingAccountsInManagerAccountResponse Link/Unlink Advertising account or advertiser Response
type UpdateAdvertisingAccountsInManagerAccountResponse struct {
	// FailedAccounts List of Advertising accounts or advertisers failed to Link/Unlink with [Manager Account](https://advertising.amazon.com/help?ref_=a20m_us_blog_whtsnewfb2020_040120#GU3YDB26FR7XT3C8).
	FailedAccounts *[]AccountToUpdateFailure `json:"failedAccounts,omitempty"`

	// SucceedAccounts List of Advertising accounts or advertisers successfully Link/Unlink with [Manager Account](https://advertising.amazon.com/help?ref_=a20m_us_blog_whtsnewfb2020_040120#GU3YDB26FR7XT3C8).
	SucceedAccounts *[]AccountToUpdate `json:"succeedAccounts,omitempty"`
}

// GetManagerAccountsForUserParams defines parameters for GetManagerAccountsForUser.
type GetManagerAccountsForUserParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// CreateManagerAccountParams defines parameters for CreateManagerAccount.
type CreateManagerAccountParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// LinkAdvertisingAccountsToManagerAccountPublicAPIParams defines parameters for LinkAdvertisingAccountsToManagerAccountPublicAPI.
type LinkAdvertisingAccountsToManagerAccountPublicAPIParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams defines parameters for UnlinkAdvertisingAccountsToManagerAccountPublicAPI.
type UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account. This is a required header for advertisers and integrators using the Advertising API.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody defines body for CreateManagerAccount for application/vnd.createmanageraccountrequest.v1+json ContentType.
type CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody = CreateManagerAccountRequest

// LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody defines body for LinkAdvertisingAccountsToManagerAccountPublicAPI for application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json ContentType.
type LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody = UpdateAdvertisingAccountsInManagerAccountRequest

// UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody defines body for UnlinkAdvertisingAccountsToManagerAccountPublicAPI for application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json ContentType.
type UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody = UpdateAdvertisingAccountsInManagerAccountRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetManagerAccountsForUser request
	GetManagerAccountsForUser(ctx context.Context, params *GetManagerAccountsForUserParams) (*http.Response, error)

	// CreateManagerAccountWithBody request with any body
	CreateManagerAccountWithBody(ctx context.Context, params *CreateManagerAccountParams, contentType string, body io.Reader) (*http.Response, error)

	CreateManagerAccountWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody(ctx context.Context, params *CreateManagerAccountParams, body CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error)

	// LinkAdvertisingAccountsToManagerAccountPublicAPIWithBody request with any body
	LinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Response, error)

	LinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, body LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error)

	// UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBody request with any body
	UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Response, error)

	UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, body UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetManagerAccountsForUser(ctx context.Context, params *GetManagerAccountsForUserParams) (*http.Response, error) {
	req, err := NewGetManagerAccountsForUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateManagerAccountWithBody(ctx context.Context, params *CreateManagerAccountParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateManagerAccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateManagerAccountWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody(ctx context.Context, params *CreateManagerAccountParams, body CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateManagerAccountRequestWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) LinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(c.Server, managerAccountId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) LinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, body LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(c.Server, managerAccountId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(c.Server, managerAccountId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, body UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(c.Server, managerAccountId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetManagerAccountsForUserRequest generates requests for GetManagerAccountsForUser
func NewGetManagerAccountsForUserRequest(server string, params *GetManagerAccountsForUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managerAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

// NewCreateManagerAccountRequestWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody calls the generic CreateManagerAccount builder with application/vnd.createmanageraccountrequest.v1+json body
func NewCreateManagerAccountRequestWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody(server string, params *CreateManagerAccountParams, body CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateManagerAccountRequestWithBody(server, params, "application/vnd.createmanageraccountrequest.v1+json", bodyReader)
}

// NewCreateManagerAccountRequestWithBody generates requests for CreateManagerAccount with any type of body
func NewCreateManagerAccountRequestWithBody(server string, params *CreateManagerAccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managerAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

// NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody calls the generic LinkAdvertisingAccountsToManagerAccountPublicAPI builder with application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json body
func NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(server string, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, body LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(server, managerAccountId, params, "application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json", bodyReader)
}

// NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody generates requests for LinkAdvertisingAccountsToManagerAccountPublicAPI with any type of body
func NewLinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(server string, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "managerAccountId", runtime.ParamLocationPath, managerAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managerAccounts/%s/associate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

// NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody calls the generic UnlinkAdvertisingAccountsToManagerAccountPublicAPI builder with application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json body
func NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(server string, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, body UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(server, managerAccountId, params, "application/vnd.updateadvertisingaccountsinmanageraccountrequest.v1+json", bodyReader)
}

// NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody generates requests for UnlinkAdvertisingAccountsToManagerAccountPublicAPI with any type of body
func NewUnlinkAdvertisingAccountsToManagerAccountPublicAPIRequestWithBody(server string, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "managerAccountId", runtime.ParamLocationPath, managerAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/managerAccounts/%s/disassociate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetManagerAccountsForUserWithResponse request
	GetManagerAccountsForUserWithResponse(ctx context.Context, params *GetManagerAccountsForUserParams) (*GetManagerAccountsForUserResp, error)

	// CreateManagerAccountWithBodyWithResponse request with any body
	CreateManagerAccountWithBodyWithResponse(ctx context.Context, params *CreateManagerAccountParams, contentType string, body io.Reader) (*CreateManagerAccountResp, error)

	CreateManagerAccountWithApplicationVndCreatemanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateManagerAccountParams, body CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody) (*CreateManagerAccountResp, error)

	// LinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse request with any body
	LinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*LinkAdvertisingAccountsToManagerAccountPublicAPIResp, error)

	LinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, body LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*LinkAdvertisingAccountsToManagerAccountPublicAPIResp, error)

	// UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse request with any body
	UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp, error)

	UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, body UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp, error)
}

type GetManagerAccountsForUserResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndGetmanageraccountsresponseV1JSON200 *GetManagerAccountsResponse
}

// Status returns HTTPResponse.Status
func (r GetManagerAccountsForUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManagerAccountsForUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateManagerAccountResp struct {
	Body                                  []byte
	HTTPResponse                          *http.Response
	ApplicationvndManageraccountV1JSON200 *ManagerAccount
	ApplicationvndManageraccountV1JSON400 *ErrorDetail
	ApplicationvndManageraccountV1JSON403 *ErrorDetail
	ApplicationvndManageraccountV1JSON429 *ErrorDetail
	ApplicationvndManageraccountV1JSON500 *ErrorDetail
}

// Status returns HTTPResponse.Status
func (r CreateManagerAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateManagerAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkAdvertisingAccountsToManagerAccountPublicAPIResp struct {
	Body                                                                     []byte
	HTTPResponse                                                             *http.Response
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON207 *UpdateAdvertisingAccountsInManagerAccountResponse
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON400 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON401 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON403 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON429 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON500 *ErrorDetail
}

// Status returns HTTPResponse.Status
func (r LinkAdvertisingAccountsToManagerAccountPublicAPIResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkAdvertisingAccountsToManagerAccountPublicAPIResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp struct {
	Body                                                                     []byte
	HTTPResponse                                                             *http.Response
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON207 *UpdateAdvertisingAccountsInManagerAccountResponse
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON400 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON401 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON403 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON429 *ErrorDetail
	ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON500 *ErrorDetail
}

// Status returns HTTPResponse.Status
func (r UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetManagerAccountsForUserWithResponse request returning *GetManagerAccountsForUserResp
func (c *ClientWithResponses) GetManagerAccountsForUserWithResponse(ctx context.Context, params *GetManagerAccountsForUserParams) (*GetManagerAccountsForUserResp, error) {
	rsp, err := c.GetManagerAccountsForUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetManagerAccountsForUserResp(rsp)
}

// CreateManagerAccountWithBodyWithResponse request with arbitrary body returning *CreateManagerAccountResp
func (c *ClientWithResponses) CreateManagerAccountWithBodyWithResponse(ctx context.Context, params *CreateManagerAccountParams, contentType string, body io.Reader) (*CreateManagerAccountResp, error) {
	rsp, err := c.CreateManagerAccountWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateManagerAccountResp(rsp)
}

func (c *ClientWithResponses) CreateManagerAccountWithApplicationVndCreatemanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateManagerAccountParams, body CreateManagerAccountApplicationVndCreatemanageraccountrequestV1PlusJSONRequestBody) (*CreateManagerAccountResp, error) {
	rsp, err := c.CreateManagerAccountWithApplicationVndCreatemanageraccountrequestV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateManagerAccountResp(rsp)
}

// LinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse request with arbitrary body returning *LinkAdvertisingAccountsToManagerAccountPublicAPIResp
func (c *ClientWithResponses) LinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*LinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	rsp, err := c.LinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx, managerAccountId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp)
}

func (c *ClientWithResponses) LinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, managerAccountId string, params *LinkAdvertisingAccountsToManagerAccountPublicAPIParams, body LinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*LinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	rsp, err := c.LinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx, managerAccountId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseLinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp)
}

// UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse request with arbitrary body returning *UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp
func (c *ClientWithResponses) UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBodyWithResponse(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, contentType string, body io.Reader) (*UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	rsp, err := c.UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithBody(ctx, managerAccountId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp)
}

func (c *ClientWithResponses) UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBodyWithResponse(ctx context.Context, managerAccountId string, params *UnlinkAdvertisingAccountsToManagerAccountPublicAPIParams, body UnlinkAdvertisingAccountsToManagerAccountPublicAPIApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONRequestBody) (*UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	rsp, err := c.UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithApplicationVndUpdateadvertisingaccountsinmanageraccountrequestV1PlusJSONBody(ctx, managerAccountId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp)
}

// ParseGetManagerAccountsForUserResp parses an HTTP response from a GetManagerAccountsForUserWithResponse call
func ParseGetManagerAccountsForUserResp(rsp *http.Response) (*GetManagerAccountsForUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManagerAccountsForUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetManagerAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGetmanageraccountsresponseV1JSON200 = &dest

	}

	return response, nil
}

// ParseCreateManagerAccountResp parses an HTTP response from a CreateManagerAccountWithResponse call
func ParseCreateManagerAccountResp(rsp *http.Response) (*CreateManagerAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateManagerAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndManageraccountV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndManageraccountV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndManageraccountV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndManageraccountV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndManageraccountV1JSON500 = &dest

	}

	return response, nil
}

// ParseLinkAdvertisingAccountsToManagerAccountPublicAPIResp parses an HTTP response from a LinkAdvertisingAccountsToManagerAccountPublicAPIWithResponse call
func ParseLinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp *http.Response) (*LinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkAdvertisingAccountsToManagerAccountPublicAPIResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateAdvertisingAccountsInManagerAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON500 = &dest

	}

	return response, nil
}

// ParseUnlinkAdvertisingAccountsToManagerAccountPublicAPIResp parses an HTTP response from a UnlinkAdvertisingAccountsToManagerAccountPublicAPIWithResponse call
func ParseUnlinkAdvertisingAccountsToManagerAccountPublicAPIResp(rsp *http.Response) (*UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnlinkAdvertisingAccountsToManagerAccountPublicAPIResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest UpdateAdvertisingAccountsInManagerAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdateadvertisingaccountsinmanageraccountresponseV1JSON500 = &dest

	}

	return response, nil
}
