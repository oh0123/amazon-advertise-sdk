// Package dspadvertiser provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package dspadvertiser

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DspCountryV1.
const (
	AT DspCountryV1 = "AT"
	BR DspCountryV1 = "BR"
	CA DspCountryV1 = "CA"
	CN DspCountryV1 = "CN"
	DE DspCountryV1 = "DE"
	ES DspCountryV1 = "ES"
	FR DspCountryV1 = "FR"
	GB DspCountryV1 = "GB"
	IN DspCountryV1 = "IN"
	IT DspCountryV1 = "IT"
	JP DspCountryV1 = "JP"
	MX DspCountryV1 = "MX"
	US DspCountryV1 = "US"
)

// Defines values for DspSupportedCurrencyV1.
const (
	BRL DspSupportedCurrencyV1 = "BRL"
	CAD DspSupportedCurrencyV1 = "CAD"
	CNY DspSupportedCurrencyV1 = "CNY"
	EUR DspSupportedCurrencyV1 = "EUR"
	GBP DspSupportedCurrencyV1 = "GBP"
	INR DspSupportedCurrencyV1 = "INR"
	JPY DspSupportedCurrencyV1 = "JPY"
	MXN DspSupportedCurrencyV1 = "MXN"
	USD DspSupportedCurrencyV1 = "USD"
)

// DspAdvertiserV1 The DSP Advertiser object
type DspAdvertiserV1 struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// Country The country code.
	Country *DspCountryV1 `json:"country,omitempty"`

	// Currency The supported currencies.
	Currency *DspSupportedCurrencyV1 `json:"currency,omitempty"`

	// Name The advertiser name.
	Name *string `json:"name,omitempty"`

	// Timezone The advertiser timezone.
	// - America/Anchorage
	// - America/Caracas
	// - America/Chicago
	// - America/Denver
	// - America/Halifax
	// - America/Los_Angeles
	// - America/New_York
	// - America/Sao_Paulo
	// - America/St_Johns
	// - Asia/Almaty
	// - Asia/Baghdad
	// - Asia/Bangkok
	// - Asia/Hong_Kong
	// - Asia/Kabul
	// - Asia/Kathmandu
	// - Asia/Kolkata
	// - Asia/Magadan
	// - Asia/Shanghai
	// - Asia/Tehran
	// - Asia/Tokyo
	// - Asia/Yekaterinburg
	// - Asia/Yerevan
	// - Atlantic/Azores
	// - Atlantic/South_Georgia
	// - Australia/Brisbane
	// - Australia/Darwin
	// - Europe/London
	// - Europe/Paris
	// - Indian/Cocos
	// - Pacific/Fiji
	// - Pacific/Honolulu
	// - Pacific/Kwajalein
	// - Pacific/Midway
	Timezone *DspTimezoneV1 `json:"timezone,omitempty"`

	// Url The URL of the advertiserâ€™s website.
	Url *string `json:"url,omitempty"`
}

// DspAdvertisersV1 List of advertisers along with total number of advertisers which satisfy the filtering criteria.
type DspAdvertisersV1 struct {
	// Response List of advertisers with complete information.
	Response *[]DspAdvertiserV1 `json:"response,omitempty"`

	// TotalResults Total number of advertisers which satisfy the filtering criteria. This number is given to support pagination and tell the client if there are more advertisers to be fetched.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// DspCountryV1 The country code.
type DspCountryV1 string

// DspErrorV1 Error response object.
type DspErrorV1 struct {
	// Errors List of errors. Useful in case of validation errors
	Errors *[]DspSubErrorV1 `json:"errors,omitempty"`

	// Message A human-readable description of the response.
	Message string `json:"message"`

	// RequestId A value will be used to identify your request uniquely.
	RequestId *string `json:"requestId,omitempty"`
}

// DspSubErrorV1 Error Object
type DspSubErrorV1 struct {
	// ErrorType Enumerated error type.
	ErrorType string `json:"errorType"`

	// Field Request body field which is cause of the error.
	Field *string `json:"field,omitempty"`

	// Message Detailed error description
	Message string `json:"message"`
}

// DspSupportedCurrencyV1 The supported currencies.
type DspSupportedCurrencyV1 string

// DspTimezoneV1 The advertiser timezone.
// - America/Anchorage
// - America/Caracas
// - America/Chicago
// - America/Denver
// - America/Halifax
// - America/Los_Angeles
// - America/New_York
// - America/Sao_Paulo
// - America/St_Johns
// - Asia/Almaty
// - Asia/Baghdad
// - Asia/Bangkok
// - Asia/Hong_Kong
// - Asia/Kabul
// - Asia/Kathmandu
// - Asia/Kolkata
// - Asia/Magadan
// - Asia/Shanghai
// - Asia/Tehran
// - Asia/Tokyo
// - Asia/Yekaterinburg
// - Asia/Yerevan
// - Atlantic/Azores
// - Atlantic/South_Georgia
// - Australia/Brisbane
// - Australia/Darwin
// - Europe/London
// - Europe/Paris
// - Indian/Cocos
// - Pacific/Fiji
// - Pacific/Honolulu
// - Pacific/Kwajalein
// - Pacific/Midway
type DspTimezoneV1 = string

// GetDspAdvertisersParams defines parameters for GetDspAdvertisers.
type GetDspAdvertisersParams struct {
	// StartIndex Sets a cursor into the requested set of advertisers. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
	StartIndex *int32 `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of advertisers to be returned in a single call. Maximum of 100 advertisers per call.
	Count *int32 `form:"count,omitempty" json:"count,omitempty"`

	// AdvertiserIdFilter List of comma separated advertiser ids to filter the advertisers. If no advertiser ids provided, all advertisers in this entity will be returned.
	AdvertiserIdFilter *string `form:"advertiserIdFilter,omitempty" json:"advertiserIdFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The client identifier of the customer making the request.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetDspAdvertisersAdvertiserIdParams defines parameters for GetDspAdvertisersAdvertiserId.
type GetDspAdvertisersAdvertiserIdParams struct {
	// AmazonAdvertisingAPIClientId The client identifier of the customer making the request.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDspAdvertisers request
	GetDspAdvertisers(ctx context.Context, params *GetDspAdvertisersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDspAdvertisersAdvertiserId request
	GetDspAdvertisersAdvertiserId(ctx context.Context, advertiserId string, params *GetDspAdvertisersAdvertiserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDspAdvertisers(ctx context.Context, params *GetDspAdvertisersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDspAdvertisersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDspAdvertisersAdvertiserId(ctx context.Context, advertiserId string, params *GetDspAdvertisersAdvertiserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDspAdvertisersAdvertiserIdRequest(c.Server, advertiserId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDspAdvertisersRequest generates requests for GetDspAdvertisers
func NewGetDspAdvertisersRequest(server string, params *GetDspAdvertisersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/advertisers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdvertiserIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserIdFilter", runtime.ParamLocationQuery, *params.AdvertiserIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDspAdvertisersAdvertiserIdRequest generates requests for GetDspAdvertisersAdvertiserId
func NewGetDspAdvertisersAdvertiserIdRequest(server string, advertiserId string, params *GetDspAdvertisersAdvertiserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "advertiserId", runtime.ParamLocationPath, advertiserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/advertisers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDspAdvertisersWithResponse request
	GetDspAdvertisersWithResponse(ctx context.Context, params *GetDspAdvertisersParams, reqEditors ...RequestEditorFn) (*GetDspAdvertisersResp, error)

	// GetDspAdvertisersAdvertiserIdWithResponse request
	GetDspAdvertisersAdvertiserIdWithResponse(ctx context.Context, advertiserId string, params *GetDspAdvertisersAdvertiserIdParams, reqEditors ...RequestEditorFn) (*GetDspAdvertisersAdvertiserIdResp, error)
}

type GetDspAdvertisersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DspAdvertisersV1
	JSON400      *DspErrorV1
	JSON401      *DspErrorV1
	JSON403      *DspErrorV1
	JSON404      *DspErrorV1
	JSON422      *DspErrorV1
	JSON429      *DspErrorV1
	JSON500      *DspErrorV1
	JSON502      *DspErrorV1
	JSON503      *DspErrorV1
	JSON504      *DspErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDspAdvertisersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDspAdvertisersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDspAdvertisersAdvertiserIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DspAdvertiserV1
	JSON400      *DspErrorV1
	JSON401      *DspErrorV1
	JSON403      *DspErrorV1
	JSON404      *DspErrorV1
	JSON422      *DspErrorV1
	JSON429      *DspErrorV1
	JSON500      *DspErrorV1
	JSON502      *DspErrorV1
	JSON503      *DspErrorV1
	JSON504      *DspErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDspAdvertisersAdvertiserIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDspAdvertisersAdvertiserIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDspAdvertisersWithResponse request returning *GetDspAdvertisersResp
func (c *ClientWithResponses) GetDspAdvertisersWithResponse(ctx context.Context, params *GetDspAdvertisersParams, reqEditors ...RequestEditorFn) (*GetDspAdvertisersResp, error) {
	rsp, err := c.GetDspAdvertisers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDspAdvertisersResp(rsp)
}

// GetDspAdvertisersAdvertiserIdWithResponse request returning *GetDspAdvertisersAdvertiserIdResp
func (c *ClientWithResponses) GetDspAdvertisersAdvertiserIdWithResponse(ctx context.Context, advertiserId string, params *GetDspAdvertisersAdvertiserIdParams, reqEditors ...RequestEditorFn) (*GetDspAdvertisersAdvertiserIdResp, error) {
	rsp, err := c.GetDspAdvertisersAdvertiserId(ctx, advertiserId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDspAdvertisersAdvertiserIdResp(rsp)
}

// ParseGetDspAdvertisersResp parses an HTTP response from a GetDspAdvertisersWithResponse call
func ParseGetDspAdvertisersResp(rsp *http.Response) (*GetDspAdvertisersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDspAdvertisersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspAdvertisersV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetDspAdvertisersAdvertiserIdResp parses an HTTP response from a GetDspAdvertisersAdvertiserIdWithResponse call
func ParseGetDspAdvertisersAdvertiserIdResp(rsp *http.Response) (*GetDspAdvertisersAdvertiserIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDspAdvertisersAdvertiserIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspAdvertiserV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest DspErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}
