// Package testaccounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package testaccounts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for CreateAccountRequestAccountType.
const (
	CreateAccountRequestAccountTypeAUTHOR CreateAccountRequestAccountType = "AUTHOR"
	CreateAccountRequestAccountTypeVENDOR CreateAccountRequestAccountType = "VENDOR"
)

// Defines values for CreateAccountRequestCountryCode.
const (
	CreateAccountRequestCountryCodeAE CreateAccountRequestCountryCode = "AE"
	CreateAccountRequestCountryCodeAU CreateAccountRequestCountryCode = "AU"
	CreateAccountRequestCountryCodeBE CreateAccountRequestCountryCode = "BE"
	CreateAccountRequestCountryCodeBR CreateAccountRequestCountryCode = "BR"
	CreateAccountRequestCountryCodeCA CreateAccountRequestCountryCode = "CA"
	CreateAccountRequestCountryCodeDE CreateAccountRequestCountryCode = "DE"
	CreateAccountRequestCountryCodeEG CreateAccountRequestCountryCode = "EG"
	CreateAccountRequestCountryCodeES CreateAccountRequestCountryCode = "ES"
	CreateAccountRequestCountryCodeFR CreateAccountRequestCountryCode = "FR"
	CreateAccountRequestCountryCodeIT CreateAccountRequestCountryCode = "IT"
	CreateAccountRequestCountryCodeJP CreateAccountRequestCountryCode = "JP"
	CreateAccountRequestCountryCodeMX CreateAccountRequestCountryCode = "MX"
	CreateAccountRequestCountryCodeNL CreateAccountRequestCountryCode = "NL"
	CreateAccountRequestCountryCodePL CreateAccountRequestCountryCode = "PL"
	CreateAccountRequestCountryCodeSA CreateAccountRequestCountryCode = "SA"
	CreateAccountRequestCountryCodeSE CreateAccountRequestCountryCode = "SE"
	CreateAccountRequestCountryCodeSG CreateAccountRequestCountryCode = "SG"
	CreateAccountRequestCountryCodeTR CreateAccountRequestCountryCode = "TR"
	CreateAccountRequestCountryCodeUK CreateAccountRequestCountryCode = "UK"
	CreateAccountRequestCountryCodeUS CreateAccountRequestCountryCode = "US"
)

// Defines values for GetAccountInformationResponseAccountType.
const (
	GetAccountInformationResponseAccountTypeAUTHOR GetAccountInformationResponseAccountType = "AUTHOR"
	GetAccountInformationResponseAccountTypeVENDOR GetAccountInformationResponseAccountType = "VENDOR"
)

// Defines values for GetAccountInformationResponseCountryCode.
const (
	GetAccountInformationResponseCountryCodeAE GetAccountInformationResponseCountryCode = "AE"
	GetAccountInformationResponseCountryCodeAU GetAccountInformationResponseCountryCode = "AU"
	GetAccountInformationResponseCountryCodeBE GetAccountInformationResponseCountryCode = "BE"
	GetAccountInformationResponseCountryCodeBR GetAccountInformationResponseCountryCode = "BR"
	GetAccountInformationResponseCountryCodeCA GetAccountInformationResponseCountryCode = "CA"
	GetAccountInformationResponseCountryCodeDE GetAccountInformationResponseCountryCode = "DE"
	GetAccountInformationResponseCountryCodeEG GetAccountInformationResponseCountryCode = "EG"
	GetAccountInformationResponseCountryCodeES GetAccountInformationResponseCountryCode = "ES"
	GetAccountInformationResponseCountryCodeFR GetAccountInformationResponseCountryCode = "FR"
	GetAccountInformationResponseCountryCodeIT GetAccountInformationResponseCountryCode = "IT"
	GetAccountInformationResponseCountryCodeJP GetAccountInformationResponseCountryCode = "JP"
	GetAccountInformationResponseCountryCodeMX GetAccountInformationResponseCountryCode = "MX"
	GetAccountInformationResponseCountryCodeNL GetAccountInformationResponseCountryCode = "NL"
	GetAccountInformationResponseCountryCodePL GetAccountInformationResponseCountryCode = "PL"
	GetAccountInformationResponseCountryCodeSA GetAccountInformationResponseCountryCode = "SA"
	GetAccountInformationResponseCountryCodeSE GetAccountInformationResponseCountryCode = "SE"
	GetAccountInformationResponseCountryCodeSG GetAccountInformationResponseCountryCode = "SG"
	GetAccountInformationResponseCountryCodeTR GetAccountInformationResponseCountryCode = "TR"
	GetAccountInformationResponseCountryCodeUK GetAccountInformationResponseCountryCode = "UK"
	GetAccountInformationResponseCountryCodeUS GetAccountInformationResponseCountryCode = "US"
)

// Defines values for GetAccountInformationResponseStatus.
const (
	COMPLETED  GetAccountInformationResponseStatus = "COMPLETED"
	FAILED     GetAccountInformationResponseStatus = "FAILED"
	INPROGRESS GetAccountInformationResponseStatus = "IN_PROGRESS"
)

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	AccountMetaData *struct {
		// VendorCode Vendor code  that needs to  be associated with the vendor  account.
		VendorCode *string `json:"vendorCode,omitempty"`
	} `json:"accountMetaData,omitempty"`

	// AccountType Type of test account.
	AccountType CreateAccountRequestAccountType `json:"accountType"`

	// CountryCode Country code of the test  account.
	CountryCode CreateAccountRequestCountryCode `json:"countryCode"`
}

// CreateAccountRequestAccountType Type of test account.
type CreateAccountRequestAccountType string

// CreateAccountRequestCountryCode Country code of the test  account.
type CreateAccountRequestCountryCode string

// CreateAccountResponse defines model for CreateAccountResponse.
type CreateAccountResponse struct {
	// RequestId request id.
	RequestId *string `json:"requestId,omitempty"`
}

// GetAccountInformationResponse defines model for GetAccountInformationResponse.
type GetAccountInformationResponse = []struct {
	// AccountType Type of test account.
	AccountType *GetAccountInformationResponseAccountType `json:"accountType,omitempty"`

	// Asins List of ASIN belonging to Author account.
	Asins *[]string `json:"asins,omitempty"`

	// CountryCode Country code of a test account.
	CountryCode *GetAccountInformationResponseCountryCode `json:"countryCode,omitempty"`

	// Id Identifier for the account.
	Id *string `json:"id,omitempty"`

	// Status Status  of test account creation request.
	Status *GetAccountInformationResponseStatus `json:"status,omitempty"`
}

// GetAccountInformationResponseAccountType Type of test account.
type GetAccountInformationResponseAccountType string

// GetAccountInformationResponseCountryCode Country code of a test account.
type GetAccountInformationResponseCountryCode string

// GetAccountInformationResponseStatus Status  of test account creation request.
type GetAccountInformationResponseStatus string

// Error Error response object.
type Error struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the response.
	Details *string `json:"details,omitempty"`
}

// GetAccountInformationParams defines parameters for GetAccountInformation.
type GetAccountInformationParams struct {
	// RequestId request id.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// CreateAccountParams defines parameters for CreateAccount.
type CreateAccountParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccountInformation request
	GetAccountInformation(ctx context.Context, params *GetAccountInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, params *CreateAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, params *CreateAccountParams, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccountInformation(ctx context.Context, params *GetAccountInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountInformationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, params *CreateAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, params *CreateAccountParams, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountInformationRequest generates requests for GetAccountInformation
func NewGetAccountInformationRequest(server string, params *GetAccountInformationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/testAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestId", runtime.ParamLocationQuery, *params.RequestId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, params *CreateAccountParams, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, params *CreateAccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/testAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountInformationWithResponse request
	GetAccountInformationWithResponse(ctx context.Context, params *GetAccountInformationParams, reqEditors ...RequestEditorFn) (*GetAccountInformationResp, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, params *CreateAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResp, error)

	CreateAccountWithResponse(ctx context.Context, params *CreateAccountParams, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResp, error)
}

type GetAccountInformationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountInformationResponse
	JSON400      *Error
	JSON404      *Error
	JSON422      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r GetAccountInformationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountInformationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateAccountResponse
	JSON400      *Error
	JSON404      *Error
	JSON422      *Error
	JSON429      *Error
	JSON500      *Error
	JSON503      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountInformationWithResponse request returning *GetAccountInformationResp
func (c *ClientWithResponses) GetAccountInformationWithResponse(ctx context.Context, params *GetAccountInformationParams, reqEditors ...RequestEditorFn) (*GetAccountInformationResp, error) {
	rsp, err := c.GetAccountInformation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountInformationResp(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResp
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, params *CreateAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResp, error) {
	rsp, err := c.CreateAccountWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResp(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, params *CreateAccountParams, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResp, error) {
	rsp, err := c.CreateAccount(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResp(rsp)
}

// ParseGetAccountInformationResp parses an HTTP response from a GetAccountInformationWithResponse call
func ParseGetAccountInformationResp(rsp *http.Response) (*GetAccountInformationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountInformationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateAccountResp parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResp(rsp *http.Response) (*CreateAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
