// Package accountportfolios provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package accountportfolios

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes              = "bearerAuth.Scopes"
	Oauth2AuthorizationCodeScopes = "oauth2AuthorizationCode.Scopes"
)

// Defines values for PortfolioBudgetCurrencyCode.
const (
	PortfolioBudgetCurrencyCodeAED PortfolioBudgetCurrencyCode = "AED"
	PortfolioBudgetCurrencyCodeAUD PortfolioBudgetCurrencyCode = "AUD"
	PortfolioBudgetCurrencyCodeBRL PortfolioBudgetCurrencyCode = "BRL"
	PortfolioBudgetCurrencyCodeCAD PortfolioBudgetCurrencyCode = "CAD"
	PortfolioBudgetCurrencyCodeEUR PortfolioBudgetCurrencyCode = "EUR"
	PortfolioBudgetCurrencyCodeGBP PortfolioBudgetCurrencyCode = "GBP"
	PortfolioBudgetCurrencyCodeJPY PortfolioBudgetCurrencyCode = "JPY"
	PortfolioBudgetCurrencyCodeMXN PortfolioBudgetCurrencyCode = "MXN"
	PortfolioBudgetCurrencyCodePLN PortfolioBudgetCurrencyCode = "PLN"
	PortfolioBudgetCurrencyCodeSEK PortfolioBudgetCurrencyCode = "SEK"
	PortfolioBudgetCurrencyCodeSGD PortfolioBudgetCurrencyCode = "SGD"
	PortfolioBudgetCurrencyCodeTRY PortfolioBudgetCurrencyCode = "TRY"
	PortfolioBudgetCurrencyCodeUSD PortfolioBudgetCurrencyCode = "USD"
)

// Defines values for PortfolioBudgetPolicy.
const (
	PortfolioBudgetPolicyDateRange        PortfolioBudgetPolicy = "dateRange"
	PortfolioBudgetPolicyMonthlyRecurring PortfolioBudgetPolicy = "monthlyRecurring"
)

// Defines values for PortfolioState.
const (
	PortfolioStateArchived PortfolioState = "archived"
	PortfolioStateEnabled  PortfolioState = "enabled"
	PortfolioStatePaused   PortfolioState = "paused"
)

// Defines values for PortfolioExBudgetCurrencyCode.
const (
	PortfolioExBudgetCurrencyCodeAED PortfolioExBudgetCurrencyCode = "AED"
	PortfolioExBudgetCurrencyCodeAUD PortfolioExBudgetCurrencyCode = "AUD"
	PortfolioExBudgetCurrencyCodeBRL PortfolioExBudgetCurrencyCode = "BRL"
	PortfolioExBudgetCurrencyCodeCAD PortfolioExBudgetCurrencyCode = "CAD"
	PortfolioExBudgetCurrencyCodeEUR PortfolioExBudgetCurrencyCode = "EUR"
	PortfolioExBudgetCurrencyCodeGBP PortfolioExBudgetCurrencyCode = "GBP"
	PortfolioExBudgetCurrencyCodeJPY PortfolioExBudgetCurrencyCode = "JPY"
	PortfolioExBudgetCurrencyCodeMXN PortfolioExBudgetCurrencyCode = "MXN"
	PortfolioExBudgetCurrencyCodePLN PortfolioExBudgetCurrencyCode = "PLN"
	PortfolioExBudgetCurrencyCodeSEK PortfolioExBudgetCurrencyCode = "SEK"
	PortfolioExBudgetCurrencyCodeSGD PortfolioExBudgetCurrencyCode = "SGD"
	PortfolioExBudgetCurrencyCodeTRY PortfolioExBudgetCurrencyCode = "TRY"
	PortfolioExBudgetCurrencyCodeUSD PortfolioExBudgetCurrencyCode = "USD"
)

// Defines values for PortfolioExBudgetPolicy.
const (
	PortfolioExBudgetPolicyDateRange        PortfolioExBudgetPolicy = "dateRange"
	PortfolioExBudgetPolicyMonthlyRecurring PortfolioExBudgetPolicy = "monthlyRecurring"
)

// Defines values for PortfolioExServingStatus.
const (
	ENDED                  PortfolioExServingStatus = "ENDED"
	PENDINGSTARTDATE       PortfolioExServingStatus = "PENDING_START_DATE"
	PORTFOLIOARCHIVED      PortfolioExServingStatus = "PORTFOLIO_ARCHIVED"
	PORTFOLIOOUTOFBUDGET   PortfolioExServingStatus = "PORTFOLIO_OUT_OF_BUDGET"
	PORTFOLIOPAUSED        PortfolioExServingStatus = "PORTFOLIO_PAUSED"
	PORTFOLIOSTATUSENABLED PortfolioExServingStatus = "PORTFOLIO_STATUS_ENABLED"
)

// Defines values for PortfolioExState.
const (
	PortfolioExStateArchived PortfolioExState = "archived"
	PortfolioExStateEnabled  PortfolioExState = "enabled"
	PortfolioExStatePaused   PortfolioExState = "paused"
)

// Defines values for PortfolioStateFilter.
const (
	PortfolioStateFilterArchived PortfolioStateFilter = "archived"
	PortfolioStateFilterEnabled  PortfolioStateFilter = "enabled"
	PortfolioStateFilterPaused   PortfolioStateFilter = "paused"
)

// Defines values for ListPortfoliosParamsPortfolioStateFilter.
const (
	ListPortfoliosParamsPortfolioStateFilterArchived ListPortfoliosParamsPortfolioStateFilter = "archived"
	ListPortfoliosParamsPortfolioStateFilterEnabled  ListPortfoliosParamsPortfolioStateFilter = "enabled"
	ListPortfoliosParamsPortfolioStateFilterPaused   ListPortfoliosParamsPortfolioStateFilter = "paused"
)

// Defines values for ListPortfoliosExParamsPortfolioStateFilter.
const (
	Archived ListPortfoliosExParamsPortfolioStateFilter = "archived"
	Enabled  ListPortfoliosExParamsPortfolioStateFilter = "enabled"
	Paused   ListPortfoliosExParamsPortfolioStateFilter = "paused"
)

// Portfolio defines model for Portfolio.
type Portfolio struct {
	Budget *struct {
		// Amount The budget amount associated with the portfolio. Cannot be `null`.
		Amount *float32 `json:"amount,omitempty"`

		// CurrencyCode The currency used for all monetary values for entities under this profile. Cannot be `null`.
		// |Region|`countryCode`|Country Name|`currencyCode`|
		// |-----|------|------|------|
		// |NA|US|United States|USD|
		// |NA|CA|Canada|CAD|
		// |NA|MX|Mexico|MXN|
		// |NA|BR|Brazil|BRL|
		// |EU|UK|United Kingdom|GBP|
		// |EU|DE|Germany|EUR|
		// |EU|FR|France|EUR|
		// |EU|ES|Spain|EUR|
		// |EU|IT|Italy|EUR|
		// |EU|NL|The Netherlands|EUR|
		// |EU|SE|Sweden|SEK|
		// |EU|PL|Poland|PLN|
		// |EU|AE|United Arab Emirates|AED|
		// |EU|TR|Turkey|TRY|
		// |FE|JP|Japan|JPY|
		// |FE|AU|Australia|AUD|
		// |FE|SG|Singapore|SGD|
		CurrencyCode *PortfolioBudgetCurrencyCode `json:"currencyCode,omitempty"`

		// EndDate The end date after which the budget is no longer applied. Optional if `policy` is set to `dateRange` or `monthlyRecurring`.
		EndDate *string `json:"endDate,omitempty"`

		// Policy The budget policy. Set to `dateRange` to specify a budget for a specific period of time. Set to `monthlyRecurring` to specify a budget that is automatically renewed at the beginning of each month. Cannot be `null`.
		Policy *PortfolioBudgetPolicy `json:"policy,omitempty"`

		// StartDate The starting date in `YYYYMMDD` format to which the budget is applied. Required if `policy` is set to `dateRange`. Not specified if `policy` is set to `monthlyRecurring`. Note that the starting date for `monthlyRecurring` is the date when the policy is set.
		StartDate *string `json:"startDate,omitempty"`
	} `json:"budget,omitempty"`

	// InBudget Indicates the current budget status of the portfolio. Set to `true` if the portfolio is in budget, set to `false` if the portfolio is out of budget.
	InBudget *bool `json:"inBudget,omitempty"`

	// Name The portfolio name.
	Name *string `json:"name,omitempty"`

	// PortfolioId The portfolio identifier.
	PortfolioId *float32 `json:"portfolioId,omitempty"`

	// State The current state of the portfolio.
	State *PortfolioState `json:"state,omitempty"`
}

// PortfolioBudgetCurrencyCode The currency used for all monetary values for entities under this profile. Cannot be `null`.
// |Region|`countryCode`|Country Name|`currencyCode`|
// |-----|------|------|------|
// |NA|US|United States|USD|
// |NA|CA|Canada|CAD|
// |NA|MX|Mexico|MXN|
// |NA|BR|Brazil|BRL|
// |EU|UK|United Kingdom|GBP|
// |EU|DE|Germany|EUR|
// |EU|FR|France|EUR|
// |EU|ES|Spain|EUR|
// |EU|IT|Italy|EUR|
// |EU|NL|The Netherlands|EUR|
// |EU|SE|Sweden|SEK|
// |EU|PL|Poland|PLN|
// |EU|AE|United Arab Emirates|AED|
// |EU|TR|Turkey|TRY|
// |FE|JP|Japan|JPY|
// |FE|AU|Australia|AUD|
// |FE|SG|Singapore|SGD|
type PortfolioBudgetCurrencyCode string

// PortfolioBudgetPolicy The budget policy. Set to `dateRange` to specify a budget for a specific period of time. Set to `monthlyRecurring` to specify a budget that is automatically renewed at the beginning of each month. Cannot be `null`.
type PortfolioBudgetPolicy string

// PortfolioState The current state of the portfolio.
type PortfolioState string

// PortfolioEx defines model for PortfolioEx.
type PortfolioEx struct {
	Budget *struct {
		// Amount The budget amount associated with the portfolio. Cannot be `null`.
		Amount *float32 `json:"amount,omitempty"`

		// CurrencyCode The currency used for all monetary values for entities under this profile. Cannot be `null`.
		// |Region|`countryCode`|Country Name|`currencyCode`|
		// |-----|------|------|------|
		// |NA|US|United States|USD|
		// |NA|CA|Canada|CAD|
		// |NA|MX|Mexico|MXN|
		// |NA|BR|Brazil|BRL|
		// |EU|UK|United Kingdom|GBP|
		// |EU|DE|Germany|EUR|
		// |EU|FR|France|EUR|
		// |EU|ES|Spain|EUR|
		// |EU|IT|Italy|EUR|
		// |EU|NL|The Netherlands|EUR|
		// |EU|SE|Sweden|SEK|
		// |EU|PL|Poland|PLN|
		// |EU|AE|United Arab Emirates|AED|
		// |EU|TR|Turkey|TRY|
		// |FE|JP|Japan|JPY|
		// |FE|AU|Australia|AUD|
		// |FE|SG|Singapore|SGD|
		CurrencyCode *PortfolioExBudgetCurrencyCode `json:"currencyCode,omitempty"`

		// EndDate The end date after which the budget is no longer applied. Optional if `policy` is set to `dateRange` or `monthlyRecurring`.
		EndDate *string `json:"endDate,omitempty"`

		// Policy The budget policy. Set to `dateRange` to specify a budget for a specific period of time. Set to `monthlyRecurring` to specify a budget that is automatically renewed at the beginning of each month. Cannot be `null`.
		Policy *PortfolioExBudgetPolicy `json:"policy,omitempty"`

		// StartDate The starting date in `YYYYMMDD` format to which the budget is applied. Required if `policy` is set to `dateRange`. Not specified if `policy` is set to `monthlyRecurring`. Note that the starting date for `monthlyRecurring` is the date when the policy is set.
		StartDate *string `json:"startDate,omitempty"`
	} `json:"budget,omitempty"`

	// CreationDate Date that the portfolio was created, in epoch time.
	CreationDate *float32 `json:"creationDate,omitempty"`

	// InBudget Indicates the current budget status of the portfolio. Set to `true` if the portfolio is in budget, set to `false` if the portfolio is out of budget.
	InBudget *bool `json:"inBudget,omitempty"`

	// LastUpdatedDate Date at least one property value of the portfolio was updated, in epoch time.
	LastUpdatedDate *float32 `json:"lastUpdatedDate,omitempty"`

	// Name The portfolio name.
	Name *string `json:"name,omitempty"`

	// PortfolioId The portfolio identifier.
	PortfolioId *float32 `json:"portfolioId,omitempty"`

	// ServingStatus The current serving status of the portfolio:
	// | Portfolio serving status | Description |
	// |--------------------------|-------------|
	// | PORTFOLIO_STATUS_ENABLED | The portfolio's status is ENABLED. |
	// | PORTFOLIO_STATUS_PAUSED  | The portfolio's status is PAUSED. |
	// | PORTFOLIO_ARCHIVED | The portfolio is archived. |
	// | PORTFOLIO_OUT_OF_BUDGET | The maximum budget cap at the portfolio level has been reached. |
	// | PENDING_START_DATE | The portfolio's start date is in the future. |
	// | ENDED | The portfolio's end date is in the past. |
	ServingStatus *PortfolioExServingStatus `json:"servingStatus,omitempty"`

	// State The current state of the portfolio.
	State *PortfolioExState `json:"state,omitempty"`
}

// PortfolioExBudgetCurrencyCode The currency used for all monetary values for entities under this profile. Cannot be `null`.
// |Region|`countryCode`|Country Name|`currencyCode`|
// |-----|------|------|------|
// |NA|US|United States|USD|
// |NA|CA|Canada|CAD|
// |NA|MX|Mexico|MXN|
// |NA|BR|Brazil|BRL|
// |EU|UK|United Kingdom|GBP|
// |EU|DE|Germany|EUR|
// |EU|FR|France|EUR|
// |EU|ES|Spain|EUR|
// |EU|IT|Italy|EUR|
// |EU|NL|The Netherlands|EUR|
// |EU|SE|Sweden|SEK|
// |EU|PL|Poland|PLN|
// |EU|AE|United Arab Emirates|AED|
// |EU|TR|Turkey|TRY|
// |FE|JP|Japan|JPY|
// |FE|AU|Australia|AUD|
// |FE|SG|Singapore|SGD|
type PortfolioExBudgetCurrencyCode string

// PortfolioExBudgetPolicy The budget policy. Set to `dateRange` to specify a budget for a specific period of time. Set to `monthlyRecurring` to specify a budget that is automatically renewed at the beginning of each month. Cannot be `null`.
type PortfolioExBudgetPolicy string

// PortfolioExServingStatus The current serving status of the portfolio:
// | Portfolio serving status | Description |
// |--------------------------|-------------|
// | PORTFOLIO_STATUS_ENABLED | The portfolio's status is ENABLED. |
// | PORTFOLIO_STATUS_PAUSED  | The portfolio's status is PAUSED. |
// | PORTFOLIO_ARCHIVED | The portfolio is archived. |
// | PORTFOLIO_OUT_OF_BUDGET | The maximum budget cap at the portfolio level has been reached. |
// | PENDING_START_DATE | The portfolio's start date is in the future. |
// | ENDED | The portfolio's end date is in the past. |
type PortfolioExServingStatus string

// PortfolioExState The current state of the portfolio.
type PortfolioExState string

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// PortfolioIdFilter defines model for portfolioIdFilter.
type PortfolioIdFilter = string

// PortfolioNameFilter defines model for portfolioNameFilter.
type PortfolioNameFilter = string

// PortfolioStateFilter defines model for portfolioStateFilter.
type PortfolioStateFilter string

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// NotFound defines model for notFound.
type NotFound struct {
	// Code The error code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error.
	Details *string `json:"details,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Code The error code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the error.
	Details *string `json:"details,omitempty"`
}

// ListPortfoliosParams defines parameters for ListPortfolios.
type ListPortfoliosParams struct {
	// PortfolioIdFilter The returned list includes portfolios with identifiers matching those in the specified comma-delimited list. There is a maximum of 100 identifiers allowed.
	PortfolioIdFilter *PortfolioIdFilter `form:"portfolioIdFilter,omitempty" json:"portfolioIdFilter,omitempty"`

	// PortfolioNameFilter The returned list includes portfolios with names matching those in the specified comma-delimited list. There is a maximum of 100 names allowed.
	PortfolioNameFilter *PortfolioNameFilter `form:"portfolioNameFilter,omitempty" json:"portfolioNameFilter,omitempty"`

	// PortfolioStateFilter The returned list includes portfolios with states matching those in the specified comma-delimited list.
	PortfolioStateFilter *ListPortfoliosParamsPortfolioStateFilter `form:"portfolioStateFilter,omitempty" json:"portfolioStateFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListPortfoliosParamsPortfolioStateFilter defines parameters for ListPortfolios.
type ListPortfoliosParamsPortfolioStateFilter string

// CreatePortfoliosJSONBody defines parameters for CreatePortfolios.
type CreatePortfoliosJSONBody = []Portfolio

// CreatePortfoliosParams defines parameters for CreatePortfolios.
type CreatePortfoliosParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdatePortfoliosJSONBody defines parameters for UpdatePortfolios.
type UpdatePortfoliosJSONBody = []Portfolio

// UpdatePortfoliosParams defines parameters for UpdatePortfolios.
type UpdatePortfoliosParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListPortfoliosExParams defines parameters for ListPortfoliosEx.
type ListPortfoliosExParams struct {
	// PortfolioIdFilter The returned list includes portfolios with identifiers matching those in the specified comma-delimited list. There is a maximum of 100 identifiers allowed.
	PortfolioIdFilter *PortfolioIdFilter `form:"portfolioIdFilter,omitempty" json:"portfolioIdFilter,omitempty"`

	// PortfolioNameFilter The returned list includes portfolios with names matching those in the specified comma-delimited list. There is a maximum of 100 names allowed.
	PortfolioNameFilter *PortfolioNameFilter `form:"portfolioNameFilter,omitempty" json:"portfolioNameFilter,omitempty"`

	// PortfolioStateFilter The returned list includes portfolios with states matching those in the specified comma-delimited list.
	PortfolioStateFilter *ListPortfoliosExParamsPortfolioStateFilter `form:"portfolioStateFilter,omitempty" json:"portfolioStateFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListPortfoliosExParamsPortfolioStateFilter defines parameters for ListPortfoliosEx.
type ListPortfoliosExParamsPortfolioStateFilter string

// ListPortfolioExParams defines parameters for ListPortfolioEx.
type ListPortfolioExParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListPortfolioParams defines parameters for ListPortfolio.
type ListPortfolioParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreatePortfoliosJSONRequestBody defines body for CreatePortfolios for application/json ContentType.
type CreatePortfoliosJSONRequestBody = CreatePortfoliosJSONBody

// UpdatePortfoliosJSONRequestBody defines body for UpdatePortfolios for application/json ContentType.
type UpdatePortfoliosJSONRequestBody = UpdatePortfoliosJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListPortfolios request
	ListPortfolios(ctx context.Context, params *ListPortfoliosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePortfoliosWithBody request with any body
	CreatePortfoliosWithBody(ctx context.Context, params *CreatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePortfolios(ctx context.Context, params *CreatePortfoliosParams, body CreatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePortfoliosWithBody request with any body
	UpdatePortfoliosWithBody(ctx context.Context, params *UpdatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePortfolios(ctx context.Context, params *UpdatePortfoliosParams, body UpdatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPortfoliosEx request
	ListPortfoliosEx(ctx context.Context, params *ListPortfoliosExParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPortfolioEx request
	ListPortfolioEx(ctx context.Context, portfolioId float32, params *ListPortfolioExParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPortfolio request
	ListPortfolio(ctx context.Context, portfolioId float32, params *ListPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListPortfolios(ctx context.Context, params *ListPortfoliosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPortfoliosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortfoliosWithBody(ctx context.Context, params *CreatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortfoliosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortfolios(ctx context.Context, params *CreatePortfoliosParams, body CreatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortfoliosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortfoliosWithBody(ctx context.Context, params *UpdatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortfoliosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortfolios(ctx context.Context, params *UpdatePortfoliosParams, body UpdatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortfoliosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPortfoliosEx(ctx context.Context, params *ListPortfoliosExParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPortfoliosExRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPortfolioEx(ctx context.Context, portfolioId float32, params *ListPortfolioExParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPortfolioExRequest(c.Server, portfolioId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPortfolio(ctx context.Context, portfolioId float32, params *ListPortfolioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPortfolioRequest(c.Server, portfolioId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListPortfoliosRequest generates requests for ListPortfolios
func NewListPortfoliosRequest(server string, params *ListPortfoliosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortfolioIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioIdFilter", runtime.ParamLocationQuery, *params.PortfolioIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortfolioNameFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioNameFilter", runtime.ParamLocationQuery, *params.PortfolioNameFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortfolioStateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioStateFilter", runtime.ParamLocationQuery, *params.PortfolioStateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreatePortfoliosRequest calls the generic CreatePortfolios builder with application/json body
func NewCreatePortfoliosRequest(server string, params *CreatePortfoliosParams, body CreatePortfoliosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePortfoliosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePortfoliosRequestWithBody generates requests for CreatePortfolios with any type of body
func NewCreatePortfoliosRequestWithBody(server string, params *CreatePortfoliosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdatePortfoliosRequest calls the generic UpdatePortfolios builder with application/json body
func NewUpdatePortfoliosRequest(server string, params *UpdatePortfoliosParams, body UpdatePortfoliosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePortfoliosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdatePortfoliosRequestWithBody generates requests for UpdatePortfolios with any type of body
func NewUpdatePortfoliosRequestWithBody(server string, params *UpdatePortfoliosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListPortfoliosExRequest generates requests for ListPortfoliosEx
func NewListPortfoliosExRequest(server string, params *ListPortfoliosExParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios/extended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PortfolioIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioIdFilter", runtime.ParamLocationQuery, *params.PortfolioIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortfolioNameFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioNameFilter", runtime.ParamLocationQuery, *params.PortfolioNameFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PortfolioStateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioStateFilter", runtime.ParamLocationQuery, *params.PortfolioStateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListPortfolioExRequest generates requests for ListPortfolioEx
func NewListPortfolioExRequest(server string, portfolioId float32, params *ListPortfolioExParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolioId", runtime.ParamLocationPath, portfolioId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios/extended/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListPortfolioRequest generates requests for ListPortfolio
func NewListPortfolioRequest(server string, portfolioId float32, params *ListPortfolioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "portfolioId", runtime.ParamLocationPath, portfolioId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/portfolios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListPortfoliosWithResponse request
	ListPortfoliosWithResponse(ctx context.Context, params *ListPortfoliosParams, reqEditors ...RequestEditorFn) (*ListPortfoliosResp, error)

	// CreatePortfoliosWithBodyWithResponse request with any body
	CreatePortfoliosWithBodyWithResponse(ctx context.Context, params *CreatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortfoliosResp, error)

	CreatePortfoliosWithResponse(ctx context.Context, params *CreatePortfoliosParams, body CreatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortfoliosResp, error)

	// UpdatePortfoliosWithBodyWithResponse request with any body
	UpdatePortfoliosWithBodyWithResponse(ctx context.Context, params *UpdatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortfoliosResp, error)

	UpdatePortfoliosWithResponse(ctx context.Context, params *UpdatePortfoliosParams, body UpdatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortfoliosResp, error)

	// ListPortfoliosExWithResponse request
	ListPortfoliosExWithResponse(ctx context.Context, params *ListPortfoliosExParams, reqEditors ...RequestEditorFn) (*ListPortfoliosExResp, error)

	// ListPortfolioExWithResponse request
	ListPortfolioExWithResponse(ctx context.Context, portfolioId float32, params *ListPortfolioExParams, reqEditors ...RequestEditorFn) (*ListPortfolioExResp, error)

	// ListPortfolioWithResponse request
	ListPortfolioWithResponse(ctx context.Context, portfolioId float32, params *ListPortfolioParams, reqEditors ...RequestEditorFn) (*ListPortfolioResp, error)
}

type ListPortfoliosResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Portfolio
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ListPortfoliosResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPortfoliosResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePortfoliosResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Code A string, 'SUCCESS', that indicates the portfolio was updated successfully.
		Code *string `json:"code,omitempty"`

		// PortfolioId The portfolio identifier.
		PortfolioId *float32 `json:"portfolioId,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r CreatePortfoliosResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePortfoliosResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePortfoliosResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Code A string, 'SUCCESS', that indicates the portfolio was updated successfully.
		Code *string `json:"code,omitempty"`

		// PortfolioId The portfolio identifier.
		PortfolioId *float32 `json:"portfolioId,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r UpdatePortfoliosResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePortfoliosResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPortfoliosExResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PortfolioEx
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ListPortfoliosExResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPortfoliosExResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPortfolioExResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortfolioEx
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ListPortfolioExResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPortfolioExResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPortfolioResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Portfolio
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ListPortfolioResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPortfolioResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListPortfoliosWithResponse request returning *ListPortfoliosResp
func (c *ClientWithResponses) ListPortfoliosWithResponse(ctx context.Context, params *ListPortfoliosParams, reqEditors ...RequestEditorFn) (*ListPortfoliosResp, error) {
	rsp, err := c.ListPortfolios(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPortfoliosResp(rsp)
}

// CreatePortfoliosWithBodyWithResponse request with arbitrary body returning *CreatePortfoliosResp
func (c *ClientWithResponses) CreatePortfoliosWithBodyWithResponse(ctx context.Context, params *CreatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortfoliosResp, error) {
	rsp, err := c.CreatePortfoliosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortfoliosResp(rsp)
}

func (c *ClientWithResponses) CreatePortfoliosWithResponse(ctx context.Context, params *CreatePortfoliosParams, body CreatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortfoliosResp, error) {
	rsp, err := c.CreatePortfolios(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortfoliosResp(rsp)
}

// UpdatePortfoliosWithBodyWithResponse request with arbitrary body returning *UpdatePortfoliosResp
func (c *ClientWithResponses) UpdatePortfoliosWithBodyWithResponse(ctx context.Context, params *UpdatePortfoliosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortfoliosResp, error) {
	rsp, err := c.UpdatePortfoliosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortfoliosResp(rsp)
}

func (c *ClientWithResponses) UpdatePortfoliosWithResponse(ctx context.Context, params *UpdatePortfoliosParams, body UpdatePortfoliosJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortfoliosResp, error) {
	rsp, err := c.UpdatePortfolios(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortfoliosResp(rsp)
}

// ListPortfoliosExWithResponse request returning *ListPortfoliosExResp
func (c *ClientWithResponses) ListPortfoliosExWithResponse(ctx context.Context, params *ListPortfoliosExParams, reqEditors ...RequestEditorFn) (*ListPortfoliosExResp, error) {
	rsp, err := c.ListPortfoliosEx(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPortfoliosExResp(rsp)
}

// ListPortfolioExWithResponse request returning *ListPortfolioExResp
func (c *ClientWithResponses) ListPortfolioExWithResponse(ctx context.Context, portfolioId float32, params *ListPortfolioExParams, reqEditors ...RequestEditorFn) (*ListPortfolioExResp, error) {
	rsp, err := c.ListPortfolioEx(ctx, portfolioId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPortfolioExResp(rsp)
}

// ListPortfolioWithResponse request returning *ListPortfolioResp
func (c *ClientWithResponses) ListPortfolioWithResponse(ctx context.Context, portfolioId float32, params *ListPortfolioParams, reqEditors ...RequestEditorFn) (*ListPortfolioResp, error) {
	rsp, err := c.ListPortfolio(ctx, portfolioId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPortfolioResp(rsp)
}

// ParseListPortfoliosResp parses an HTTP response from a ListPortfoliosWithResponse call
func ParseListPortfoliosResp(rsp *http.Response) (*ListPortfoliosResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPortfoliosResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Portfolio
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePortfoliosResp parses an HTTP response from a CreatePortfoliosWithResponse call
func ParseCreatePortfoliosResp(rsp *http.Response) (*CreatePortfoliosResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePortfoliosResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Code A string, 'SUCCESS', that indicates the portfolio was updated successfully.
			Code *string `json:"code,omitempty"`

			// PortfolioId The portfolio identifier.
			PortfolioId *float32 `json:"portfolioId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePortfoliosResp parses an HTTP response from a UpdatePortfoliosWithResponse call
func ParseUpdatePortfoliosResp(rsp *http.Response) (*UpdatePortfoliosResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePortfoliosResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Code A string, 'SUCCESS', that indicates the portfolio was updated successfully.
			Code *string `json:"code,omitempty"`

			// PortfolioId The portfolio identifier.
			PortfolioId *float32 `json:"portfolioId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPortfoliosExResp parses an HTTP response from a ListPortfoliosExWithResponse call
func ParseListPortfoliosExResp(rsp *http.Response) (*ListPortfoliosExResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPortfoliosExResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PortfolioEx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPortfolioExResp parses an HTTP response from a ListPortfolioExWithResponse call
func ParseListPortfolioExResp(rsp *http.Response) (*ListPortfolioExResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPortfolioExResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortfolioEx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListPortfolioResp parses an HTTP response from a ListPortfolioWithResponse call
func ParseListPortfolioResp(rsp *http.Response) (*ListPortfolioResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPortfolioResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Portfolio
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
