// Package reportV3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package reportV3

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AsyncReportStatus.
const (
	COMPLETED  AsyncReportStatus = "COMPLETED"
	FAILED     AsyncReportStatus = "FAILED"
	PENDING    AsyncReportStatus = "PENDING"
	PROCESSING AsyncReportStatus = "PROCESSING"
)

// Defines values for AsyncReportAdProduct.
const (
	SPONSOREDBRANDS   AsyncReportAdProduct = "SPONSORED_BRANDS"
	SPONSOREDPRODUCTS AsyncReportAdProduct = "SPONSORED_PRODUCTS"
)

// Defines values for AsyncReportConfigurationFormat.
const (
	GZIPJSON AsyncReportConfigurationFormat = "GZIP_JSON"
)

// Defines values for AsyncReportConfigurationTimeUnit.
const (
	DAILY   AsyncReportConfigurationTimeUnit = "DAILY"
	SUMMARY AsyncReportConfigurationTimeUnit = "SUMMARY"
)

// AsyncReport defines model for AsyncReport.
type AsyncReport struct {
	Configuration AsyncReportConfiguration `json:"configuration"`

	// CreatedAt The date at which the report was created in ISO 8601 date time format.
	CreatedAt string `json:"createdAt"`

	// EndDate The end date for the reporting period in YYYY-mm-dd format.
	EndDate string `json:"endDate"`

	// FailureReason Present for failed reports only. The reason why a report failed to generate.
	FailureReason *string `json:"failureReason"`

	// FileSize The size of the report file, in bytes.
	FileSize *float32 `json:"fileSize"`

	// GeneratedAt The date at which the report was generated in ISO 8601 date time format.
	GeneratedAt *string `json:"generatedAt"`

	// Name Optional. The name of the generated report.
	Name *string `json:"name"`

	// ReportId The identifier of the requested report.
	ReportId string `json:"reportId"`

	// StartDate The start date for the reporting period in YYYY-mm-dd format.
	StartDate string `json:"startDate"`

	// Status The build status of the report.
	//   - `PENDING` - Report is created and awaiting processing.
	//   - `PROCESSING` - Report is processing. Please wait.
	//   - `COMPLETED` - Report has completed.  Check the `url` for the output file.
	//   - `FAILED` - Report generation failed.  Check the `failureReason` for details.
	Status AsyncReportStatus `json:"status"`

	// UpdatedAt The date at which the report was last updated in ISO 8601 date time format.
	UpdatedAt string `json:"updatedAt"`

	// Url URL of the generated report.
	Url *string `json:"url"`

	// UrlExpiresAt The date at which the download URL for the generated report expires. urlExpires at this time defaults to 3600 seconds but may vary in the future.
	UrlExpiresAt *string `json:"urlExpiresAt"`
}

// AsyncReportStatus The build status of the report.
//   - `PENDING` - Report is created and awaiting processing.
//   - `PROCESSING` - Report is processing. Please wait.
//   - `COMPLETED` - Report has completed.  Check the `url` for the output file.
//   - `FAILED` - Report generation failed.  Check the `failureReason` for details.
type AsyncReportStatus string

// AsyncReportAdProduct The advertising product such as SPONSORED_PRODUCTS or SPONSORED_BRANDS.
type AsyncReportAdProduct string

// AsyncReportConfiguration defines model for AsyncReportConfiguration.
type AsyncReportConfiguration struct {
	// AdProduct The advertising product such as SPONSORED_PRODUCTS or SPONSORED_BRANDS.
	AdProduct AsyncReportAdProduct `json:"adProduct"`

	// Columns The list of columns to be used for report. The availability of
	// columns depends on the selection of reportTypeId. This list cannot be null or empty.
	Columns []string `json:"columns"`

	// Filters The list of filters supported by a report type. The availability of filters fields depends on the selection of reportTypeId.
	Filters *[]AsyncReportFilter `json:"filters"`

	// Format The report file format.
	Format AsyncReportConfigurationFormat `json:"format"`

	// GroupBy This field determines the aggregation level of the report data and also makes additional fields available
	// for selection. This field cannot be null or empty.
	GroupBy []string `json:"groupBy"`

	// ReportTypeId The identifier of the Report Type to be generated.
	ReportTypeId string `json:"reportTypeId"`

	// TimeUnit The aggregation level of report data. If the timeUnit is set to `SUMMARY`, the report data is aggregated at the time period specified. The availability
	// of time unit breakdowns depends on the selection of reportTypeId.
	TimeUnit AsyncReportConfigurationTimeUnit `json:"timeUnit"`
}

// AsyncReportConfigurationFormat The report file format.
type AsyncReportConfigurationFormat string

// AsyncReportConfigurationTimeUnit The aggregation level of report data. If the timeUnit is set to `SUMMARY`, the report data is aggregated at the time period specified. The availability
// of time unit breakdowns depends on the selection of reportTypeId.
type AsyncReportConfigurationTimeUnit string

// AsyncReportFilter defines model for AsyncReportFilter.
type AsyncReportFilter struct {
	// Field The field name of the filter
	Field *string `json:"field,omitempty"`

	// Values The values to be filtered by
	Values *[]string `json:"values,omitempty"`
}

// AsyncReportingError The Error Response.
type AsyncReportingError struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable description of the response.
	Detail *string `json:"detail,omitempty"`
}

// CreateAsyncReportRequest defines model for CreateAsyncReportRequest.
type CreateAsyncReportRequest struct {
	Configuration AsyncReportConfiguration `json:"configuration"`

	// EndDate YYYY-MM-DD format. The maximum lookback window supported depends on the selection of reportTypeId. Most report types support `95 days` as lookback window.
	EndDate string `json:"endDate"`

	// Name The name of the report.
	Name *string `json:"name,omitempty"`

	// StartDate YYYY-MM-DD format. The maximum lookback window supported depends on the selection of reportTypeId. Most report types support `95 days` as lookback window.
	StartDate string `json:"startDate"`
}

// DeleteAsyncReportResponse defines model for DeleteAsyncReportResponse.
type DeleteAsyncReportResponse struct {
	// Code The HTTP status code of the response.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable description of the response.
	Detail *string `json:"detail,omitempty"`

	// ReportId The identifier of the report.
	ReportId *string `json:"reportId,omitempty"`
}

// CreateAsyncReportParams defines parameters for CreateAsyncReport.
type CreateAsyncReportParams struct {
	// AmazonAdvertisingAPIClientId The client identifier of the customer making the request.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DeleteAsyncReportParams defines parameters for DeleteAsyncReport.
type DeleteAsyncReportParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// GetAsyncReportParams defines parameters for GetAsyncReport.
type GetAsyncReportParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody defines body for CreateAsyncReport for application/vnd.createasyncreportrequest.v3+json ContentType.
type CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody = CreateAsyncReportRequest

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("go-api-sdk/v1.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAsyncReportWithBody request with any body
	CreateAsyncReportWithBody(ctx context.Context, params *CreateAsyncReportParams, contentType string, body io.Reader) (*http.Response, error)

	CreateAsyncReportWithApplicationVndCreateasyncreportrequestV3PlusJSONBody(ctx context.Context, params *CreateAsyncReportParams, body CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteAsyncReport request
	DeleteAsyncReport(ctx context.Context, reportId string, params *DeleteAsyncReportParams) (*http.Response, error)

	// GetAsyncReport request
	GetAsyncReport(ctx context.Context, reportId string, params *GetAsyncReportParams) (*http.Response, error)
}

func (c *Client) CreateAsyncReportWithBody(ctx context.Context, params *CreateAsyncReportParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAsyncReportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAsyncReportWithApplicationVndCreateasyncreportrequestV3PlusJSONBody(ctx context.Context, params *CreateAsyncReportParams, body CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateAsyncReportRequestWithApplicationVndCreateasyncreportrequestV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteAsyncReport(ctx context.Context, reportId string, params *DeleteAsyncReportParams) (*http.Response, error) {
	req, err := NewDeleteAsyncReportRequest(c.Server, reportId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAsyncReport(ctx context.Context, reportId string, params *GetAsyncReportParams) (*http.Response, error) {
	req, err := NewGetAsyncReportRequest(c.Server, reportId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewCreateAsyncReportRequestWithApplicationVndCreateasyncreportrequestV3PlusJSONBody calls the generic CreateAsyncReport builder with application/vnd.createasyncreportrequest.v3+json body
func NewCreateAsyncReportRequestWithApplicationVndCreateasyncreportrequestV3PlusJSONBody(server string, params *CreateAsyncReportParams, body CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAsyncReportRequestWithBody(server, params, "application/vnd.createasyncreportrequest.v3+json", bodyReader)
}

// NewCreateAsyncReportRequestWithBody generates requests for CreateAsyncReport with any type of body
func NewCreateAsyncReportRequestWithBody(server string, params *CreateAsyncReportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteAsyncReportRequest generates requests for DeleteAsyncReport
func NewDeleteAsyncReportRequest(server string, reportId string, params *DeleteAsyncReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAsyncReportRequest generates requests for GetAsyncReport
func NewGetAsyncReportRequest(server string, reportId string, params *GetAsyncReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAsyncReportWithBodyWithResponse request with any body
	CreateAsyncReportWithBodyWithResponse(ctx context.Context, params *CreateAsyncReportParams, contentType string, body io.Reader) (*CreateAsyncReportResp, error)

	CreateAsyncReportWithApplicationVndCreateasyncreportrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateAsyncReportParams, body CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody) (*CreateAsyncReportResp, error)

	// DeleteAsyncReportWithResponse request
	DeleteAsyncReportWithResponse(ctx context.Context, reportId string, params *DeleteAsyncReportParams) (*DeleteAsyncReportResp, error)

	// GetAsyncReportWithResponse request
	GetAsyncReportWithResponse(ctx context.Context, reportId string, params *GetAsyncReportParams) (*GetAsyncReportResp, error)
}

type CreateAsyncReportResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndCreateasyncreportresponseV3JSON200 *AsyncReport
	JSON400                                          *AsyncReportingError
	JSON401                                          *AsyncReportingError
	JSON422                                          *AsyncReportingError
	JSON429                                          *AsyncReportingError
	JSON500                                          *AsyncReportingError
}

// Status returns HTTPResponse.Status
func (r CreateAsyncReportResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAsyncReportResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAsyncReportResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndDeleteasyncreportresponseV3JSON200 *DeleteAsyncReportResponse
	JSON400                                          *AsyncReportingError
	JSON401                                          *AsyncReportingError
	JSON403                                          *AsyncReportingError
	JSON404                                          *AsyncReportingError
	JSON429                                          *AsyncReportingError
	JSON500                                          *AsyncReportingError
}

// Status returns HTTPResponse.Status
func (r DeleteAsyncReportResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAsyncReportResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAsyncReportResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndGetasyncreportresponseV3JSON200 *AsyncReport
	JSON400                                       *AsyncReportingError
	JSON401                                       *AsyncReportingError
	JSON404                                       *AsyncReportingError
	JSON429                                       *AsyncReportingError
	JSON500                                       *AsyncReportingError
}

// Status returns HTTPResponse.Status
func (r GetAsyncReportResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAsyncReportResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAsyncReportWithBodyWithResponse request with arbitrary body returning *CreateAsyncReportResp
func (c *ClientWithResponses) CreateAsyncReportWithBodyWithResponse(ctx context.Context, params *CreateAsyncReportParams, contentType string, body io.Reader) (*CreateAsyncReportResp, error) {
	rsp, err := c.CreateAsyncReportWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAsyncReportResp(rsp)
}

func (c *ClientWithResponses) CreateAsyncReportWithApplicationVndCreateasyncreportrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateAsyncReportParams, body CreateAsyncReportApplicationVndCreateasyncreportrequestV3PlusJSONRequestBody) (*CreateAsyncReportResp, error) {
	rsp, err := c.CreateAsyncReportWithApplicationVndCreateasyncreportrequestV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAsyncReportResp(rsp)
}

// DeleteAsyncReportWithResponse request returning *DeleteAsyncReportResp
func (c *ClientWithResponses) DeleteAsyncReportWithResponse(ctx context.Context, reportId string, params *DeleteAsyncReportParams) (*DeleteAsyncReportResp, error) {
	rsp, err := c.DeleteAsyncReport(ctx, reportId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAsyncReportResp(rsp)
}

// GetAsyncReportWithResponse request returning *GetAsyncReportResp
func (c *ClientWithResponses) GetAsyncReportWithResponse(ctx context.Context, reportId string, params *GetAsyncReportParams) (*GetAsyncReportResp, error) {
	rsp, err := c.GetAsyncReport(ctx, reportId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAsyncReportResp(rsp)
}

// ParseCreateAsyncReportResp parses an HTTP response from a CreateAsyncReportWithResponse call
func ParseCreateAsyncReportResp(rsp *http.Response) (*CreateAsyncReportResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAsyncReportResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCreateasyncreportresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAsyncReportResp parses an HTTP response from a DeleteAsyncReportWithResponse call
func ParseDeleteAsyncReportResp(rsp *http.Response) (*DeleteAsyncReportResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAsyncReportResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAsyncReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDeleteasyncreportresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAsyncReportResp parses an HTTP response from a GetAsyncReportWithResponse call
func ParseGetAsyncReportResp(rsp *http.Response) (*GetAsyncReportResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAsyncReportResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGetasyncreportresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest AsyncReportingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
