// Package dataprovider provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package dataprovider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AudienceFeesCurrency.
const (
	AED AudienceFeesCurrency = "AED"
	AUD AudienceFeesCurrency = "AUD"
	CAD AudienceFeesCurrency = "CAD"
	EUR AudienceFeesCurrency = "EUR"
	GBP AudienceFeesCurrency = "GBP"
	INR AudienceFeesCurrency = "INR"
	JPY AudienceFeesCurrency = "JPY"
	MXN AudienceFeesCurrency = "MXN"
	SAR AudienceFeesCurrency = "SAR"
	SEK AudienceFeesCurrency = "SEK"
	TRY AudienceFeesCurrency = "TRY"
	USD AudienceFeesCurrency = "USD"
)

// Defines values for MetadataType.
const (
	DATAPROVIDER MetadataType = "DATA_PROVIDER"
)

// Defines values for PatchV2DpAudienceJSONBodyPatchesOp.
const (
	Add    PatchV2DpAudienceJSONBodyPatchesOp = "add"
	Remove PatchV2DpAudienceJSONBodyPatchesOp = "remove"
)

// Defines values for PatchV2DpUsersJSONBodyUsersUserIdIdType.
const (
	COOKIE         PatchV2DpUsersJSONBodyUsersUserIdIdType = "COOKIE"
	EXTERNALUSERID PatchV2DpUsersJSONBodyUsersUserIdIdType = "EXTERNAL_USER_ID"
	MAID           PatchV2DpUsersJSONBodyUsersUserIdIdType = "MAID"
)

// AdvertiserId The advertiser identifier.
type AdvertiserId = int64

// AudienceDescription The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
type AudienceDescription = string

// AudienceFees defines model for audienceFees.
type AudienceFees = []struct {
	// CpmCents Cost per thousand impressions (CPM) in cents. For example, $1.00 = 100 cents.
	CpmCents int `json:"cpmCents"`

	// Currency Currency key as defined in https://en.wikipedia.org/wiki/ISO_4217. Note that the currency key is required to match the default currency associated with the Amazon DSP account.
	Currency AudienceFeesCurrency `json:"currency"`
}

// AudienceFeesCurrency Currency key as defined in https://en.wikipedia.org/wiki/ISO_4217. Note that the currency key is required to match the default currency associated with the Amazon DSP account.
type AudienceFeesCurrency string

// RenameAudienceId The
type RenameAudienceId = int64

// AudienceName The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
type AudienceName = string

// ErrorDescription A human-readable description of the error.
type ErrorDescription = string

// ExternalAudienceId The user-defined audience identifier.
type ExternalAudienceId = string

// HttpStatusCode The HTTP status code.
type HttpStatusCode = string

// MetadataType The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
type MetadataType string

// RecordTtl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
type RecordTtl = int

// RequestId The request identifier.
type RequestId = string

// SubError defines model for subError.
type SubError = []struct {
	// ErrorType The type of error.
	ErrorType *string `json:"errorType,omitempty"`

	// FieldName The field name.
	FieldName *string `json:"fieldName,omitempty"`

	// Message A human-readable description of the error.
	Message *string `json:"message,omitempty"`
}

// AudienceId defines model for audienceId.
type AudienceId = int64

// AuthorizationHeader defines model for authorizationHeader.
type AuthorizationHeader = string

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// ContentTypeHeader defines model for contentTypeHeader.
type ContentTypeHeader = string

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// N403NotAllowed defines model for 403NotAllowed.
type N403NotAllowed struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// N404NotFound defines model for 404NotFound.
type N404NotFound struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// N429TooManyRequests defines model for 429TooManyRequests.
type N429TooManyRequests struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// N500InternalError defines model for 500InternalError.
type N500InternalError struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// N503ServiceUnavailable defines model for 503ServiceUnavailable.
type N503ServiceUnavailable struct {
	Error *struct {
		// Description A human-readable description of the error.
		Description *ErrorDescription `json:"description,omitempty"`
		Errors      *SubError         `json:"errors,omitempty"`

		// HttpStatusCode The HTTP status code.
		HttpStatusCode *HttpStatusCode `json:"httpStatusCode,omitempty"`
	} `json:"error,omitempty"`

	// RequestId The request identifier.
	RequestId *RequestId `json:"requestId,omitempty"`
}

// PatchV2DpAudienceJSONBody defines parameters for PatchV2DpAudience.
type PatchV2DpAudienceJSONBody struct {
	Patches *[]struct {
		// Op Specifies the type of operation. Valid operations are `add` or `remove`.
		Op *PatchV2DpAudienceJSONBodyPatchesOp `json:"op,omitempty"`

		// Path A formatted string that specifies the URL of the record. The format of the string is `/<recordIdType>-<recordIdValue>/audiences`, where 'recordIdType' specifies the record's origin and 'recordIdValue' specifies the record's Id. Valid 'recordIdType' values are `COOKIE`, a cookie Id sent from a data provider to Amazon by a cookie sync; `MAID`, a mobile advertising identifier; `EXTERNAL_USER_ID`, an external id defined by data providers.
		Path  *string  `json:"path,omitempty"`
		Value *[]int64 `json:"value,omitempty"`
	} `json:"patches,omitempty"`
}

// PatchV2DpAudienceParams defines parameters for PatchV2DpAudience.
type PatchV2DpAudienceParams struct {
	// Authorization A valid access token.
	Authorization AuthorizationHeader `json:"Authorization"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// ContentType The `Content-Type` is application/json.
	ContentType ContentTypeHeader `json:"Content-Type"`
}

// PatchV2DpAudienceJSONBodyPatchesOp defines parameters for PatchV2DpAudience.
type PatchV2DpAudienceJSONBodyPatchesOp string

// PostV2DpAudiencemetadataJSONBody defines parameters for PostV2DpAudiencemetadata.
type PostV2DpAudiencemetadataJSONBody struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId AdvertiserId `json:"advertiserId"`

	// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
	Description AudienceDescription `json:"description"`
	Metadata    struct {
		AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

		// ExternalAudienceId The user-defined audience identifier.
		ExternalAudienceId ExternalAudienceId `json:"externalAudienceId"`

		// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
		Ttl *RecordTtl `json:"ttl,omitempty"`

		// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
		Type MetadataType `json:"type"`
	} `json:"metadata"`

	// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
	Name AudienceName `json:"name"`
}

// PostV2DpAudiencemetadataParams defines parameters for PostV2DpAudiencemetadata.
type PostV2DpAudiencemetadataParams struct {
	// Authorization A valid access token.
	Authorization AuthorizationHeader `json:"Authorization"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// ContentType The `Content-Type` is application/json.
	ContentType ContentTypeHeader `json:"Content-Type"`
}

// GetV2DpAudiencemetadataAudienceIdParams defines parameters for GetV2DpAudiencemetadataAudienceId.
type GetV2DpAudiencemetadataAudienceIdParams struct {
	// Authorization A valid access token.
	Authorization AuthorizationHeader `json:"Authorization"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// ContentType The `Content-Type` is application/json.
	ContentType ContentTypeHeader `json:"Content-Type"`
}

// PutV2DpAudiencemetadataAudienceIdJSONBody defines parameters for PutV2DpAudiencemetadataAudienceId.
type PutV2DpAudiencemetadataAudienceIdJSONBody struct {
	// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
	Description *AudienceDescription `json:"description,omitempty"`
	Metadata    *struct {
		AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

		// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
		Ttl *RecordTtl `json:"ttl,omitempty"`
	} `json:"metadata,omitempty"`
}

// PutV2DpAudiencemetadataAudienceIdParams defines parameters for PutV2DpAudiencemetadataAudienceId.
type PutV2DpAudiencemetadataAudienceIdParams struct {
	// Authorization A valid access token.
	Authorization AuthorizationHeader `json:"Authorization"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// ContentType The `Content-Type` is application/json.
	ContentType ContentTypeHeader `json:"Content-Type"`
}

// PatchV2DpUsersJSONBody defines parameters for PatchV2DpUsers.
type PatchV2DpUsersJSONBody struct {
	Users *[]struct {
		// AdvertiserId The advertiser identifier. If present, the user data for the specified advertiser is deleted. Otherwise, all data about this user sourced from this client is deleted.
		AdvertiserId *string `json:"advertiserId,omitempty"`

		// ConsentTime User consent time in epoch milliseconds
		ConsentTime *int64 `json:"consentTime,omitempty"`
		UserId      *struct {
			// Id The user identifer.
			Id *string `json:"id,omitempty"`

			// IdType Specifies the type of the user identifier.
			IdType *PatchV2DpUsersJSONBodyUsersUserIdIdType `json:"idType,omitempty"`
		} `json:"userId,omitempty"`
	} `json:"users,omitempty"`
}

// PatchV2DpUsersParams defines parameters for PatchV2DpUsers.
type PatchV2DpUsersParams struct {
	// Authorization A valid access token.
	Authorization string `json:"Authorization"`

	// AmazonAdvertisingAPIClientID The client identifier.
	AmazonAdvertisingAPIClientID string `json:"Amazon-Advertising-API-ClientID"`

	// ContentType The Content-Type is `application/json`.
	ContentType string `json:"Content-Type"`
}

// PatchV2DpUsersJSONBodyUsersUserIdIdType defines parameters for PatchV2DpUsers.
type PatchV2DpUsersJSONBodyUsersUserIdIdType string

// PatchV2DpAudienceJSONRequestBody defines body for PatchV2DpAudience for application/json ContentType.
type PatchV2DpAudienceJSONRequestBody PatchV2DpAudienceJSONBody

// PostV2DpAudiencemetadataJSONRequestBody defines body for PostV2DpAudiencemetadata for application/json ContentType.
type PostV2DpAudiencemetadataJSONRequestBody PostV2DpAudiencemetadataJSONBody

// PutV2DpAudiencemetadataAudienceIdJSONRequestBody defines body for PutV2DpAudiencemetadataAudienceId for application/json ContentType.
type PutV2DpAudiencemetadataAudienceIdJSONRequestBody PutV2DpAudiencemetadataAudienceIdJSONBody

// PatchV2DpUsersJSONRequestBody defines body for PatchV2DpUsers for application/json ContentType.
type PatchV2DpUsersJSONRequestBody PatchV2DpUsersJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PatchV2DpAudienceWithBody request with any body
	PatchV2DpAudienceWithBody(ctx context.Context, params *PatchV2DpAudienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DpAudience(ctx context.Context, params *PatchV2DpAudienceParams, body PatchV2DpAudienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DpAudiencemetadataWithBody request with any body
	PostV2DpAudiencemetadataWithBody(ctx context.Context, params *PostV2DpAudiencemetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DpAudiencemetadata(ctx context.Context, params *PostV2DpAudiencemetadataParams, body PostV2DpAudiencemetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DpAudiencemetadataAudienceId request
	GetV2DpAudiencemetadataAudienceId(ctx context.Context, audienceId AudienceId, params *GetV2DpAudiencemetadataAudienceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2DpAudiencemetadataAudienceIdWithBody request with any body
	PutV2DpAudiencemetadataAudienceIdWithBody(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2DpAudiencemetadataAudienceId(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, body PutV2DpAudiencemetadataAudienceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2DpUsersWithBody request with any body
	PatchV2DpUsersWithBody(ctx context.Context, params *PatchV2DpUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DpUsers(ctx context.Context, params *PatchV2DpUsersParams, body PatchV2DpUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PatchV2DpAudienceWithBody(ctx context.Context, params *PatchV2DpAudienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DpAudienceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DpAudience(ctx context.Context, params *PatchV2DpAudienceParams, body PatchV2DpAudienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DpAudienceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DpAudiencemetadataWithBody(ctx context.Context, params *PostV2DpAudiencemetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DpAudiencemetadataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DpAudiencemetadata(ctx context.Context, params *PostV2DpAudiencemetadataParams, body PostV2DpAudiencemetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DpAudiencemetadataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DpAudiencemetadataAudienceId(ctx context.Context, audienceId AudienceId, params *GetV2DpAudiencemetadataAudienceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DpAudiencemetadataAudienceIdRequest(c.Server, audienceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2DpAudiencemetadataAudienceIdWithBody(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2DpAudiencemetadataAudienceIdRequestWithBody(c.Server, audienceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2DpAudiencemetadataAudienceId(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, body PutV2DpAudiencemetadataAudienceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2DpAudiencemetadataAudienceIdRequest(c.Server, audienceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DpUsersWithBody(ctx context.Context, params *PatchV2DpUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DpUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DpUsers(ctx context.Context, params *PatchV2DpUsersParams, body PatchV2DpUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DpUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPatchV2DpAudienceRequest calls the generic PatchV2DpAudience builder with application/json body
func NewPatchV2DpAudienceRequest(server string, params *PatchV2DpAudienceParams, body PatchV2DpAudienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DpAudienceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchV2DpAudienceRequestWithBody generates requests for PatchV2DpAudience with any type of body
func NewPatchV2DpAudienceRequestWithBody(server string, params *PatchV2DpAudienceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dp/audience")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

// NewPostV2DpAudiencemetadataRequest calls the generic PostV2DpAudiencemetadata builder with application/json body
func NewPostV2DpAudiencemetadataRequest(server string, params *PostV2DpAudiencemetadataParams, body PostV2DpAudiencemetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DpAudiencemetadataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2DpAudiencemetadataRequestWithBody generates requests for PostV2DpAudiencemetadata with any type of body
func NewPostV2DpAudiencemetadataRequestWithBody(server string, params *PostV2DpAudiencemetadataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dp/audiencemetadata/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

// NewGetV2DpAudiencemetadataAudienceIdRequest generates requests for GetV2DpAudiencemetadataAudienceId
func NewGetV2DpAudiencemetadataAudienceIdRequest(server string, audienceId AudienceId, params *GetV2DpAudiencemetadataAudienceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "audienceId", runtime.ParamLocationPath, audienceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dp/audiencemetadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

// NewPutV2DpAudiencemetadataAudienceIdRequest calls the generic PutV2DpAudiencemetadataAudienceId builder with application/json body
func NewPutV2DpAudiencemetadataAudienceIdRequest(server string, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, body PutV2DpAudiencemetadataAudienceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2DpAudiencemetadataAudienceIdRequestWithBody(server, audienceId, params, "application/json", bodyReader)
}

// NewPutV2DpAudiencemetadataAudienceIdRequestWithBody generates requests for PutV2DpAudiencemetadataAudienceId with any type of body
func NewPutV2DpAudiencemetadataAudienceIdRequestWithBody(server string, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "audienceId", runtime.ParamLocationPath, audienceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dp/audiencemetadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

// NewPatchV2DpUsersRequest calls the generic PatchV2DpUsers builder with application/json body
func NewPatchV2DpUsersRequest(server string, params *PatchV2DpUsersParams, body PatchV2DpUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DpUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchV2DpUsersRequestWithBody generates requests for PatchV2DpUsers with any type of body
func NewPatchV2DpUsersRequestWithBody(server string, params *PatchV2DpUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dp/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientID", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientID", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PatchV2DpAudienceWithBodyWithResponse request with any body
	PatchV2DpAudienceWithBodyWithResponse(ctx context.Context, params *PatchV2DpAudienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DpAudienceResp, error)

	PatchV2DpAudienceWithResponse(ctx context.Context, params *PatchV2DpAudienceParams, body PatchV2DpAudienceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DpAudienceResp, error)

	// PostV2DpAudiencemetadataWithBodyWithResponse request with any body
	PostV2DpAudiencemetadataWithBodyWithResponse(ctx context.Context, params *PostV2DpAudiencemetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DpAudiencemetadataResp, error)

	PostV2DpAudiencemetadataWithResponse(ctx context.Context, params *PostV2DpAudiencemetadataParams, body PostV2DpAudiencemetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DpAudiencemetadataResp, error)

	// GetV2DpAudiencemetadataAudienceIdWithResponse request
	GetV2DpAudiencemetadataAudienceIdWithResponse(ctx context.Context, audienceId AudienceId, params *GetV2DpAudiencemetadataAudienceIdParams, reqEditors ...RequestEditorFn) (*GetV2DpAudiencemetadataAudienceIdResp, error)

	// PutV2DpAudiencemetadataAudienceIdWithBodyWithResponse request with any body
	PutV2DpAudiencemetadataAudienceIdWithBodyWithResponse(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2DpAudiencemetadataAudienceIdResp, error)

	PutV2DpAudiencemetadataAudienceIdWithResponse(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, body PutV2DpAudiencemetadataAudienceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2DpAudiencemetadataAudienceIdResp, error)

	// PatchV2DpUsersWithBodyWithResponse request with any body
	PatchV2DpUsersWithBodyWithResponse(ctx context.Context, params *PatchV2DpUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DpUsersResp, error)

	PatchV2DpUsersWithResponse(ctx context.Context, params *PatchV2DpUsersParams, body PatchV2DpUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DpUsersResp, error)
}

type PatchV2DpAudienceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// JobId A unique identifier representing the workflow of the submitted request.
		JobId *string `json:"jobId,omitempty"`

		// RequestId A unique identifier representing the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON400 *N400BadRequest
	JSON413 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON429 *N429TooManyRequests
	JSON500 *N500InternalError
	JSON503 *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchV2DpAudienceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DpAudienceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DpAudiencemetadataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Audience *struct {
			// AdvertiserId The advertiser identifier.
			AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

			// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
			Description *AudienceDescription `json:"description,omitempty"`

			// Id The
			RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
			Metadata         *struct {
				AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

				// ExternalAudienceId The user-defined audience identifier.
				ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

				// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
				Ttl *RecordTtl `json:"ttl,omitempty"`

				// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
				Type *MetadataType `json:"type,omitempty"`
			} `json:"metadata,omitempty"`

			// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
			Name *AudienceName `json:"name,omitempty"`
		} `json:"audience,omitempty"`

		// RequestId The request identifier.
		RequestId *RequestId `json:"requestId,omitempty"`
	}
	JSON400 *N400BadRequest
	JSON403 *N403NotAllowed
	JSON404 *N404NotFound
	JSON429 *N429TooManyRequests
	JSON500 *N500InternalError
	JSON503 *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostV2DpAudiencemetadataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DpAudiencemetadataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DpAudiencemetadataAudienceIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Audience *struct {
			// AdvertiserId The advertiser identifier.
			AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

			// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
			Description *AudienceDescription `json:"description,omitempty"`

			// Id The
			RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
			Metadata         *struct {
				AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

				// AudienceSize Information about the size of the audience.
				AudienceSize *struct {
					// MatchRate The match rate.
					MatchRate *float32 `json:"matchRate,omitempty"`

					// MatchedRecordSize The number of matched records.
					MatchedRecordSize *int `json:"matchedRecordSize,omitempty"`

					// ReceivedRecordSize The number of received records.
					ReceivedRecordSize *int `json:"receivedRecordSize,omitempty"`
				} `json:"audienceSize,omitempty"`

				// ExternalAudienceId The user-defined audience identifier.
				ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

				// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
				Ttl *RecordTtl `json:"ttl,omitempty"`

				// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
				Type *MetadataType `json:"type,omitempty"`
			} `json:"metadata,omitempty"`

			// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
			Name *AudienceName `json:"name,omitempty"`
		} `json:"audience,omitempty"`

		// RequestId The request identifier.
		RequestId *RequestId `json:"requestId,omitempty"`
	}
	JSON403 *N403NotAllowed
	JSON404 *N404NotFound
	JSON429 *N429TooManyRequests
	JSON500 *N500InternalError
	JSON503 *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetV2DpAudiencemetadataAudienceIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DpAudiencemetadataAudienceIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2DpAudiencemetadataAudienceIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Audience *struct {
			// AdvertiserId The advertiser identifier.
			AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

			// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
			Description *AudienceDescription `json:"description,omitempty"`

			// Id The
			RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
			Metadata         *struct {
				AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

				// ExternalAudienceId The user-defined audience identifier.
				ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

				// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
				Ttl *RecordTtl `json:"ttl,omitempty"`

				// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
				Type *MetadataType `json:"type,omitempty"`
			} `json:"metadata,omitempty"`

			// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
			Name *AudienceName `json:"name,omitempty"`
		} `json:"audience,omitempty"`

		// RequestId The request identifier.
		RequestId *RequestId `json:"requestId,omitempty"`
	}
	JSON400 *N400BadRequest
	JSON403 *N403NotAllowed
	JSON404 *N404NotFound
	JSON429 *N429TooManyRequests
	JSON500 *N500InternalError
	JSON503 *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutV2DpAudiencemetadataAudienceIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2DpAudiencemetadataAudienceIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2DpUsersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		// RequestId A unique identifier representing the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON400 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON413 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON429 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON500 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
	JSON503 *struct {
		// Error Detailed error messages associated with the request.
		Error *struct {
			// Description Description of the error.
			Description *string `json:"description,omitempty"`

			// Errors An array of property objects that include more information about the request.
			Errors *[]struct {
				// ErrorType Type of error.
				ErrorType *string `json:"errorType,omitempty"`

				// Message Error message
				Message *string `json:"message,omitempty"`
			} `json:"errors,omitempty"`

			// HttpStatusCode HTTP status code associated with the response.
			HttpStatusCode *string `json:"httpStatusCode,omitempty"`
		} `json:"error,omitempty"`

		// RequestId Identifier associated with the request.
		RequestId *string `json:"requestId,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV2DpUsersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DpUsersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PatchV2DpAudienceWithBodyWithResponse request with arbitrary body returning *PatchV2DpAudienceResp
func (c *ClientWithResponses) PatchV2DpAudienceWithBodyWithResponse(ctx context.Context, params *PatchV2DpAudienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DpAudienceResp, error) {
	rsp, err := c.PatchV2DpAudienceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DpAudienceResp(rsp)
}

func (c *ClientWithResponses) PatchV2DpAudienceWithResponse(ctx context.Context, params *PatchV2DpAudienceParams, body PatchV2DpAudienceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DpAudienceResp, error) {
	rsp, err := c.PatchV2DpAudience(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DpAudienceResp(rsp)
}

// PostV2DpAudiencemetadataWithBodyWithResponse request with arbitrary body returning *PostV2DpAudiencemetadataResp
func (c *ClientWithResponses) PostV2DpAudiencemetadataWithBodyWithResponse(ctx context.Context, params *PostV2DpAudiencemetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DpAudiencemetadataResp, error) {
	rsp, err := c.PostV2DpAudiencemetadataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DpAudiencemetadataResp(rsp)
}

func (c *ClientWithResponses) PostV2DpAudiencemetadataWithResponse(ctx context.Context, params *PostV2DpAudiencemetadataParams, body PostV2DpAudiencemetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DpAudiencemetadataResp, error) {
	rsp, err := c.PostV2DpAudiencemetadata(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DpAudiencemetadataResp(rsp)
}

// GetV2DpAudiencemetadataAudienceIdWithResponse request returning *GetV2DpAudiencemetadataAudienceIdResp
func (c *ClientWithResponses) GetV2DpAudiencemetadataAudienceIdWithResponse(ctx context.Context, audienceId AudienceId, params *GetV2DpAudiencemetadataAudienceIdParams, reqEditors ...RequestEditorFn) (*GetV2DpAudiencemetadataAudienceIdResp, error) {
	rsp, err := c.GetV2DpAudiencemetadataAudienceId(ctx, audienceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DpAudiencemetadataAudienceIdResp(rsp)
}

// PutV2DpAudiencemetadataAudienceIdWithBodyWithResponse request with arbitrary body returning *PutV2DpAudiencemetadataAudienceIdResp
func (c *ClientWithResponses) PutV2DpAudiencemetadataAudienceIdWithBodyWithResponse(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2DpAudiencemetadataAudienceIdResp, error) {
	rsp, err := c.PutV2DpAudiencemetadataAudienceIdWithBody(ctx, audienceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2DpAudiencemetadataAudienceIdResp(rsp)
}

func (c *ClientWithResponses) PutV2DpAudiencemetadataAudienceIdWithResponse(ctx context.Context, audienceId AudienceId, params *PutV2DpAudiencemetadataAudienceIdParams, body PutV2DpAudiencemetadataAudienceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2DpAudiencemetadataAudienceIdResp, error) {
	rsp, err := c.PutV2DpAudiencemetadataAudienceId(ctx, audienceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2DpAudiencemetadataAudienceIdResp(rsp)
}

// PatchV2DpUsersWithBodyWithResponse request with arbitrary body returning *PatchV2DpUsersResp
func (c *ClientWithResponses) PatchV2DpUsersWithBodyWithResponse(ctx context.Context, params *PatchV2DpUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DpUsersResp, error) {
	rsp, err := c.PatchV2DpUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DpUsersResp(rsp)
}

func (c *ClientWithResponses) PatchV2DpUsersWithResponse(ctx context.Context, params *PatchV2DpUsersParams, body PatchV2DpUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DpUsersResp, error) {
	rsp, err := c.PatchV2DpUsers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DpUsersResp(rsp)
}

// ParsePatchV2DpAudienceResp parses an HTTP response from a PatchV2DpAudienceWithResponse call
func ParsePatchV2DpAudienceResp(rsp *http.Response) (*PatchV2DpAudienceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DpAudienceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// JobId A unique identifier representing the workflow of the submitted request.
			JobId *string `json:"jobId,omitempty"`

			// RequestId A unique identifier representing the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV2DpAudiencemetadataResp parses an HTTP response from a PostV2DpAudiencemetadataWithResponse call
func ParsePostV2DpAudiencemetadataResp(rsp *http.Response) (*PostV2DpAudiencemetadataResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DpAudiencemetadataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Audience *struct {
				// AdvertiserId The advertiser identifier.
				AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

				// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
				Description *AudienceDescription `json:"description,omitempty"`

				// Id The
				RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
				Metadata         *struct {
					AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

					// ExternalAudienceId The user-defined audience identifier.
					ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

					// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
					Ttl *RecordTtl `json:"ttl,omitempty"`

					// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
					Type *MetadataType `json:"type,omitempty"`
				} `json:"metadata,omitempty"`

				// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
				Name *AudienceName `json:"name,omitempty"`
			} `json:"audience,omitempty"`

			// RequestId The request identifier.
			RequestId *RequestId `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403NotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2DpAudiencemetadataAudienceIdResp parses an HTTP response from a GetV2DpAudiencemetadataAudienceIdWithResponse call
func ParseGetV2DpAudiencemetadataAudienceIdResp(rsp *http.Response) (*GetV2DpAudiencemetadataAudienceIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DpAudiencemetadataAudienceIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Audience *struct {
				// AdvertiserId The advertiser identifier.
				AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

				// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
				Description *AudienceDescription `json:"description,omitempty"`

				// Id The
				RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
				Metadata         *struct {
					AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

					// AudienceSize Information about the size of the audience.
					AudienceSize *struct {
						// MatchRate The match rate.
						MatchRate *float32 `json:"matchRate,omitempty"`

						// MatchedRecordSize The number of matched records.
						MatchedRecordSize *int `json:"matchedRecordSize,omitempty"`

						// ReceivedRecordSize The number of received records.
						ReceivedRecordSize *int `json:"receivedRecordSize,omitempty"`
					} `json:"audienceSize,omitempty"`

					// ExternalAudienceId The user-defined audience identifier.
					ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

					// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
					Ttl *RecordTtl `json:"ttl,omitempty"`

					// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
					Type *MetadataType `json:"type,omitempty"`
				} `json:"metadata,omitempty"`

				// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
				Name *AudienceName `json:"name,omitempty"`
			} `json:"audience,omitempty"`

			// RequestId The request identifier.
			RequestId *RequestId `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403NotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutV2DpAudiencemetadataAudienceIdResp parses an HTTP response from a PutV2DpAudiencemetadataAudienceIdWithResponse call
func ParsePutV2DpAudiencemetadataAudienceIdResp(rsp *http.Response) (*PutV2DpAudiencemetadataAudienceIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2DpAudiencemetadataAudienceIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Audience *struct {
				// AdvertiserId The advertiser identifier.
				AdvertiserId *AdvertiserId `json:"advertiserId,omitempty"`

				// Description The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
				Description *AudienceDescription `json:"description,omitempty"`

				// Id The
				RenameAudienceId *RenameAudienceId `json:"id,omitempty"`
				Metadata         *struct {
					AudienceFees *AudienceFees `json:"audienceFees,omitempty"`

					// ExternalAudienceId The user-defined audience identifier.
					ExternalAudienceId *ExternalAudienceId `json:"externalAudienceId,omitempty"`

					// Ttl Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
					Ttl *RecordTtl `json:"ttl,omitempty"`

					// Type The audience metadata type. Only 'DATA_PROVIDER' is currently supported.
					Type *MetadataType `json:"type,omitempty"`
				} `json:"metadata,omitempty"`

				// Name The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
				Name *AudienceName `json:"name,omitempty"`
			} `json:"audience,omitempty"`

			// RequestId The request identifier.
			RequestId *RequestId `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403NotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchV2DpUsersResp parses an HTTP response from a PatchV2DpUsersWithResponse call
func ParsePatchV2DpUsersResp(rsp *http.Response) (*PatchV2DpUsersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DpUsersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			// RequestId A unique identifier representing the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Error Detailed error messages associated with the request.
			Error *struct {
				// Description Description of the error.
				Description *string `json:"description,omitempty"`

				// Errors An array of property objects that include more information about the request.
				Errors *[]struct {
					// ErrorType Type of error.
					ErrorType *string `json:"errorType,omitempty"`

					// Message Error message
					Message *string `json:"message,omitempty"`
				} `json:"errors,omitempty"`

				// HttpStatusCode HTTP status code associated with the response.
				HttpStatusCode *string `json:"httpStatusCode,omitempty"`
			} `json:"error,omitempty"`

			// RequestId Identifier associated with the request.
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
