// Package locations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package locations

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for LocationCategoryV1.
const (
	CITY       LocationCategoryV1 = "CITY"
	COUNTRY    LocationCategoryV1 = "COUNTRY"
	DMA        LocationCategoryV1 = "DMA"
	POSTALCODE LocationCategoryV1 = "POSTAL_CODE"
	STATE      LocationCategoryV1 = "STATE"
)

// Defines values for LocationFilterV1Field.
const (
	Category   LocationFilterV1Field = "category"
	LocationId LocationFilterV1Field = "locationId"
	Name       LocationFilterV1Field = "name"
)

// Error The error response object.
type Error struct {
	Errors *[]SubError `json:"errors,omitempty"`

	// Message A human-readable description of the response.
	Message *string `json:"message,omitempty"`

	// RequestId Request Id that uniquely identifies your request.
	RequestId *string `json:"requestId,omitempty"`
}

// ListLocationsRequestBodyV1 Resulting locations will match all specified filters
type ListLocationsRequestBodyV1 struct {
	Filters *[]LocationFilterV1 `json:"filters,omitempty"`
}

// LocationCategoryV1 The location category.
type LocationCategoryV1 string

// LocationFilterV1 defines model for LocationFilterV1.
type LocationFilterV1 struct {
	// Field Field to filter by. Supported enums are 'locationId', 'name', and 'category'. The 'name' filter is a fuzzy search. If 'category' is specified, the values must match either 'CITY', 'STATE', 'DMA', 'COUNTRY', or 'POSTAL_CODE'.
	Field  *LocationFilterV1Field `json:"field,omitempty"`
	Values *[]string              `json:"values,omitempty"`
}

// LocationFilterV1Field Field to filter by. Supported enums are 'locationId', 'name', and 'category'. The 'name' filter is a fuzzy search. If 'category' is specified, the values must match either 'CITY', 'STATE', 'DMA', 'COUNTRY', or 'POSTAL_CODE'.
type LocationFilterV1Field string

// LocationIdV1 The identifier of the location.
type LocationIdV1 = string

// LocationV1 defines model for LocationV1.
type LocationV1 struct {
	// Category The location category.
	Category *LocationCategoryV1 `json:"category,omitempty"`

	// LocationId The identifier of the location.
	LocationId *LocationIdV1 `json:"locationId,omitempty"`

	// Name The location name.
	Name *string `json:"name,omitempty"`
}

// SubError The sub error object.
type SubError struct {
	ErrorType string  `json:"errorType"`
	FieldName *string `json:"fieldName,omitempty"`
	Message   string  `json:"message"`
}

// HexgateBadRequestV1 The error response object.
type HexgateBadRequestV1 = Error

// HexgateForbiddenV1 The error response object.
type HexgateForbiddenV1 = Error

// HexgateInternalServerErrorV1 The error response object.
type HexgateInternalServerErrorV1 = Error

// HexgateNotFoundV1 The error response object.
type HexgateNotFoundV1 = Error

// HexgateTooManyRequestsV1 The error response object.
type HexgateTooManyRequestsV1 = Error

// HexgateUnauthorizedV1 The error response object.
type HexgateUnauthorizedV1 = Error

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the number of locations in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,2000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch the next 20 items.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListLocationsJSONRequestBody defines body for ListLocations for application/json ContentType.
type ListLocationsJSONRequestBody = ListLocationsRequestBodyV1

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListLocationsWithBody request with any body
	ListLocationsWithBody(ctx context.Context, params *ListLocationsParams, contentType string, body io.Reader) (*http.Response, error)

	ListLocations(ctx context.Context, params *ListLocationsParams, body ListLocationsJSONRequestBody) (*http.Response, error)
}

func (c *Client) ListLocationsWithBody(ctx context.Context, params *ListLocationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListLocationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListLocations(ctx context.Context, params *ListLocationsParams, body ListLocationsJSONRequestBody) (*http.Response, error) {
	req, err := NewListLocationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewListLocationsRequest calls the generic ListLocations builder with application/json body
func NewListLocationsRequest(server string, params *ListLocationsParams, body ListLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListLocationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListLocationsRequestWithBody generates requests for ListLocations with any type of body
func NewListLocationsRequestWithBody(server string, params *ListLocationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListLocationsWithBodyWithResponse request with any body
	ListLocationsWithBodyWithResponse(ctx context.Context, params *ListLocationsParams, contentType string, body io.Reader) (*ListLocationsResp, error)

	ListLocationsWithResponse(ctx context.Context, params *ListLocationsParams, body ListLocationsJSONRequestBody) (*ListLocationsResp, error)
}

type ListLocationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Locations *[]LocationV1 `json:"locations,omitempty"`

		// NextToken Token used in following requests for pagination.
		NextToken *string `json:"nextToken,omitempty"`
	}
	JSON400 *HexgateBadRequestV1
	JSON401 *HexgateUnauthorizedV1
	JSON403 *HexgateForbiddenV1
	JSON404 *HexgateNotFoundV1
	JSON429 *HexgateTooManyRequestsV1
	JSON500 *HexgateInternalServerErrorV1
}

// Status returns HTTPResponse.Status
func (r ListLocationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListLocationsWithBodyWithResponse request with arbitrary body returning *ListLocationsResp
func (c *ClientWithResponses) ListLocationsWithBodyWithResponse(ctx context.Context, params *ListLocationsParams, contentType string, body io.Reader) (*ListLocationsResp, error) {
	rsp, err := c.ListLocationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResp(rsp)
}

func (c *ClientWithResponses) ListLocationsWithResponse(ctx context.Context, params *ListLocationsParams, body ListLocationsJSONRequestBody) (*ListLocationsResp, error) {
	rsp, err := c.ListLocations(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResp(rsp)
}

// ParseListLocationsResp parses an HTTP response from a ListLocationsWithResponse call
func ParseListLocationsResp(rsp *http.Response) (*ListLocationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Locations *[]LocationV1 `json:"locations,omitempty"`

			// NextToken Token used in following requests for pagination.
			NextToken *string `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HexgateBadRequestV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HexgateUnauthorizedV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HexgateForbiddenV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HexgateNotFoundV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HexgateTooManyRequestsV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HexgateInternalServerErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
