// Package accountbilling provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package accountbilling

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AdProgram.
const (
	AMAZONLIVE                AdProgram = "AMAZON LIVE"
	CREATORCONNECTIONS        AdProgram = "CREATOR CONNECTIONS"
	SPONSOREDBRANDS           AdProgram = "SPONSORED BRANDS"
	SPONSOREDDISPLAY          AdProgram = "SPONSORED DISPLAY"
	SPONSOREDDISPLAYFORFIRETV AdProgram = "SPONSORED DISPLAY FOR FIRE TV"
	SPONSOREDPRODUCT          AdProgram = "SPONSORED PRODUCT"
)

// Defines values for AdvertiserTypes.
const (
	AGENCY                AdvertiserTypes = "AGENCY"
	DSPADVERTISINGACCOUNT AdvertiserTypes = "DSP_ADVERTISING_ACCOUNT"
	SELLER                AdvertiserTypes = "SELLER"
	VENDOR                AdvertiserTypes = "VENDOR"
)

// Defines values for BillingNotificationNames.
const (
	BillingNotificationNamesACCOUNTERROR                                                           BillingNotificationNames = "ACCOUNT_ERROR"
	BillingNotificationNamesBADDEBTSUSPENSION                                                      BillingNotificationNames = "BAD_DEBT_SUSPENSION"
	BillingNotificationNamesBILLINGADDRESSREGISTRATIONNOTFOUND                                     BillingNotificationNames = "BILLING_ADDRESS_REGISTRATION_NOT_FOUND"
	BillingNotificationNamesCNPJVERIFICATIONINPROGRESS                                             BillingNotificationNames = "CNPJ_VERIFICATION_IN_PROGRESS"
	BillingNotificationNamesCREDITCARDCHARGEDISPUTECAUSEDSUSPENSION                                BillingNotificationNames = "CREDIT_CARD_CHARGE_DISPUTE_CAUSED_SUSPENSION"
	BillingNotificationNamesCREDITCARDEXPIRED                                                      BillingNotificationNames = "CREDIT_CARD_EXPIRED"
	BillingNotificationNamesCREDITCARDEXPIRESSOON                                                  BillingNotificationNames = "CREDIT_CARD_EXPIRES_SOON"
	BillingNotificationNamesCREDITCARDPAYMENTFAILURECAUSEDSUSPENSION                               BillingNotificationNames = "CREDIT_CARD_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesCREDITCARDVERIFICATIONFAILURE                                          BillingNotificationNames = "CREDIT_CARD_VERIFICATION_FAILURE"
	BillingNotificationNamesCREDITCARDVERIFICATIONFAILURECAUSEDSUSPENSION                          BillingNotificationNames = "CREDIT_CARD_VERIFICATION_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesCREDITCARDVERIFICATIONPENDING                                          BillingNotificationNames = "CREDIT_CARD_VERIFICATION_PENDING"
	BillingNotificationNamesCREDITCARDWITHVERIFICATIONPAYMENTFAILURE                               BillingNotificationNames = "CREDIT_CARD_WITH_VERIFICATION_PAYMENT_FAILURE"
	BillingNotificationNamesCREDITCARDWITHVERIFICATIONPAYMENTFAILURECAUSEDSUSPENSION               BillingNotificationNames = "CREDIT_CARD_WITH_VERIFICATION_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesCREDITCARDWITHVERIFICATIONPENDINGCAUSEDSUSPENSION                      BillingNotificationNames = "CREDIT_CARD_WITH_VERIFICATION_PENDING_CAUSED_SUSPENSION"
	BillingNotificationNamesCREDITCARDWITHVERIFICATIONSUSPENSIONWITHPAYMENTINPROGRESS              BillingNotificationNames = "CREDIT_CARD_WITH_VERIFICATION_SUSPENSION_WITH_PAYMENT_IN_PROGRESS"
	BillingNotificationNamesDEDUCTFROMPROCEEDSPAYMENTFAILURECAUSEDSUSPENSION                       BillingNotificationNames = "DEDUCT_FROM_PROCEEDS_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesDEDUCTFROMPROCEEDSWITHCREDITCARDFALLBACKPAYMENTFAILURECAUSEDSUSPENSION BillingNotificationNames = "DEDUCT_FROM_PROCEEDS_WITH_CREDIT_CARD_FALLBACK_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesDEDUCTFROMPROCEEDSWITHCREDITLIMITELIGIBLE                              BillingNotificationNames = "DEDUCT_FROM_PROCEEDS_WITH_CREDIT_LIMIT_ELIGIBLE"
	BillingNotificationNamesDEDUCTFROMPROCEEDSWITHMONTHLYINVOICEELIGIBLE                           BillingNotificationNames = "DEDUCT_FROM_PROCEEDS_WITH_MONTHLY_INVOICE_ELIGIBLE"
	BillingNotificationNamesDIRECTDEBITPAYMENTPENDING                                              BillingNotificationNames = "DIRECT_DEBIT_PAYMENT_PENDING"
	BillingNotificationNamesINACTIVESELLERACCOUNTCAUSEDSUSPENSION                                  BillingNotificationNames = "INACTIVE_SELLER_ACCOUNT_CAUSED_SUSPENSION"
	BillingNotificationNamesINVALIDPAYMENTREGISTRATION                                             BillingNotificationNames = "INVALID_PAYMENT_REGISTRATION"
	BillingNotificationNamesPAYBYINVOICEOVERDUEPAYMENT                                             BillingNotificationNames = "PAY_BY_INVOICE_OVERDUE_PAYMENT"
	BillingNotificationNamesPAYBYINVOICEOVERDUEPAYMENTCAUSEDSUSPENSION                             BillingNotificationNames = "PAY_BY_INVOICE_OVERDUE_PAYMENT_CAUSED_SUSPENSION"
	BillingNotificationNamesPAYBYINVOICEOVERDUEPAYMENTPENDINGSUSPENSION                            BillingNotificationNames = "PAY_BY_INVOICE_OVERDUE_PAYMENT_PENDING_SUSPENSION"
	BillingNotificationNamesPAYBYINVOICEUPCOMINGPAYMENT                                            BillingNotificationNames = "PAY_BY_INVOICE_UPCOMING_PAYMENT"
	BillingNotificationNamesPENDINGPAYMENTREGISTRATION                                             BillingNotificationNames = "PENDING_PAYMENT_REGISTRATION"
	BillingNotificationNamesPENDINGVALIDCNPJREGISTRATION                                           BillingNotificationNames = "PENDING_VALID_CNPJ_REGISTRATION"
	BillingNotificationNamesPOLICYVIOLATIONS                                                       BillingNotificationNames = "POLICY_VIOLATIONS"
	BillingNotificationNamesSELLERACCOUNTINSUFFICIENTAVAILABLEBALANCECAUSEDSUSPENSION              BillingNotificationNames = "SELLER_ACCOUNT_INSUFFICIENT_AVAILABLE_BALANCE_CAUSED_SUSPENSION"
	BillingNotificationNamesSELLERACCOUNTINSUFFICIENTGROSSBALANCECAUSEDSUSPENSION                  BillingNotificationNames = "SELLER_ACCOUNT_INSUFFICIENT_GROSS_BALANCE_CAUSED_SUSPENSION"
	BillingNotificationNamesSELLERACCOUNTPAYMENTFAILURECAUSEDSUSPENSION                            BillingNotificationNames = "SELLER_ACCOUNT_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesSELLERACCOUNTWITHCREDITCARDFALLBACKPAYMENTFAILURECAUSEDSUSPENSION      BillingNotificationNames = "SELLER_ACCOUNT_WITH_CREDIT_CARD_FALLBACK_PAYMENT_FAILURE_CAUSED_SUSPENSION"
	BillingNotificationNamesSTOREDVALUEAUTORELOADPAYMENTFAILURE                                    BillingNotificationNames = "STORED_VALUE_AUTO_RELOAD_PAYMENT_FAILURE"
)

// Defines values for BillingNotificationSeverity.
const (
	ALERT   BillingNotificationSeverity = "ALERT"
	INFO    BillingNotificationSeverity = "INFO"
	WARNING BillingNotificationSeverity = "WARNING"
)

// Defines values for BillingStatusCode.
const (
	BillingStatusCodeACCOUNTBILLINGISSUE             BillingStatusCode = "ACCOUNT_BILLING_ISSUE"
	BillingStatusCodeINVALIDPAYMENTREGISTRATION      BillingStatusCode = "INVALID_PAYMENT_REGISTRATION"
	BillingStatusCodePAYMENTMETHODEXPIRED            BillingStatusCode = "PAYMENT_METHOD_EXPIRED"
	BillingStatusCodePAYMENTMETHODVERIFICATIONFAILED BillingStatusCode = "PAYMENT_METHOD_VERIFICATION_FAILED"
	BillingStatusCodePENDINGBILLINGREGISTRATION      BillingStatusCode = "PENDING_BILLING_REGISTRATION"
	BillingStatusCodePENDINGPAYMENTREGISTRATION      BillingStatusCode = "PENDING_PAYMENT_REGISTRATION"
	BillingStatusCodePENDINGTAXREGISTRATION          BillingStatusCode = "PENDING_TAX_REGISTRATION"
	BillingStatusCodeRESERVEORDERBALANCETOOLOW       BillingStatusCode = "RESERVE_ORDER_BALANCE_TOO_LOW"
	BillingStatusCodeSTOREDVALUEBALANCETOOLOW        BillingStatusCode = "STORED_VALUE_BALANCE_TOO_LOW"
	BillingStatusCodeVALIDBILLINGSTATUS              BillingStatusCode = "VALID_BILLING_STATUS"
)

// Defines values for BulkGetBillingNotificationsErrorCodes.
const (
	BulkGetBillingNotificationsErrorCodesBADREQUEST    BulkGetBillingNotificationsErrorCodes = "BAD_REQUEST"
	BulkGetBillingNotificationsErrorCodesINTERNALERROR BulkGetBillingNotificationsErrorCodes = "INTERNAL_ERROR"
	BulkGetBillingNotificationsErrorCodesNOTAUTHORIZED BulkGetBillingNotificationsErrorCodes = "NOT_AUTHORIZED"
	BulkGetBillingNotificationsErrorCodesNOTFOUND      BulkGetBillingNotificationsErrorCodes = "NOT_FOUND"
)

// Defines values for BulkGetBillingStatusErrorCodes.
const (
	BulkGetBillingStatusErrorCodesBADREQUEST    BulkGetBillingStatusErrorCodes = "BAD_REQUEST"
	BulkGetBillingStatusErrorCodesINTERNALERROR BulkGetBillingStatusErrorCodes = "INTERNAL_ERROR"
	BulkGetBillingStatusErrorCodesNOTAUTHORIZED BulkGetBillingStatusErrorCodes = "NOT_AUTHORIZED"
	BulkGetBillingStatusErrorCodesNOTFOUND      BulkGetBillingStatusErrorCodes = "NOT_FOUND"
)

// Defines values for CurrencyCode.
const (
	AED CurrencyCode = "AED"
	AUD CurrencyCode = "AUD"
	BRL CurrencyCode = "BRL"
	CAD CurrencyCode = "CAD"
	EGP CurrencyCode = "EGP"
	EUR CurrencyCode = "EUR"
	GBP CurrencyCode = "GBP"
	INR CurrencyCode = "INR"
	JPY CurrencyCode = "JPY"
	MXN CurrencyCode = "MXN"
	PLN CurrencyCode = "PLN"
	SAR CurrencyCode = "SAR"
	SEK CurrencyCode = "SEK"
	SGD CurrencyCode = "SGD"
	TRY CurrencyCode = "TRY"
	USD CurrencyCode = "USD"
)

// Defines values for DocumentType.
const (
	CREDITNOTE DocumentType = "CREDIT_NOTE"
	INVOICE    DocumentType = "INVOICE"
)

// Defines values for FeeFeeType.
const (
	AUDIENCEFEE              FeeFeeType = "AUDIENCE_FEE"
	N3PAUTONONABSORBEDFEE    FeeFeeType = "3P_AUTO_NON_ABSORBED_FEE"
	N3PNONABSORBEDFEE        FeeFeeType = "3P_NON_ABSORBED_FEE"
	N3PPREBIDFEE             FeeFeeType = "3P_PREBID_FEE"
	OMNICHANNELMETRICSFEE    FeeFeeType = "OMNICHANNEL_METRICS_FEE"
	PLATFORMFEE              FeeFeeType = "PLATFORM_FEE"
	REGULATORYADVERTISINGFEE FeeFeeType = "REGULATORY_ADVERTISING_FEE"
)

// Defines values for GovernmentInvoiceInformationTransactionType.
const (
	CREDIT GovernmentInvoiceInformationTransactionType = "CREDIT"
	DEBIT  GovernmentInvoiceInformationTransactionType = "DEBIT"
)

// Defines values for InvoiceLineCostEventType.
const (
	CLICKS      InvoiceLineCostEventType = "CLICKS"
	IMPRESSIONS InvoiceLineCostEventType = "IMPRESSIONS"
)

// Defines values for InvoiceLinePriceType.
const (
	CPC InvoiceLinePriceType = "CPC"
	CPM InvoiceLinePriceType = "CPM"
)

// Defines values for InvoiceStatus.
const (
	InvoiceStatusACCUMULATING InvoiceStatus = "ACCUMULATING"
	InvoiceStatusISSUED       InvoiceStatus = "ISSUED"
	InvoiceStatusPAIDINFULL   InvoiceStatus = "PAID_IN_FULL"
	InvoiceStatusPAIDINPART   InvoiceStatus = "PAID_IN_PART"
	InvoiceStatusPROCESSING   InvoiceStatus = "PROCESSING"
	InvoiceStatusWRITTENOFF   InvoiceStatus = "WRITTEN_OFF"
)

// Defines values for InvoiceSummaryPaymentTermsType.
const (
	EOM InvoiceSummaryPaymentTermsType = "EOM"
	NET InvoiceSummaryPaymentTermsType = "NET"
)

// Defines values for Locale.
const (
	ArAE Locale = "ar_AE"
	BnIN Locale = "bn_IN"
	CsCZ Locale = "cs_CZ"
	DeDE Locale = "de_DE"
	EnAE Locale = "en_AE"
	EnAU Locale = "en_AU"
	EnCA Locale = "en_CA"
	EnGB Locale = "en_GB"
	EnIN Locale = "en_IN"
	EnNG Locale = "en_NG"
	EnSG Locale = "en_SG"
	EnUS Locale = "en_US"
	EnZA Locale = "en_ZA"
	EsCL Locale = "es_CL"
	EsCO Locale = "es_CO"
	EsES Locale = "es_ES"
	EsMX Locale = "es_MX"
	EsUS Locale = "es_US"
	FrBE Locale = "fr_BE"
	FrCA Locale = "fr_CA"
	FrFR Locale = "fr_FR"
	HeIL Locale = "he_IL"
	HiIN Locale = "hi_IN"
	ItIT Locale = "it_IT"
	JaJP Locale = "ja_JP"
	KoKR Locale = "ko_KR"
	MlIN Locale = "ml_IN"
	MrIN Locale = "mr_IN"
	NlBE Locale = "nl_BE"
	NlNL Locale = "nl_NL"
	PlPL Locale = "pl_PL"
	PtBR Locale = "pt_BR"
	PtPT Locale = "pt_PT"
	SvSE Locale = "sv_SE"
	TaIN Locale = "ta_IN"
	TeIN Locale = "te_IN"
	TrTR Locale = "tr_TR"
	ZhCN Locale = "zh_CN"
	ZhTW Locale = "zh_TW"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusFAILED               PaymentStatus = "FAILED"
	PaymentStatusPROCESSING           PaymentStatus = "PROCESSING"
	PaymentStatusREFUNDED             PaymentStatus = "REFUNDED"
	PaymentStatusSUCCEEDED            PaymentStatus = "SUCCEEDED"
	PaymentStatusVERIFICATIONREQUIRED PaymentStatus = "VERIFICATION_REQUIRED"
	PaymentStatusVOIDED               PaymentStatus = "VOIDED"
)

// Defines values for PaymentMethod.
const (
	CREDITCARD              PaymentMethod = "CREDIT_CARD"
	DEDUCTFROMPAYMENT       PaymentMethod = "DEDUCT_FROM_PAYMENT"
	DIRECTDEBIT             PaymentMethod = "DIRECT_DEBIT"
	ELECTRONICFUNDSTRANSFER PaymentMethod = "ELECTRONIC_FUNDS_TRANSFER"
	PREPAY                  PaymentMethod = "PREPAY"
	UNIFIEDBILLING          PaymentMethod = "UNIFIED_BILLING"
)

// Defines values for GetAdvertiserInvoicesParamsInvoiceStatuses.
const (
	ISSUED     GetAdvertiserInvoicesParamsInvoiceStatuses = "ISSUED"
	PAIDINFULL GetAdvertiserInvoicesParamsInvoiceStatuses = "PAID_IN_FULL"
	PAIDINPART GetAdvertiserInvoicesParamsInvoiceStatuses = "PAID_IN_PART"
	WRITTENOFF GetAdvertiserInvoicesParamsInvoiceStatuses = "WRITTEN_OFF"
)

// AdProgram Sponsored Ads only. This field indicates the ad type (such as Sponsored Products, Sponsored Brands or Sponsored Display).
type AdProgram string

// Address defines model for address.
type Address struct {
	AddressLine1  string  `json:"addressLine1"`
	AddressLine2  string  `json:"addressLine2"`
	AddressLine3  string  `json:"addressLine3"`
	AttentionName *string `json:"attentionName,omitempty"`
	City          string  `json:"city"`
	CompanyName   string  `json:"companyName"`

	// CountryCode ISO 3611 country code
	CountryCode   CountryCode `json:"countryCode"`
	PostalCode    string      `json:"postalCode"`
	StateOrRegion string      `json:"stateOrRegion"`
}

// Adjustment defines model for adjustment.
type Adjustment struct {
	// AccountingDate Date in YYYYMMDD format
	AccountingDate Date           `json:"accountingDate"`
	Amount         CurrencyAmount `json:"amount"`
	Comments       *string        `json:"comments,omitempty"`

	// Fees Charges can include different fees (see feeType below).
	Fees *[]Fee `json:"fees,omitempty"`

	// PortfolioId Sponsored Ads only. This identifier maps to one of the portfolios listed in the portfolios section.
	PortfolioId *int64 `json:"portfolioId,omitempty"`
}

// Adjustments List of adjustments (positive and negative) applied to this invoice.
type Adjustments = []Adjustment

// AdvertiserMarketplace defines model for advertiserMarketplace.
type AdvertiserMarketplace struct {
	AdvertiserId   string           `json:"advertiserId"`
	AdvertiserType *AdvertiserTypes `json:"advertiserType,omitempty"`
	MarketplaceId  string           `json:"marketplaceId"`
}

// AdvertiserTypes defines model for advertiserTypes.
type AdvertiserTypes string

// BillingNotification defines model for billingNotification.
type BillingNotification struct {
	Description    string                      `json:"description"`
	Name           BillingNotificationNames    `json:"name"`
	PaymentDueDate *time.Time                  `json:"paymentDueDate,omitempty"`
	Priority       int32                       `json:"priority"`
	Severity       BillingNotificationSeverity `json:"severity"`
	SuspensionDate *time.Time                  `json:"suspensionDate,omitempty"`
	Title          string                      `json:"title"`
}

// BillingNotificationNames defines model for billingNotificationNames.
type BillingNotificationNames string

// BillingNotificationSeverity defines model for billingNotificationSeverity.
type BillingNotificationSeverity string

// BillingStatus defines model for billingStatus.
type BillingStatus struct {
	BillingStatusCode BillingStatusCode `json:"billingStatusCode"`
	Message           string            `json:"message"`
}

// BillingStatusCode defines model for billingStatusCode.
type BillingStatusCode string

// BulkGetBillingNotificationsError defines model for bulkGetBillingNotificationsError.
type BulkGetBillingNotificationsError struct {
	AdvertiserId string                                `json:"advertiserId"`
	Description  string                                `json:"description"`
	ErrorCode    BulkGetBillingNotificationsErrorCodes `json:"errorCode"`
	Index        int32                                 `json:"index"`
}

// BulkGetBillingNotificationsErrorCodes defines model for bulkGetBillingNotificationsErrorCodes.
type BulkGetBillingNotificationsErrorCodes string

// BulkGetBillingNotificationsErrorResponse defines model for bulkGetBillingNotificationsErrorResponse.
type BulkGetBillingNotificationsErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// BulkGetBillingNotificationsRequestBody The properties needed to get the billing notifications for a set of advertisers.
type BulkGetBillingNotificationsRequestBody struct {
	AdvertiserMarketplaces []AdvertiserMarketplace `json:"advertiserMarketplaces"`
	Locale                 *Locale                 `json:"locale,omitempty"`
}

// BulkGetBillingNotificationsResponse defines model for bulkGetBillingNotificationsResponse.
type BulkGetBillingNotificationsResponse struct {
	Error   []BulkGetBillingNotificationsError   `json:"error"`
	Success []BulkGetBillingNotificationsSuccess `json:"success"`
}

// BulkGetBillingNotificationsSuccess defines model for bulkGetBillingNotificationsSuccess.
type BulkGetBillingNotificationsSuccess struct {
	AdvertiserId         string                `json:"advertiserId"`
	BillingNotifications []BillingNotification `json:"billingNotifications"`
	Index                int32                 `json:"index"`
}

// BulkGetBillingStatusError defines model for bulkGetBillingStatusError.
type BulkGetBillingStatusError struct {
	AdvertiserId string                          `json:"advertiserId"`
	Description  *string                         `json:"description,omitempty"`
	ErrorCode    *BulkGetBillingStatusErrorCodes `json:"errorCode,omitempty"`
	Index        int32                           `json:"index"`
}

// BulkGetBillingStatusErrorCodes defines model for bulkGetBillingStatusErrorCodes.
type BulkGetBillingStatusErrorCodes string

// BulkGetBillingStatusErrorResponse defines model for bulkGetBillingStatusErrorResponse.
type BulkGetBillingStatusErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// BulkGetBillingStatusResponse defines model for bulkGetBillingStatusResponse.
type BulkGetBillingStatusResponse struct {
	Error   []BulkGetBillingStatusError   `json:"error"`
	Success []BulkGetBillingStatusSuccess `json:"success"`
}

// BulkGetBillingStatusSuccess defines model for bulkGetBillingStatusSuccess.
type BulkGetBillingStatusSuccess struct {
	AdvertiserId  string        `json:"advertiserId"`
	BillingStatus BillingStatus `json:"billingStatus"`
	Index         int32         `json:"index"`
}

// BulkGetBillingStatusesRequestBody The properties needed to get the billing statuses for a set of advertisers.
type BulkGetBillingStatusesRequestBody struct {
	AdvertiserMarketplaces []AdvertiserMarketplace `json:"advertiserMarketplaces"`
	Locale                 *Locale                 `json:"locale,omitempty"`
}

// ContactInfo defines model for contactInfo.
type ContactInfo struct {
	Address Address `json:"address"`
	Email   Email   `json:"email"`
}

// CountryCode ISO 3611 country code
type CountryCode = string

// CurrencyAmount defines model for currencyAmount.
type CurrencyAmount struct {
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode The currency used for all monetary values for entities under this profile
	// |Region|`countryCode`|Country Name|`currencyCode`|
	// |-|-|-|-|
	// |NA|US|United States|USD|
	// |NA|CA|Canada|CAD|
	// |NA|MX|Mexico|MXN|
	// |NA|BR|Brazil|BRL|
	// |EU|UK|United Kingdom|GBP|
	// |EU|DE|Germany|EUR|
	// |EU|FR|France|EUR|
	// |EU|ES|Spain|EUR|
	// |EU|IT|Italy|EUR|
	// |EU|NL|Netherlands|EUR|
	// |EU|AE|United Arab Emirates|AED|
	// |EU|SA|Saudi Arabia|SAR|
	// |EU|TR|Turkey|TRY|
	// |EU|SE|Sweden|SEK|
	// |EU|EG|Egypt|EGP|
	// |EU|PL|Poland|PLN|
	// |IN|IN|India|INR|
	// |FE|JP|Japan|JPY|
	// |FE|SG|Singapore|SGD|
	// |FE|AU|Australia|AUD|
	CurrencyCode *CurrencyCode `json:"currencyCode,omitempty"`
}

// CurrencyCode The currency used for all monetary values for entities under this profile
// |Region|`countryCode`|Country Name|`currencyCode`|
// |-|-|-|-|
// |NA|US|United States|USD|
// |NA|CA|Canada|CAD|
// |NA|MX|Mexico|MXN|
// |NA|BR|Brazil|BRL|
// |EU|UK|United Kingdom|GBP|
// |EU|DE|Germany|EUR|
// |EU|FR|France|EUR|
// |EU|ES|Spain|EUR|
// |EU|IT|Italy|EUR|
// |EU|NL|Netherlands|EUR|
// |EU|AE|United Arab Emirates|AED|
// |EU|SA|Saudi Arabia|SAR|
// |EU|TR|Turkey|TRY|
// |EU|SE|Sweden|SEK|
// |EU|EG|Egypt|EGP|
// |EU|PL|Poland|PLN|
// |IN|IN|India|INR|
// |FE|JP|Japan|JPY|
// |FE|SG|Singapore|SGD|
// |FE|AU|Australia|AUD|
type CurrencyCode string

// Date Date in YYYYMMDD format
type Date = string

// DocumentType defines model for documentType.
type DocumentType string

// Email defines model for email.
type Email struct {
	// DisplayName Customer name used in email communication.
	DisplayName  string `json:"displayName"`
	EmailAddress string `json:"emailAddress"`
}

// Fee defines model for fee.
type Fee struct {
	Cost CurrencyAmount `json:"cost"`

	// FeeIdentifiers Identifiers describing attributes for different fee types.
	// * countryCode: ISO 3611 country code for country specific Regulatory Advertising Fees.
	FeeIdentifiers *struct {
		// CountryCode ISO 3611 country code
		CountryCode *CountryCode `json:"countryCode,omitempty"`
	} `json:"feeIdentifiers,omitempty"`

	// FeeType * `PLATFORM_FEE`: Billable fee set at the Rodeo Entity level by internal users which reflects the cost of using the Amazon DSP
	//   * Supply Cost * Platform Fee %
	// * `AGENCY_FEE`: Non-billable fee set at the Rodeo Order level by external users which reflects the fee that the agency is charging the end customer
	//   * Total Cost * Agency Fee %
	// * `AUDIENCE_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Amazon 1P data segments for campaign targeting
	//   * Impressions with Audience Fees * Audience Fee (CPM)/1000
	// * `3P_[AUTO_]NON_ABSORBED_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Automotive data segments and/or DMP data segments for campaign targeting
	//   * Impressions * Billable 3p Fee / 1000
	// * `REGULATORY_ADVERTISING_FEE`: Fees derive from ads serving in specific countries and/or for ads purchased from advertisers in specific countries during the period in which you are billed.
	// * `OMNICHANNEL_METRICS_FEE`: Billable fee set at DSP order level by internal users, which reflects the cost of using Omnichannel metrics measurement
	//   * Supply Cost * Omnichannel Metrics Fee %
	// * `3P_PREBID_FEE`: Billable fee automatically calculated when external users choose third party prebid targeting products for supply quality filtering.
	//   * Impressions with 3P Prebid Fees * 3P Prebid Fee (CPM)/1000 %
	FeeType FeeFeeType `json:"feeType"`
}

// FeeFeeType * `PLATFORM_FEE`: Billable fee set at the Rodeo Entity level by internal users which reflects the cost of using the Amazon DSP
//   - Supply Cost * Platform Fee %
//
// * `AGENCY_FEE`: Non-billable fee set at the Rodeo Order level by external users which reflects the fee that the agency is charging the end customer
//   - Total Cost * Agency Fee %
//
// * `AUDIENCE_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Amazon 1P data segments for campaign targeting
//   - Impressions with Audience Fees * Audience Fee (CPM)/1000
//
// * `3P_[AUTO_]NON_ABSORBED_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Automotive data segments and/or DMP data segments for campaign targeting
//   - Impressions * Billable 3p Fee / 1000
//
// * `REGULATORY_ADVERTISING_FEE`: Fees derive from ads serving in specific countries and/or for ads purchased from advertisers in specific countries during the period in which you are billed.
// * `OMNICHANNEL_METRICS_FEE`: Billable fee set at DSP order level by internal users, which reflects the cost of using Omnichannel metrics measurement
//   - Supply Cost * Omnichannel Metrics Fee %
//
// * `3P_PREBID_FEE`: Billable fee automatically calculated when external users choose third party prebid targeting products for supply quality filtering.
//   - Impressions with 3P Prebid Fees * 3P Prebid Fee (CPM)/1000 %
type FeeFeeType string

// GovernmentInvoiceInformation Government invoice data is provided in marketplaces (such as Italy or India) that require a government-assigned invoice ID. This object contains this identifier, along with the type of transaction (which will always be a debit in the case of an invoice) and presigned url link to download e-invoice document with expiry time of 45 sec.
type GovernmentInvoiceInformation struct {
	// CountryCode ISO 3611 country code
	CountryCode *CountryCode `json:"countryCode,omitempty"`

	// GovernmentDocumentS3Link PreSigned URL to grant time-limited download access for govt invoice pdf
	GovernmentDocumentS3Link *string `json:"governmentDocumentS3Link,omitempty"`

	// GovernmentInvoiceId Government generated ID
	GovernmentInvoiceId *string `json:"governmentInvoiceId,omitempty"`

	// GovernmentXmlDocumentS3Link PreSigned URL to grant time-limited download access for govt invoice XML
	GovernmentXmlDocumentS3Link *string                                      `json:"governmentXmlDocumentS3Link,omitempty"`
	TransactionType             *GovernmentInvoiceInformationTransactionType `json:"transactionType,omitempty"`
}

// GovernmentInvoiceInformationTransactionType defines model for GovernmentInvoiceInformation.TransactionType.
type GovernmentInvoiceInformationTransactionType string

// Invoice defines model for invoice.
type Invoice struct {
	// Adjustments List of adjustments (positive and negative) applied to this invoice.
	Adjustments Adjustments `json:"adjustments"`

	// GovernmentInvoiceInformation Government invoice data is provided in marketplaces (such as Italy or India) that require a government-assigned invoice ID. This object contains this identifier, along with the type of transaction (which will always be a debit in the case of an invoice) and presigned url link to download e-invoice document with expiry time of 45 sec.
	GovernmentInvoiceInformation *GovernmentInvoiceInformation `json:"governmentInvoiceInformation,omitempty"`

	// InvoiceLines Line items for this invoice. For Sponsored Ads, this will be a per-campaign breakdown of charges. For DSP, this will be the line items for the campaign getting invoiced.
	InvoiceLines      InvoiceLines   `json:"invoiceLines"`
	InvoiceSummary    InvoiceSummary `json:"invoiceSummary"`
	IssuerContactInfo ContactInfo    `json:"issuerContactInfo"`
	PayerContactInfo  ContactInfo    `json:"payerContactInfo"`

	// Payments List of payments made against the invoice.
	Payments Payments `json:"payments"`

	// Portfolios Sponsored Ads only. This is a list of portfolios with their name, ID and the total cost of the campaign(s) they contain. This totalAmount corresponds to the sum of the invoice lines tagged with the ID of this portfolio.
	Portfolios Portfolios `json:"portfolios"`

	// Promotions List of promotions applied to the charges in this invoice.
	Promotions Promotions `json:"promotions"`
	TaxDetail  TaxDetail  `json:"taxDetail"`

	// ThirdPartyContactInfo Additional contacts. This field is used in cases such as Loi Sapin in France where both advertiser and agency addresses need to be provided.
	ThirdPartyContactInfo ThirdPartyContactInformation `json:"thirdPartyContactInfo"`
}

// InvoiceLine defines model for invoiceLine.
type InvoiceLine struct {
	CampaignId   *int64  `json:"campaignId,omitempty"`
	CampaignName *string `json:"campaignName,omitempty"`

	// CampaignTags Campaign tags in the form of string key-value pairs.
	CampaignTags     *map[string]string `json:"campaignTags,omitempty"`
	CommissionAmount *CurrencyAmount    `json:"commissionAmount,omitempty"`
	CommissionRate   *float32           `json:"commissionRate,omitempty"`
	Cost             CurrencyAmount     `json:"cost"`

	// CostEventCount Number of clicks/impressions charged
	CostEventCount int64 `json:"costEventCount"`

	// CostEventType Type of event charged (clicks or impressions)
	CostEventType InvoiceLineCostEventType `json:"costEventType"`

	// CostPerEventType Ad spends cost (Cost exclusive of adjustments/promotions/fees/etc) per unit (thousand impressions/clicks).
	CostPerEventType *float32 `json:"costPerEventType,omitempty"`
	CostPerUnit      float32  `json:"costPerUnit"`

	// Fees Charges can include different fees (see feeType below).
	Fees *[]Fee `json:"fees,omitempty"`
	Name string `json:"name"`

	// PortfolioId Sponsored Ads only. This identifier maps to one of the portfolios listed in the portfolios section.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// PriceType Metric used for performance measurement.
	PriceType InvoiceLinePriceType `json:"priceType"`

	// ProgramName Sponsored Ads only. This field indicates the ad type (such as Sponsored Products, Sponsored Brands or Sponsored Display).
	ProgramName         *AdProgram      `json:"programName,omitempty"`
	PromotionAmount     *CurrencyAmount `json:"promotionAmount,omitempty"`
	PurchaseOrderNumber *string         `json:"purchaseOrderNumber,omitempty"`
	SupplyCost          *CurrencyAmount `json:"supplyCost,omitempty"`
}

// InvoiceLineCostEventType Type of event charged (clicks or impressions)
type InvoiceLineCostEventType string

// InvoiceLinePriceType Metric used for performance measurement.
type InvoiceLinePriceType string

// InvoiceLines Line items for this invoice. For Sponsored Ads, this will be a per-campaign breakdown of charges. For DSP, this will be the line items for the campaign getting invoiced.
type InvoiceLines = []InvoiceLine

// InvoiceStatus * `ISSUED`: An invoice is issued when its charges are finalized and tax is computed on the total amount.
// * `PAID_IN_PART`: When a partial payment is received, the invoice status will change to paid in part.
// * `PAID_IN_PART`: One full payment has been received, the invoice will be paid in full.
// * `WRITTEN_OFF`: If an invoice is written off because of an error, the status will be updated to written off.
type InvoiceStatus string

// InvoiceSummary defines model for invoiceSummary.
type InvoiceSummary struct {
	AmountDue CurrencyAmount `json:"amountDue"`

	// DownloadableDocuments List of downloadable documents associated with this invoice and accessible from the advertising console.
	DownloadableDocuments *[]DocumentType `json:"downloadableDocuments,omitempty"`

	// DueDate Date in YYYYMMDD format
	DueDate *Date `json:"dueDate,omitempty"`

	// Fees Regulatory Advertising Fees.
	Fees *[]Fee `json:"fees,omitempty"`

	// FromDate Date in YYYYMMDD format
	FromDate Date   `json:"fromDate"`
	Id       string `json:"id"`

	// InvoiceDate Date in YYYYMMDD format
	InvoiceDate         Date                            `json:"invoiceDate"`
	PaymentMethod       *PaymentMethod                  `json:"paymentMethod,omitempty"`
	PaymentTermsDays    *int                            `json:"paymentTermsDays,omitempty"`
	PaymentTermsType    *InvoiceSummaryPaymentTermsType `json:"paymentTermsType,omitempty"`
	PurchaseOrderNumber *string                         `json:"purchaseOrderNumber,omitempty"`
	RemainingAmountDue  CurrencyAmount                  `json:"remainingAmountDue"`

	// RemainingFees Remaining Regulatory Advertising Fees.
	RemainingFees         *[]Fee          `json:"remainingFees,omitempty"`
	RemainingTaxAmountDue *CurrencyAmount `json:"remainingTaxAmountDue,omitempty"`

	// Status * `ISSUED`: An invoice is issued when its charges are finalized and tax is computed on the total amount.
	// * `PAID_IN_PART`: When a partial payment is received, the invoice status will change to paid in part.
	// * `PAID_IN_PART`: One full payment has been received, the invoice will be paid in full.
	// * `WRITTEN_OFF`: If an invoice is written off because of an error, the status will be updated to written off.
	Status       InvoiceStatus   `json:"status"`
	TaxAmountDue *CurrencyAmount `json:"taxAmountDue,omitempty"`
	TaxRate      *float32        `json:"taxRate,omitempty"`

	// ToDate Date in YYYYMMDD format
	ToDate Date `json:"toDate"`
}

// InvoiceSummaryPaymentTermsType defines model for InvoiceSummary.PaymentTermsType.
type InvoiceSummaryPaymentTermsType string

// Locale defines model for locale.
type Locale string

// Payment defines model for payment.
type Payment struct {
	Amount CurrencyAmount `json:"amount"`

	// CurrentPaymentAttemptDate Date in YYYYMMDD format
	CurrentPaymentAttemptDate *Date `json:"currentPaymentAttemptDate,omitempty"`
	Id                        int64 `json:"id"`

	// LastPaymentAttemptDate Date in YYYYMMDD format
	LastPaymentAttemptDate *Date `json:"lastPaymentAttemptDate,omitempty"`

	// NextPaymentAttemptDate Date in YYYYMMDD format
	NextPaymentAttemptDate *Date         `json:"nextPaymentAttemptDate,omitempty"`
	PaymentMethod          PaymentMethod `json:"paymentMethod"`

	// Reason Provides additional details and reason for the payment status
	Reason         *string         `json:"reason,omitempty"`
	RefundedAmount *CurrencyAmount `json:"refundedAmount,omitempty"`
	Status         PaymentStatus   `json:"status"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentMethod defines model for paymentMethod.
type PaymentMethod string

// Payments List of payments made against the invoice.
type Payments = []Payment

// Portfolio defines model for portfolio.
type Portfolio struct {
	FeeAmount   *CurrencyAmount `json:"feeAmount,omitempty"`
	Id          int             `json:"id"`
	Name        string          `json:"name"`
	TotalAmount CurrencyAmount  `json:"totalAmount"`
}

// Portfolios Sponsored Ads only. This is a list of portfolios with their name, ID and the total cost of the campaign(s) they contain. This totalAmount corresponds to the sum of the invoice lines tagged with the ID of this portfolio.
type Portfolios = []Portfolio

// Promotion defines model for promotion.
type Promotion struct {
	Amount      CurrencyAmount `json:"amount"`
	Description string         `json:"description"`

	// LastConsumedDate Date in YYYYMMDD format
	LastConsumedDate Date `json:"lastConsumedDate"`
}

// Promotions List of promotions applied to the charges in this invoice.
type Promotions = []Promotion

// TaxBreakup defines model for taxBreakup.
type TaxBreakup struct {
	// IssuerJurisdiction Tax jurisdiction of issuer (Amazon billing entity)
	IssuerJurisdiction   string `json:"issuerJurisdiction"`
	IssuerTaxInformation struct {
		// TaxId Tax registration with government (Ex: VAT ID, GST ID)
		TaxId string `json:"taxId"`
	} `json:"issuerTaxInformation"`

	// PayerJurisdiction Tax jurisdiction of payer (billed customer)
	PayerJurisdiction   *string `json:"payerJurisdiction,omitempty"`
	PayerTaxInformation struct {
		// TaxId Tax registration with government (Ex: VAT ID, GST ID)
		TaxId *string `json:"taxId,omitempty"`
	} `json:"payerTaxInformation"`
	TaxAmount CurrencyAmount `json:"taxAmount"`
	TaxName   string         `json:"taxName"`
	TaxRate   float32        `json:"taxRate"`

	// TaxedJurisdictionName Tax jurisdiction for which tax applies, this can be at the country, state or local level.
	TaxedJurisdictionName    string `json:"taxedJurisdictionName"`
	ThirdPartyTaxInformation *struct {
		// TaxId Tax registration with government (Ex: VAT ID, GST ID)
		TaxId string `json:"taxId"`
	} `json:"thirdPartyTaxInformation,omitempty"`
}

// TaxDetail defines model for taxDetail.
type TaxDetail struct {
	// PermanentAccountNumber **IN only** field that represents the tax account number of the billed entity entered on AMS portal.
	PermanentAccountNumber *string `json:"permanentAccountNumber,omitempty"`

	// TaxBreakups List of taxes applied on the transaction for this invoice.
	TaxBreakups []TaxBreakup `json:"taxBreakups"`

	// TaxCalculationDate Date in YYYYMMDD format
	TaxCalculationDate Date `json:"taxCalculationDate"`
}

// ThirdPartyContactInformation Additional contacts. This field is used in cases such as Loi Sapin in France where both advertiser and agency addresses need to be provided.
type ThirdPartyContactInformation = []ContactInfo

// GetAdvertiserInvoicesParams defines parameters for GetAdvertiserInvoices.
type GetAdvertiserInvoicesParams struct {
	// InvoiceStatuses * `ISSUED`: An invoice is issued when its charges are finalized and tax is computed on the total amount.
	// * `PAID_IN_PART`: When a partial payment is received, the invoice status will change to paid in part.
	// * `PAID_IN_PART`: One full payment has been received, the invoice will be paid in full.
	// * `WRITTEN_OFF`: If an invoice is written off because of an error, the status will be updated to written off.
	InvoiceStatuses *[]GetAdvertiserInvoicesParamsInvoiceStatuses `form:"invoiceStatuses,omitempty" json:"invoiceStatuses,omitempty"`

	// Count Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// Cursor A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetAdvertiserInvoicesParamsInvoiceStatuses defines parameters for GetAdvertiserInvoices.
type GetAdvertiserInvoicesParamsInvoiceStatuses string

// BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody defines body for BulkGetBillingNotifications for application/vnd.billingnotifications.v1+json ContentType.
type BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody = BulkGetBillingNotificationsRequestBody

// BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody defines body for BulkGetBillingStatus for application/vnd.bulkgetbillingstatusrequestbody.v1+json ContentType.
type BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody = BulkGetBillingStatusesRequestBody

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BulkGetBillingNotificationsWithBody request with any body
	BulkGetBillingNotificationsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	BulkGetBillingNotificationsWithApplicationVndBillingnotificationsV1PlusJSONBody(ctx context.Context, body BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody) (*http.Response, error)

	// BulkGetBillingStatusWithBody request with any body
	BulkGetBillingStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	BulkGetBillingStatusWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody(ctx context.Context, body BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody) (*http.Response, error)

	// GetAdvertiserInvoices request
	GetAdvertiserInvoices(ctx context.Context, params *GetAdvertiserInvoicesParams) (*http.Response, error)

	// GetInvoice request
	GetInvoice(ctx context.Context, invoiceId string) (*http.Response, error)
}

func (c *Client) BulkGetBillingNotificationsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewBulkGetBillingNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) BulkGetBillingNotificationsWithApplicationVndBillingnotificationsV1PlusJSONBody(ctx context.Context, body BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewBulkGetBillingNotificationsRequestWithApplicationVndBillingnotificationsV1PlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) BulkGetBillingStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewBulkGetBillingStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) BulkGetBillingStatusWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody(ctx context.Context, body BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewBulkGetBillingStatusRequestWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAdvertiserInvoices(ctx context.Context, params *GetAdvertiserInvoicesParams) (*http.Response, error) {
	req, err := NewGetAdvertiserInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetInvoice(ctx context.Context, invoiceId string) (*http.Response, error) {
	req, err := NewGetInvoiceRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewBulkGetBillingNotificationsRequestWithApplicationVndBillingnotificationsV1PlusJSONBody calls the generic BulkGetBillingNotifications builder with application/vnd.billingnotifications.v1+json body
func NewBulkGetBillingNotificationsRequestWithApplicationVndBillingnotificationsV1PlusJSONBody(server string, body BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkGetBillingNotificationsRequestWithBody(server, "application/vnd.billingnotifications.v1+json", bodyReader)
}

// NewBulkGetBillingNotificationsRequestWithBody generates requests for BulkGetBillingNotifications with any type of body
func NewBulkGetBillingNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkGetBillingStatusRequestWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody calls the generic BulkGetBillingStatus builder with application/vnd.bulkgetbillingstatusrequestbody.v1+json body
func NewBulkGetBillingStatusRequestWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody(server string, body BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkGetBillingStatusRequestWithBody(server, "application/vnd.bulkgetbillingstatusrequestbody.v1+json", bodyReader)
}

// NewBulkGetBillingStatusRequestWithBody generates requests for BulkGetBillingStatus with any type of body
func NewBulkGetBillingStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdvertiserInvoicesRequest generates requests for GetAdvertiserInvoices
func NewGetAdvertiserInvoicesRequest(server string, params *GetAdvertiserInvoicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvoiceStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "invoiceStatuses", runtime.ParamLocationQuery, *params.InvoiceStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceRequest generates requests for GetInvoice
func NewGetInvoiceRequest(server string, invoiceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BulkGetBillingNotificationsWithBodyWithResponse request with any body
	BulkGetBillingNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BulkGetBillingNotificationsResp, error)

	BulkGetBillingNotificationsWithApplicationVndBillingnotificationsV1PlusJSONBodyWithResponse(ctx context.Context, body BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody) (*BulkGetBillingNotificationsResp, error)

	// BulkGetBillingStatusWithBodyWithResponse request with any body
	BulkGetBillingStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BulkGetBillingStatusResp, error)

	BulkGetBillingStatusWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBodyWithResponse(ctx context.Context, body BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody) (*BulkGetBillingStatusResp, error)

	// GetAdvertiserInvoicesWithResponse request
	GetAdvertiserInvoicesWithResponse(ctx context.Context, params *GetAdvertiserInvoicesParams) (*GetAdvertiserInvoicesResp, error)

	// GetInvoiceWithResponse request
	GetInvoiceWithResponse(ctx context.Context, invoiceId string) (*GetInvoiceResp, error)
}

type BulkGetBillingNotificationsResp struct {
	Body                                                            []byte
	HTTPResponse                                                    *http.Response
	ApplicationvndBulkgetbillingnotificationsresponseV1JSON200      *BulkGetBillingNotificationsResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON400 *BulkGetBillingNotificationsErrorResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON401 *BulkGetBillingNotificationsErrorResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON403 *BulkGetBillingNotificationsErrorResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON404 *BulkGetBillingNotificationsErrorResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON429 *BulkGetBillingNotificationsErrorResponse
	ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON500 *BulkGetBillingNotificationsErrorResponse
}

// Status returns HTTPResponse.Status
func (r BulkGetBillingNotificationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkGetBillingNotificationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkGetBillingStatusResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndBulkgetbillingstatusresponseV1JSON200      *BulkGetBillingStatusResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON400 *BulkGetBillingStatusErrorResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON401 *BulkGetBillingStatusErrorResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON403 *BulkGetBillingStatusErrorResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON404 *BulkGetBillingStatusErrorResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON429 *BulkGetBillingStatusErrorResponse
	ApplicationvndBulkgetbillingstatuserrorresponseV1JSON500 *BulkGetBillingStatusErrorResponse
}

// Status returns HTTPResponse.Status
func (r BulkGetBillingStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkGetBillingStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdvertiserInvoicesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoiceSummaries *[]InvoiceSummary `json:"invoiceSummaries,omitempty"`

		// NextCursor This will be null when at the end of your result set.  This will be present even if the original query had a startIndex and count
		NextCursor *string `json:"nextCursor,omitempty"`

		// PreviousCursor Optional parameter that links to the previous data set if relevant
		PreviousCursor *string `json:"previousCursor,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdvertiserInvoicesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvertiserInvoicesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r GetInvoiceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BulkGetBillingNotificationsWithBodyWithResponse request with arbitrary body returning *BulkGetBillingNotificationsResp
func (c *ClientWithResponses) BulkGetBillingNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BulkGetBillingNotificationsResp, error) {
	rsp, err := c.BulkGetBillingNotificationsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetBillingNotificationsResp(rsp)
}

func (c *ClientWithResponses) BulkGetBillingNotificationsWithApplicationVndBillingnotificationsV1PlusJSONBodyWithResponse(ctx context.Context, body BulkGetBillingNotificationsApplicationVndBillingnotificationsV1PlusJSONRequestBody) (*BulkGetBillingNotificationsResp, error) {
	rsp, err := c.BulkGetBillingNotificationsWithApplicationVndBillingnotificationsV1PlusJSONBody(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetBillingNotificationsResp(rsp)
}

// BulkGetBillingStatusWithBodyWithResponse request with arbitrary body returning *BulkGetBillingStatusResp
func (c *ClientWithResponses) BulkGetBillingStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BulkGetBillingStatusResp, error) {
	rsp, err := c.BulkGetBillingStatusWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetBillingStatusResp(rsp)
}

func (c *ClientWithResponses) BulkGetBillingStatusWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBodyWithResponse(ctx context.Context, body BulkGetBillingStatusApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONRequestBody) (*BulkGetBillingStatusResp, error) {
	rsp, err := c.BulkGetBillingStatusWithApplicationVndBulkgetbillingstatusrequestbodyV1PlusJSONBody(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseBulkGetBillingStatusResp(rsp)
}

// GetAdvertiserInvoicesWithResponse request returning *GetAdvertiserInvoicesResp
func (c *ClientWithResponses) GetAdvertiserInvoicesWithResponse(ctx context.Context, params *GetAdvertiserInvoicesParams) (*GetAdvertiserInvoicesResp, error) {
	rsp, err := c.GetAdvertiserInvoices(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvertiserInvoicesResp(rsp)
}

// GetInvoiceWithResponse request returning *GetInvoiceResp
func (c *ClientWithResponses) GetInvoiceWithResponse(ctx context.Context, invoiceId string) (*GetInvoiceResp, error) {
	rsp, err := c.GetInvoice(ctx, invoiceId)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceResp(rsp)
}

// ParseBulkGetBillingNotificationsResp parses an HTTP response from a BulkGetBillingNotificationsWithResponse call
func ParseBulkGetBillingNotificationsResp(rsp *http.Response) (*BulkGetBillingNotificationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkGetBillingNotificationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkGetBillingNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationsresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BulkGetBillingNotificationsErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingnotificationserrorresponseV1JSON500 = &dest

	}

	return response, nil
}

// ParseBulkGetBillingStatusResp parses an HTTP response from a BulkGetBillingStatusWithResponse call
func ParseBulkGetBillingStatusResp(rsp *http.Response) (*BulkGetBillingStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkGetBillingStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkGetBillingStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatusresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BulkGetBillingStatusErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBulkgetbillingstatuserrorresponseV1JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdvertiserInvoicesResp parses an HTTP response from a GetAdvertiserInvoicesWithResponse call
func ParseGetAdvertiserInvoicesResp(rsp *http.Response) (*GetAdvertiserInvoicesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvertiserInvoicesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoiceSummaries *[]InvoiceSummary `json:"invoiceSummaries,omitempty"`

			// NextCursor This will be null when at the end of your result set.  This will be present even if the original query had a startIndex and count
			NextCursor *string `json:"nextCursor,omitempty"`

			// PreviousCursor Optional parameter that links to the previous data set if relevant
			PreviousCursor *string `json:"previousCursor,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceResp parses an HTTP response from a GetInvoiceWithResponse call
func ParseGetInvoiceResp(rsp *http.Response) (*GetInvoiceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
