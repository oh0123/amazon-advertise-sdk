// Package dspmeasurement provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package dspmeasurement

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AdTypeV1.
const (
	DSP AdTypeV1 = "DSP"
)

// Defines values for AssetTypeV1M2.
const (
	IMAGE AssetTypeV1M2 = "IMAGE"
	VIDEO AssetTypeV1M2 = "VIDEO"
)

// Defines values for AudienceSelectionOperatorV1M2.
const (
	AND AudienceSelectionOperatorV1M2 = "AND"
	OR  AudienceSelectionOperatorV1M2 = "OR"
)

// Defines values for BaseStudyV1StudyResultStatus.
const (
	BaseStudyV1StudyResultStatusAVAILABLE BaseStudyV1StudyResultStatus = "AVAILABLE"
)

// Defines values for BaseStudyV1M1StudyResultStatus.
const (
	BaseStudyV1M1StudyResultStatusAVAILABLE BaseStudyV1M1StudyResultStatus = "AVAILABLE"
)

// Defines values for BaseStudyV1M2StudyResultStatus.
const (
	BaseStudyV1M2StudyResultStatusAVAILABLE BaseStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for BenchmarkCategoryV1.
const (
	BenchmarkCategoryV1APPLIANCES                 BenchmarkCategoryV1 = "APPLIANCES"
	BenchmarkCategoryV1APPSANDGAMES               BenchmarkCategoryV1 = "APPS_AND_GAMES"
	BenchmarkCategoryV1ARTSCRAFTSANDSEWING        BenchmarkCategoryV1 = "ARTS_CRAFTS_AND_SEWING"
	BenchmarkCategoryV1AUTOMOTIVE                 BenchmarkCategoryV1 = "AUTOMOTIVE"
	BenchmarkCategoryV1BABY                       BenchmarkCategoryV1 = "BABY"
	BenchmarkCategoryV1BEAUTYANDPERSONALCARE      BenchmarkCategoryV1 = "BEAUTY_AND_PERSONAL_CARE"
	BenchmarkCategoryV1BEVERAGES                  BenchmarkCategoryV1 = "BEVERAGES"
	BenchmarkCategoryV1BOOKS                      BenchmarkCategoryV1 = "BOOKS"
	BenchmarkCategoryV1CELLPHONESANDACCESSORIES   BenchmarkCategoryV1 = "CELL_PHONES_AND_ACCESSORIES"
	BenchmarkCategoryV1CLOTHINGSHOESANDJEWELRY    BenchmarkCategoryV1 = "CLOTHING_SHOES_AND_JEWELRY"
	BenchmarkCategoryV1COMPUTERSANDACCESSORIES    BenchmarkCategoryV1 = "COMPUTERS_AND_ACCESSORIES"
	BenchmarkCategoryV1DIGITALMUSIC               BenchmarkCategoryV1 = "DIGITAL_MUSIC"
	BenchmarkCategoryV1EDUCATION                  BenchmarkCategoryV1 = "EDUCATION"
	BenchmarkCategoryV1ELECTRONICS                BenchmarkCategoryV1 = "ELECTRONICS"
	BenchmarkCategoryV1FINANCIALANDINSURANCE      BenchmarkCategoryV1 = "FINANCIAL_AND_INSURANCE"
	BenchmarkCategoryV1FOOD                       BenchmarkCategoryV1 = "FOOD"
	BenchmarkCategoryV1HEALTHANDHOUSEHOLD         BenchmarkCategoryV1 = "HEALTH_AND_HOUSEHOLD"
	BenchmarkCategoryV1HOMEANDKITCHEN             BenchmarkCategoryV1 = "HOME_AND_KITCHEN"
	BenchmarkCategoryV1HOSPITALITY                BenchmarkCategoryV1 = "HOSPITALITY"
	BenchmarkCategoryV1KITCHENANDDINING           BenchmarkCategoryV1 = "KITCHEN_AND_DINING"
	BenchmarkCategoryV1MOVIESANDTV                BenchmarkCategoryV1 = "MOVIES_AND_TV"
	BenchmarkCategoryV1OFFICEPRODUCTS             BenchmarkCategoryV1 = "OFFICE_PRODUCTS"
	BenchmarkCategoryV1PATIOLAWNANDGARDEN         BenchmarkCategoryV1 = "PATIO_LAWN_AND_GARDEN"
	BenchmarkCategoryV1PETSUPPLIES                BenchmarkCategoryV1 = "PET_SUPPLIES"
	BenchmarkCategoryV1RESTAURANTS                BenchmarkCategoryV1 = "RESTAURANTS"
	BenchmarkCategoryV1SOFTWARE                   BenchmarkCategoryV1 = "SOFTWARE"
	BenchmarkCategoryV1SPORTSANDOUTDOORS          BenchmarkCategoryV1 = "SPORTS_AND_OUTDOORS"
	BenchmarkCategoryV1TELECOMMUNICATIONSSERVICES BenchmarkCategoryV1 = "TELECOMMUNICATIONS_SERVICES"
	BenchmarkCategoryV1TOOLSANDHOMEIMPROVEMENT    BenchmarkCategoryV1 = "TOOLS_AND_HOME_IMPROVEMENT"
	BenchmarkCategoryV1TOYSANDGAMES               BenchmarkCategoryV1 = "TOYS_AND_GAMES"
	BenchmarkCategoryV1VIDEOGAMES                 BenchmarkCategoryV1 = "VIDEO_GAMES"
)

// Defines values for CreateDSPAudienceResearchStudyV1M2StudyResultStatus.
const (
	CreateDSPAudienceResearchStudyV1M2StudyResultStatusAVAILABLE CreateDSPAudienceResearchStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for CreateDSPCreativeTestingStudyV1M2StudyResultStatus.
const (
	CreateDSPCreativeTestingStudyV1M2StudyResultStatusAVAILABLE CreateDSPCreativeTestingStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for CuratedStudyResultV1FileType.
const (
	CuratedStudyResultV1FileTypeJPEG       CuratedStudyResultV1FileType = "JPEG"
	CuratedStudyResultV1FileTypeOTHER      CuratedStudyResultV1FileType = "OTHER"
	CuratedStudyResultV1FileTypePDF        CuratedStudyResultV1FileType = "PDF"
	CuratedStudyResultV1FileTypePNG        CuratedStudyResultV1FileType = "PNG"
	CuratedStudyResultV1FileTypePOWERPOINT CuratedStudyResultV1FileType = "POWERPOINT"
)

// Defines values for DSPAudienceResearchStudyV1M2StudyResultStatus.
const (
	DSPAudienceResearchStudyV1M2StudyResultStatusAVAILABLE DSPAudienceResearchStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for DSPBrandLiftStudyV1StudyResultStatus.
const (
	DSPBrandLiftStudyV1StudyResultStatusAVAILABLE DSPBrandLiftStudyV1StudyResultStatus = "AVAILABLE"
)

// Defines values for DSPBrandLiftStudyV1M1StudyResultStatus.
const (
	DSPBrandLiftStudyV1M1StudyResultStatusAVAILABLE DSPBrandLiftStudyV1M1StudyResultStatus = "AVAILABLE"
)

// Defines values for DSPCreativeTestingStudyV1M2StudyResultStatus.
const (
	DSPCreativeTestingStudyV1M2StudyResultStatusAVAILABLE DSPCreativeTestingStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for DSPOmnichannelMetricsStudyV1M2StudyResultStatus.
const (
	DSPOmnichannelMetricsStudyV1M2StudyResultStatusAVAILABLE DSPOmnichannelMetricsStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for DSPOmnichannelMetricsStudyV1M3StudyResultStatus.
const (
	DSPOmnichannelMetricsStudyV1M3StudyResultStatusAVAILABLE DSPOmnichannelMetricsStudyV1M3StudyResultStatus = "AVAILABLE"
)

// Defines values for EligibilityFieldV1.
const (
	EligibilityFieldV1BUDGET       EligibilityFieldV1 = "BUDGET"
	EligibilityFieldV1ENDTIME      EligibilityFieldV1 = "END_TIME"
	EligibilityFieldV1FLIGHTLENGTH EligibilityFieldV1 = "FLIGHT_LENGTH"
	EligibilityFieldV1GOAL         EligibilityFieldV1 = "GOAL"
	EligibilityFieldV1IMPRESSIONS  EligibilityFieldV1 = "IMPRESSIONS"
	EligibilityFieldV1LEADTIME     EligibilityFieldV1 = "LEAD_TIME"
	EligibilityFieldV1LOCALE       EligibilityFieldV1 = "LOCALE"
	EligibilityFieldV1ORDER        EligibilityFieldV1 = "ORDER"
	EligibilityFieldV1STARTTIME    EligibilityFieldV1 = "START_TIME"
)

// Defines values for EligibilityFieldV1M2.
const (
	EligibilityFieldV1M2BUDGET       EligibilityFieldV1M2 = "BUDGET"
	EligibilityFieldV1M2BUYERCOUNT   EligibilityFieldV1M2 = "BUYER_COUNT"
	EligibilityFieldV1M2ENDTIME      EligibilityFieldV1M2 = "END_TIME"
	EligibilityFieldV1M2FLIGHTLENGTH EligibilityFieldV1M2 = "FLIGHT_LENGTH"
	EligibilityFieldV1M2GOAL         EligibilityFieldV1M2 = "GOAL"
	EligibilityFieldV1M2IMPRESSIONS  EligibilityFieldV1M2 = "IMPRESSIONS"
	EligibilityFieldV1M2LEADTIME     EligibilityFieldV1M2 = "LEAD_TIME"
	EligibilityFieldV1M2LOCALE       EligibilityFieldV1M2 = "LOCALE"
	EligibilityFieldV1M2ORDER        EligibilityFieldV1M2 = "ORDER"
	EligibilityFieldV1M2STARTTIME    EligibilityFieldV1M2 = "START_TIME"
)

// Defines values for EligibilityIssueSeverityV1.
const (
	ERROR   EligibilityIssueSeverityV1 = "ERROR"
	WARNING EligibilityIssueSeverityV1 = "WARNING"
)

// Defines values for EligibilityStatusV1.
const (
	ELIGIBLE            EligibilityStatusV1 = "ELIGIBLE"
	ELIGIBLEWITHWARNING EligibilityStatusV1 = "ELIGIBLE_WITH_WARNING"
	INELIGIBLE          EligibilityStatusV1 = "INELIGIBLE"
)

// Defines values for FundingTypeV1.
const (
	FundingTypeV1COMPLIMENTARY FundingTypeV1 = "COMPLIMENTARY"
)

// Defines values for FundingTypeV1M1.
const (
	FundingTypeV1M1COMPLIMENTARY     FundingTypeV1M1 = "COMPLIMENTARY"
	FundingTypeV1M1THIRDPARTYPAYMENT FundingTypeV1M1 = "THIRD_PARTY_PAYMENT"
)

// Defines values for FundingTypeV1M2.
const (
	FundingTypeV1M2COMPLIMENTARY FundingTypeV1M2 = "COMPLIMENTARY"
	FundingTypeV1M2CPM           FundingTypeV1M2 = "CPM"
	FundingTypeV1M2FLATRATE      FundingTypeV1M2 = "FLAT_RATE"
)

// Defines values for FundingTypeV1M3.
const (
	FundingTypeV1M3COMPLIMENTARY     FundingTypeV1M3 = "COMPLIMENTARY"
	FundingTypeV1M3CPM               FundingTypeV1M3 = "CPM"
	FundingTypeV1M3THIRDPARTYPAYMENT FundingTypeV1M3 = "THIRD_PARTY_PAYMENT"
)

// Defines values for MeasurementCountryV1.
const (
	AE MeasurementCountryV1 = "AE"
	AU MeasurementCountryV1 = "AU"
	BR MeasurementCountryV1 = "BR"
	CA MeasurementCountryV1 = "CA"
	DE MeasurementCountryV1 = "DE"
	ES MeasurementCountryV1 = "ES"
	FR MeasurementCountryV1 = "FR"
	IT MeasurementCountryV1 = "IT"
	JP MeasurementCountryV1 = "JP"
	MX MeasurementCountryV1 = "MX"
	NL MeasurementCountryV1 = "NL"
	UK MeasurementCountryV1 = "UK"
	US MeasurementCountryV1 = "US"
)

// Defines values for MeasurementGoalV1.
const (
	MeasurementGoalV1AWARENESS              MeasurementGoalV1 = "AWARENESS"
	MeasurementGoalV1CONSIDERATIONSONAMAZON MeasurementGoalV1 = "CONSIDERATIONS_ON_AMAZON"
	MeasurementGoalV1CONVERSIONSOFFAMAZON   MeasurementGoalV1 = "CONVERSIONS_OFF_AMAZON"
	MeasurementGoalV1ENGAGEMENTWITHMYAD     MeasurementGoalV1 = "ENGAGEMENT_WITH_MY_AD"
	MeasurementGoalV1MOBILEAPPINSTALLS      MeasurementGoalV1 = "MOBILE_APP_INSTALLS"
	MeasurementGoalV1PURCHASESONAMAZON      MeasurementGoalV1 = "PURCHASES_ON_AMAZON"
)

// Defines values for MeasurementLocaleV1.
const (
	ENUS MeasurementLocaleV1 = "EN_US"
)

// Defines values for MeasurementStudiesBenchmarkCategory.
const (
	MeasurementStudiesBenchmarkCategoryAPPLIANCES                 MeasurementStudiesBenchmarkCategory = "APPLIANCES"
	MeasurementStudiesBenchmarkCategoryAPPSANDGAMES               MeasurementStudiesBenchmarkCategory = "APPS_AND_GAMES"
	MeasurementStudiesBenchmarkCategoryARTSCRAFTSANDSEWING        MeasurementStudiesBenchmarkCategory = "ARTS_CRAFTS_AND_SEWING"
	MeasurementStudiesBenchmarkCategoryAUTOMOTIVE                 MeasurementStudiesBenchmarkCategory = "AUTOMOTIVE"
	MeasurementStudiesBenchmarkCategoryBABY                       MeasurementStudiesBenchmarkCategory = "BABY"
	MeasurementStudiesBenchmarkCategoryBEAUTYANDPERSONALCARE      MeasurementStudiesBenchmarkCategory = "BEAUTY_AND_PERSONAL_CARE"
	MeasurementStudiesBenchmarkCategoryBEVERAGES                  MeasurementStudiesBenchmarkCategory = "BEVERAGES"
	MeasurementStudiesBenchmarkCategoryBOOKS                      MeasurementStudiesBenchmarkCategory = "BOOKS"
	MeasurementStudiesBenchmarkCategoryCELLPHONESANDACCESSORIES   MeasurementStudiesBenchmarkCategory = "CELL_PHONES_AND_ACCESSORIES"
	MeasurementStudiesBenchmarkCategoryCLOTHINGSHOESANDJEWELRY    MeasurementStudiesBenchmarkCategory = "CLOTHING_SHOES_AND_JEWELRY"
	MeasurementStudiesBenchmarkCategoryCOMPUTERSANDACCESSORIES    MeasurementStudiesBenchmarkCategory = "COMPUTERS_AND_ACCESSORIES"
	MeasurementStudiesBenchmarkCategoryDIGITALMUSIC               MeasurementStudiesBenchmarkCategory = "DIGITAL_MUSIC"
	MeasurementStudiesBenchmarkCategoryEDUCATION                  MeasurementStudiesBenchmarkCategory = "EDUCATION"
	MeasurementStudiesBenchmarkCategoryELECTRONICS                MeasurementStudiesBenchmarkCategory = "ELECTRONICS"
	MeasurementStudiesBenchmarkCategoryFINANCIALANDINSURANCE      MeasurementStudiesBenchmarkCategory = "FINANCIAL_AND_INSURANCE"
	MeasurementStudiesBenchmarkCategoryFOOD                       MeasurementStudiesBenchmarkCategory = "FOOD"
	MeasurementStudiesBenchmarkCategoryHEALTHANDHOUSEHOLD         MeasurementStudiesBenchmarkCategory = "HEALTH_AND_HOUSEHOLD"
	MeasurementStudiesBenchmarkCategoryHOMEANDKITCHEN             MeasurementStudiesBenchmarkCategory = "HOME_AND_KITCHEN"
	MeasurementStudiesBenchmarkCategoryHOSPITALITY                MeasurementStudiesBenchmarkCategory = "HOSPITALITY"
	MeasurementStudiesBenchmarkCategoryKITCHENANDDINING           MeasurementStudiesBenchmarkCategory = "KITCHEN_AND_DINING"
	MeasurementStudiesBenchmarkCategoryMOVIESANDTV                MeasurementStudiesBenchmarkCategory = "MOVIES_AND_TV"
	MeasurementStudiesBenchmarkCategoryOFFICEPRODUCTS             MeasurementStudiesBenchmarkCategory = "OFFICE_PRODUCTS"
	MeasurementStudiesBenchmarkCategoryOTHER                      MeasurementStudiesBenchmarkCategory = "OTHER"
	MeasurementStudiesBenchmarkCategoryPATIOLAWNANDGARDEN         MeasurementStudiesBenchmarkCategory = "PATIO_LAWN_AND_GARDEN"
	MeasurementStudiesBenchmarkCategoryPETSUPPLIES                MeasurementStudiesBenchmarkCategory = "PET_SUPPLIES"
	MeasurementStudiesBenchmarkCategoryRESTAURANTS                MeasurementStudiesBenchmarkCategory = "RESTAURANTS"
	MeasurementStudiesBenchmarkCategorySOFTWARE                   MeasurementStudiesBenchmarkCategory = "SOFTWARE"
	MeasurementStudiesBenchmarkCategorySPORTSANDOUTDOORS          MeasurementStudiesBenchmarkCategory = "SPORTS_AND_OUTDOORS"
	MeasurementStudiesBenchmarkCategoryTELECOMMUNICATIONSSERVICES MeasurementStudiesBenchmarkCategory = "TELECOMMUNICATIONS_SERVICES"
	MeasurementStudiesBenchmarkCategoryTOOLSANDHOMEIMPROVEMENT    MeasurementStudiesBenchmarkCategory = "TOOLS_AND_HOME_IMPROVEMENT"
	MeasurementStudiesBenchmarkCategoryTOYSANDGAMES               MeasurementStudiesBenchmarkCategory = "TOYS_AND_GAMES"
	MeasurementStudiesBenchmarkCategoryVIDEOGAMES                 MeasurementStudiesBenchmarkCategory = "VIDEO_GAMES"
)

// Defines values for MeasurementStudiesSurveyQuestionType.
const (
	MeasurementStudiesSurveyQuestionTypeFREETEXT          MeasurementStudiesSurveyQuestionType = "FREE_TEXT"
	MeasurementStudiesSurveyQuestionTypeMULTISELECT       MeasurementStudiesSurveyQuestionType = "MULTI_SELECT"
	MeasurementStudiesSurveyQuestionTypeOTHER             MeasurementStudiesSurveyQuestionType = "OTHER"
	MeasurementStudiesSurveyQuestionTypeRATING            MeasurementStudiesSurveyQuestionType = "RATING"
	MeasurementStudiesSurveyQuestionTypeSINGLEASSETSELECT MeasurementStudiesSurveyQuestionType = "SINGLE_ASSET_SELECT"
	MeasurementStudiesSurveyQuestionTypeSINGLESELECT      MeasurementStudiesSurveyQuestionType = "SINGLE_SELECT"
	MeasurementStudiesSurveyQuestionTypeSINGLESELECTGRID  MeasurementStudiesSurveyQuestionType = "SINGLE_SELECT_GRID"
)

// Defines values for MeasurementStudiesSurveyStatus.
const (
	MeasurementStudiesSurveyStatusAVAILABLE MeasurementStudiesSurveyStatus = "AVAILABLE"
	MeasurementStudiesSurveyStatusDRAFT     MeasurementStudiesSurveyStatus = "DRAFT"
	MeasurementStudiesSurveyStatusINUSE     MeasurementStudiesSurveyStatus = "IN_USE"
)

// Defines values for MeasurementStudyResultStatus.
const (
	MeasurementStudyResultStatusAVAILABLE MeasurementStudyResultStatus = "AVAILABLE"
	MeasurementStudyResultStatusOTHER     MeasurementStudyResultStatus = "OTHER"
)

// Defines values for MeasurementStudyStatus.
const (
	MeasurementStudyStatusAPPROVED   MeasurementStudyStatus = "APPROVED"
	MeasurementStudyStatusCANCELLED  MeasurementStudyStatus = "CANCELLED"
	MeasurementStudyStatusDRAFT      MeasurementStudyStatus = "DRAFT"
	MeasurementStudyStatusENDED      MeasurementStudyStatus = "ENDED"
	MeasurementStudyStatusINFEASIBLE MeasurementStudyStatus = "INFEASIBLE"
	MeasurementStudyStatusOTHER      MeasurementStudyStatus = "OTHER"
	MeasurementStudyStatusPENDING    MeasurementStudyStatus = "PENDING"
	MeasurementStudyStatusREJECTED   MeasurementStudyStatus = "REJECTED"
	MeasurementStudyStatusRUNNING    MeasurementStudyStatus = "RUNNING"
)

// Defines values for MeasurementStudyStatusReasonType.
const (
	ADDORDERSTOINCREASEIMPRESSIONS                                      MeasurementStudyStatusReasonType = "ADD_ORDERS_TO_INCREASE_IMPRESSIONS"
	CAPITALIZETHEFIRSTLETTEROFALLCUSTOMATTRIBUTES                       MeasurementStudyStatusReasonType = "CAPITALIZE_THE_FIRST_LETTER_OF_ALL_CUSTOM_ATTRIBUTES"
	CAPITALIZETHEFIRSTLETTEROFPROPERNOUNS                               MeasurementStudyStatusReasonType = "CAPITALIZE_THE_FIRST_LETTER_OF_PROPER_NOUNS"
	CAPITALIZETHEFIRSTLETTEROFPROPERNOUNSLIKECOUNTRYNAMES               MeasurementStudyStatusReasonType = "CAPITALIZE_THE_FIRST_LETTER_OF_PROPER_NOUNS_LIKE_COUNTRY_NAMES"
	INFEASIBLENOTENOUGHIMPRESSIONS                                      MeasurementStudyStatusReasonType = "INFEASIBLE_NOT_ENOUGH_IMPRESSIONS"
	MAKEBRANDORPRODUCTCATEGORYPLURAL                                    MeasurementStudyStatusReasonType = "MAKE_BRAND_OR_PRODUCT_CATEGORY_PLURAL"
	ONLYONEACTIVESTUDYISALLOWEDPERBRANDORPRODUCT                        MeasurementStudyStatusReasonType = "ONLY_ONE_ACTIVE_STUDY_IS_ALLOWED_PER_BRAND_OR_PRODUCT"
	OTHER                                                               MeasurementStudyStatusReasonType = "OTHER"
	REMOVEALLCAPITALIZEDWORDSEXCEPTFORACRONYMS                          MeasurementStudyStatusReasonType = "REMOVE_ALLCAPITALIZED_WORDS_EXCEPT_FOR_ACRONYMS"
	REMOVEDEROGATORYLANGUAGE                                            MeasurementStudyStatusReasonType = "REMOVE_DEROGATORY_LANGUAGE"
	REMOVEDUPLICATEINPUTS                                               MeasurementStudyStatusReasonType = "REMOVE_DUPLICATE_INPUTS"
	REMOVEELLIPSES                                                      MeasurementStudyStatusReasonType = "REMOVE_ELLIPSES"
	REMOVEEXTRAHYPHENS                                                  MeasurementStudyStatusReasonType = "REMOVE_EXTRA_HYPHENS"
	REMOVEEXTRAPUNCTUATION                                              MeasurementStudyStatusReasonType = "REMOVE_EXTRA_PUNCTUATION"
	REMOVEEXTRASPACESBETWEENBEFOREORAFTERWORDS                          MeasurementStudyStatusReasonType = "REMOVE_EXTRA_SPACES_BETWEEN_BEFORE_OR_AFTER_WORDS"
	REMOVEHYPHENSSEPARATINGSINGLEWORDS                                  MeasurementStudyStatusReasonType = "REMOVE_HYPHENS_SEPARATING_SINGLE_WORDS"
	REMOVEIRRELEVANTWORDS                                               MeasurementStudyStatusReasonType = "REMOVE_IRRELEVANT_WORDS"
	REMOVENONENGLISHWORDS                                               MeasurementStudyStatusReasonType = "REMOVE_NONENGLISH_WORDS"
	REMOVEOFFENSIVEACRONYMSANDABBREVIATIONS                             MeasurementStudyStatusReasonType = "REMOVE_OFFENSIVE_ACRONYMS_AND_ABBREVIATIONS"
	REMOVEOFFENSIVEWORDSORTERMSDISGUISEDASNONOFFENSIVETERMS             MeasurementStudyStatusReasonType = "REMOVE_OFFENSIVE_WORDS_OR_TERMS_DISGUISED_AS_NONOFFENSIVE_TERMS"
	REMOVEPUNCTATIONCOMBINATIONS                                        MeasurementStudyStatusReasonType = "REMOVE_PUNCTATION_COMBINATIONS"
	REMOVEPUNCTUATIONATTHEENDOFWORDS                                    MeasurementStudyStatusReasonType = "REMOVE_PUNCTUATION_AT_THE_END_OF_WORDS"
	REMOVEREDUNDANTANSWERCHOICES                                        MeasurementStudyStatusReasonType = "REMOVE_REDUNDANT_ANSWER_CHOICES"
	REMOVESPACESBETWEENLETTERS                                          MeasurementStudyStatusReasonType = "REMOVE_SPACES_BETWEEN_LETTERS"
	REMOVESPECIALCHARACTERSANDSYMBOLS                                   MeasurementStudyStatusReasonType = "REMOVE_SPECIAL_CHARACTERS_AND_SYMBOLS"
	REMOVETERMSPRESENTEDINAWAYINWHICHTHEIRTRUEMEANINGISCLEARLYOFFENSIVE MeasurementStudyStatusReasonType = "REMOVE_TERMS_PRESENTED_IN_A_WAY_IN_WHICH_THEIR_TRUE_MEANING_IS_CLEARLY_OFFENSIVE"
	REMOVETYPOS                                                         MeasurementStudyStatusReasonType = "REMOVE_TYPOS"
	REMOVEUNCLEAROROBFUSCATEDOFFENSIVELANGUAGE                          MeasurementStudyStatusReasonType = "REMOVE_UNCLEAR_OR_OBFUSCATED_OFFENSIVE_LANGUAGE"
	REMOVEVULGARANDPROFANEWORDS                                         MeasurementStudyStatusReasonType = "REMOVE_VULGAR_AND_PROFANE_WORDS"
	RESOLVEIMPROPERLYCAPITALIZEDBRANDORPRODUCTCATEGORY                  MeasurementStudyStatusReasonType = "RESOLVE_IMPROPERLY_CAPITALIZED_BRAND_OR_PRODUCT_CATEGORY"
	RESOLVEIMPROPERLYCAPITALIZEDCUSTOMINPUTS                            MeasurementStudyStatusReasonType = "RESOLVE_IMPROPERLY_CAPITALIZED_CUSTOM_INPUTS"
	RESOLVEIMPROPERLYPLURALIZEDCUSTOMINPUTS                             MeasurementStudyStatusReasonType = "RESOLVE_IMPROPERLY_PLURALIZED_CUSTOM_INPUTS"
	RESOLVEINAPPROPRIATELYCAPITALIZEDWORDS                              MeasurementStudyStatusReasonType = "RESOLVE_INAPPROPRIATELY_CAPITALIZED_WORDS"
	RESOLVEINCORRECTPOSSESSIVENOUNS                                     MeasurementStudyStatusReasonType = "RESOLVE_INCORRECT_POSSESSIVE_NOUNS"
	RESOLVEINCORRECTTENSES                                              MeasurementStudyStatusReasonType = "RESOLVE_INCORRECT_TENSES"
	RESOLVENEGATIVEQUESTIONSANDANSWERSABOUTPEERS                        MeasurementStudyStatusReasonType = "RESOLVE_NEGATIVE_QUESTIONS_AND_ANSWERS_ABOUT_PEERS"
	RESOLVESUBJECTVERBDISAGREEMENT                                      MeasurementStudyStatusReasonType = "RESOLVE_SUBJECT_VERB_DISAGREEMENT"
	RESOLVEUNCLEARBRANDORPRODUCTCATEGORY                                MeasurementStudyStatusReasonType = "RESOLVE_UNCLEAR_BRAND_OR_PRODUCT_CATEGORY"
	RESOLVEUNCLEARBRANDORPRODUCTNAME                                    MeasurementStudyStatusReasonType = "RESOLVE_UNCLEAR_BRAND_OR_PRODUCT_NAME"
	RESOLVEUNCLEARCUSTOMINPUTS                                          MeasurementStudyStatusReasonType = "RESOLVE_UNCLEAR_CUSTOM_INPUTS"
	RESOLVEUNCLEARPEERS                                                 MeasurementStudyStatusReasonType = "RESOLVE_UNCLEAR_PEERS"
	SURVEYSWITHPOLITICALCONTENTARENOTALLOWED                            MeasurementStudyStatusReasonType = "SURVEYS_WITH_POLITICAL_CONTENT_ARE_NOT_ALLOWED"
)

// Defines values for MeasurementStudySubmissionType.
const (
	MeasurementStudySubmissionTypeDRAFT      MeasurementStudySubmissionType = "DRAFT"
	MeasurementStudySubmissionTypeSUBMISSION MeasurementStudySubmissionType = "SUBMISSION"
)

// Defines values for PlaceholderValueTypeV1.
const (
	INTEGER PlaceholderValueTypeV1 = "INTEGER"
	STRING  PlaceholderValueTypeV1 = "STRING"
)

// Defines values for StudyObjectiveV1.
const (
	CAMPAIGNMEASUREMENT StudyObjectiveV1 = "CAMPAIGN_MEASUREMENT"
	CAMPAIGNPLANNING    StudyObjectiveV1 = "CAMPAIGN_PLANNING"
)

// Defines values for StudyStatusV1.
const (
	StudyStatusV1APPROVED   StudyStatusV1 = "APPROVED"
	StudyStatusV1CANCELLED  StudyStatusV1 = "CANCELLED"
	StudyStatusV1DRAFT      StudyStatusV1 = "DRAFT"
	StudyStatusV1ENDED      StudyStatusV1 = "ENDED"
	StudyStatusV1INFEASIBLE StudyStatusV1 = "INFEASIBLE"
	StudyStatusV1PENDING    StudyStatusV1 = "PENDING"
	StudyStatusV1REJECTED   StudyStatusV1 = "REJECTED"
	StudyStatusV1RUNNING    StudyStatusV1 = "RUNNING"
)

// Defines values for StudySubmissionTypeV1.
const (
	StudySubmissionTypeV1DRAFT      StudySubmissionTypeV1 = "DRAFT"
	StudySubmissionTypeV1SUBMISSION StudySubmissionTypeV1 = "SUBMISSION"
)

// Defines values for StudyTypeV1.
const (
	StudyTypeV1BRANDLIFT StudyTypeV1 = "BRAND_LIFT"
)

// Defines values for StudyTypeV1M2.
const (
	StudyTypeV1M2AUDIENCERESEARCH   StudyTypeV1M2 = "AUDIENCE_RESEARCH"
	StudyTypeV1M2BRANDLIFT          StudyTypeV1M2 = "BRAND_LIFT"
	StudyTypeV1M2CREATIVETESTING    StudyTypeV1M2 = "CREATIVE_TESTING"
	StudyTypeV1M2OMNICHANNELMETRICS StudyTypeV1M2 = "OMNICHANNEL_METRICS"
)

// Defines values for SurveyQuestionCategoryV1M1.
const (
	BRANDKPI  SurveyQuestionCategoryV1M1 = "BRAND_KPI"
	CUSTOM    SurveyQuestionCategoryV1M1 = "CUSTOM"
	WEIGHTING SurveyQuestionCategoryV1M1 = "WEIGHTING"
)

// Defines values for SurveyQuestionObjectiveTypeV1.
const (
	SurveyQuestionObjectiveTypeV1ADRECALL     SurveyQuestionObjectiveTypeV1 = "AD_RECALL"
	SurveyQuestionObjectiveTypeV1ASSOCIATION  SurveyQuestionObjectiveTypeV1 = "ASSOCIATION"
	SurveyQuestionObjectiveTypeV1ATTITUDES    SurveyQuestionObjectiveTypeV1 = "ATTITUDES"
	SurveyQuestionObjectiveTypeV1AWARENESS    SurveyQuestionObjectiveTypeV1 = "AWARENESS"
	SurveyQuestionObjectiveTypeV1BEHAVIORS    SurveyQuestionObjectiveTypeV1 = "BEHAVIORS"
	SurveyQuestionObjectiveTypeV1FAMILIARITY  SurveyQuestionObjectiveTypeV1 = "FAMILIARITY"
	SurveyQuestionObjectiveTypeV1FAVORABILITY SurveyQuestionObjectiveTypeV1 = "FAVORABILITY"
	SurveyQuestionObjectiveTypeV1INTENT       SurveyQuestionObjectiveTypeV1 = "INTENT"
	SurveyQuestionObjectiveTypeV1PREFERENCE   SurveyQuestionObjectiveTypeV1 = "PREFERENCE"
)

// Defines values for SurveyQuestionObjectiveTypeV1M1.
const (
	SurveyQuestionObjectiveTypeV1M1ADRECALL            SurveyQuestionObjectiveTypeV1M1 = "AD_RECALL"
	SurveyQuestionObjectiveTypeV1M1AGE                 SurveyQuestionObjectiveTypeV1M1 = "AGE"
	SurveyQuestionObjectiveTypeV1M1ATTITUDES           SurveyQuestionObjectiveTypeV1M1 = "ATTITUDES"
	SurveyQuestionObjectiveTypeV1M1AWARENESS           SurveyQuestionObjectiveTypeV1M1 = "AWARENESS"
	SurveyQuestionObjectiveTypeV1M1BEHAVIORS           SurveyQuestionObjectiveTypeV1M1 = "BEHAVIORS"
	SurveyQuestionObjectiveTypeV1M1CHILDRENINHOUSEHOLD SurveyQuestionObjectiveTypeV1M1 = "CHILDREN_IN_HOUSEHOLD"
	SurveyQuestionObjectiveTypeV1M1CONSIDERATION       SurveyQuestionObjectiveTypeV1M1 = "CONSIDERATION"
	SurveyQuestionObjectiveTypeV1M1EDUCATION           SurveyQuestionObjectiveTypeV1M1 = "EDUCATION"
	SurveyQuestionObjectiveTypeV1M1ETHNICITY           SurveyQuestionObjectiveTypeV1M1 = "ETHNICITY"
	SurveyQuestionObjectiveTypeV1M1FAMILIARITY         SurveyQuestionObjectiveTypeV1M1 = "FAMILIARITY"
	SurveyQuestionObjectiveTypeV1M1FAVORABILITY        SurveyQuestionObjectiveTypeV1M1 = "FAVORABILITY"
	SurveyQuestionObjectiveTypeV1M1GENDER              SurveyQuestionObjectiveTypeV1M1 = "GENDER"
	SurveyQuestionObjectiveTypeV1M1HOUSEHOLDINCOME     SurveyQuestionObjectiveTypeV1M1 = "HOUSEHOLD_INCOME"
	SurveyQuestionObjectiveTypeV1M1HOUSEHOLDSIZE       SurveyQuestionObjectiveTypeV1M1 = "HOUSEHOLD_SIZE"
	SurveyQuestionObjectiveTypeV1M1INMARKETSTATUS      SurveyQuestionObjectiveTypeV1M1 = "IN_MARKET_STATUS"
	SurveyQuestionObjectiveTypeV1M1INTENT              SurveyQuestionObjectiveTypeV1M1 = "INTENT"
	SurveyQuestionObjectiveTypeV1M1PREFERENCE          SurveyQuestionObjectiveTypeV1M1 = "PREFERENCE"
	SurveyQuestionObjectiveTypeV1M1PURCHASEFREQUENCY   SurveyQuestionObjectiveTypeV1M1 = "PURCHASE_FREQUENCY"
	SurveyQuestionObjectiveTypeV1M1PURCHASEHISTORY     SurveyQuestionObjectiveTypeV1M1 = "PURCHASE_HISTORY"
	SurveyQuestionObjectiveTypeV1M1PURCHASELOCATION    SurveyQuestionObjectiveTypeV1M1 = "PURCHASE_LOCATION"
	SurveyQuestionObjectiveTypeV1M1TIMEONLINE          SurveyQuestionObjectiveTypeV1M1 = "TIME_ONLINE"
	SurveyQuestionObjectiveTypeV1M1TVMEDIACONSUMPTION  SurveyQuestionObjectiveTypeV1M1 = "TV_MEDIA_CONSUMPTION"
	SurveyQuestionObjectiveTypeV1M1UNAIDEDAWARENESS    SurveyQuestionObjectiveTypeV1M1 = "UNAIDED_AWARENESS"
)

// Defines values for SurveyQuestionResponseV1M2ResponseType.
const (
	ASSET SurveyQuestionResponseV1M2ResponseType = "ASSET"
	TEXT  SurveyQuestionResponseV1M2ResponseType = "TEXT"
)

// Defines values for SurveyQuestionSubCategoryV1M1.
const (
	SurveyQuestionSubCategoryV1M1BEHAVIOR        SurveyQuestionSubCategoryV1M1 = "BEHAVIOR"
	SurveyQuestionSubCategoryV1M1DEMOGRAPHIC     SurveyQuestionSubCategoryV1M1 = "DEMOGRAPHIC"
	SurveyQuestionSubCategoryV1M1PURCHASEHISTORY SurveyQuestionSubCategoryV1M1 = "PURCHASE_HISTORY"
)

// Defines values for SurveyQuestionTypeV1.
const (
	SurveyQuestionTypeV1FREETEXT          SurveyQuestionTypeV1 = "FREE_TEXT"
	SurveyQuestionTypeV1MULTISELECT       SurveyQuestionTypeV1 = "MULTI_SELECT"
	SurveyQuestionTypeV1RATING            SurveyQuestionTypeV1 = "RATING"
	SurveyQuestionTypeV1SINGLEASSETSELECT SurveyQuestionTypeV1 = "SINGLE_ASSET_SELECT"
	SurveyQuestionTypeV1SINGLESELECT      SurveyQuestionTypeV1 = "SINGLE_SELECT"
)

// Defines values for SurveyQuestionTypeV1M1.
const (
	SurveyQuestionTypeV1M1FREETEXT         SurveyQuestionTypeV1M1 = "FREE_TEXT"
	SurveyQuestionTypeV1M1MULTISELECT      SurveyQuestionTypeV1M1 = "MULTI_SELECT"
	SurveyQuestionTypeV1M1RATING           SurveyQuestionTypeV1M1 = "RATING"
	SurveyQuestionTypeV1M1SINGLESELECT     SurveyQuestionTypeV1M1 = "SINGLE_SELECT"
	SurveyQuestionTypeV1M1SINGLESELECTGRID SurveyQuestionTypeV1M1 = "SINGLE_SELECT_GRID"
)

// Defines values for SurveyResponseResultV1SegmentType.
const (
	SurveyResponseResultV1SegmentTypeAGE             SurveyResponseResultV1SegmentType = "AGE"
	SurveyResponseResultV1SegmentTypeAUDIENCES       SurveyResponseResultV1SegmentType = "AUDIENCES"
	SurveyResponseResultV1SegmentTypeCHANNEL         SurveyResponseResultV1SegmentType = "CHANNEL"
	SurveyResponseResultV1SegmentTypeFREQUENCY       SurveyResponseResultV1SegmentType = "FREQUENCY"
	SurveyResponseResultV1SegmentTypeGENDER          SurveyResponseResultV1SegmentType = "GENDER"
	SurveyResponseResultV1SegmentTypeHOUSEHOLDINCOME SurveyResponseResultV1SegmentType = "HOUSEHOLD_INCOME"
	SurveyResponseResultV1SegmentTypeOVERALL         SurveyResponseResultV1SegmentType = "OVERALL"
)

// Defines values for SurveyResponseResultV1M1SegmentType.
const (
	SurveyResponseResultV1M1SegmentTypeAGE             SurveyResponseResultV1M1SegmentType = "AGE"
	SurveyResponseResultV1M1SegmentTypeAUDIENCES       SurveyResponseResultV1M1SegmentType = "AUDIENCES"
	SurveyResponseResultV1M1SegmentTypeCHANNEL         SurveyResponseResultV1M1SegmentType = "CHANNEL"
	SurveyResponseResultV1M1SegmentTypeFREQUENCY       SurveyResponseResultV1M1SegmentType = "FREQUENCY"
	SurveyResponseResultV1M1SegmentTypeGENDER          SurveyResponseResultV1M1SegmentType = "GENDER"
	SurveyResponseResultV1M1SegmentTypeHOUSEHOLDINCOME SurveyResponseResultV1M1SegmentType = "HOUSEHOLD_INCOME"
	SurveyResponseResultV1M1SegmentTypeOVERALL         SurveyResponseResultV1M1SegmentType = "OVERALL"
)

// Defines values for SurveyResponseResultV1M2SegmentType.
const (
	AGE             SurveyResponseResultV1M2SegmentType = "AGE"
	AUDIENCES       SurveyResponseResultV1M2SegmentType = "AUDIENCES"
	CHANNEL         SurveyResponseResultV1M2SegmentType = "CHANNEL"
	FREQUENCY       SurveyResponseResultV1M2SegmentType = "FREQUENCY"
	GENDER          SurveyResponseResultV1M2SegmentType = "GENDER"
	HOUSEHOLDINCOME SurveyResponseResultV1M2SegmentType = "HOUSEHOLD_INCOME"
	OVERALL         SurveyResponseResultV1M2SegmentType = "OVERALL"
)

// Defines values for SurveyStatusV1.
const (
	SurveyStatusV1AVAILABLE SurveyStatusV1 = "AVAILABLE"
	SurveyStatusV1DRAFT     SurveyStatusV1 = "DRAFT"
	SurveyStatusV1INUSE     SurveyStatusV1 = "IN_USE"
)

// Defines values for UpdateDSPAudienceResearchStudyV1M2StudyResultStatus.
const (
	UpdateDSPAudienceResearchStudyV1M2StudyResultStatusAVAILABLE UpdateDSPAudienceResearchStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for UpdateDSPCreativeTestingStudyV1M2StudyResultStatus.
const (
	UpdateDSPCreativeTestingStudyV1M2StudyResultStatusAVAILABLE UpdateDSPCreativeTestingStudyV1M2StudyResultStatus = "AVAILABLE"
)

// Defines values for VendorProductTypeV1.
const (
	VendorProductTypeV1SHOPPERPANEL VendorProductTypeV1 = "SHOPPER_PANEL"
)

// Defines values for VendorProductTypeV1M1.
const (
	VendorProductTypeV1M1BRANDLIFTINSIGHTS  VendorProductTypeV1M1 = "BRAND_LIFT_INSIGHTS"
	VendorProductTypeV1M1DASH               VendorProductTypeV1M1 = "DASH"
	VendorProductTypeV1M1DIGITALBRANDEFFECT VendorProductTypeV1M1 = "DIGITAL_BRAND_EFFECT"
	VendorProductTypeV1M1DYNATA             VendorProductTypeV1M1 = "DYNATA"
	VendorProductTypeV1M1EXPANDEDVIEWLITE   VendorProductTypeV1M1 = "EXPANDED_VIEW_LITE"
	VendorProductTypeV1M1LUCID              VendorProductTypeV1M1 = "LUCID"
	VendorProductTypeV1M1MACROMILL          VendorProductTypeV1M1 = "MACROMILL"
	VendorProductTypeV1M1SHOPPERPANEL       VendorProductTypeV1M1 = "SHOPPER_PANEL"
	VendorProductTypeV1M1UPWAVE             VendorProductTypeV1M1 = "UPWAVE"
)

// Defines values for VendorTypeV1.
const (
	VendorTypeV1AMAZON VendorTypeV1 = "AMAZON"
)

// Defines values for VendorTypeV1M1.
const (
	VendorTypeV1M1AMAZON    VendorTypeV1M1 = "AMAZON"
	VendorTypeV1M1DYNATA    VendorTypeV1M1 = "DYNATA"
	VendorTypeV1M1KANTAR    VendorTypeV1M1 = "KANTAR"
	VendorTypeV1M1LUCID     VendorTypeV1M1 = "LUCID"
	VendorTypeV1M1MACROMILL VendorTypeV1M1 = "MACROMILL"
	VendorTypeV1M1NIELSEN   VendorTypeV1M1 = "NIELSEN"
	VendorTypeV1M1UPWAVE    VendorTypeV1M1 = "UPWAVE"
)

// Defines values for VendorTypeV1M2.
const (
	VendorTypeV1M2AMAZON             VendorTypeV1M2 = "AMAZON"
	VendorTypeV1M2OMNICHANNELMETRICS VendorTypeV1M2 = "OMNICHANNEL_METRICS"
)

// Defines values for VendorTypeV1M3.
const (
	VendorTypeV1M3AMAZON             VendorTypeV1M3 = "AMAZON"
	VendorTypeV1M3DYNATA             VendorTypeV1M3 = "DYNATA"
	VendorTypeV1M3KANTAR             VendorTypeV1M3 = "KANTAR"
	VendorTypeV1M3LUCID              VendorTypeV1M3 = "LUCID"
	VendorTypeV1M3MACROMILL          VendorTypeV1M3 = "MACROMILL"
	VendorTypeV1M3NIELSEN            VendorTypeV1M3 = "NIELSEN"
	VendorTypeV1M3OMNICHANNELMETRICS VendorTypeV1M3 = "OMNICHANNEL_METRICS"
	VendorTypeV1M3UPWAVE             VendorTypeV1M3 = "UPWAVE"
)

// AdTypeV1 Supported values are DSP(Demand Side Platform).
type AdTypeV1 string

// AssetTypeV1M2 The type of the Asset.
type AssetTypeV1M2 string

// AssetV1M2 The Amazon Creative Asset Library asset identifier. Refer https://advertising.amazon.com/API/docs/en-us/creative-asset-library
type AssetV1M2 struct {
	// AssetId The assetId.
	AssetId *string `json:"assetId,omitempty"`

	// AssetType The type of the Asset.
	AssetType *AssetTypeV1M2 `json:"assetType,omitempty"`

	// Version The version of the asset.
	Version *string `json:"version,omitempty"`
}

// AudienceGroupV1M2 The model for holding Audiece selection within a group. The expression within an audience group will be evaluated using the IntraGroupOperator. The InterGroupOperator will be applied on the output of one audience group with another audience group.
type AudienceGroupV1M2 struct {
	// AudienceSegments List of audience segments in this group.
	AudienceSegments *[]AudienceSegmentV1M2 `json:"audienceSegments,omitempty"`

	// InterGroupOperator The operator used in Audience Segment Selection to determine which operation needs to be applied across selected segments. AND operator takes priority over OR operator.
	InterGroupOperator *AudienceSelectionOperatorV1M2 `json:"interGroupOperator,omitempty"`

	// IntraGroupOperator The operator used in Audience Segment Selection to determine which operation needs to be applied across selected segments. AND operator takes priority over OR operator.
	IntraGroupOperator *AudienceSelectionOperatorV1M2 `json:"intraGroupOperator,omitempty"`
}

// AudienceResearchStudyResultV1M2 The result of Audience Research study.
type AudienceResearchStudyResultV1M2 struct {
	// StudyId The canonical Id of Study.
	StudyId *string `json:"studyId,omitempty"`

	// SurveyResponses Detailed response rate for each response in Survey question aggregated by different segments.
	SurveyResponses *[]SurveyResponseResultV1 `json:"surveyResponses,omitempty"`

	// TotalResponses Total number of responses received in the Survey.
	TotalResponses *float32 `json:"totalResponses,omitempty"`
}

// AudienceSegmentV1M2 The model for holding an Audience Segment.
type AudienceSegmentV1M2 struct {
	// SegmentId ID for the audience segment. This ID can be fetched from these APIs- https://advertising.amazon.com/API/docs/en-us/audiences/#/Discovery
	SegmentId *string `json:"segmentId,omitempty"`
}

// AudienceSelectionOperatorV1M2 The operator used in Audience Segment Selection to determine which operation needs to be applied across selected segments. AND operator takes priority over OR operator.
type AudienceSelectionOperatorV1M2 string

// AudienceTargetingGroupV1M2 The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
type AudienceTargetingGroupV1M2 struct {
	// ExcludedAudienceGroups List of audience groups to be excluded from the targeted audience.
	ExcludedAudienceGroups *[]AudienceGroupV1M2 `json:"excludedAudienceGroups,omitempty"`

	// IncludedAudienceGroups List of audience groups to be included in the targeted audience.
	IncludedAudienceGroups *[]AudienceGroupV1M2 `json:"includedAudienceGroups,omitempty"`
}

// BaseEligibilityRequestV1 The request object of measurement eligibility check.
type BaseEligibilityRequestV1 struct {
	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1 `json:"vendorTypeFilters,omitempty"`
}

// BaseEligibilityRequestV1M1 The request object of measurement eligibility check.
type BaseEligibilityRequestV1M1 struct {
	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M1 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M1 `json:"vendorTypeFilters,omitempty"`
}

// BaseEligibilityRequestV1M2 The request object of measurement eligibility check.
type BaseEligibilityRequestV1M2 struct {
	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M2 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M2 `json:"vendorTypeFilters,omitempty"`
}

// BaseEligibilityRequestV1M3 The request object of measurement eligibility check.
type BaseEligibilityRequestV1M3 struct {
	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M3 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M3 `json:"vendorTypeFilters,omitempty"`
}

// BaseStudyV1 The base study object.
type BaseStudyV1 struct {
	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *BaseStudyV1StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// BaseStudyV1StudyResultStatus The status of result of the study.
type BaseStudyV1StudyResultStatus string

// BaseStudyV1M1 The base study object.
type BaseStudyV1M1 struct {
	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time          `json:"lastUpdatedDate,omitempty"`
	Links           *[]ResourceLinkV1M1 `json:"links,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *BaseStudyV1M1StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// BaseStudyV1M1StudyResultStatus The status of result of the study.
type BaseStudyV1M1StudyResultStatus string

// BaseStudyV1M2 The base study object.
type BaseStudyV1M2 struct {
	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *BaseStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// BaseStudyV1M2StudyResultStatus The status of result of the study.
type BaseStudyV1M2StudyResultStatus string

// BenchmarkCategoryV1 The study benchmark product category.
type BenchmarkCategoryV1 string

// BrandLiftStudyResultV1 The result of Brand Lift study.
type BrandLiftStudyResultV1 struct {
	// BrandLiftSummary Summary of Brand Lift achieved for each objective.
	BrandLiftSummary *[]BrandLiftSummaryV1 `json:"brandLiftSummary,omitempty"`

	// StudyId The canonical Id of Study.
	StudyId *string `json:"studyId,omitempty"`

	// SurveyResponses Detailed response rate for each response in Survey question aggregated by different segments.
	SurveyResponses *[]SurveyResponseResultV1 `json:"surveyResponses,omitempty"`

	// TotalResponses Total number of responses received in the Survey.
	TotalResponses *float32 `json:"totalResponses,omitempty"`
}

// BrandLiftStudyResultV1M1 The result of Brand Lift study.
type BrandLiftStudyResultV1M1 struct {
	// BrandLiftSummary Summary of Brand Lift achieved for each objective.
	BrandLiftSummary *[]BrandLiftSummaryV1M1 `json:"brandLiftSummary,omitempty"`

	// StudyId The canonical Id of Study.
	StudyId *string `json:"studyId,omitempty"`

	// SurveyResponses Detailed response rate for each response in Survey question aggregated by different segments.
	SurveyResponses *[]SurveyResponseResultV1M1 `json:"surveyResponses,omitempty"`

	// TotalResponses Total number of responses received in the Survey.
	TotalResponses *float32 `json:"totalResponses,omitempty"`
}

// BrandLiftSummaryV1 Summary of Brand Lift achieved for an objective.
type BrandLiftSummaryV1 struct {
	// AdExposedGroupRate Ad exposed group response rate.
	AdExposedGroupRate *float64 `json:"adExposedGroupRate,omitempty"`

	// BenchmarkLiftRate The benchmark lift rate for the selected product category in the Survey.
	BenchmarkLiftRate *float64 `json:"benchmarkLiftRate,omitempty"`

	// ControlGroupRate Control group response rate.
	ControlGroupRate *float64 `json:"controlGroupRate,omitempty"`

	// QualifyingResponses Qualifying responses aggregated to measure the Brand Lift.
	QualifyingResponses *[]string `json:"qualifyingResponses,omitempty"`

	// QuestionObjective The survey objective.
	QuestionObjective *SurveyQuestionObjectiveTypeV1 `json:"questionObjective,omitempty"`

	// QuestionText Text of the Survey question.
	QuestionText *string `json:"questionText,omitempty"`

	// StatisticalSignificance The significance percentage of achieved Brand Lift.
	StatisticalSignificance *float64 `json:"statisticalSignificance,omitempty"`
}

// BrandLiftSummaryV1M1 Summary of Brand Lift achieved for an objective.
type BrandLiftSummaryV1M1 struct {
	// AdExposedGroupRate Ad exposed group response rate.
	AdExposedGroupRate *float32 `json:"adExposedGroupRate,omitempty"`

	// BenchmarkLiftRate The benchmark lift rate for the selected product category in the Survey.
	BenchmarkLiftRate *float32 `json:"benchmarkLiftRate,omitempty"`

	// ControlGroupRate Control group response rate.
	ControlGroupRate *float32 `json:"controlGroupRate,omitempty"`

	// QualifyingResponses Qualifying responses aggregated to measure the Brand Lift.
	QualifyingResponses *[]string `json:"qualifyingResponses,omitempty"`

	// QuestionObjective The survey objective.
	QuestionObjective *SurveyQuestionObjectiveTypeV1M1 `json:"questionObjective,omitempty"`

	// QuestionText Text of the Survey question.
	QuestionText *string `json:"questionText,omitempty"`

	// StatisticalSignificance The significance percentage of achieved Brand Lift.
	StatisticalSignificance *float32 `json:"statisticalSignificance,omitempty"`
}

// CreateDSPAudienceResearchStudyV1M2 defines model for CreateDSPAudienceResearchStudyV1M2.
type CreateDSPAudienceResearchStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *CreateDSPAudienceResearchStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// CreateDSPAudienceResearchStudyV1M2StudyResultStatus The status of result of the study.
type CreateDSPAudienceResearchStudyV1M2StudyResultStatus string

// CreateDSPCreativeTestingStudyV1M2 defines model for CreateDSPCreativeTestingStudyV1M2.
type CreateDSPCreativeTestingStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// Assets A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
	Assets *[]AssetV1M2 `json:"assets,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// ProductCategory Optional study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *CreateDSPCreativeTestingStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// CreateDSPCreativeTestingStudyV1M2StudyResultStatus The status of result of the study.
type CreateDSPCreativeTestingStudyV1M2StudyResultStatus string

// CreativeTestingStudyResultV1M2 The result of Creative Testing study.
type CreativeTestingStudyResultV1M2 struct {
	// StudyId The canonical Id of Study.
	StudyId *string `json:"studyId,omitempty"`

	// SurveyResponses Detailed response rate for each response in Survey question aggregated by different segments.
	SurveyResponses *[]SurveyResponseResultV1M2 `json:"surveyResponses,omitempty"`

	// TotalResponses Total number of responses received in the Survey.
	TotalResponses *float32 `json:"totalResponses,omitempty"`
}

// CuratedStudyResultV1 The response object for downloading curated study results.
type CuratedStudyResultV1 struct {
	// FileDownloadUrl A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
	FileDownloadUrl *string `json:"fileDownloadUrl,omitempty"`

	// FileType The file type of the curated results file.
	FileType *CuratedStudyResultV1FileType `json:"fileType,omitempty"`
}

// CuratedStudyResultV1FileType The file type of the curated results file.
type CuratedStudyResultV1FileType string

// CustomSurveyQuestionV1 The templated measurement survey question.
type CustomSurveyQuestionV1 struct {
	// QuestionText The survey question text.
	QuestionText *string   `json:"questionText,omitempty"`
	Responses    *[]string `json:"responses,omitempty"`

	// Type The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response.
	Type *SurveyQuestionTypeV1 `json:"type,omitempty"`
}

// DSPAudienceResearchEligibilityDataV1M2 The audience research study eligibility data.
type DSPAudienceResearchEligibilityDataV1M2 struct {
	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`
}

// DSPAudienceResearchEligibilityRequestV1M2 defines model for DSPAudienceResearchEligibilityRequestV1M2.
type DSPAudienceResearchEligibilityRequestV1M2 struct {
	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M2 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M2 `json:"vendorTypeFilters,omitempty"`
}

// DSPAudienceResearchMetadataV1M2 The basic model for all DSP AUDIENCE_RESEARCH objective studies.
type DSPAudienceResearchMetadataV1M2 struct {
	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`
}

// DSPAudienceResearchStudyV1M2 defines model for DSPAudienceResearchStudyV1M2.
type DSPAudienceResearchStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPAudienceResearchStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// DSPAudienceResearchStudyV1M2StudyResultStatus The status of result of the study.
type DSPAudienceResearchStudyV1M2StudyResultStatus string

// DSPBrandLiftEligibilityDataV1 The campaign study eligibility data.
type DSPBrandLiftEligibilityDataV1 struct {
	// CurrentStudyId Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`
}

// DSPBrandLiftEligibilityRequestV1 defines model for DSPBrandLiftEligibilityRequestV1.
type DSPBrandLiftEligibilityRequestV1 struct {
	// CurrentStudyId Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1 `json:"fundingTypeFilters,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1 `json:"vendorTypeFilters,omitempty"`
}

// DSPBrandLiftEligibilityRequestV1M1 defines model for DSPBrandLiftEligibilityRequestV1M1.
type DSPBrandLiftEligibilityRequestV1M1 struct {
	// CurrentStudyId Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M1 `json:"fundingTypeFilters,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M1 `json:"vendorTypeFilters,omitempty"`
}

// DSPBrandLiftMetadataV1 The basic model for all DSP BRAND_LIFT objective studies.
type DSPBrandLiftMetadataV1 struct {
	// BenchmarkCategory The study benchmark product category.
	BenchmarkCategory *BenchmarkCategoryV1 `json:"benchmarkCategory,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`
}

// DSPBrandLiftMetadataV1M1 The basic model for all DSP BRAND_LIFT objective studies.
type DSPBrandLiftMetadataV1M1 struct {
	// BenchmarkCategory The study benchmark product category.
	BenchmarkCategory *BenchmarkCategoryV1 `json:"benchmarkCategory,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// Verb The verb that will be used in the applicable survey questions to construct the question text.
	Verb *string `json:"verb,omitempty"`
}

// DSPBrandLiftStudyV1 defines model for DSPBrandLiftStudyV1.
type DSPBrandLiftStudyV1 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BenchmarkCategory The study benchmark product category.
	BenchmarkCategory *BenchmarkCategoryV1 `json:"benchmarkCategory,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPBrandLiftStudyV1StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// DSPBrandLiftStudyV1StudyResultStatus The status of result of the study.
type DSPBrandLiftStudyV1StudyResultStatus string

// DSPBrandLiftStudyV1M1 defines model for DSPBrandLiftStudyV1M1.
type DSPBrandLiftStudyV1M1 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BenchmarkCategory The study benchmark product category.
	BenchmarkCategory *BenchmarkCategoryV1 `json:"benchmarkCategory,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time          `json:"lastUpdatedDate,omitempty"`
	Links           *[]ResourceLinkV1M1 `json:"links,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPBrandLiftStudyV1M1StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`

	// Verb The verb that will be used in the applicable survey questions to construct the question text.
	Verb *string `json:"verb,omitempty"`
}

// DSPBrandLiftStudyV1M1StudyResultStatus The status of result of the study.
type DSPBrandLiftStudyV1M1StudyResultStatus string

// DSPCampaignMeasurementMetadataV1 The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
type DSPCampaignMeasurementMetadataV1 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`
}

// DSPCampaignMeasurementMetadataV1M1 The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
type DSPCampaignMeasurementMetadataV1M1 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`
}

// DSPCampaignPlanningMetadataV1M2 The basic model for all DSP CAMPAIGN_PLANNING objective studies.
type DSPCampaignPlanningMetadataV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`
}

// DSPCreativeTestingEligibilityDataV1M2 The creative testing study eligibility data.
type DSPCreativeTestingEligibilityDataV1M2 struct {
	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`
}

// DSPCreativeTestingEligibilityRequestV1M2 defines model for DSPCreativeTestingEligibilityRequestV1M2.
type DSPCreativeTestingEligibilityRequestV1M2 struct {
	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M2 `json:"fundingTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M2 `json:"vendorTypeFilters,omitempty"`
}

// DSPCreativeTestingMetadataV1M2 The basic model for all DSP CREATIVE_TESTING objective studies.
type DSPCreativeTestingMetadataV1M2 struct {
	// Assets A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
	Assets *[]AssetV1M2 `json:"assets,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// ProductCategory Optional study product category.
	ProductCategory *string `json:"productCategory,omitempty"`
}

// DSPCreativeTestingStudyV1M2 defines model for DSPCreativeTestingStudyV1M2.
type DSPCreativeTestingStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// Assets A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
	Assets *[]AssetV1M2 `json:"assets,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// ProductCategory Optional study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPCreativeTestingStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// DSPCreativeTestingStudyV1M2StudyResultStatus The status of result of the study.
type DSPCreativeTestingStudyV1M2StudyResultStatus string

// DSPOmnichannelMetricsEligibilityDataV1M2 The campaign study eligibility data.
type DSPOmnichannelMetricsEligibilityDataV1M2 struct {
	// BrandIds A list of canonical brand identifiers.
	BrandIds *[]string `json:"brandIds,omitempty"`

	// CurrentStudyId Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`
}

// DSPOmnichannelMetricsEligibilityRequestV1M2 defines model for DSPOmnichannelMetricsEligibilityRequestV1M2.
type DSPOmnichannelMetricsEligibilityRequestV1M2 struct {
	// BrandIds A list of canonical brand identifiers.
	BrandIds *[]string `json:"brandIds,omitempty"`

	// CurrentStudyId Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M2 `json:"fundingTypeFilters,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M2 `json:"vendorTypeFilters,omitempty"`
}

// DSPOmnichannelMetricsEligibilityRequestV1M3 defines model for DSPOmnichannelMetricsEligibilityRequestV1M3.
type DSPOmnichannelMetricsEligibilityRequestV1M3 struct {
	// BrandIds A list of canonical brand identifiers.
	BrandIds *[]string `json:"brandIds,omitempty"`

	// CurrentStudyId Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
	CurrentStudyId *string `json:"currentStudyId,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the eligibility check.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M3 `json:"fundingTypeFilters,omitempty"`

	// OrderIds A list of canonical order identifiers. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M3 `json:"vendorTypeFilters,omitempty"`
}

// DSPOmnichannelMetricsMetadataV1M2 The basic model for all DSP OMNICHANNEL_METRICS objective studies.
type DSPOmnichannelMetricsMetadataV1M2 struct {
	// BrandIds A list of canonical brand ids to be tracked for off-Amazon conversions.
	BrandIds *[]string `json:"brandIds,omitempty"`
}

// DSPOmnichannelMetricsStudyV1M2 defines model for DSPOmnichannelMetricsStudyV1M2.
type DSPOmnichannelMetricsStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BrandIds A list of canonical brand ids to be tracked for off-Amazon conversions.
	BrandIds *[]string `json:"brandIds,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPOmnichannelMetricsStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// DSPOmnichannelMetricsStudyV1M2StudyResultStatus The status of result of the study.
type DSPOmnichannelMetricsStudyV1M2StudyResultStatus string

// DSPOmnichannelMetricsStudyV1M3 defines model for DSPOmnichannelMetricsStudyV1M3.
type DSPOmnichannelMetricsStudyV1M3 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BrandIds A list of canonical brand ids to be tracked for off-Amazon conversions.
	BrandIds *[]string `json:"brandIds,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// Id The study canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time          `json:"lastUpdatedDate,omitempty"`
	Links           *[]ResourceLinkV1M1 `json:"links,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// OrderIds A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// RejectionReasons List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
	// Deprecated:
	RejectionReasons *[]string `json:"rejectionReasons,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *DSPOmnichannelMetricsStudyV1M3StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *StudySubmissionTypeV1 `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// DSPOmnichannelMetricsStudyV1M3StudyResultStatus The status of result of the study.
type DSPOmnichannelMetricsStudyV1M3StudyResultStatus string

// EligibilityFieldV1 Fields that will be checked as part of eligibility API call.
type EligibilityFieldV1 string

// EligibilityFieldV1M2 Fields that will be checked as part of eligibility API call.
type EligibilityFieldV1M2 string

// EligibilityIssueSeverityV1 Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored.
type EligibilityIssueSeverityV1 string

// EligibilityIssueV1 The list of eligibility issues.
type EligibilityIssueV1 struct {
	// Code An enumerated issue code for machine use.
	Code *string `json:"code,omitempty"`

	// Field Fields that will be checked as part of eligibility API call.
	Field *EligibilityFieldV1 `json:"field,omitempty"`

	// Message A human-readable description of the issue with suggestions on how to resolve the issue.
	Message *string `json:"message,omitempty"`

	// Severity Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored.
	Severity *EligibilityIssueSeverityV1 `json:"severity,omitempty"`
}

// EligibilityIssueV1M2 The list of eligibility issues.
type EligibilityIssueV1M2 struct {
	// Code An enumerated issue code for machine use.
	Code *string `json:"code,omitempty"`

	// Field Fields that will be checked as part of eligibility API call.
	Field *EligibilityFieldV1M2 `json:"field,omitempty"`

	// Message A human-readable description of the issue with suggestions on how to resolve the issue.
	Message *string `json:"message,omitempty"`

	// Severity Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored.
	Severity *EligibilityIssueSeverityV1 `json:"severity,omitempty"`
}

// EligibilityMetadataV1 The eligibility metadata.
type EligibilityMetadataV1 struct {
	// Budget The total budget. Expressed in dollars.
	Budget *float64 `json:"budget,omitempty"`

	// EndDate The latest end date of the associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	EndDate *time.Time `json:"endDate,omitempty"`

	// FlightLength The flight length of the associated orders. Expressed in days.
	FlightLength *int `json:"flightLength,omitempty"`

	// Impressions The total estimated impressions.
	Impressions *int64 `json:"impressions,omitempty"`

	// StartDate The earliest start date of associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	StartDate *time.Time `json:"startDate,omitempty"`
}

// EligibilityResponseV1 The eligibility check response object.
type EligibilityResponseV1 struct {
	// Metadata The eligibility metadata.
	Metadata                   *EligibilityMetadataV1        `json:"metadata,omitempty"`
	NextToken                  *string                       `json:"nextToken,omitempty"`
	VendorProductEligibilities *[]VendorProductEligibilityV1 `json:"vendorProductEligibilities,omitempty"`
}

// EligibilityResponseV1M2 The eligibility check response object.
type EligibilityResponseV1M2 struct {
	// Metadata The eligibility metadata.
	Metadata                   *EligibilityMetadataV1          `json:"metadata,omitempty"`
	NextToken                  *string                         `json:"nextToken,omitempty"`
	VendorProductEligibilities *[]VendorProductEligibilityV1M2 `json:"vendorProductEligibilities,omitempty"`
}

// EligibilityStatusV1 Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
type EligibilityStatusV1 string

// ErrorV1 The error response object.
type ErrorV1 struct {
	Errors *[]SubErrorV1 `json:"errors,omitempty"`

	// Message A human-readable description of the response.
	Message *string `json:"message,omitempty"`

	// RequestId Request Id that uniquely identifies your request.
	RequestId *string `json:"requestId,omitempty"`
}

// FundingTypeV1 The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
type FundingTypeV1 string

// FundingTypeV1M1 The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
type FundingTypeV1M1 string

// FundingTypeV1M2 The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
type FundingTypeV1M2 string

// FundingTypeV1M3 The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
type FundingTypeV1M3 string

// GridQuestionResponsesV1M1 The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
type GridQuestionResponsesV1M1 struct {
	Columns *[]SurveyQuestionPlaceholderFieldValueV1 `json:"columns,omitempty"`
	Rows    *[]SurveyQuestionPlaceholderFieldValueV1 `json:"rows,omitempty"`
}

// MeasurementBaseStudy The base study object.
type MeasurementBaseStudy struct {
	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Link The link that can be used to access corresponding resources in advertising portal.
	Link *MeasurementStudiesResourceLink `json:"link,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update. Consider upgrading API version if enum `OTHER` is received.
	Status *MeasurementStudyStatus `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]MeasurementStudyStatusReason `json:"statusReasons,omitempty"`

	// StudyId The study canonical identifier. Immutable field.
	StudyId *string `json:"studyId,omitempty"`

	// StudyResultStatus The status of the result of the study. Consider upgrading API version if enum `OTHER` is received.
	StudyResultStatus *MeasurementStudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift, reach and frequency, and location lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *MeasurementStudySubmissionType `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// MeasurementBrandLiftStudy defines model for MeasurementBrandLiftStudy.
type MeasurementBrandLiftStudy struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BenchmarkCategory The study benchmark product category. Consider upgrading API version if enum `OTHER` is received.
	BenchmarkCategory *MeasurementStudiesBenchmarkCategory `json:"benchmarkCategory,omitempty"`

	// BrandEntityId The brand entity Id to be measured by the study.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// CampaignIds A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
	CampaignIds *[]string `json:"campaignIds,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Link The link that can be used to access corresponding resources in advertising portal.
	Link *MeasurementStudiesResourceLink `json:"link,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// OrderIds A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update. Consider upgrading API version if enum `OTHER` is received.
	Status *MeasurementStudyStatus `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]MeasurementStudyStatusReason `json:"statusReasons,omitempty"`

	// StudyId The study canonical identifier. Immutable field.
	StudyId *string `json:"studyId,omitempty"`

	// StudyResultStatus The status of the result of the study. Consider upgrading API version if enum `OTHER` is received.
	StudyResultStatus *MeasurementStudyResultStatus `json:"studyResultStatus,omitempty"`

	// SubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift, reach and frequency, and location lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
	SubmissionType *MeasurementStudySubmissionType `json:"submissionType,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`

	// Verb The verb that will be used in the applicable survey questions to construct the question text.
	Verb *string `json:"verb,omitempty"`
}

// MeasurementBrandLiftStudyMetadata The basic model for all BRAND_LIFT studies.
type MeasurementBrandLiftStudyMetadata struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// BenchmarkCategory The study benchmark product category. Consider upgrading API version if enum `OTHER` is received.
	BenchmarkCategory *MeasurementStudiesBenchmarkCategory `json:"benchmarkCategory,omitempty"`

	// BrandEntityId The brand entity Id to be measured by the study.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// CampaignIds A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
	CampaignIds *[]string `json:"campaignIds,omitempty"`

	// ExcludedLineItemIds A list of canonical lineItem identifiers that are excluded from the study.
	ExcludedLineItemIds *[]string `json:"excludedLineItemIds,omitempty"`

	// OrderIds A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
	OrderIds *[]string `json:"orderIds,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// Verb The verb that will be used in the applicable survey questions to construct the question text.
	Verb *string `json:"verb,omitempty"`
}

// MeasurementCountryV1 The measurement country.
type MeasurementCountryV1 string

// MeasurementGoalV1 The measurement budget optimization goal type goal.
type MeasurementGoalV1 string

// MeasurementLocaleV1 The measurement locale.
type MeasurementLocaleV1 string

// MeasurementMarketplaceV1 The marketplace with corresponding rules.
type MeasurementMarketplaceV1 struct {
	// Country The measurement country.
	Country *MeasurementCountryV1 `json:"country,omitempty"`

	// MinimumBudget The minimum budget. Expressed in dollars.
	MinimumBudget *float64 `json:"minimumBudget,omitempty"`

	// MinimumImpressions The minimum impressions.
	MinimumImpressions *int64                 `json:"minimumImpressions,omitempty"`
	SupportedLocales   *[]MeasurementLocaleV1 `json:"supportedLocales,omitempty"`
}

// MeasurementStudiesBenchmarkCategory The study benchmark product category. Consider upgrading API version if enum `OTHER` is received.
type MeasurementStudiesBenchmarkCategory string

// MeasurementStudiesCustomSurveyQuestion The templated measurement survey question.
type MeasurementStudiesCustomSurveyQuestion struct {
	// QuestionText The survey question text.
	QuestionText *string                                                  `json:"questionText,omitempty"`
	Responses    *[]MeasurementStudiesSurveyQuestionPlaceholderFieldValue `json:"responses,omitempty"`

	// Type The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response. Consider upgrading API version if enum `OTHER` is received.
	Type *MeasurementStudiesSurveyQuestionType `json:"type,omitempty"`
}

// MeasurementStudiesError The error response object.
type MeasurementStudiesError struct {
	Errors *[]MeasurementStudiesSubError `json:"errors,omitempty"`

	// Message A human-readable description of the response.
	Message *string `json:"message,omitempty"`

	// RequestId Request Id that uniquely identifies your request.
	RequestId *string `json:"requestId,omitempty"`
}

// MeasurementStudiesGridQuestionResponses The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
type MeasurementStudiesGridQuestionResponses struct {
	Columns *[]MeasurementStudiesSurveyQuestionPlaceholderFieldValue `json:"columns,omitempty"`
	Rows    *[]MeasurementStudiesSurveyQuestionPlaceholderFieldValue `json:"rows,omitempty"`
}

// MeasurementStudiesResourceLink The link that can be used to access corresponding resources in advertising portal.
type MeasurementStudiesResourceLink struct {
	// Name The resource name.
	Name *string `json:"name,omitempty"`

	// Url The resource url.
	Url *string `json:"url,omitempty"`
}

// MeasurementStudiesSubError The sub error object.
type MeasurementStudiesSubError struct {
	ErrorType string  `json:"errorType"`
	FieldName *string `json:"fieldName,omitempty"`
	Message   string  `json:"message"`
}

// MeasurementStudiesSurvey The measurement survey.
type MeasurementStudiesSurvey struct {
	// CustomQuestions A list of custom survey questions.
	CustomQuestions *[]MeasurementStudiesCustomSurveyQuestion `json:"customQuestions,omitempty"`

	// Status The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it's associated with a study.
	Status *MeasurementStudiesSurveyStatus `json:"status,omitempty"`

	// StudyId The associated study identifier. Survey needs to be created prior to the study creation.
	StudyId *string `json:"studyId,omitempty"`

	// SurveyId The survey canonical identifier. Immutable field.
	SurveyId *string `json:"surveyId,omitempty"`

	// TemplatedShortQuestions A list of templated survey short questions.
	TemplatedShortQuestions *[]MeasurementStudiesTemplatedSurveyShortQuestion `json:"templatedShortQuestions,omitempty"`

	// VendorProductId The vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// MeasurementStudiesSurveyQuestionPlaceholder The object specifying a placeholder in Survey question.
type MeasurementStudiesSurveyQuestionPlaceholder struct {
	// FieldName The survey question placeholder field name.
	FieldName *string `json:"fieldName,omitempty"`

	// FieldValues The survey question placeholder field values.
	FieldValues *[]MeasurementStudiesSurveyQuestionPlaceholderFieldValue `json:"fieldValues,omitempty"`
}

// MeasurementStudiesSurveyQuestionPlaceholderFieldValue defines model for MeasurementStudiesSurveyQuestionPlaceholderFieldValue.
type MeasurementStudiesSurveyQuestionPlaceholderFieldValue struct {
	// IsQualifying This is only required if the corresponding field is 'response', this will help to define if the response value will be counted as a positive one in the study report.
	IsQualifying *bool `json:"isQualifying,omitempty"`

	// Value The survey question placeholder field value.
	Value *string `json:"value,omitempty"`
}

// MeasurementStudiesSurveyQuestionType The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response. Consider upgrading API version if enum `OTHER` is received.
type MeasurementStudiesSurveyQuestionType string

// MeasurementStudiesSurveyStatus The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it's associated with a study.
type MeasurementStudiesSurveyStatus string

// MeasurementStudiesTemplatedSurveyShortQuestion The templated measurement survey question.
type MeasurementStudiesTemplatedSurveyShortQuestion struct {
	// GridQuestionResponse The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
	GridQuestionResponse *MeasurementStudiesGridQuestionResponses `json:"gridQuestionResponse,omitempty"`

	// Placeholders List of question placeholders
	Placeholders *[]MeasurementStudiesSurveyQuestionPlaceholder `json:"placeholders,omitempty"`

	// SurveyQuestionTemplateId The survey question template canonical identifier.
	SurveyQuestionTemplateId *string `json:"surveyQuestionTemplateId,omitempty"`
}

// MeasurementStudyResultStatus The status of the result of the study. Consider upgrading API version if enum `OTHER` is received.
type MeasurementStudyResultStatus string

// MeasurementStudyStatus The study status. Only required if study is in DRAFT as part of study creation/update. Consider upgrading API version if enum `OTHER` is received.
type MeasurementStudyStatus string

// MeasurementStudyStatusReason Measurement study status reason.
type MeasurementStudyStatusReason struct {
	// MeasurementStudyStatusReasonType Measurement study reason type. Consider upgrading API version if enum OTHER is received.
	MeasurementStudyStatusReasonType *MeasurementStudyStatusReasonType `json:"measurementStudyStatusReasonType,omitempty"`

	// StatusReasonDescription Human readable description of status reason.
	StatusReasonDescription *string `json:"statusReasonDescription,omitempty"`
}

// MeasurementStudyStatusReasonType Measurement study reason type. Consider upgrading API version if enum OTHER is received.
type MeasurementStudyStatusReasonType string

// MeasurementStudySubmissionType The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift, reach and frequency, and location lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
type MeasurementStudySubmissionType string

// OmnichannelMetricsBrandSearchRequestV1M2 The request object to fetch brands to be used in the OMNICHANNEL_METRICS vendor product.
type OmnichannelMetricsBrandSearchRequestV1M2 struct {
	// BrandIdFilter List of brandIds in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
	BrandIdFilter *[]string `json:"brandIdFilter,omitempty"`

	// BrandNameSearch Text to search for eligible brands in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
	BrandNameSearch *string `json:"brandNameSearch,omitempty"`
}

// OmnichannelMetricsBrandV1M2 defines model for OmnichannelMetricsBrandV1M2.
type OmnichannelMetricsBrandV1M2 struct {
	// Brand The brand name.
	Brand    *string `json:"brand,omitempty"`
	Category *string `json:"category,omitempty"`
	Company  *string `json:"company,omitempty"`

	// Id The brand canonical Id
	Id           *string `json:"id,omitempty"`
	MajorBrand   *string `json:"majorBrand,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Subcategory  *string `json:"subcategory,omitempty"`
}

// PaginatedBaseStudiesV1 A list of studies.
type PaginatedBaseStudiesV1 struct {
	Measurements *[]BaseStudyV1 `json:"measurements,omitempty"`
	NextToken    *string        `json:"nextToken,omitempty"`
}

// PaginatedBaseStudiesV1M1 A list of studies.
type PaginatedBaseStudiesV1M1 struct {
	Measurements *[]BaseStudyV1M1 `json:"measurements,omitempty"`
	NextToken    *string          `json:"nextToken,omitempty"`
}

// PaginatedDSPAudienceResearchStudiesV1M2 A list of audience research studies.
type PaginatedDSPAudienceResearchStudiesV1M2 struct {
	Measurements *[]DSPAudienceResearchStudyV1M2 `json:"measurements,omitempty"`
	NextToken    *string                         `json:"nextToken,omitempty"`
}

// PaginatedDSPBrandLiftStudiesV1 A list of studies.
type PaginatedDSPBrandLiftStudiesV1 struct {
	Measurements *[]DSPBrandLiftStudyV1 `json:"measurements,omitempty"`
	NextToken    *string                `json:"nextToken,omitempty"`
}

// PaginatedDSPBrandLiftStudiesV1M1 A list of studies.
type PaginatedDSPBrandLiftStudiesV1M1 struct {
	Measurements *[]DSPBrandLiftStudyV1M1 `json:"measurements,omitempty"`
	NextToken    *string                  `json:"nextToken,omitempty"`
}

// PaginatedDSPCreativeTestingStudiesV1M2 A list of creative testing studies.
type PaginatedDSPCreativeTestingStudiesV1M2 struct {
	Measurements *[]DSPCreativeTestingStudyV1M2 `json:"measurements,omitempty"`
	NextToken    *string                        `json:"nextToken,omitempty"`
}

// PaginatedDSPOmnichannelMetricsStudiesV1M2 A list of studies.
type PaginatedDSPOmnichannelMetricsStudiesV1M2 struct {
	Measurements *[]DSPOmnichannelMetricsStudyV1M2 `json:"measurements,omitempty"`
	NextToken    *string                           `json:"nextToken,omitempty"`
}

// PaginatedDSPOmnichannelMetricsStudiesV1M3 A list of studies.
type PaginatedDSPOmnichannelMetricsStudiesV1M3 struct {
	Measurements *[]DSPOmnichannelMetricsStudyV1M3 `json:"measurements,omitempty"`
	NextToken    *string                           `json:"nextToken,omitempty"`
}

// PaginatedOmnichannelMetricsBrandsV1M2 defines model for PaginatedOmnichannelMetricsBrandsV1M2.
type PaginatedOmnichannelMetricsBrandsV1M2 struct {
	Brands    *[]OmnichannelMetricsBrandV1M2 `json:"brands,omitempty"`
	NextToken *string                        `json:"nextToken,omitempty"`

	// TotalResults The total number of matched brands.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// PaginatedSurveyQuestionTemplatesV1 defines model for PaginatedSurveyQuestionTemplatesV1.
type PaginatedSurveyQuestionTemplatesV1 struct {
	NextToken               *string                     `json:"nextToken,omitempty"`
	SurveyQuestionTemplates *[]SurveyQuestionTemplateV1 `json:"surveyQuestionTemplates,omitempty"`

	// TotalResults The total number of templates.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// PaginatedSurveyQuestionTemplatesV1M1 defines model for PaginatedSurveyQuestionTemplatesV1M1.
type PaginatedSurveyQuestionTemplatesV1M1 struct {
	NextToken               *string                       `json:"nextToken,omitempty"`
	SurveyQuestionTemplates *[]SurveyQuestionTemplateV1M1 `json:"surveyQuestionTemplates,omitempty"`

	// TotalResults The total number of templates.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// PaginatedSurveysV1 A list of study surveys.
type PaginatedSurveysV1 struct {
	NextToken *string     `json:"nextToken,omitempty"`
	Surveys   *[]SurveyV1 `json:"surveys,omitempty"`
}

// PaginatedSurveysV1M1 A list of study surveys.
type PaginatedSurveysV1M1 struct {
	NextToken *string       `json:"nextToken,omitempty"`
	Surveys   *[]SurveyV1M1 `json:"surveys,omitempty"`
}

// PaginatedVendorProductPoliciesV1 A list of measurement vendor products policies.
type PaginatedVendorProductPoliciesV1 struct {
	NextToken *string                  `json:"nextToken,omitempty"`
	Policies  *[]VendorProductPolicyV1 `json:"policies,omitempty"`

	// TotalResults The total number of vendor products.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// PaginatedVendorProductPoliciesV1M1 A list of measurement vendor products policies.
type PaginatedVendorProductPoliciesV1M1 struct {
	NextToken *string                    `json:"nextToken,omitempty"`
	Policies  *[]VendorProductPolicyV1M1 `json:"policies,omitempty"`

	// TotalResults The total number of vendor products.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// PaginatedVendorProductsV1 A list of measurement vendor products.
type PaginatedVendorProductsV1 struct {
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of vendor products.
	TotalResults   *int32             `json:"totalResults,omitempty"`
	VendorProducts *[]VendorProductV1 `json:"vendorProducts,omitempty"`
}

// PaginatedVendorProductsV1M1 A list of measurement vendor products.
type PaginatedVendorProductsV1M1 struct {
	NextToken *string `json:"nextToken,omitempty"`

	// TotalResults The total number of vendor products.
	TotalResults   *int32               `json:"totalResults,omitempty"`
	VendorProducts *[]VendorProductV1M1 `json:"vendorProducts,omitempty"`
}

// PlaceholderValueTypeV1 The placeholder value type.
type PlaceholderValueTypeV1 string

// PlanningEligibilityDataV1M3 The planning eligibility data.
type PlanningEligibilityDataV1M3 struct {
	// AdvertiserId The advertiserId.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// Locale The measurement locale.
	Locale        *MeasurementLocaleV1         `json:"locale,omitempty"`
	OrderMetadata *[]PlanningOrderMetadataV1M3 `json:"orderMetadata,omitempty"`

	// StudyTypeFilters StudyType identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	StudyTypeFilters *[]StudyTypeV1M2 `json:"studyTypeFilters,omitempty"`
}

// PlanningEligibilityRequestV1M3 defines model for PlanningEligibilityRequestV1M3.
type PlanningEligibilityRequestV1M3 struct {
	// AdvertiserId The advertiserId.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M2 `json:"fundingTypeFilters,omitempty"`

	// Locale The measurement locale.
	Locale        *MeasurementLocaleV1         `json:"locale,omitempty"`
	OrderMetadata *[]PlanningOrderMetadataV1M3 `json:"orderMetadata,omitempty"`

	// StudyTypeFilters StudyType identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	StudyTypeFilters *[]StudyTypeV1M2 `json:"studyTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M2 `json:"vendorTypeFilters,omitempty"`
}

// PlanningEligibilityResponseV1M3 The planning eligibility response object.
type PlanningEligibilityResponseV1M3 struct {
	// Metadata The eligibility metadata.
	Metadata                   *EligibilityMetadataV1     `json:"metadata,omitempty"`
	NextToken                  *string                    `json:"nextToken,omitempty"`
	VendorProductEligibilities *[]PlanningEligibilityV1M3 `json:"vendorProductEligibilities,omitempty"`
}

// PlanningEligibilityV1M3 The request object of measurement eligibility check.
type PlanningEligibilityV1M3 struct {
	// Issues A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
	Issues *[]EligibilityIssueV1M2 `json:"issues,omitempty"`

	// Rank The lower the number, the more recommended the vendor product is.
	Rank *float32 `json:"rank,omitempty"`

	// Status Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
	Status *EligibilityStatusV1 `json:"status,omitempty"`

	// VendorProductId Vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// PlanningOrderMetadataV1M3 Metadata around a hypothetical order.
type PlanningOrderMetadataV1M3 struct {
	// Budget The total estimated budget of the order.
	Budget *float64 `json:"budget,omitempty"`

	// EndDate The estimated end date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	EndDate *time.Time `json:"endDate,omitempty"`

	// Goal The measurement budget optimization goal type goal.
	Goal *MeasurementGoalV1 `json:"goal,omitempty"`

	// Impressions The total estimated impressions of the order.
	Impressions *int64 `json:"impressions,omitempty"`

	// StartDate The estimated start date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	StartDate *time.Time `json:"startDate,omitempty"`
}

// ResourceLinkV1M1 The link that can be used to access corresponding resources in advertising portal.
type ResourceLinkV1M1 struct {
	// Name The resource name.
	Name *string `json:"name,omitempty"`

	// Url The resource url.
	Url *string `json:"url,omitempty"`
}

// StudyObjectiveV1 Measurement category based on the purpose of the measurement.
type StudyObjectiveV1 string

// StudyResponseV1 Study response.
type StudyResponseV1 struct {
	// Code An enumerated success or error code for machine use.
	Code   *string       `json:"code,omitempty"`
	Errors *[]SubErrorV1 `json:"errors,omitempty"`

	// Index The index of the object in the request, starting from 1.
	Index *int32 `json:"index,omitempty"`

	// Message A human-readable message of the code.
	Message *string `json:"message,omitempty"`

	// StudyId The study canonical identifier.
	StudyId *string `json:"studyId,omitempty"`
}

// StudyResponsesV1 Studies response.
type StudyResponsesV1 struct {
	// RequestId Request Id that uniquely identifies your request.
	RequestId *string            `json:"requestId,omitempty"`
	Responses *[]StudyResponseV1 `json:"responses,omitempty"`
}

// StudyStatusV1 The study status. Only required if study is in DRAFT as part of study creation/update.
type StudyStatusV1 string

// StudySubmissionTypeV1 The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
type StudySubmissionTypeV1 string

// StudyTypeV1 The study type.
type StudyTypeV1 string

// StudyTypeV1M2 The study type.
type StudyTypeV1M2 string

// SubErrorV1 The sub error object.
type SubErrorV1 struct {
	ErrorType string  `json:"errorType"`
	FieldName *string `json:"fieldName,omitempty"`
	Message   string  `json:"message"`
}

// SurveyErrorV1 The survey error object.
type SurveyErrorV1 struct {
	ErrorType          string  `json:"errorType"`
	FieldName          *string `json:"fieldName,omitempty"`
	Message            string  `json:"message"`
	QuestionTemplateId *string `json:"questionTemplateId,omitempty"`
}

// SurveyQuestionCategoryRequirementV1M1 The requirement for specific survey question category.
type SurveyQuestionCategoryRequirementV1M1 struct {
	// Category The survey question category.
	Category *SurveyQuestionCategoryV1M1 `json:"category,omitempty"`

	// MaximumQuestions The maximum number of questions required for the question category.
	MaximumQuestions *int `json:"maximumQuestions,omitempty"`

	// MinimumQuestions The minimum number of questions required for the question category.
	MinimumQuestions *int `json:"minimumQuestions,omitempty"`
}

// SurveyQuestionCategoryV1M1 The survey question category.
type SurveyQuestionCategoryV1M1 string

// SurveyQuestionGridQuestionResponseV1M1 The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
type SurveyQuestionGridQuestionResponseV1M1 struct {
	// Columns The placeholder candidate in Survey question.
	Columns *SurveyQuestionPlaceholderCandidateV1 `json:"columns,omitempty"`

	// Rows The placeholder candidate in Survey question.
	Rows *SurveyQuestionPlaceholderCandidateV1 `json:"rows,omitempty"`
}

// SurveyQuestionObjectiveTypeV1 The survey objective.
type SurveyQuestionObjectiveTypeV1 string

// SurveyQuestionObjectiveTypeV1M1 The survey objective.
type SurveyQuestionObjectiveTypeV1M1 string

// SurveyQuestionPlaceholderAllowedRangeV1 Allowed value range for placeholder.
type SurveyQuestionPlaceholderAllowedRangeV1 struct {
	// MaximumValue The maximum allowed value.
	MaximumValue *int32 `json:"maximumValue,omitempty"`

	// MinimumValue The minimum allowed value.
	MinimumValue *int32 `json:"minimumValue,omitempty"`

	// ParentField The field name that this range depends on. Will be empty if this range is the default range.
	ParentField *string `json:"parentField,omitempty"`

	// ParentValue The field value that this range depends on. Will be empty if this range is the default range.
	ParentValue *string `json:"parentValue,omitempty"`
}

// SurveyQuestionPlaceholderAllowedValueV1 Allowed values for placeholder.
type SurveyQuestionPlaceholderAllowedValueV1 struct {
	// ParentField The field name that this value list depends on. Will be empty if this is the default list.
	ParentField *string `json:"parentField,omitempty"`

	// ParentValue The field value that this value list depend on. Will be empty if this is the default list.
	ParentValue *string `json:"parentValue,omitempty"`

	// Values Allowed values for placeholder.
	Values *[]string `json:"values,omitempty"`
}

// SurveyQuestionPlaceholderCandidateV1 The placeholder candidate in Survey question.
type SurveyQuestionPlaceholderCandidateV1 struct {
	// AllowCustomValue Whether custom value is allowed for the placeholder.
	AllowCustomValue *bool `json:"allowCustomValue,omitempty"`

	// AllowedValueRanges Allowed value ranges for placeholder. Only applicable if the valueType is INTEGER.
	AllowedValueRanges *[]SurveyQuestionPlaceholderAllowedRangeV1 `json:"allowedValueRanges,omitempty"`

	// AllowedValues Allowed values for placeholder. Will be empty if placeholder is free text field.
	AllowedValues *[]SurveyQuestionPlaceholderAllowedValueV1 `json:"allowedValues,omitempty"`

	// DefaultValues Default values that will be appended to the values list regardless.
	DefaultValues *[]string `json:"defaultValues,omitempty"`

	// FieldName The survey question placeholder field name.
	FieldName *string `json:"fieldName,omitempty"`

	// InferredFields Where the placeholder values will be inferred from.
	InferredFields *[]string `json:"inferredFields,omitempty"`

	// MaximumValueLength The maximum allowed character length for each individual placeholder value.
	MaximumValueLength *int `json:"maximumValueLength,omitempty"`

	// MinimumValueLength The minimum allowed character length for each individual placeholder value.
	MinimumValueLength *int `json:"minimumValueLength,omitempty"`

	// ValueType The placeholder value type.
	ValueType *PlaceholderValueTypeV1 `json:"valueType,omitempty"`
}

// SurveyQuestionPlaceholderFieldValueV1 defines model for SurveyQuestionPlaceholderFieldValueV1.
type SurveyQuestionPlaceholderFieldValueV1 struct {
	// IsQualifying This is only required if the corresponding field is 'response', this will help to define if the response value will be counted as a positive one in the study report.
	IsQualifying *bool `json:"isQualifying,omitempty"`

	// Value The survey question placeholder field value.
	Value *string `json:"value,omitempty"`
}

// SurveyQuestionPlaceholderV1 The object specifying a placeholder in Survey question.
type SurveyQuestionPlaceholderV1 struct {
	// FieldName The survey question placeholder field name.
	FieldName *string `json:"fieldName,omitempty"`

	// FieldValues The survey question placeholder field values.
	FieldValues *[]SurveyQuestionPlaceholderFieldValueV1 `json:"fieldValues,omitempty"`
}

// SurveyQuestionResponseV1M2 The survey question response chosen by Survey audience.
type SurveyQuestionResponseV1M2 struct {
	// Asset The Amazon Creative Asset Library asset identifier. Refer https://advertising.amazon.com/API/docs/en-us/creative-asset-library
	Asset *AssetV1M2 `json:"asset,omitempty"`

	// ResponseType The type of response.
	ResponseType *SurveyQuestionResponseV1M2ResponseType `json:"responseType,omitempty"`

	// ResponseValue The response text if the question response type is TEXT.
	ResponseValue *string `json:"responseValue,omitempty"`
}

// SurveyQuestionResponseV1M2ResponseType The type of response.
type SurveyQuestionResponseV1M2ResponseType string

// SurveyQuestionSubCategoryV1M1 The survey question sub-category. Only applicable to certain categories
type SurveyQuestionSubCategoryV1M1 string

// SurveyQuestionTemplateV1 Survey question template for vendor product.
type SurveyQuestionTemplateV1 struct {
	// Id The survey question template canonical Id.
	Id *string `json:"id,omitempty"`

	// Locale The measurement locale.
	Locale *MeasurementLocaleV1 `json:"locale,omitempty"`

	// MaximumQualifyingResponses The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
	MaximumQualifyingResponses *int `json:"maximumQualifyingResponses,omitempty"`

	// MaximumQuestionResponses The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
	MaximumQuestionResponses *int `json:"maximumQuestionResponses,omitempty"`

	// MinimumQualifyingResponses The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
	MinimumQualifyingResponses *int `json:"minimumQualifyingResponses,omitempty"`

	// MinimumQuestionResponses The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
	MinimumQuestionResponses *int `json:"minimumQuestionResponses,omitempty"`

	// ObjectiveType The survey objective.
	ObjectiveType         *SurveyQuestionObjectiveTypeV1          `json:"objectiveType,omitempty"`
	PlaceholderCandidates *[]SurveyQuestionPlaceholderCandidateV1 `json:"placeholderCandidates,omitempty"`

	// QualifyingResponses The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
	QualifyingResponses *[]string `json:"qualifyingResponses,omitempty"`

	// QuestionResponses The pre-defined survey question responses with placeholders.
	QuestionResponses *[]string `json:"questionResponses,omitempty"`

	// QuestionText The survey question text with placeholders.
	QuestionText *string `json:"questionText,omitempty"`

	// Type The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response.
	Type *SurveyQuestionTypeV1 `json:"type,omitempty"`

	// VendorProductId The associated vendor product id.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// SurveyQuestionTemplateV1M1 Survey question template for vendor product.
type SurveyQuestionTemplateV1M1 struct {
	// Category The survey question category.
	Category *SurveyQuestionCategoryV1M1 `json:"category,omitempty"`

	// GridQuestionResponse The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
	GridQuestionResponse *SurveyQuestionGridQuestionResponseV1M1 `json:"gridQuestionResponse,omitempty"`

	// Id The survey question template canonical Id.
	Id *string `json:"id,omitempty"`

	// Locale The measurement locale.
	Locale *MeasurementLocaleV1 `json:"locale,omitempty"`

	// MaximumQualifyingResponses The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
	MaximumQualifyingResponses *int `json:"maximumQualifyingResponses,omitempty"`

	// MaximumQuestionResponses The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
	MaximumQuestionResponses *int `json:"maximumQuestionResponses,omitempty"`

	// MinimumQualifyingResponses The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
	MinimumQualifyingResponses *int `json:"minimumQualifyingResponses,omitempty"`

	// MinimumQuestionResponses The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
	MinimumQuestionResponses *int `json:"minimumQuestionResponses,omitempty"`

	// ObjectiveType The survey objective.
	ObjectiveType         *SurveyQuestionObjectiveTypeV1M1        `json:"objectiveType,omitempty"`
	PlaceholderCandidates *[]SurveyQuestionPlaceholderCandidateV1 `json:"placeholderCandidates,omitempty"`

	// Priority The priority of the question. If present this will determine the ordering of questions in a survey. The check will be enforced when a survey is created/updated. Lower number indicates higher priority.
	Priority *int `json:"priority,omitempty"`

	// QualifyingResponses The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
	QualifyingResponses *[]string `json:"qualifyingResponses,omitempty"`

	// QuestionResponses The pre-defined survey question responses with placeholders.
	QuestionResponses *[]string `json:"questionResponses,omitempty"`

	// QuestionText The survey question text with placeholders.
	QuestionText *string `json:"questionText,omitempty"`

	// SubCategory The survey question sub-category. Only applicable to certain categories
	SubCategory *SurveyQuestionSubCategoryV1M1 `json:"subCategory,omitempty"`

	// Type The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text.
	Type *SurveyQuestionTypeV1M1 `json:"type,omitempty"`

	// VendorProductId The associated vendor product id.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// SurveyQuestionTypeV1 The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response.
type SurveyQuestionTypeV1 string

// SurveyQuestionTypeV1M1 The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text.
type SurveyQuestionTypeV1M1 string

// SurveyResponseResultV1 The rate of response for each response in Survey question.
type SurveyResponseResultV1 struct {
	// AdExposedGroupResponseRate The percent of people in ad exposed group choosing this response.
	AdExposedGroupResponseRate *float64 `json:"adExposedGroupResponseRate,omitempty"`

	// ControlGroupResponseRate The percent of people in control group choosing this response.
	ControlGroupResponseRate *float64 `json:"controlGroupResponseRate,omitempty"`

	// IsQualifyingResponse Is the response a qualifying response. Used in calculating Brand Lift.
	IsQualifyingResponse *bool `json:"isQualifyingResponse,omitempty"`

	// MarginOfError The percentage of margin of error for this response.
	MarginOfError *float32 `json:"marginOfError,omitempty"`

	// QuestionObjective The survey objective.
	QuestionObjective *SurveyQuestionObjectiveTypeV1 `json:"questionObjective,omitempty"`

	// QuestionResponse The response choosen by Survey audience.
	QuestionResponse *string `json:"questionResponse,omitempty"`

	// QuestionSequence Sequence number of the question in the Survey.
	QuestionSequence *float32 `json:"questionSequence,omitempty"`

	// QuestionText Text of the Survey question.
	QuestionText *string `json:"questionText,omitempty"`

	// ResponseRate The percentage of people choosing this response.
	ResponseRate *float64 `json:"responseRate,omitempty"`

	// SegmentType The segment type to which this response data belongs to.
	SegmentType *SurveyResponseResultV1SegmentType `json:"segmentType,omitempty"`

	// SegmentValue The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
	SegmentValue *string `json:"segmentValue,omitempty"`

	// StatisticalSignificance The significance percentage for the response data in this segment.
	StatisticalSignificance *float64 `json:"statisticalSignificance,omitempty"`
}

// SurveyResponseResultV1SegmentType The segment type to which this response data belongs to.
type SurveyResponseResultV1SegmentType string

// SurveyResponseResultV1M1 The rate of response for each response in Survey question.
type SurveyResponseResultV1M1 struct {
	// AdExposedGroupResponseRate The percent of people in ad exposed group choosing this response.
	AdExposedGroupResponseRate *float32 `json:"adExposedGroupResponseRate,omitempty"`

	// ControlGroupResponseRate The percent of people in control group choosing this response.
	ControlGroupResponseRate *float32 `json:"controlGroupResponseRate,omitempty"`

	// IsQualifyingResponse Is the response a qualifying response. Used in calculating Brand Lift.
	IsQualifyingResponse *bool `json:"isQualifyingResponse,omitempty"`

	// QuestionObjective The survey objective.
	QuestionObjective *SurveyQuestionObjectiveTypeV1M1 `json:"questionObjective,omitempty"`

	// QuestionResponse The response choosen by Survey audience.
	QuestionResponse *string `json:"questionResponse,omitempty"`

	// QuestionSequence Sequence number of the question in the Survey.
	QuestionSequence *float32 `json:"questionSequence,omitempty"`

	// QuestionText Text of the Survey question.
	QuestionText *string `json:"questionText,omitempty"`

	// ResponseRate The percentage of people choosing this response.
	ResponseRate *float32 `json:"responseRate,omitempty"`

	// SegmentType The segment type to which this response data belongs to.
	SegmentType *SurveyResponseResultV1M1SegmentType `json:"segmentType,omitempty"`

	// SegmentValue The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
	SegmentValue *string `json:"segmentValue,omitempty"`

	// StatisticalSignificance The significance percentage for the response data in this segment.
	StatisticalSignificance *float32 `json:"statisticalSignificance,omitempty"`
}

// SurveyResponseResultV1M1SegmentType The segment type to which this response data belongs to.
type SurveyResponseResultV1M1SegmentType string

// SurveyResponseResultV1M2 The rate of response for each response in Survey question.
type SurveyResponseResultV1M2 struct {
	// AdExposedGroupResponseRate The percent of people in ad exposed group choosing this response.
	AdExposedGroupResponseRate *float64 `json:"adExposedGroupResponseRate,omitempty"`

	// ControlGroupResponseRate The percent of people in control group choosing this response.
	ControlGroupResponseRate *float64 `json:"controlGroupResponseRate,omitempty"`

	// IsQualifyingResponse Is the response a qualifying response. Used in calculating Brand Lift.
	IsQualifyingResponse *bool `json:"isQualifyingResponse,omitempty"`

	// MarginOfError The percentage of margin of error for this response.
	MarginOfError *float32 `json:"marginOfError,omitempty"`

	// QuestionAsset The Amazon Creative Asset Library asset identifier. Refer https://advertising.amazon.com/API/docs/en-us/creative-asset-library
	QuestionAsset *AssetV1M2 `json:"questionAsset,omitempty"`

	// QuestionObjective The survey objective.
	QuestionObjective *SurveyQuestionObjectiveTypeV1 `json:"questionObjective,omitempty"`

	// QuestionResponse The survey question response chosen by Survey audience.
	QuestionResponse *SurveyQuestionResponseV1M2 `json:"questionResponse,omitempty"`

	// QuestionSequence Sequence number of the question in the Survey.
	QuestionSequence *float32 `json:"questionSequence,omitempty"`

	// QuestionText Text of the Survey question.
	QuestionText *string `json:"questionText,omitempty"`

	// ResponseRate The percentage of people choosing this response.
	ResponseRate *float64 `json:"responseRate,omitempty"`

	// SegmentType The segment type to which this response data belongs to.
	SegmentType *SurveyResponseResultV1M2SegmentType `json:"segmentType,omitempty"`

	// SegmentValue The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
	SegmentValue *string `json:"segmentValue,omitempty"`

	// StatisticalSignificance The significance percentage for the response data in this segment.
	StatisticalSignificance *float64 `json:"statisticalSignificance,omitempty"`
}

// SurveyResponseResultV1M2SegmentType The segment type to which this response data belongs to.
type SurveyResponseResultV1M2SegmentType string

// SurveyResponseV1 Survey response.
type SurveyResponseV1 struct {
	// Code An enumerated success or error code for machine use.
	Code   *string          `json:"code,omitempty"`
	Errors *[]SurveyErrorV1 `json:"errors,omitempty"`

	// Index The index of the object in the request, starting from 1.
	Index *int32 `json:"index,omitempty"`

	// Message A human-readable message of the code.
	Message *string `json:"message,omitempty"`

	// SurveyId The survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`
}

// SurveyResponsesV1 Surveys response.
type SurveyResponsesV1 struct {
	// RequestId Request Id that uniquely identifies your request.
	RequestId *string             `json:"requestId,omitempty"`
	Responses *[]SurveyResponseV1 `json:"responses,omitempty"`
}

// SurveyStatusV1 The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it's associated with a study.
type SurveyStatusV1 string

// SurveyV1 The measurement survey.
type SurveyV1 struct {
	// CustomQuestions A list of custom survey questions.
	// Deprecated:
	CustomQuestions *[]CustomSurveyQuestionV1 `json:"customQuestions,omitempty"`

	// Id The survey canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// Status The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it's associated with a study.
	Status *SurveyStatusV1 `json:"status,omitempty"`

	// StudyId The associated study identifier. Survey needs to be created prior to the study creation.
	StudyId *string `json:"studyId,omitempty"`

	// TemplatedQuestions A list of templated survey questions.
	TemplatedQuestions *[]TemplatedSurveyQuestionV1 `json:"templatedQuestions,omitempty"`

	// VendorProductId The vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// SurveyV1M1 The measurement survey.
type SurveyV1M1 struct {
	// CustomQuestions A list of custom survey questions.
	// Deprecated:
	CustomQuestions *[]CustomSurveyQuestionV1 `json:"customQuestions,omitempty"`

	// Id The survey canonical identifier. Immutable field. This is required for update.
	Id *string `json:"id,omitempty"`

	// Status The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it's associated with a study.
	Status *SurveyStatusV1 `json:"status,omitempty"`

	// StudyId The associated study identifier. Survey needs to be created prior to the study creation.
	StudyId *string `json:"studyId,omitempty"`

	// TemplatedQuestions A list of templated survey questions.
	TemplatedQuestions *[]TemplatedSurveyQuestionV1M1 `json:"templatedQuestions,omitempty"`

	// VendorProductId The vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// TemplatedSurveyQuestionV1 The templated measurement survey question.
type TemplatedSurveyQuestionV1 struct {
	// Id The survey question template canonical identifier.
	Id *string `json:"id,omitempty"`

	// Placeholders List of question placeholders
	Placeholders *[]SurveyQuestionPlaceholderV1 `json:"placeholders,omitempty"`
}

// TemplatedSurveyQuestionV1M1 The templated measurement survey question.
type TemplatedSurveyQuestionV1M1 struct {
	// GridQuestionResponse The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
	GridQuestionResponse *GridQuestionResponsesV1M1 `json:"gridQuestionResponse,omitempty"`

	// Id The survey question template canonical identifier.
	Id *string `json:"id,omitempty"`

	// Placeholders List of question placeholders
	Placeholders *[]SurveyQuestionPlaceholderV1 `json:"placeholders,omitempty"`
}

// UpdateDSPAudienceResearchStudyV1M2 defines model for UpdateDSPAudienceResearchStudyV1M2.
type UpdateDSPAudienceResearchStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// PeerNames A list of peer names for the study brand.
	PeerNames *[]string `json:"peerNames,omitempty"`

	// ProductCategory The study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *UpdateDSPAudienceResearchStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// UpdateDSPAudienceResearchStudyV1M2StudyResultStatus The status of result of the study.
type UpdateDSPAudienceResearchStudyV1M2StudyResultStatus string

// UpdateDSPCreativeTestingStudyV1M2 defines model for UpdateDSPCreativeTestingStudyV1M2.
type UpdateDSPCreativeTestingStudyV1M2 struct {
	// AdvertiserId The associated advertiser identifier. Immutable field.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// Assets A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
	Assets *[]AssetV1M2 `json:"assets,omitempty"`

	// AudienceTargetingGroup The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
	AudienceTargetingGroup *AudienceTargetingGroupV1M2 `json:"audienceTargetingGroup,omitempty"`

	// BrandName The study brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Comment The approver's comment on why the study is approved/rejected.
	Comment *string `json:"comment,omitempty"`

	// CreateDate The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// EndDate The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
	EndDate *time.Time `json:"endDate,omitempty"`

	// ExternalReferenceId Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
	ExternalReferenceId *string `json:"externalReferenceId,omitempty"`

	// LastUpdatedDate The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// Name The study name.
	Name *string `json:"name,omitempty"`

	// ProductCategory Optional study product category.
	ProductCategory *string `json:"productCategory,omitempty"`

	// ReviewDate The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
	ReviewDate *time.Time `json:"reviewDate,omitempty"`

	// StartDate The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Status The study status. Only required if study is in DRAFT as part of study creation/update.
	Status *StudyStatusV1 `json:"status,omitempty"`

	// StatusReasons List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
	StatusReasons *[]string `json:"statusReasons,omitempty"`

	// StudyResultStatus The status of result of the study.
	StudyResultStatus *UpdateDSPCreativeTestingStudyV1M2StudyResultStatus `json:"studyResultStatus,omitempty"`

	// SurveyId The study survey canonical identifier.
	SurveyId *string `json:"surveyId,omitempty"`

	// VendorProductId Associated vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// UpdateDSPCreativeTestingStudyV1M2StudyResultStatus The status of result of the study.
type UpdateDSPCreativeTestingStudyV1M2StudyResultStatus string

// VendorProductEligibilityV1 The measurement eligibility details for a certain vendor product.
type VendorProductEligibilityV1 struct {
	// Issues A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
	Issues *[]EligibilityIssueV1 `json:"issues,omitempty"`

	// Status Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
	Status *EligibilityStatusV1 `json:"status,omitempty"`

	// VendorProductId vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// VendorProductEligibilityV1M2 The measurement eligibility details for a certain vendor product.
type VendorProductEligibilityV1M2 struct {
	// Issues A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
	Issues *[]EligibilityIssueV1M2 `json:"issues,omitempty"`

	// Status Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
	Status *EligibilityStatusV1 `json:"status,omitempty"`

	// VendorProductId vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// VendorProductPolicyV1 The policy rules will be enforced at vendor product level.
type VendorProductPolicyV1 struct {
	// BenchMarkCategoryRequired Whether or not the benchMark category is required for measurement setup.
	BenchMarkCategoryRequired *bool `json:"benchMarkCategoryRequired,omitempty"`

	// CustomQuestionAllowed Whether custom survey questions are allowed.
	CustomQuestionAllowed *bool `json:"customQuestionAllowed,omitempty"`

	// ExternalReferenceIdRequired Whether or not the vendor assigned external reference identifier is required for measurement setup.
	ExternalReferenceIdRequired *bool `json:"externalReferenceIdRequired,omitempty"`

	// LeadTime Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
	LeadTime *int `json:"leadTime,omitempty"`

	// MaximumOrders The maximum number of order allowed for the product.
	MaximumOrders *int `json:"maximumOrders,omitempty"`

	// MaximumPeerNames The maximum number of peer names required for the product.
	MaximumPeerNames *int `json:"maximumPeerNames,omitempty"`

	// MaximumStudyLength The maximum required length/duration of the study in days.
	MaximumStudyLength *int `json:"maximumStudyLength,omitempty"`

	// MaximumSurveyQuestions The maximum number of survey questions required for the product.
	MaximumSurveyQuestions *int `json:"maximumSurveyQuestions,omitempty"`

	// MinimumOrders The maximum number of orders required for the product.
	MinimumOrders *int `json:"minimumOrders,omitempty"`

	// MinimumPeerNames The minimum number of peer names required for the product.
	MinimumPeerNames *int `json:"minimumPeerNames,omitempty"`

	// MinimumStudyLength The minimum required length/duration of the study in days.
	MinimumStudyLength *int `json:"minimumStudyLength,omitempty"`

	// MinimumSurveyQuestions The minimum number of survey questions required for the product.
	MinimumSurveyQuestions *int `json:"minimumSurveyQuestions,omitempty"`

	// RequiredQuestionObjectives The required question objectives that need to be included as part of the survey.
	RequiredQuestionObjectives *[]SurveyQuestionObjectiveTypeV1 `json:"requiredQuestionObjectives,omitempty"`
	SupportedGoals             *[]MeasurementGoalV1             `json:"supportedGoals,omitempty"`
	SupportedMarketplaces      *[]MeasurementMarketplaceV1      `json:"supportedMarketplaces,omitempty"`

	// VendorApprovalRequired Whether or not the vendor requires an additional sign off process to fully qualify for study.
	VendorApprovalRequired *bool `json:"vendorApprovalRequired,omitempty"`

	// VendorProductId vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`
}

// VendorProductPolicyV1M1 The policy rules will be enforced at vendor product level.
type VendorProductPolicyV1M1 struct {
	// BenchMarkCategoryRequired Whether or not the benchMark category is required for measurement setup.
	BenchMarkCategoryRequired *bool `json:"benchMarkCategoryRequired,omitempty"`

	// CustomQuestionAllowed Whether custom survey questions are allowed.
	CustomQuestionAllowed *bool `json:"customQuestionAllowed,omitempty"`

	// ExternalReferenceIdRequired Whether or not the vendor assigned external reference identifier is required for measurement setup.
	ExternalReferenceIdRequired *bool `json:"externalReferenceIdRequired,omitempty"`

	// LeadTime Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
	LeadTime *int `json:"leadTime,omitempty"`

	// MaximumOrders The maximum number of order allowed for the product.
	MaximumOrders *int `json:"maximumOrders,omitempty"`

	// MaximumPeerNames The maximum number of peer names required for the product.
	MaximumPeerNames *int `json:"maximumPeerNames,omitempty"`

	// MaximumStudyLength The maximum required length/duration of the study in days.
	MaximumStudyLength *int `json:"maximumStudyLength,omitempty"`

	// MaximumSurveyQuestions The maximum number of survey questions required for the product.
	MaximumSurveyQuestions *int `json:"maximumSurveyQuestions,omitempty"`

	// MinimumOrders The maximum number of orders required for the product.
	MinimumOrders *int `json:"minimumOrders,omitempty"`

	// MinimumPeerNames The minimum number of peer names required for the product.
	MinimumPeerNames *int `json:"minimumPeerNames,omitempty"`

	// MinimumStudyLength The minimum required length/duration of the study in days.
	MinimumStudyLength *int `json:"minimumStudyLength,omitempty"`

	// MinimumSurveyQuestions The minimum number of survey questions required for the product.
	MinimumSurveyQuestions *int `json:"minimumSurveyQuestions,omitempty"`

	// RequiredQuestionCategories The requirements for survey question categories.
	RequiredQuestionCategories *[]SurveyQuestionCategoryRequirementV1M1 `json:"requiredQuestionCategories,omitempty"`

	// RequiredQuestionObjectives The required question objectives that need to be included as part of the survey.
	RequiredQuestionObjectives *[]SurveyQuestionObjectiveTypeV1M1 `json:"requiredQuestionObjectives,omitempty"`
	SupportedGoals             *[]MeasurementGoalV1               `json:"supportedGoals,omitempty"`
	SupportedMarketplaces      *[]MeasurementMarketplaceV1        `json:"supportedMarketplaces,omitempty"`

	// SupportedVerbs List of supported verbs that can be used in survey questions.
	SupportedVerbs *[]string `json:"supportedVerbs,omitempty"`

	// VendorApprovalRequired Whether or not the vendor requires an additional sign off process to fully qualify for study.
	VendorApprovalRequired *bool `json:"vendorApprovalRequired,omitempty"`

	// VendorProductId vendor product canonical identifier.
	VendorProductId *string `json:"vendorProductId,omitempty"`

	// VerbRequired Whether or not a verb is required for measurement setup. It will be used in applicable survey questions to construct the question text.
	VerbRequired *bool `json:"verbRequired,omitempty"`
}

// VendorProductRequestV1 The request object to fetch measurement vendor products.
type VendorProductRequestV1 struct {
	// AdTypeFilters AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	AdTypeFilters *[]AdTypeV1 `json:"adTypeFilters,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	FundingTypeFilters *[]FundingTypeV1 `json:"fundingTypeFilters,omitempty"`

	// ObjectiveTypeFilters StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	ObjectiveTypeFilters *[]StudyObjectiveV1 `json:"objectiveTypeFilters,omitempty"`

	// StudyTypeFilters StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	StudyTypeFilters *[]StudyTypeV1 `json:"studyTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	VendorTypeFilters *[]VendorTypeV1 `json:"vendorTypeFilters,omitempty"`
}

// VendorProductRequestV1M1 The request object to fetch measurement vendor products.
type VendorProductRequestV1M1 struct {
	// AdTypeFilters AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	AdTypeFilters *[]AdTypeV1 `json:"adTypeFilters,omitempty"`

	// FundingTypeFilters FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	FundingTypeFilters *[]FundingTypeV1M1 `json:"fundingTypeFilters,omitempty"`

	// ObjectiveTypeFilters StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	ObjectiveTypeFilters *[]StudyObjectiveV1 `json:"objectiveTypeFilters,omitempty"`

	// StudyTypeFilters StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	StudyTypeFilters *[]StudyTypeV1 `json:"studyTypeFilters,omitempty"`

	// VendorProductIdFilters VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	VendorProductIdFilters *[]string `json:"vendorProductIdFilters,omitempty"`

	// VendorTypeFilters VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
	VendorTypeFilters *[]VendorTypeV1M1 `json:"vendorTypeFilters,omitempty"`
}

// VendorProductTypeV1 The measurement vendor product type.
type VendorProductTypeV1 string

// VendorProductTypeV1M1 The measurement vendor product type.
type VendorProductTypeV1M1 string

// VendorProductV1 The measurement vendor product.
type VendorProductV1 struct {
	// AdType Supported values are DSP(Demand Side Platform).
	AdType *AdTypeV1 `json:"adType,omitempty"`

	// FundingType The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
	FundingType *FundingTypeV1 `json:"fundingType,omitempty"`

	// Id The vendor product identifier.
	Id *string `json:"id,omitempty"`

	// Objective Measurement category based on the purpose of the measurement.
	Objective *StudyObjectiveV1 `json:"objective,omitempty"`

	// StudyType The study type.
	StudyType *StudyTypeV1 `json:"studyType,omitempty"`

	// VendorProductType The measurement vendor product type.
	VendorProductType *VendorProductTypeV1 `json:"vendorProductType,omitempty"`

	// VendorType The measurement vendor type, each study type will have different supported vendors.
	VendorType *VendorTypeV1 `json:"vendorType,omitempty"`
}

// VendorProductV1M1 The measurement vendor product.
type VendorProductV1M1 struct {
	// AdType Supported values are DSP(Demand Side Platform).
	AdType *AdTypeV1 `json:"adType,omitempty"`

	// DisplayName The vendor product display name.
	DisplayName *string `json:"displayName,omitempty"`

	// FundingType The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
	FundingType *FundingTypeV1M1 `json:"fundingType,omitempty"`

	// Id The vendor product identifier.
	Id *string `json:"id,omitempty"`

	// Objective Measurement category based on the purpose of the measurement.
	Objective *StudyObjectiveV1 `json:"objective,omitempty"`

	// StudyType The study type.
	StudyType *StudyTypeV1 `json:"studyType,omitempty"`

	// VendorProductType The measurement vendor product type.
	VendorProductType *VendorProductTypeV1M1 `json:"vendorProductType,omitempty"`

	// VendorType The measurement vendor type, each study type will have different supported vendors.
	VendorType *VendorTypeV1M1 `json:"vendorType,omitempty"`
}

// VendorTypeV1 The measurement vendor type, each study type will have different supported vendors.
type VendorTypeV1 string

// VendorTypeV1M1 The measurement vendor type, each study type will have different supported vendors.
type VendorTypeV1M1 string

// VendorTypeV1M2 The measurement vendor type, each study type will have different supported vendors.
type VendorTypeV1M2 string

// VendorTypeV1M3 The measurement vendor type, each study type will have different supported vendors.
type VendorTypeV1M3 string

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// CheckDSPAudienceResearchEligibilityParams defines parameters for CheckDSPAudienceResearchEligibility.
type CheckDSPAudienceResearchEligibilityParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CheckDSPBrandLiftEligibilityParams defines parameters for CheckDSPBrandLiftEligibility.
type CheckDSPBrandLiftEligibilityParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CheckDSPCreativeTestingEligibilityParams defines parameters for CheckDSPCreativeTestingEligibility.
type CheckDSPCreativeTestingEligibilityParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CheckDSPOmnichannelMetricsEligibilityParams defines parameters for CheckDSPOmnichannelMetricsEligibility.
type CheckDSPOmnichannelMetricsEligibilityParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPAudienceResearchStudiesParams defines parameters for GetDSPAudienceResearchStudies.
type GetDSPAudienceResearchStudiesParams struct {
	// StudyIds Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
	StudyIds *[]string `form:"studyIds,omitempty" json:"studyIds,omitempty"`

	// AdvertiserId The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateDSPAudienceResearchStudyParams defines parameters for CreateDSPAudienceResearchStudy.
type CreateDSPAudienceResearchStudyParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDSPAudienceResearchStudyParams defines parameters for UpdateDSPAudienceResearchStudy.
type UpdateDSPAudienceResearchStudyParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPAudienceResearchStudyResultParams defines parameters for GetDSPAudienceResearchStudyResult.
type GetDSPAudienceResearchStudyResultParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// Accept The version(s) of the requested resource. Available version(s) - `application/vnd.measurementresult.v1.2+json`, `text/vnd.measurementresult.v1.2+csv`.
	Accept string `json:"Accept"`
}

// GetDSPBrandLiftStudiesParams defines parameters for GetDSPBrandLiftStudies.
type GetDSPBrandLiftStudiesParams struct {
	// StudyIdFilters Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
	StudyIdFilters *[]string `form:"studyIdFilters,omitempty" json:"studyIdFilters,omitempty"`

	// AdvertiserId The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody defines parameters for CreateDSPBrandLiftStudies.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody = []DSPBrandLiftStudyV1

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody defines parameters for CreateDSPBrandLiftStudies.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody = []DSPBrandLiftStudyV1M1

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody defines parameters for CreateDSPBrandLiftStudies.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody = []DSPBrandLiftStudyV1

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody defines parameters for CreateDSPBrandLiftStudies.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody = []DSPBrandLiftStudyV1M1

// CreateDSPBrandLiftStudiesParams defines parameters for CreateDSPBrandLiftStudies.
type CreateDSPBrandLiftStudiesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody defines parameters for UpdateDSPBrandLiftStudies.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody = []DSPBrandLiftStudyV1

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody defines parameters for UpdateDSPBrandLiftStudies.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody = []DSPBrandLiftStudyV1M1

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody defines parameters for UpdateDSPBrandLiftStudies.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody = []DSPBrandLiftStudyV1

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody defines parameters for UpdateDSPBrandLiftStudies.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody = []DSPBrandLiftStudyV1M1

// UpdateDSPBrandLiftStudiesParams defines parameters for UpdateDSPBrandLiftStudies.
type UpdateDSPBrandLiftStudiesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPCreativeTestingStudiesParams defines parameters for GetDSPCreativeTestingStudies.
type GetDSPCreativeTestingStudiesParams struct {
	// StudyIds Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
	StudyIds *[]string `form:"studyIds,omitempty" json:"studyIds,omitempty"`

	// AdvertiserId The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateDSPCreativeTestingStudyParams defines parameters for CreateDSPCreativeTestingStudy.
type CreateDSPCreativeTestingStudyParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDSPCreativeTestingStudyParams defines parameters for UpdateDSPCreativeTestingStudy.
type UpdateDSPCreativeTestingStudyParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPCreativeTestingStudyResultParams defines parameters for GetDSPCreativeTestingStudyResult.
type GetDSPCreativeTestingStudyResultParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// Accept The version(s) of the requested resource. Available version(s) - `application/vnd.measurementresult.v1.2+json`, `text/vnd.measurementresult.v1.2+csv`.
	Accept string `json:"Accept"`
}

// GetDSPOmnichannelMetricsStudiesParams defines parameters for GetDSPOmnichannelMetricsStudies.
type GetDSPOmnichannelMetricsStudiesParams struct {
	// StudyIds Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
	StudyIds *[]string `form:"studyIds,omitempty" json:"studyIds,omitempty"`

	// AdvertiserId The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody defines parameters for CreateDSPOmnichannelMetricsStudies.
type CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody = []DSPOmnichannelMetricsStudyV1M2

// CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody defines parameters for CreateDSPOmnichannelMetricsStudies.
type CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody = []DSPOmnichannelMetricsStudyV1M3

// CreateDSPOmnichannelMetricsStudiesParams defines parameters for CreateDSPOmnichannelMetricsStudies.
type CreateDSPOmnichannelMetricsStudiesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody defines parameters for UpdateDSPOmnichannelMetricsStudies.
type UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody = []DSPOmnichannelMetricsStudyV1M2

// UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody defines parameters for UpdateDSPOmnichannelMetricsStudies.
type UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody = []DSPOmnichannelMetricsStudyV1M3

// UpdateDSPOmnichannelMetricsStudiesParams defines parameters for UpdateDSPOmnichannelMetricsStudies.
type UpdateDSPOmnichannelMetricsStudiesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPOmnichannelMetricsStudyResultParams defines parameters for GetDSPOmnichannelMetricsStudyResult.
type GetDSPOmnichannelMetricsStudyResultParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// Accept The version(s) of the requested resource. Available version(s) - `text/vnd.measurementresult.v1+xlsx`
	Accept string `json:"Accept"`
}

// CheckPlanningEligibilityParams defines parameters for CheckPlanningEligibility.
type CheckPlanningEligibilityParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CancelMeasurementStudiesParams defines parameters for CancelMeasurementStudies.
type CancelMeasurementStudiesParams struct {
	// StudyIds Study canonical identifiers to cancel.
	StudyIds *[]string `form:"studyIds,omitempty" json:"studyIds,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetStudiesParams defines parameters for GetStudies.
type GetStudiesParams struct {
	// StudyIds Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
	StudyIds *[]string `form:"studyIds,omitempty" json:"studyIds,omitempty"`

	// AdvertiserId The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDSPBrandLiftStudyResultParams defines parameters for GetDSPBrandLiftStudyResult.
type GetDSPBrandLiftStudyResultParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// Accept The version(s) of the requested resource. Available version(s) - `application/vnd.measurementresult.v1+json`, `application/vnd.measurementresult.v1.1+json`, `text/vnd.measurementresult.v1+csv`
	Accept string `json:"Accept"`
}

// GetSurveysParams defines parameters for GetSurveys.
type GetSurveysParams struct {
	// SurveyIds Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
	SurveyIds *[]string `form:"surveyIds,omitempty" json:"surveyIds,omitempty"`

	// StudyId A study canonical identifier. Either one of surveyIds or studyId should be provided.
	StudyId *string `form:"studyId,omitempty" json:"studyId,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateSurveysApplicationVndStudymanagementV1PlusJSONBody defines parameters for CreateSurveys.
type CreateSurveysApplicationVndStudymanagementV1PlusJSONBody = []SurveyV1

// CreateSurveysApplicationVndStudymanagementV11PlusJSONBody defines parameters for CreateSurveys.
type CreateSurveysApplicationVndStudymanagementV11PlusJSONBody = []SurveyV1M1

// CreateSurveysApplicationVndStudymanagementV12PlusJSONBody defines parameters for CreateSurveys.
type CreateSurveysApplicationVndStudymanagementV12PlusJSONBody = []SurveyV1

// CreateSurveysApplicationVndStudymanagementV13PlusJSONBody defines parameters for CreateSurveys.
type CreateSurveysApplicationVndStudymanagementV13PlusJSONBody = []SurveyV1M1

// CreateSurveysParams defines parameters for CreateSurveys.
type CreateSurveysParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateSurveysApplicationVndStudymanagementV1PlusJSONBody defines parameters for UpdateSurveys.
type UpdateSurveysApplicationVndStudymanagementV1PlusJSONBody = []SurveyV1

// UpdateSurveysApplicationVndStudymanagementV11PlusJSONBody defines parameters for UpdateSurveys.
type UpdateSurveysApplicationVndStudymanagementV11PlusJSONBody = []SurveyV1M1

// UpdateSurveysApplicationVndStudymanagementV12PlusJSONBody defines parameters for UpdateSurveys.
type UpdateSurveysApplicationVndStudymanagementV12PlusJSONBody = []SurveyV1

// UpdateSurveysApplicationVndStudymanagementV13PlusJSONBody defines parameters for UpdateSurveys.
type UpdateSurveysApplicationVndStudymanagementV13PlusJSONBody = []SurveyV1M1

// UpdateSurveysParams defines parameters for UpdateSurveys.
type UpdateSurveysParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetCuratedStudyResultParams defines parameters for GetCuratedStudyResult.
type GetCuratedStudyResultParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// Accept The version(s) of the requested resource. Available version(s) - `application/vnd.measurementresult.v1+json`.
	Accept string `json:"Accept"`
}

// VendorProductParams defines parameters for VendorProduct.
type VendorProductParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// OmnichannelMetricsBrandSearchParams defines parameters for OmnichannelMetricsBrandSearch.
type OmnichannelMetricsBrandSearchParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of brands in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// VendorProductPolicyParams defines parameters for VendorProductPolicy.
type VendorProductPolicyParams struct {
	// VendorProductIds Vendor product canonical identifier to filter with.
	VendorProductIds *[]string `form:"vendorProductIds,omitempty" json:"vendorProductIds,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// VendorProductSurveyQuestionTemplatesParams defines parameters for VendorProductSurveyQuestionTemplates.
type VendorProductSurveyQuestionTemplatesParams struct {
	// VendorProductIds Vendor product canonical identifier to filter with.
	VendorProductIds *[]string `form:"vendorProductIds,omitempty" json:"vendorProductIds,omitempty"`

	// SurveyQuestionTemplateIds Vendor product survey question template identifier to filter with.
	SurveyQuestionTemplateIds *[]string `form:"surveyQuestionTemplateIds,omitempty" json:"surveyQuestionTemplateIds,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of studies in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateMeasurementStudiesBrandLiftParams defines parameters for UpdateMeasurementStudiesBrandLift.
type UpdateMeasurementStudiesBrandLiftParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateMeasurementStudiesSurveyParams defines parameters for CreateMeasurementStudiesSurvey.
type CreateMeasurementStudiesSurveyParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody defines body for CheckDSPAudienceResearchEligibility for application/vnd.measurementeligibility.v1.2+json ContentType.
type CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody = DSPAudienceResearchEligibilityRequestV1M2

// CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody defines body for CheckDSPBrandLiftEligibility for application/vnd.measurementeligibility.v1+json ContentType.
type CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody = DSPBrandLiftEligibilityRequestV1

// CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody defines body for CheckDSPBrandLiftEligibility for application/vnd.measurementeligibility.v1.1+json ContentType.
type CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody = DSPBrandLiftEligibilityRequestV1M1

// CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody defines body for CheckDSPCreativeTestingEligibility for application/vnd.measurementeligibility.v1.2+json ContentType.
type CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody = DSPCreativeTestingEligibilityRequestV1M2

// CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody defines body for CheckDSPOmnichannelMetricsEligibility for application/vnd.measurementeligibility.v1.2+json ContentType.
type CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody = DSPOmnichannelMetricsEligibilityRequestV1M2

// CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody defines body for CheckDSPOmnichannelMetricsEligibility for application/vnd.measurementeligibility.v1.3+json ContentType.
type CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody = DSPOmnichannelMetricsEligibilityRequestV1M3

// CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody defines body for CreateDSPAudienceResearchStudy for application/vnd.studymanagement.v1.2+json ContentType.
type CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody = CreateDSPAudienceResearchStudyV1M2

// UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody defines body for UpdateDSPAudienceResearchStudy for application/vnd.studymanagement.v1.2+json ContentType.
type UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody = UpdateDSPAudienceResearchStudyV1M2

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody defines body for CreateDSPBrandLiftStudies for application/vnd.studymanagement.v1+json ContentType.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody = CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody defines body for CreateDSPBrandLiftStudies for application/vnd.studymanagement.v1.1+json ContentType.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody = CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody defines body for CreateDSPBrandLiftStudies for application/vnd.studymanagement.v1.2+json ContentType.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody = CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody

// CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody defines body for CreateDSPBrandLiftStudies for application/vnd.studymanagement.v1.3+json ContentType.
type CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody = CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody defines body for UpdateDSPBrandLiftStudies for application/vnd.studymanagement.v1+json ContentType.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody = UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONBody

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody defines body for UpdateDSPBrandLiftStudies for application/vnd.studymanagement.v1.1+json ContentType.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody = UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONBody

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody defines body for UpdateDSPBrandLiftStudies for application/vnd.studymanagement.v1.2+json ContentType.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody = UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONBody

// UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody defines body for UpdateDSPBrandLiftStudies for application/vnd.studymanagement.v1.3+json ContentType.
type UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody = UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONBody

// CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody defines body for CreateDSPCreativeTestingStudy for application/vnd.studymanagement.v1.2+json ContentType.
type CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody = CreateDSPCreativeTestingStudyV1M2

// UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody defines body for UpdateDSPCreativeTestingStudy for application/vnd.studymanagement.v1.2+json ContentType.
type UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody = UpdateDSPCreativeTestingStudyV1M2

// CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody defines body for CreateDSPOmnichannelMetricsStudies for application/vnd.studymanagement.v1.2+json ContentType.
type CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody = CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody

// CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody defines body for CreateDSPOmnichannelMetricsStudies for application/vnd.studymanagement.v1.3+json ContentType.
type CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody = CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody

// UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody defines body for UpdateDSPOmnichannelMetricsStudies for application/vnd.studymanagement.v1.2+json ContentType.
type UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody = UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONBody

// UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody defines body for UpdateDSPOmnichannelMetricsStudies for application/vnd.studymanagement.v1.3+json ContentType.
type UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody = UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONBody

// CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody defines body for CheckPlanningEligibility for application/vnd.measurementeligibility.v1.1+json ContentType.
type CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody = PlanningEligibilityRequestV1M3

// CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody defines body for CheckPlanningEligibility for application/vnd.measurementeligibility.v1.3+json ContentType.
type CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody = PlanningEligibilityRequestV1M3

// CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody defines body for CreateSurveys for application/vnd.studymanagement.v1+json ContentType.
type CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody = CreateSurveysApplicationVndStudymanagementV1PlusJSONBody

// CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody defines body for CreateSurveys for application/vnd.studymanagement.v1.1+json ContentType.
type CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody = CreateSurveysApplicationVndStudymanagementV11PlusJSONBody

// CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody defines body for CreateSurveys for application/vnd.studymanagement.v1.2+json ContentType.
type CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody = CreateSurveysApplicationVndStudymanagementV12PlusJSONBody

// CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody defines body for CreateSurveys for application/vnd.studymanagement.v1.3+json ContentType.
type CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody = CreateSurveysApplicationVndStudymanagementV13PlusJSONBody

// UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody defines body for UpdateSurveys for application/vnd.studymanagement.v1+json ContentType.
type UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody = UpdateSurveysApplicationVndStudymanagementV1PlusJSONBody

// UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody defines body for UpdateSurveys for application/vnd.studymanagement.v1.1+json ContentType.
type UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody = UpdateSurveysApplicationVndStudymanagementV11PlusJSONBody

// UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody defines body for UpdateSurveys for application/vnd.studymanagement.v1.2+json ContentType.
type UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody = UpdateSurveysApplicationVndStudymanagementV12PlusJSONBody

// UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody defines body for UpdateSurveys for application/vnd.studymanagement.v1.3+json ContentType.
type UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody = UpdateSurveysApplicationVndStudymanagementV13PlusJSONBody

// VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody defines body for VendorProduct for application/vnd.measurementvendor.v1+json ContentType.
type VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody = VendorProductRequestV1

// VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody defines body for VendorProduct for application/vnd.measurementvendor.v1.1+json ContentType.
type VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody = VendorProductRequestV1M1

// OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody defines body for OmnichannelMetricsBrandSearch for application/vnd.ocmbrands.v1.2+json ContentType.
type OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody = OmnichannelMetricsBrandSearchRequestV1M2

// OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody defines body for OmnichannelMetricsBrandSearch for application/vnd.ocmbrands.v1.3+json ContentType.
type OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody = OmnichannelMetricsBrandSearchRequestV1M2

// UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody defines body for UpdateMeasurementStudiesBrandLift for application/vnd.measurementstudiesbrandlift.v1+json ContentType.
type UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody = MeasurementBrandLiftStudy

// CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody defines body for CreateMeasurementStudiesSurvey for application/vnd.measurementstudiessurvey.v1+json ContentType.
type CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody = MeasurementStudiesSurvey

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CheckDSPAudienceResearchEligibilityWithBody request with any body
	CheckDSPAudienceResearchEligibilityWithBody(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	CheckDSPAudienceResearchEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, body CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error)

	// CheckDSPBrandLiftEligibilityWithBody request with any body
	CheckDSPBrandLiftEligibilityWithBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV1PlusJSONBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody) (*http.Response, error)

	CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Response, error)

	// CheckDSPCreativeTestingEligibilityWithBody request with any body
	CheckDSPCreativeTestingEligibilityWithBody(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	CheckDSPCreativeTestingEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, body CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error)

	// CheckDSPOmnichannelMetricsEligibilityWithBody request with any body
	CheckDSPOmnichannelMetricsEligibilityWithBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error)

	CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Response, error)

	// GetDSPAudienceResearchStudies request
	GetDSPAudienceResearchStudies(ctx context.Context, params *GetDSPAudienceResearchStudiesParams) (*http.Response, error)

	// CreateDSPAudienceResearchStudyWithBody request with any body
	CreateDSPAudienceResearchStudyWithBody(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, body CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	// UpdateDSPAudienceResearchStudyWithBody request with any body
	UpdateDSPAudienceResearchStudyWithBody(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, body UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	// GetDSPAudienceResearchStudyResult request
	GetDSPAudienceResearchStudyResult(ctx context.Context, studyId string, params *GetDSPAudienceResearchStudyResultParams) (*http.Response, error)

	// GetDSPBrandLiftStudies request
	GetDSPBrandLiftStudies(ctx context.Context, params *GetDSPBrandLiftStudiesParams) (*http.Response, error)

	// CreateDSPBrandLiftStudiesWithBody request with any body
	CreateDSPBrandLiftStudiesWithBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// UpdateDSPBrandLiftStudiesWithBody request with any body
	UpdateDSPBrandLiftStudiesWithBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// GetDSPCreativeTestingStudies request
	GetDSPCreativeTestingStudies(ctx context.Context, params *GetDSPCreativeTestingStudiesParams) (*http.Response, error)

	// CreateDSPCreativeTestingStudyWithBody request with any body
	CreateDSPCreativeTestingStudyWithBody(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, body CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	// UpdateDSPCreativeTestingStudyWithBody request with any body
	UpdateDSPCreativeTestingStudyWithBody(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, body UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	// GetDSPCreativeTestingStudyResult request
	GetDSPCreativeTestingStudyResult(ctx context.Context, studyId string, params *GetDSPCreativeTestingStudyResultParams) (*http.Response, error)

	// GetDSPOmnichannelMetricsStudies request
	GetDSPOmnichannelMetricsStudies(ctx context.Context, params *GetDSPOmnichannelMetricsStudiesParams) (*http.Response, error)

	// CreateDSPOmnichannelMetricsStudiesWithBody request with any body
	CreateDSPOmnichannelMetricsStudiesWithBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// UpdateDSPOmnichannelMetricsStudiesWithBody request with any body
	UpdateDSPOmnichannelMetricsStudiesWithBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// GetDSPOmnichannelMetricsStudyResult request
	GetDSPOmnichannelMetricsStudyResult(ctx context.Context, studyId string, params *GetDSPOmnichannelMetricsStudyResultParams) (*http.Response, error)

	// CheckPlanningEligibilityWithBody request with any body
	CheckPlanningEligibilityWithBody(ctx context.Context, params *CheckPlanningEligibilityParams, contentType string, body io.Reader) (*http.Response, error)

	CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Response, error)

	CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Response, error)

	// CancelMeasurementStudies request
	CancelMeasurementStudies(ctx context.Context, params *CancelMeasurementStudiesParams) (*http.Response, error)

	// GetStudies request
	GetStudies(ctx context.Context, params *GetStudiesParams) (*http.Response, error)

	// GetDSPBrandLiftStudyResult request
	GetDSPBrandLiftStudyResult(ctx context.Context, studyId string, params *GetDSPBrandLiftStudyResultParams) (*http.Response, error)

	// GetSurveys request
	GetSurveys(ctx context.Context, params *GetSurveysParams) (*http.Response, error)

	// CreateSurveysWithBody request with any body
	CreateSurveysWithBody(ctx context.Context, params *CreateSurveysParams, contentType string, body io.Reader) (*http.Response, error)

	CreateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error)

	CreateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error)

	CreateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	CreateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// UpdateSurveysWithBody request with any body
	UpdateSurveysWithBody(ctx context.Context, params *UpdateSurveysParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error)

	UpdateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error)

	UpdateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error)

	UpdateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error)

	// GetCuratedStudyResult request
	GetCuratedStudyResult(ctx context.Context, studyId string, params *GetCuratedStudyResultParams) (*http.Response, error)

	// VendorProductWithBody request with any body
	VendorProductWithBody(ctx context.Context, params *VendorProductParams, contentType string, body io.Reader) (*http.Response, error)

	VendorProductWithApplicationVndMeasurementvendorV1PlusJSONBody(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody) (*http.Response, error)

	VendorProductWithApplicationVndMeasurementvendorV11PlusJSONBody(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody) (*http.Response, error)

	// OmnichannelMetricsBrandSearchWithBody request with any body
	OmnichannelMetricsBrandSearchWithBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, contentType string, body io.Reader) (*http.Response, error)

	OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV12PlusJSONBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody) (*http.Response, error)

	OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV13PlusJSONBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody) (*http.Response, error)

	// VendorProductPolicy request
	VendorProductPolicy(ctx context.Context, params *VendorProductPolicyParams) (*http.Response, error)

	// VendorProductSurveyQuestionTemplates request
	VendorProductSurveyQuestionTemplates(ctx context.Context, params *VendorProductSurveyQuestionTemplatesParams) (*http.Response, error)

	// UpdateMeasurementStudiesBrandLiftWithBody request with any body
	UpdateMeasurementStudiesBrandLiftWithBody(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateMeasurementStudiesBrandLiftWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, body UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody) (*http.Response, error)

	// CreateMeasurementStudiesSurveyWithBody request with any body
	CreateMeasurementStudiesSurveyWithBody(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, contentType string, body io.Reader) (*http.Response, error)

	CreateMeasurementStudiesSurveyWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, body CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) CheckDSPAudienceResearchEligibilityWithBody(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckDSPAudienceResearchEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPAudienceResearchEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, body CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPAudienceResearchEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPBrandLiftEligibilityWithBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckDSPBrandLiftEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV1PlusJSONBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPCreativeTestingEligibilityWithBody(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckDSPCreativeTestingEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPCreativeTestingEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, body CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPCreativeTestingEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPOmnichannelMetricsEligibilityWithBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckDSPOmnichannelMetricsEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPAudienceResearchStudies(ctx context.Context, params *GetDSPAudienceResearchStudiesParams) (*http.Response, error) {
	req, err := NewGetDSPAudienceResearchStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPAudienceResearchStudyWithBody(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDSPAudienceResearchStudyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, body CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPAudienceResearchStudyWithBody(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDSPAudienceResearchStudyRequestWithBody(c.Server, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, body UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, studyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPAudienceResearchStudyResult(ctx context.Context, studyId string, params *GetDSPAudienceResearchStudyResultParams) (*http.Response, error) {
	req, err := NewGetDSPAudienceResearchStudyResultRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPBrandLiftStudies(ctx context.Context, params *GetDSPBrandLiftStudiesParams) (*http.Response, error) {
	req, err := NewGetDSPBrandLiftStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPBrandLiftStudiesWithBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDSPBrandLiftStudiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPBrandLiftStudiesWithBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDSPBrandLiftStudiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPCreativeTestingStudies(ctx context.Context, params *GetDSPCreativeTestingStudiesParams) (*http.Response, error) {
	req, err := NewGetDSPCreativeTestingStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPCreativeTestingStudyWithBody(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDSPCreativeTestingStudyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, body CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPCreativeTestingStudyWithBody(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDSPCreativeTestingStudyRequestWithBody(c.Server, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, body UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, studyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPCreativeTestingStudyResult(ctx context.Context, studyId string, params *GetDSPCreativeTestingStudyResultParams) (*http.Response, error) {
	req, err := NewGetDSPCreativeTestingStudyResultRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPOmnichannelMetricsStudies(ctx context.Context, params *GetDSPOmnichannelMetricsStudiesParams) (*http.Response, error) {
	req, err := NewGetDSPOmnichannelMetricsStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPOmnichannelMetricsStudiesWithBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDSPOmnichannelMetricsStudiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPOmnichannelMetricsStudiesWithBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDSPOmnichannelMetricsStudiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPOmnichannelMetricsStudyResult(ctx context.Context, studyId string, params *GetDSPOmnichannelMetricsStudyResultParams) (*http.Response, error) {
	req, err := NewGetDSPOmnichannelMetricsStudyResultRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckPlanningEligibilityWithBody(ctx context.Context, params *CheckPlanningEligibilityParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckPlanningEligibilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CancelMeasurementStudies(ctx context.Context, params *CancelMeasurementStudiesParams) (*http.Response, error) {
	req, err := NewCancelMeasurementStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetStudies(ctx context.Context, params *GetStudiesParams) (*http.Response, error) {
	req, err := NewGetStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDSPBrandLiftStudyResult(ctx context.Context, studyId string, params *GetDSPBrandLiftStudyResultParams) (*http.Response, error) {
	req, err := NewGetDSPBrandLiftStudyResultRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSurveys(ctx context.Context, params *GetSurveysParams) (*http.Response, error) {
	req, err := NewGetSurveysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSurveysWithBody(ctx context.Context, params *CreateSurveysParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSurveysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSurveysWithBody(ctx context.Context, params *UpdateSurveysParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSurveysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCuratedStudyResult(ctx context.Context, studyId string, params *GetCuratedStudyResultParams) (*http.Response, error) {
	req, err := NewGetCuratedStudyResultRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) VendorProductWithBody(ctx context.Context, params *VendorProductParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewVendorProductRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) VendorProductWithApplicationVndMeasurementvendorV1PlusJSONBody(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewVendorProductRequestWithApplicationVndMeasurementvendorV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) VendorProductWithApplicationVndMeasurementvendorV11PlusJSONBody(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewVendorProductRequestWithApplicationVndMeasurementvendorV11PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) OmnichannelMetricsBrandSearchWithBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewOmnichannelMetricsBrandSearchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV12PlusJSONBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV12PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV13PlusJSONBody(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV13PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) VendorProductPolicy(ctx context.Context, params *VendorProductPolicyParams) (*http.Response, error) {
	req, err := NewVendorProductPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) VendorProductSurveyQuestionTemplates(ctx context.Context, params *VendorProductSurveyQuestionTemplatesParams) (*http.Response, error) {
	req, err := NewVendorProductSurveyQuestionTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateMeasurementStudiesBrandLiftWithBody(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateMeasurementStudiesBrandLiftRequestWithBody(c.Server, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateMeasurementStudiesBrandLiftWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, body UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateMeasurementStudiesBrandLiftRequestWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody(c.Server, studyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateMeasurementStudiesSurveyWithBody(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateMeasurementStudiesSurveyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateMeasurementStudiesSurveyWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, body CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateMeasurementStudiesSurveyRequestWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewCheckDSPAudienceResearchEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody calls the generic CheckDSPAudienceResearchEligibility builder with application/vnd.measurementeligibility.v1.2+json body
func NewCheckDSPAudienceResearchEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(server string, params *CheckDSPAudienceResearchEligibilityParams, body CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPAudienceResearchEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.2+json", bodyReader)
}

// NewCheckDSPAudienceResearchEligibilityRequestWithBody generates requests for CheckDSPAudienceResearchEligibility with any type of body
func NewCheckDSPAudienceResearchEligibilityRequestWithBody(server string, params *CheckDSPAudienceResearchEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/eligibility/audienceResearch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV1PlusJSONBody calls the generic CheckDSPBrandLiftEligibility builder with application/vnd.measurementeligibility.v1+json body
func NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV1PlusJSONBody(server string, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPBrandLiftEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1+json", bodyReader)
}

// NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody calls the generic CheckDSPBrandLiftEligibility builder with application/vnd.measurementeligibility.v1.1+json body
func NewCheckDSPBrandLiftEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody(server string, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPBrandLiftEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.1+json", bodyReader)
}

// NewCheckDSPBrandLiftEligibilityRequestWithBody generates requests for CheckDSPBrandLiftEligibility with any type of body
func NewCheckDSPBrandLiftEligibilityRequestWithBody(server string, params *CheckDSPBrandLiftEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/eligibility/brandLift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCheckDSPCreativeTestingEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody calls the generic CheckDSPCreativeTestingEligibility builder with application/vnd.measurementeligibility.v1.2+json body
func NewCheckDSPCreativeTestingEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(server string, params *CheckDSPCreativeTestingEligibilityParams, body CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPCreativeTestingEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.2+json", bodyReader)
}

// NewCheckDSPCreativeTestingEligibilityRequestWithBody generates requests for CheckDSPCreativeTestingEligibility with any type of body
func NewCheckDSPCreativeTestingEligibilityRequestWithBody(server string, params *CheckDSPCreativeTestingEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/eligibility/creativeTesting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody calls the generic CheckDSPOmnichannelMetricsEligibility builder with application/vnd.measurementeligibility.v1.2+json body
func NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV12PlusJSONBody(server string, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPOmnichannelMetricsEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.2+json", bodyReader)
}

// NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody calls the generic CheckDSPOmnichannelMetricsEligibility builder with application/vnd.measurementeligibility.v1.3+json body
func NewCheckDSPOmnichannelMetricsEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody(server string, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckDSPOmnichannelMetricsEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.3+json", bodyReader)
}

// NewCheckDSPOmnichannelMetricsEligibilityRequestWithBody generates requests for CheckDSPOmnichannelMetricsEligibility with any type of body
func NewCheckDSPOmnichannelMetricsEligibilityRequestWithBody(server string, params *CheckDSPOmnichannelMetricsEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/eligibility/omnichannelMetrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPAudienceResearchStudiesRequest generates requests for GetDSPAudienceResearchStudies
func NewGetDSPAudienceResearchStudiesRequest(server string, params *GetDSPAudienceResearchStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/audienceResearch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIds", runtime.ParamLocationQuery, *params.StudyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic CreateDSPAudienceResearchStudy builder with application/vnd.studymanagement.v1.2+json body
func NewCreateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *CreateDSPAudienceResearchStudyParams, body CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPAudienceResearchStudyRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewCreateDSPAudienceResearchStudyRequestWithBody generates requests for CreateDSPAudienceResearchStudy with any type of body
func NewCreateDSPAudienceResearchStudyRequestWithBody(server string, params *CreateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/audienceResearch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic UpdateDSPAudienceResearchStudy builder with application/vnd.studymanagement.v1.2+json body
func NewUpdateDSPAudienceResearchStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, studyId string, params *UpdateDSPAudienceResearchStudyParams, body UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPAudienceResearchStudyRequestWithBody(server, studyId, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewUpdateDSPAudienceResearchStudyRequestWithBody generates requests for UpdateDSPAudienceResearchStudy with any type of body
func NewUpdateDSPAudienceResearchStudyRequestWithBody(server string, studyId string, params *UpdateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/audienceResearch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPAudienceResearchStudyResultRequest generates requests for GetDSPAudienceResearchStudyResult
func NewGetDSPAudienceResearchStudyResultRequest(server string, studyId string, params *GetDSPAudienceResearchStudyResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/audienceResearch/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam2)

	}

	return req, nil
}

// NewGetDSPBrandLiftStudiesRequest generates requests for GetDSPBrandLiftStudies
func NewGetDSPBrandLiftStudiesRequest(server string, params *GetDSPBrandLiftStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/brandLift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIdFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIdFilters", runtime.ParamLocationQuery, *params.StudyIdFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody calls the generic CreateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1+json body
func NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody(server string, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1+json", bodyReader)
}

// NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody calls the generic CreateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.1+json body
func NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody(server string, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.1+json", bodyReader)
}

// NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic CreateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.2+json body
func NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic CreateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.3+json body
func NewCreateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewCreateDSPBrandLiftStudiesRequestWithBody generates requests for CreateDSPBrandLiftStudies with any type of body
func NewCreateDSPBrandLiftStudiesRequestWithBody(server string, params *CreateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/brandLift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody calls the generic UpdateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1+json body
func NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV1PlusJSONBody(server string, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1+json", bodyReader)
}

// NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody calls the generic UpdateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.1+json body
func NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV11PlusJSONBody(server string, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.1+json", bodyReader)
}

// NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic UpdateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.2+json body
func NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic UpdateDSPBrandLiftStudies builder with application/vnd.studymanagement.v1.3+json body
func NewUpdateDSPBrandLiftStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPBrandLiftStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewUpdateDSPBrandLiftStudiesRequestWithBody generates requests for UpdateDSPBrandLiftStudies with any type of body
func NewUpdateDSPBrandLiftStudiesRequestWithBody(server string, params *UpdateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/brandLift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPCreativeTestingStudiesRequest generates requests for GetDSPCreativeTestingStudies
func NewGetDSPCreativeTestingStudiesRequest(server string, params *GetDSPCreativeTestingStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/creativeTesting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIds", runtime.ParamLocationQuery, *params.StudyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic CreateDSPCreativeTestingStudy builder with application/vnd.studymanagement.v1.2+json body
func NewCreateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *CreateDSPCreativeTestingStudyParams, body CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPCreativeTestingStudyRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewCreateDSPCreativeTestingStudyRequestWithBody generates requests for CreateDSPCreativeTestingStudy with any type of body
func NewCreateDSPCreativeTestingStudyRequestWithBody(server string, params *CreateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/creativeTesting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic UpdateDSPCreativeTestingStudy builder with application/vnd.studymanagement.v1.2+json body
func NewUpdateDSPCreativeTestingStudyRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, studyId string, params *UpdateDSPCreativeTestingStudyParams, body UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPCreativeTestingStudyRequestWithBody(server, studyId, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewUpdateDSPCreativeTestingStudyRequestWithBody generates requests for UpdateDSPCreativeTestingStudy with any type of body
func NewUpdateDSPCreativeTestingStudyRequestWithBody(server string, studyId string, params *UpdateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/creativeTesting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPCreativeTestingStudyResultRequest generates requests for GetDSPCreativeTestingStudyResult
func NewGetDSPCreativeTestingStudyResultRequest(server string, studyId string, params *GetDSPCreativeTestingStudyResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/creativeTesting/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam2)

	}

	return req, nil
}

// NewGetDSPOmnichannelMetricsStudiesRequest generates requests for GetDSPOmnichannelMetricsStudies
func NewGetDSPOmnichannelMetricsStudiesRequest(server string, params *GetDSPOmnichannelMetricsStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/omnichannelMetrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIds", runtime.ParamLocationQuery, *params.StudyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic CreateDSPOmnichannelMetricsStudies builder with application/vnd.studymanagement.v1.2+json body
func NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPOmnichannelMetricsStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic CreateDSPOmnichannelMetricsStudies builder with application/vnd.studymanagement.v1.3+json body
func NewCreateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDSPOmnichannelMetricsStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewCreateDSPOmnichannelMetricsStudiesRequestWithBody generates requests for CreateDSPOmnichannelMetricsStudies with any type of body
func NewCreateDSPOmnichannelMetricsStudiesRequestWithBody(server string, params *CreateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/omnichannelMetrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic UpdateDSPOmnichannelMetricsStudies builder with application/vnd.studymanagement.v1.2+json body
func NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPOmnichannelMetricsStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic UpdateDSPOmnichannelMetricsStudies builder with application/vnd.studymanagement.v1.3+json body
func NewUpdateDSPOmnichannelMetricsStudiesRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDSPOmnichannelMetricsStudiesRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewUpdateDSPOmnichannelMetricsStudiesRequestWithBody generates requests for UpdateDSPOmnichannelMetricsStudies with any type of body
func NewUpdateDSPOmnichannelMetricsStudiesRequestWithBody(server string, params *UpdateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/omnichannelMetrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPOmnichannelMetricsStudyResultRequest generates requests for GetDSPOmnichannelMetricsStudyResult
func NewGetDSPOmnichannelMetricsStudyResultRequest(server string, studyId string, params *GetDSPOmnichannelMetricsStudyResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/measurement/studies/omnichannelMetrics/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam2)

	}

	return req, nil
}

// NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody calls the generic CheckPlanningEligibility builder with application/vnd.measurementeligibility.v1.1+json body
func NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV11PlusJSONBody(server string, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckPlanningEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.1+json", bodyReader)
}

// NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody calls the generic CheckPlanningEligibility builder with application/vnd.measurementeligibility.v1.3+json body
func NewCheckPlanningEligibilityRequestWithApplicationVndMeasurementeligibilityV13PlusJSONBody(server string, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckPlanningEligibilityRequestWithBody(server, params, "application/vnd.measurementeligibility.v1.3+json", bodyReader)
}

// NewCheckPlanningEligibilityRequestWithBody generates requests for CheckPlanningEligibility with any type of body
func NewCheckPlanningEligibilityRequestWithBody(server string, params *CheckPlanningEligibilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/planning/eligibility")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCancelMeasurementStudiesRequest generates requests for CancelMeasurementStudies
func NewCancelMeasurementStudiesRequest(server string, params *CancelMeasurementStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIds", runtime.ParamLocationQuery, *params.StudyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetStudiesRequest generates requests for GetStudies
func NewGetStudiesRequest(server string, params *GetStudiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StudyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "studyIds", runtime.ParamLocationQuery, *params.StudyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDSPBrandLiftStudyResultRequest generates requests for GetDSPBrandLiftStudyResult
func NewGetDSPBrandLiftStudyResultRequest(server string, studyId string, params *GetDSPBrandLiftStudyResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies/brandLift/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam2)

	}

	return req, nil
}

// NewGetSurveysRequest generates requests for GetSurveys
func NewGetSurveysRequest(server string, params *GetSurveysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies/surveys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SurveyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "surveyIds", runtime.ParamLocationQuery, *params.SurveyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StudyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "studyId", runtime.ParamLocationQuery, *params.StudyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody calls the generic CreateSurveys builder with application/vnd.studymanagement.v1+json body
func NewCreateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody(server string, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1+json", bodyReader)
}

// NewCreateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody calls the generic CreateSurveys builder with application/vnd.studymanagement.v1.1+json body
func NewCreateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody(server string, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.1+json", bodyReader)
}

// NewCreateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic CreateSurveys builder with application/vnd.studymanagement.v1.2+json body
func NewCreateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewCreateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic CreateSurveys builder with application/vnd.studymanagement.v1.3+json body
func NewCreateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewCreateSurveysRequestWithBody generates requests for CreateSurveys with any type of body
func NewCreateSurveysRequestWithBody(server string, params *CreateSurveysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies/surveys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody calls the generic UpdateSurveys builder with application/vnd.studymanagement.v1+json body
func NewUpdateSurveysRequestWithApplicationVndStudymanagementV1PlusJSONBody(server string, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1+json", bodyReader)
}

// NewUpdateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody calls the generic UpdateSurveys builder with application/vnd.studymanagement.v1.1+json body
func NewUpdateSurveysRequestWithApplicationVndStudymanagementV11PlusJSONBody(server string, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.1+json", bodyReader)
}

// NewUpdateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody calls the generic UpdateSurveys builder with application/vnd.studymanagement.v1.2+json body
func NewUpdateSurveysRequestWithApplicationVndStudymanagementV12PlusJSONBody(server string, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.2+json", bodyReader)
}

// NewUpdateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody calls the generic UpdateSurveys builder with application/vnd.studymanagement.v1.3+json body
func NewUpdateSurveysRequestWithApplicationVndStudymanagementV13PlusJSONBody(server string, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSurveysRequestWithBody(server, params, "application/vnd.studymanagement.v1.3+json", bodyReader)
}

// NewUpdateSurveysRequestWithBody generates requests for UpdateSurveys with any type of body
func NewUpdateSurveysRequestWithBody(server string, params *UpdateSurveysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies/surveys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCuratedStudyResultRequest generates requests for GetCuratedStudyResult
func NewGetCuratedStudyResultRequest(server string, studyId string, params *GetCuratedStudyResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/studies/%s/curatedResult/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam2)

	}

	return req, nil
}

// NewVendorProductRequestWithApplicationVndMeasurementvendorV1PlusJSONBody calls the generic VendorProduct builder with application/vnd.measurementvendor.v1+json body
func NewVendorProductRequestWithApplicationVndMeasurementvendorV1PlusJSONBody(server string, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVendorProductRequestWithBody(server, params, "application/vnd.measurementvendor.v1+json", bodyReader)
}

// NewVendorProductRequestWithApplicationVndMeasurementvendorV11PlusJSONBody calls the generic VendorProduct builder with application/vnd.measurementvendor.v1.1+json body
func NewVendorProductRequestWithApplicationVndMeasurementvendorV11PlusJSONBody(server string, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVendorProductRequestWithBody(server, params, "application/vnd.measurementvendor.v1.1+json", bodyReader)
}

// NewVendorProductRequestWithBody generates requests for VendorProduct with any type of body
func NewVendorProductRequestWithBody(server string, params *VendorProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/vendorProducts/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV12PlusJSONBody calls the generic OmnichannelMetricsBrandSearch builder with application/vnd.ocmbrands.v1.2+json body
func NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV12PlusJSONBody(server string, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOmnichannelMetricsBrandSearchRequestWithBody(server, params, "application/vnd.ocmbrands.v1.2+json", bodyReader)
}

// NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV13PlusJSONBody calls the generic OmnichannelMetricsBrandSearch builder with application/vnd.ocmbrands.v1.3+json body
func NewOmnichannelMetricsBrandSearchRequestWithApplicationVndOcmbrandsV13PlusJSONBody(server string, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOmnichannelMetricsBrandSearchRequestWithBody(server, params, "application/vnd.ocmbrands.v1.3+json", bodyReader)
}

// NewOmnichannelMetricsBrandSearchRequestWithBody generates requests for OmnichannelMetricsBrandSearch with any type of body
func NewOmnichannelMetricsBrandSearchRequestWithBody(server string, params *OmnichannelMetricsBrandSearchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/vendorProducts/omnichannelMetrics/brands/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewVendorProductPolicyRequest generates requests for VendorProductPolicy
func NewVendorProductPolicyRequest(server string, params *VendorProductPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/vendorProducts/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VendorProductIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "vendorProductIds", runtime.ParamLocationQuery, *params.VendorProductIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewVendorProductSurveyQuestionTemplatesRequest generates requests for VendorProductSurveyQuestionTemplates
func NewVendorProductSurveyQuestionTemplatesRequest(server string, params *VendorProductSurveyQuestionTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurement/vendorProducts/surveyQuestionTemplates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VendorProductIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "vendorProductIds", runtime.ParamLocationQuery, *params.VendorProductIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.SurveyQuestionTemplateIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "surveyQuestionTemplateIds", runtime.ParamLocationQuery, *params.SurveyQuestionTemplateIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateMeasurementStudiesBrandLiftRequestWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody calls the generic UpdateMeasurementStudiesBrandLift builder with application/vnd.measurementstudiesbrandlift.v1+json body
func NewUpdateMeasurementStudiesBrandLiftRequestWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody(server string, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, body UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMeasurementStudiesBrandLiftRequestWithBody(server, studyId, params, "application/vnd.measurementstudiesbrandlift.v1+json", bodyReader)
}

// NewUpdateMeasurementStudiesBrandLiftRequestWithBody generates requests for UpdateMeasurementStudiesBrandLift with any type of body
func NewUpdateMeasurementStudiesBrandLiftRequestWithBody(server string, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurementStudies/brandLift/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateMeasurementStudiesSurveyRequestWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody calls the generic CreateMeasurementStudiesSurvey builder with application/vnd.measurementstudiessurvey.v1+json body
func NewCreateMeasurementStudiesSurveyRequestWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody(server string, params *CreateMeasurementStudiesSurveyParams, body CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMeasurementStudiesSurveyRequestWithBody(server, params, "application/vnd.measurementstudiessurvey.v1+json", bodyReader)
}

// NewCreateMeasurementStudiesSurveyRequestWithBody generates requests for CreateMeasurementStudiesSurvey with any type of body
func NewCreateMeasurementStudiesSurveyRequestWithBody(server string, params *CreateMeasurementStudiesSurveyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/measurementStudies/surveys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CheckDSPAudienceResearchEligibilityWithBodyWithResponse request with any body
	CheckDSPAudienceResearchEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, contentType string, body io.Reader) (*CheckDSPAudienceResearchEligibilityResp, error)

	CheckDSPAudienceResearchEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, body CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPAudienceResearchEligibilityResp, error)

	// CheckDSPBrandLiftEligibilityWithBodyWithResponse request with any body
	CheckDSPBrandLiftEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, contentType string, body io.Reader) (*CheckDSPBrandLiftEligibilityResp, error)

	CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV1PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody) (*CheckDSPBrandLiftEligibilityResp, error)

	CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*CheckDSPBrandLiftEligibilityResp, error)

	// CheckDSPCreativeTestingEligibilityWithBodyWithResponse request with any body
	CheckDSPCreativeTestingEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, contentType string, body io.Reader) (*CheckDSPCreativeTestingEligibilityResp, error)

	CheckDSPCreativeTestingEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, body CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPCreativeTestingEligibilityResp, error)

	// CheckDSPOmnichannelMetricsEligibilityWithBodyWithResponse request with any body
	CheckDSPOmnichannelMetricsEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, contentType string, body io.Reader) (*CheckDSPOmnichannelMetricsEligibilityResp, error)

	CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPOmnichannelMetricsEligibilityResp, error)

	CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*CheckDSPOmnichannelMetricsEligibilityResp, error)

	// GetDSPAudienceResearchStudiesWithResponse request
	GetDSPAudienceResearchStudiesWithResponse(ctx context.Context, params *GetDSPAudienceResearchStudiesParams) (*GetDSPAudienceResearchStudiesResp, error)

	// CreateDSPAudienceResearchStudyWithBodyWithResponse request with any body
	CreateDSPAudienceResearchStudyWithBodyWithResponse(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*CreateDSPAudienceResearchStudyResp, error)

	CreateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, body CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPAudienceResearchStudyResp, error)

	// UpdateDSPAudienceResearchStudyWithBodyWithResponse request with any body
	UpdateDSPAudienceResearchStudyWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*UpdateDSPAudienceResearchStudyResp, error)

	UpdateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, body UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPAudienceResearchStudyResp, error)

	// GetDSPAudienceResearchStudyResultWithResponse request
	GetDSPAudienceResearchStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPAudienceResearchStudyResultParams) (*GetDSPAudienceResearchStudyResultResp, error)

	// GetDSPBrandLiftStudiesWithResponse request
	GetDSPBrandLiftStudiesWithResponse(ctx context.Context, params *GetDSPBrandLiftStudiesParams) (*GetDSPBrandLiftStudiesResp, error)

	// CreateDSPBrandLiftStudiesWithBodyWithResponse request with any body
	CreateDSPBrandLiftStudiesWithBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*CreateDSPBrandLiftStudiesResp, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error)

	CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error)

	// UpdateDSPBrandLiftStudiesWithBodyWithResponse request with any body
	UpdateDSPBrandLiftStudiesWithBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*UpdateDSPBrandLiftStudiesResp, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error)

	UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error)

	// GetDSPCreativeTestingStudiesWithResponse request
	GetDSPCreativeTestingStudiesWithResponse(ctx context.Context, params *GetDSPCreativeTestingStudiesParams) (*GetDSPCreativeTestingStudiesResp, error)

	// CreateDSPCreativeTestingStudyWithBodyWithResponse request with any body
	CreateDSPCreativeTestingStudyWithBodyWithResponse(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*CreateDSPCreativeTestingStudyResp, error)

	CreateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, body CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPCreativeTestingStudyResp, error)

	// UpdateDSPCreativeTestingStudyWithBodyWithResponse request with any body
	UpdateDSPCreativeTestingStudyWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*UpdateDSPCreativeTestingStudyResp, error)

	UpdateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, body UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPCreativeTestingStudyResp, error)

	// GetDSPCreativeTestingStudyResultWithResponse request
	GetDSPCreativeTestingStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPCreativeTestingStudyResultParams) (*GetDSPCreativeTestingStudyResultResp, error)

	// GetDSPOmnichannelMetricsStudiesWithResponse request
	GetDSPOmnichannelMetricsStudiesWithResponse(ctx context.Context, params *GetDSPOmnichannelMetricsStudiesParams) (*GetDSPOmnichannelMetricsStudiesResp, error)

	// CreateDSPOmnichannelMetricsStudiesWithBodyWithResponse request with any body
	CreateDSPOmnichannelMetricsStudiesWithBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*CreateDSPOmnichannelMetricsStudiesResp, error)

	CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPOmnichannelMetricsStudiesResp, error)

	CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateDSPOmnichannelMetricsStudiesResp, error)

	// UpdateDSPOmnichannelMetricsStudiesWithBodyWithResponse request with any body
	UpdateDSPOmnichannelMetricsStudiesWithBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*UpdateDSPOmnichannelMetricsStudiesResp, error)

	UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPOmnichannelMetricsStudiesResp, error)

	UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateDSPOmnichannelMetricsStudiesResp, error)

	// GetDSPOmnichannelMetricsStudyResultWithResponse request
	GetDSPOmnichannelMetricsStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPOmnichannelMetricsStudyResultParams) (*GetDSPOmnichannelMetricsStudyResultResp, error)

	// CheckPlanningEligibilityWithBodyWithResponse request with any body
	CheckPlanningEligibilityWithBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, contentType string, body io.Reader) (*CheckPlanningEligibilityResp, error)

	CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*CheckPlanningEligibilityResp, error)

	CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*CheckPlanningEligibilityResp, error)

	// CancelMeasurementStudiesWithResponse request
	CancelMeasurementStudiesWithResponse(ctx context.Context, params *CancelMeasurementStudiesParams) (*CancelMeasurementStudiesResp, error)

	// GetStudiesWithResponse request
	GetStudiesWithResponse(ctx context.Context, params *GetStudiesParams) (*GetStudiesResp, error)

	// GetDSPBrandLiftStudyResultWithResponse request
	GetDSPBrandLiftStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPBrandLiftStudyResultParams) (*GetDSPBrandLiftStudyResultResp, error)

	// GetSurveysWithResponse request
	GetSurveysWithResponse(ctx context.Context, params *GetSurveysParams) (*GetSurveysResp, error)

	// CreateSurveysWithBodyWithResponse request with any body
	CreateSurveysWithBodyWithResponse(ctx context.Context, params *CreateSurveysParams, contentType string, body io.Reader) (*CreateSurveysResp, error)

	CreateSurveysWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*CreateSurveysResp, error)

	CreateSurveysWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*CreateSurveysResp, error)

	CreateSurveysWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateSurveysResp, error)

	CreateSurveysWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateSurveysResp, error)

	// UpdateSurveysWithBodyWithResponse request with any body
	UpdateSurveysWithBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, contentType string, body io.Reader) (*UpdateSurveysResp, error)

	UpdateSurveysWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*UpdateSurveysResp, error)

	UpdateSurveysWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*UpdateSurveysResp, error)

	UpdateSurveysWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateSurveysResp, error)

	UpdateSurveysWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateSurveysResp, error)

	// GetCuratedStudyResultWithResponse request
	GetCuratedStudyResultWithResponse(ctx context.Context, studyId string, params *GetCuratedStudyResultParams) (*GetCuratedStudyResultResp, error)

	// VendorProductWithBodyWithResponse request with any body
	VendorProductWithBodyWithResponse(ctx context.Context, params *VendorProductParams, contentType string, body io.Reader) (*VendorProductResp, error)

	VendorProductWithApplicationVndMeasurementvendorV1PlusJSONBodyWithResponse(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody) (*VendorProductResp, error)

	VendorProductWithApplicationVndMeasurementvendorV11PlusJSONBodyWithResponse(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody) (*VendorProductResp, error)

	// OmnichannelMetricsBrandSearchWithBodyWithResponse request with any body
	OmnichannelMetricsBrandSearchWithBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, contentType string, body io.Reader) (*OmnichannelMetricsBrandSearchResp, error)

	OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV12PlusJSONBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody) (*OmnichannelMetricsBrandSearchResp, error)

	OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV13PlusJSONBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody) (*OmnichannelMetricsBrandSearchResp, error)

	// VendorProductPolicyWithResponse request
	VendorProductPolicyWithResponse(ctx context.Context, params *VendorProductPolicyParams) (*VendorProductPolicyResp, error)

	// VendorProductSurveyQuestionTemplatesWithResponse request
	VendorProductSurveyQuestionTemplatesWithResponse(ctx context.Context, params *VendorProductSurveyQuestionTemplatesParams) (*VendorProductSurveyQuestionTemplatesResp, error)

	// UpdateMeasurementStudiesBrandLiftWithBodyWithResponse request with any body
	UpdateMeasurementStudiesBrandLiftWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, contentType string, body io.Reader) (*UpdateMeasurementStudiesBrandLiftResp, error)

	UpdateMeasurementStudiesBrandLiftWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, body UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody) (*UpdateMeasurementStudiesBrandLiftResp, error)

	// CreateMeasurementStudiesSurveyWithBodyWithResponse request with any body
	CreateMeasurementStudiesSurveyWithBodyWithResponse(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, contentType string, body io.Reader) (*CreateMeasurementStudiesSurveyResp, error)

	CreateMeasurementStudiesSurveyWithApplicationVndMeasurementstudiessurveyV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, body CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody) (*CreateMeasurementStudiesSurveyResp, error)
}

type CheckDSPAudienceResearchEligibilityResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndMeasurementeligibilityV12JSON200 *EligibilityResponseV1M2
	ApplicationvndMeasurementeligibilityV12JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CheckDSPAudienceResearchEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDSPAudienceResearchEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckDSPBrandLiftEligibilityResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndMeasurementeligibilityV1JSON200  *EligibilityResponseV1
	ApplicationvndMeasurementeligibilityV11JSON200 *EligibilityResponseV1
	ApplicationvndMeasurementeligibilityV1JSON400  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON401  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON403  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON404  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON415  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON429  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV1JSON500  *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CheckDSPBrandLiftEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDSPBrandLiftEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckDSPCreativeTestingEligibilityResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndMeasurementeligibilityV12JSON200 *EligibilityResponseV1M2
	ApplicationvndMeasurementeligibilityV12JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CheckDSPCreativeTestingEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDSPCreativeTestingEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckDSPOmnichannelMetricsEligibilityResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndMeasurementeligibilityV12JSON200 *EligibilityResponseV1M2
	ApplicationvndMeasurementeligibilityV13JSON200 *EligibilityResponseV1M2
	ApplicationvndMeasurementeligibilityV12JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV12JSON500 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CheckDSPOmnichannelMetricsEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDSPOmnichannelMetricsEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPAudienceResearchStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *PaginatedDSPAudienceResearchStudiesV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPAudienceResearchStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPAudienceResearchStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDSPAudienceResearchStudyResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *DSPAudienceResearchStudyV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CreateDSPAudienceResearchStudyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDSPAudienceResearchStudyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDSPAudienceResearchStudyResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *DSPAudienceResearchStudyV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r UpdateDSPAudienceResearchStudyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDSPAudienceResearchStudyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPAudienceResearchStudyResultResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementresultV12JSON200 *AudienceResearchStudyResultV1M2
	ApplicationvndMeasurementresultV12JSON400 *ErrorV1
	ApplicationvndMeasurementresultV12JSON401 *ErrorV1
	ApplicationvndMeasurementresultV12JSON403 *ErrorV1
	ApplicationvndMeasurementresultV12JSON404 *ErrorV1
	ApplicationvndMeasurementresultV12JSON415 *ErrorV1
	ApplicationvndMeasurementresultV12JSON429 *ErrorV1
	ApplicationvndMeasurementresultV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPAudienceResearchStudyResultResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPAudienceResearchStudyResultResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPBrandLiftStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON200  *PaginatedDSPBrandLiftStudiesV1
	ApplicationvndStudymanagementV11JSON200 *PaginatedDSPBrandLiftStudiesV1M1
	ApplicationvndStudymanagementV12JSON200 *PaginatedDSPBrandLiftStudiesV1
	ApplicationvndStudymanagementV13JSON200 *PaginatedDSPBrandLiftStudiesV1M1
	ApplicationvndStudymanagementV1JSON400  *ErrorV1
	ApplicationvndStudymanagementV11JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV13JSON400 *ErrorV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPBrandLiftStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPBrandLiftStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDSPBrandLiftStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON207  *StudyResponsesV1
	ApplicationvndStudymanagementV11JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV12JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON422  *ErrorV1
	ApplicationvndStudymanagementV11JSON422 *ErrorV1
	ApplicationvndStudymanagementV12JSON422 *ErrorV1
	ApplicationvndStudymanagementV13JSON422 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CreateDSPBrandLiftStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDSPBrandLiftStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDSPBrandLiftStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON207  *StudyResponsesV1
	ApplicationvndStudymanagementV11JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV12JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON422  *ErrorV1
	ApplicationvndStudymanagementV11JSON422 *ErrorV1
	ApplicationvndStudymanagementV12JSON422 *ErrorV1
	ApplicationvndStudymanagementV13JSON422 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r UpdateDSPBrandLiftStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDSPBrandLiftStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPCreativeTestingStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *PaginatedDSPCreativeTestingStudiesV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPCreativeTestingStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPCreativeTestingStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDSPCreativeTestingStudyResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *DSPCreativeTestingStudyV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CreateDSPCreativeTestingStudyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDSPCreativeTestingStudyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDSPCreativeTestingStudyResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *DSPCreativeTestingStudyV1M2
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r UpdateDSPCreativeTestingStudyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDSPCreativeTestingStudyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPCreativeTestingStudyResultResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementresultV12JSON200 *CreativeTestingStudyResultV1M2
	ApplicationvndMeasurementresultV12JSON400 *ErrorV1
	ApplicationvndMeasurementresultV12JSON401 *ErrorV1
	ApplicationvndMeasurementresultV12JSON403 *ErrorV1
	ApplicationvndMeasurementresultV12JSON404 *ErrorV1
	ApplicationvndMeasurementresultV12JSON415 *ErrorV1
	ApplicationvndMeasurementresultV12JSON429 *ErrorV1
	ApplicationvndMeasurementresultV12JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPCreativeTestingStudyResultResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPCreativeTestingStudyResultResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPOmnichannelMetricsStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON200 *PaginatedDSPOmnichannelMetricsStudiesV1M2
	ApplicationvndStudymanagementV13JSON200 *PaginatedDSPOmnichannelMetricsStudiesV1M3
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV13JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPOmnichannelMetricsStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPOmnichannelMetricsStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDSPOmnichannelMetricsStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CreateDSPOmnichannelMetricsStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDSPOmnichannelMetricsStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDSPOmnichannelMetricsStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV12JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r UpdateDSPOmnichannelMetricsStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDSPOmnichannelMetricsStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPOmnichannelMetricsStudyResultResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementresultV12JSON400 *ErrorV1
	ApplicationvndMeasurementresultV13JSON400 *ErrorV1
	ApplicationvndMeasurementresultV12JSON401 *ErrorV1
	ApplicationvndMeasurementresultV13JSON401 *ErrorV1
	ApplicationvndMeasurementresultV12JSON403 *ErrorV1
	ApplicationvndMeasurementresultV13JSON403 *ErrorV1
	ApplicationvndMeasurementresultV12JSON404 *ErrorV1
	ApplicationvndMeasurementresultV13JSON404 *ErrorV1
	ApplicationvndMeasurementresultV12JSON415 *ErrorV1
	ApplicationvndMeasurementresultV13JSON415 *ErrorV1
	ApplicationvndMeasurementresultV12JSON429 *ErrorV1
	ApplicationvndMeasurementresultV13JSON429 *ErrorV1
	ApplicationvndMeasurementresultV12JSON500 *ErrorV1
	ApplicationvndMeasurementresultV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPOmnichannelMetricsStudyResultResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPOmnichannelMetricsStudyResultResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckPlanningEligibilityResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndMeasurementeligibilityV11JSON200 *PlanningEligibilityResponseV1M3
	ApplicationvndMeasurementeligibilityV13JSON200 *PlanningEligibilityResponseV1M3
	ApplicationvndMeasurementeligibilityV11JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON400 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON401 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON403 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON404 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON415 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON429 *ErrorV1
	ApplicationvndMeasurementeligibilityV11JSON500 *ErrorV1
	ApplicationvndMeasurementeligibilityV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CheckPlanningEligibilityResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckPlanningEligibilityResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelMeasurementStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON207  *StudyResponsesV1
	ApplicationvndStudymanagementV11JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV12JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *StudyResponsesV1
	ApplicationvndStudymanagementV1JSON400  *ErrorV1
	ApplicationvndStudymanagementV11JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV13JSON400 *ErrorV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CancelMeasurementStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelMeasurementStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStudiesResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON200  *PaginatedBaseStudiesV1
	ApplicationvndStudymanagementV11JSON200 *PaginatedBaseStudiesV1M1
	ApplicationvndStudymanagementV12JSON200 *PaginatedBaseStudiesV1
	ApplicationvndStudymanagementV13JSON200 *PaginatedBaseStudiesV1M1
	ApplicationvndStudymanagementV1JSON400  *ErrorV1
	ApplicationvndStudymanagementV11JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV13JSON400 *ErrorV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetStudiesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStudiesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDSPBrandLiftStudyResultResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementresultV1JSON200  *BrandLiftStudyResultV1
	ApplicationvndMeasurementresultV11JSON200 *BrandLiftStudyResultV1M1
	ApplicationvndMeasurementresultV1JSON400  *ErrorV1
	ApplicationvndMeasurementresultV11JSON400 *ErrorV1
	ApplicationvndMeasurementresultV1JSON401  *ErrorV1
	ApplicationvndMeasurementresultV11JSON401 *ErrorV1
	ApplicationvndMeasurementresultV1JSON403  *ErrorV1
	ApplicationvndMeasurementresultV11JSON403 *ErrorV1
	ApplicationvndMeasurementresultV1JSON404  *ErrorV1
	ApplicationvndMeasurementresultV11JSON404 *ErrorV1
	ApplicationvndMeasurementresultV1JSON415  *ErrorV1
	ApplicationvndMeasurementresultV11JSON415 *ErrorV1
	ApplicationvndMeasurementresultV1JSON429  *ErrorV1
	ApplicationvndMeasurementresultV11JSON429 *ErrorV1
	ApplicationvndMeasurementresultV1JSON500  *ErrorV1
	ApplicationvndMeasurementresultV11JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetDSPBrandLiftStudyResultResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDSPBrandLiftStudyResultResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSurveysResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON200  *PaginatedSurveysV1
	ApplicationvndStudymanagementV11JSON200 *PaginatedSurveysV1M1
	ApplicationvndStudymanagementV12JSON200 *PaginatedSurveysV1
	ApplicationvndStudymanagementV13JSON200 *PaginatedSurveysV1M1
	ApplicationvndStudymanagementV1JSON400  *ErrorV1
	ApplicationvndStudymanagementV11JSON400 *ErrorV1
	ApplicationvndStudymanagementV12JSON400 *ErrorV1
	ApplicationvndStudymanagementV13JSON400 *ErrorV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetSurveysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSurveysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSurveysResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON207  *SurveyResponsesV1
	ApplicationvndStudymanagementV11JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV12JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r CreateSurveysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSurveysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSurveysResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndStudymanagementV1JSON207  *SurveyResponsesV1
	ApplicationvndStudymanagementV11JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV12JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV13JSON207 *SurveyResponsesV1
	ApplicationvndStudymanagementV1JSON401  *ErrorV1
	ApplicationvndStudymanagementV11JSON401 *ErrorV1
	ApplicationvndStudymanagementV12JSON401 *ErrorV1
	ApplicationvndStudymanagementV13JSON401 *ErrorV1
	ApplicationvndStudymanagementV1JSON403  *ErrorV1
	ApplicationvndStudymanagementV11JSON403 *ErrorV1
	ApplicationvndStudymanagementV12JSON403 *ErrorV1
	ApplicationvndStudymanagementV13JSON403 *ErrorV1
	ApplicationvndStudymanagementV1JSON404  *ErrorV1
	ApplicationvndStudymanagementV11JSON404 *ErrorV1
	ApplicationvndStudymanagementV12JSON404 *ErrorV1
	ApplicationvndStudymanagementV13JSON404 *ErrorV1
	ApplicationvndStudymanagementV1JSON415  *ErrorV1
	ApplicationvndStudymanagementV11JSON415 *ErrorV1
	ApplicationvndStudymanagementV12JSON415 *ErrorV1
	ApplicationvndStudymanagementV13JSON415 *ErrorV1
	ApplicationvndStudymanagementV1JSON429  *ErrorV1
	ApplicationvndStudymanagementV11JSON429 *ErrorV1
	ApplicationvndStudymanagementV12JSON429 *ErrorV1
	ApplicationvndStudymanagementV13JSON429 *ErrorV1
	ApplicationvndStudymanagementV1JSON500  *ErrorV1
	ApplicationvndStudymanagementV11JSON500 *ErrorV1
	ApplicationvndStudymanagementV12JSON500 *ErrorV1
	ApplicationvndStudymanagementV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r UpdateSurveysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSurveysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCuratedStudyResultResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndMeasurementresultV1JSON200 *CuratedStudyResultV1
	ApplicationvndMeasurementresultV1JSON400 *ErrorV1
	ApplicationvndMeasurementresultV1JSON401 *ErrorV1
	ApplicationvndMeasurementresultV1JSON403 *ErrorV1
	ApplicationvndMeasurementresultV1JSON404 *ErrorV1
	ApplicationvndMeasurementresultV1JSON415 *ErrorV1
	ApplicationvndMeasurementresultV1JSON429 *ErrorV1
	ApplicationvndMeasurementresultV1JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r GetCuratedStudyResultResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCuratedStudyResultResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VendorProductResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementvendorV1JSON200  *PaginatedVendorProductsV1
	ApplicationvndMeasurementvendorV11JSON200 *PaginatedVendorProductsV1M1
	ApplicationvndMeasurementvendorV1JSON400  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON400 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON401  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON401 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON403  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON403 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON404  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON404 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON415  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON415 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON429  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON429 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON500  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r VendorProductResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VendorProductResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OmnichannelMetricsBrandSearchResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndOcmbrandsV12JSON200 *PaginatedOmnichannelMetricsBrandsV1M2
	ApplicationvndOcmbrandsV13JSON200 *PaginatedOmnichannelMetricsBrandsV1M2
	ApplicationvndOcmbrandsV12JSON400 *ErrorV1
	ApplicationvndOcmbrandsV13JSON400 *ErrorV1
	ApplicationvndOcmbrandsV12JSON401 *ErrorV1
	ApplicationvndOcmbrandsV13JSON401 *ErrorV1
	ApplicationvndOcmbrandsV12JSON403 *ErrorV1
	ApplicationvndOcmbrandsV13JSON403 *ErrorV1
	ApplicationvndOcmbrandsV12JSON404 *ErrorV1
	ApplicationvndOcmbrandsV13JSON404 *ErrorV1
	ApplicationvndOcmbrandsV12JSON415 *ErrorV1
	ApplicationvndOcmbrandsV13JSON415 *ErrorV1
	ApplicationvndOcmbrandsV12JSON429 *ErrorV1
	ApplicationvndOcmbrandsV13JSON429 *ErrorV1
	ApplicationvndOcmbrandsV12JSON500 *ErrorV1
	ApplicationvndOcmbrandsV13JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r OmnichannelMetricsBrandSearchResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OmnichannelMetricsBrandSearchResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VendorProductPolicyResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementvendorV1JSON200  *PaginatedVendorProductPoliciesV1
	ApplicationvndMeasurementvendorV11JSON200 *PaginatedVendorProductPoliciesV1M1
	ApplicationvndMeasurementvendorV1JSON400  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON400 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON401  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON401 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON403  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON403 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON404  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON404 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON415  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON415 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON429  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON429 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON500  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r VendorProductPolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VendorProductPolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VendorProductSurveyQuestionTemplatesResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndMeasurementvendorV1JSON200  *PaginatedSurveyQuestionTemplatesV1
	ApplicationvndMeasurementvendorV11JSON200 *PaginatedSurveyQuestionTemplatesV1M1
	ApplicationvndMeasurementvendorV1JSON400  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON400 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON401  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON401 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON403  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON403 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON404  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON404 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON415  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON415 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON429  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON429 *ErrorV1
	ApplicationvndMeasurementvendorV1JSON500  *ErrorV1
	ApplicationvndMeasurementvendorV11JSON500 *ErrorV1
}

// Status returns HTTPResponse.Status
func (r VendorProductSurveyQuestionTemplatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VendorProductSurveyQuestionTemplatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMeasurementStudiesBrandLiftResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndMeasurementstudiesbrandliftV1JSON200 *MeasurementBrandLiftStudy
	ApplicationvndMeasurementstudiesbrandliftV1JSON401 *MeasurementStudiesError
	ApplicationvndMeasurementstudiesbrandliftV1JSON403 *MeasurementStudiesError
	ApplicationvndMeasurementstudiesbrandliftV1JSON404 *MeasurementStudiesError
	ApplicationvndMeasurementstudiesbrandliftV1JSON415 *MeasurementStudiesError
	ApplicationvndMeasurementstudiesbrandliftV1JSON429 *MeasurementStudiesError
	ApplicationvndMeasurementstudiesbrandliftV1JSON500 *MeasurementStudiesError
}

// Status returns HTTPResponse.Status
func (r UpdateMeasurementStudiesBrandLiftResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMeasurementStudiesBrandLiftResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMeasurementStudiesSurveyResp struct {
	Body                                            []byte
	HTTPResponse                                    *http.Response
	ApplicationvndMeasurementstudiessurveyV1JSON200 *MeasurementStudiesSurvey
	ApplicationvndMeasurementstudiessurveyV1JSON401 *MeasurementStudiesError
	ApplicationvndMeasurementstudiessurveyV1JSON403 *MeasurementStudiesError
	ApplicationvndMeasurementstudiessurveyV1JSON404 *MeasurementStudiesError
	ApplicationvndMeasurementstudiessurveyV1JSON415 *MeasurementStudiesError
	ApplicationvndMeasurementstudiessurveyV1JSON429 *MeasurementStudiesError
	ApplicationvndMeasurementstudiessurveyV1JSON500 *MeasurementStudiesError
}

// Status returns HTTPResponse.Status
func (r CreateMeasurementStudiesSurveyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMeasurementStudiesSurveyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CheckDSPAudienceResearchEligibilityWithBodyWithResponse request with arbitrary body returning *CheckDSPAudienceResearchEligibilityResp
func (c *ClientWithResponses) CheckDSPAudienceResearchEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, contentType string, body io.Reader) (*CheckDSPAudienceResearchEligibilityResp, error) {
	rsp, err := c.CheckDSPAudienceResearchEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPAudienceResearchEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPAudienceResearchEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPAudienceResearchEligibilityParams, body CheckDSPAudienceResearchEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPAudienceResearchEligibilityResp, error) {
	rsp, err := c.CheckDSPAudienceResearchEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPAudienceResearchEligibilityResp(rsp)
}

// CheckDSPBrandLiftEligibilityWithBodyWithResponse request with arbitrary body returning *CheckDSPBrandLiftEligibilityResp
func (c *ClientWithResponses) CheckDSPBrandLiftEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, contentType string, body io.Reader) (*CheckDSPBrandLiftEligibilityResp, error) {
	rsp, err := c.CheckDSPBrandLiftEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPBrandLiftEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV1PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV1PlusJSONRequestBody) (*CheckDSPBrandLiftEligibilityResp, error) {
	rsp, err := c.CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPBrandLiftEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPBrandLiftEligibilityParams, body CheckDSPBrandLiftEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*CheckDSPBrandLiftEligibilityResp, error) {
	rsp, err := c.CheckDSPBrandLiftEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPBrandLiftEligibilityResp(rsp)
}

// CheckDSPCreativeTestingEligibilityWithBodyWithResponse request with arbitrary body returning *CheckDSPCreativeTestingEligibilityResp
func (c *ClientWithResponses) CheckDSPCreativeTestingEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, contentType string, body io.Reader) (*CheckDSPCreativeTestingEligibilityResp, error) {
	rsp, err := c.CheckDSPCreativeTestingEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPCreativeTestingEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPCreativeTestingEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPCreativeTestingEligibilityParams, body CheckDSPCreativeTestingEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPCreativeTestingEligibilityResp, error) {
	rsp, err := c.CheckDSPCreativeTestingEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPCreativeTestingEligibilityResp(rsp)
}

// CheckDSPOmnichannelMetricsEligibilityWithBodyWithResponse request with arbitrary body returning *CheckDSPOmnichannelMetricsEligibilityResp
func (c *ClientWithResponses) CheckDSPOmnichannelMetricsEligibilityWithBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, contentType string, body io.Reader) (*CheckDSPOmnichannelMetricsEligibilityResp, error) {
	rsp, err := c.CheckDSPOmnichannelMetricsEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPOmnichannelMetricsEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV12PlusJSONRequestBody) (*CheckDSPOmnichannelMetricsEligibilityResp, error) {
	rsp, err := c.CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPOmnichannelMetricsEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBodyWithResponse(ctx context.Context, params *CheckDSPOmnichannelMetricsEligibilityParams, body CheckDSPOmnichannelMetricsEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*CheckDSPOmnichannelMetricsEligibilityResp, error) {
	rsp, err := c.CheckDSPOmnichannelMetricsEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckDSPOmnichannelMetricsEligibilityResp(rsp)
}

// GetDSPAudienceResearchStudiesWithResponse request returning *GetDSPAudienceResearchStudiesResp
func (c *ClientWithResponses) GetDSPAudienceResearchStudiesWithResponse(ctx context.Context, params *GetDSPAudienceResearchStudiesParams) (*GetDSPAudienceResearchStudiesResp, error) {
	rsp, err := c.GetDSPAudienceResearchStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPAudienceResearchStudiesResp(rsp)
}

// CreateDSPAudienceResearchStudyWithBodyWithResponse request with arbitrary body returning *CreateDSPAudienceResearchStudyResp
func (c *ClientWithResponses) CreateDSPAudienceResearchStudyWithBodyWithResponse(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*CreateDSPAudienceResearchStudyResp, error) {
	rsp, err := c.CreateDSPAudienceResearchStudyWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPAudienceResearchStudyResp(rsp)
}

func (c *ClientWithResponses) CreateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPAudienceResearchStudyParams, body CreateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPAudienceResearchStudyResp, error) {
	rsp, err := c.CreateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPAudienceResearchStudyResp(rsp)
}

// UpdateDSPAudienceResearchStudyWithBodyWithResponse request with arbitrary body returning *UpdateDSPAudienceResearchStudyResp
func (c *ClientWithResponses) UpdateDSPAudienceResearchStudyWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, contentType string, body io.Reader) (*UpdateDSPAudienceResearchStudyResp, error) {
	rsp, err := c.UpdateDSPAudienceResearchStudyWithBody(ctx, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPAudienceResearchStudyResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPAudienceResearchStudyParams, body UpdateDSPAudienceResearchStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPAudienceResearchStudyResp, error) {
	rsp, err := c.UpdateDSPAudienceResearchStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx, studyId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPAudienceResearchStudyResp(rsp)
}

// GetDSPAudienceResearchStudyResultWithResponse request returning *GetDSPAudienceResearchStudyResultResp
func (c *ClientWithResponses) GetDSPAudienceResearchStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPAudienceResearchStudyResultParams) (*GetDSPAudienceResearchStudyResultResp, error) {
	rsp, err := c.GetDSPAudienceResearchStudyResult(ctx, studyId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPAudienceResearchStudyResultResp(rsp)
}

// GetDSPBrandLiftStudiesWithResponse request returning *GetDSPBrandLiftStudiesResp
func (c *ClientWithResponses) GetDSPBrandLiftStudiesWithResponse(ctx context.Context, params *GetDSPBrandLiftStudiesParams) (*GetDSPBrandLiftStudiesResp, error) {
	rsp, err := c.GetDSPBrandLiftStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPBrandLiftStudiesResp(rsp)
}

// CreateDSPBrandLiftStudiesWithBodyWithResponse request with arbitrary body returning *CreateDSPBrandLiftStudiesResp
func (c *ClientWithResponses) CreateDSPBrandLiftStudiesWithBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*CreateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.CreateDSPBrandLiftStudiesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPBrandLiftStudiesParams, body CreateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.CreateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPBrandLiftStudiesResp(rsp)
}

// UpdateDSPBrandLiftStudiesWithBodyWithResponse request with arbitrary body returning *UpdateDSPBrandLiftStudiesResp
func (c *ClientWithResponses) UpdateDSPBrandLiftStudiesWithBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, contentType string, body io.Reader) (*UpdateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.UpdateDSPBrandLiftStudiesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV1PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV11PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPBrandLiftStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPBrandLiftStudiesParams, body UpdateDSPBrandLiftStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateDSPBrandLiftStudiesResp, error) {
	rsp, err := c.UpdateDSPBrandLiftStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPBrandLiftStudiesResp(rsp)
}

// GetDSPCreativeTestingStudiesWithResponse request returning *GetDSPCreativeTestingStudiesResp
func (c *ClientWithResponses) GetDSPCreativeTestingStudiesWithResponse(ctx context.Context, params *GetDSPCreativeTestingStudiesParams) (*GetDSPCreativeTestingStudiesResp, error) {
	rsp, err := c.GetDSPCreativeTestingStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPCreativeTestingStudiesResp(rsp)
}

// CreateDSPCreativeTestingStudyWithBodyWithResponse request with arbitrary body returning *CreateDSPCreativeTestingStudyResp
func (c *ClientWithResponses) CreateDSPCreativeTestingStudyWithBodyWithResponse(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*CreateDSPCreativeTestingStudyResp, error) {
	rsp, err := c.CreateDSPCreativeTestingStudyWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPCreativeTestingStudyResp(rsp)
}

func (c *ClientWithResponses) CreateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPCreativeTestingStudyParams, body CreateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPCreativeTestingStudyResp, error) {
	rsp, err := c.CreateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPCreativeTestingStudyResp(rsp)
}

// UpdateDSPCreativeTestingStudyWithBodyWithResponse request with arbitrary body returning *UpdateDSPCreativeTestingStudyResp
func (c *ClientWithResponses) UpdateDSPCreativeTestingStudyWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, contentType string, body io.Reader) (*UpdateDSPCreativeTestingStudyResp, error) {
	rsp, err := c.UpdateDSPCreativeTestingStudyWithBody(ctx, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPCreativeTestingStudyResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateDSPCreativeTestingStudyParams, body UpdateDSPCreativeTestingStudyApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPCreativeTestingStudyResp, error) {
	rsp, err := c.UpdateDSPCreativeTestingStudyWithApplicationVndStudymanagementV12PlusJSONBody(ctx, studyId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPCreativeTestingStudyResp(rsp)
}

// GetDSPCreativeTestingStudyResultWithResponse request returning *GetDSPCreativeTestingStudyResultResp
func (c *ClientWithResponses) GetDSPCreativeTestingStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPCreativeTestingStudyResultParams) (*GetDSPCreativeTestingStudyResultResp, error) {
	rsp, err := c.GetDSPCreativeTestingStudyResult(ctx, studyId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPCreativeTestingStudyResultResp(rsp)
}

// GetDSPOmnichannelMetricsStudiesWithResponse request returning *GetDSPOmnichannelMetricsStudiesResp
func (c *ClientWithResponses) GetDSPOmnichannelMetricsStudiesWithResponse(ctx context.Context, params *GetDSPOmnichannelMetricsStudiesParams) (*GetDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.GetDSPOmnichannelMetricsStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPOmnichannelMetricsStudiesResp(rsp)
}

// CreateDSPOmnichannelMetricsStudiesWithBodyWithResponse request with arbitrary body returning *CreateDSPOmnichannelMetricsStudiesResp
func (c *ClientWithResponses) CreateDSPOmnichannelMetricsStudiesWithBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*CreateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.CreateDSPOmnichannelMetricsStudiesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPOmnichannelMetricsStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPOmnichannelMetricsStudiesResp(rsp)
}

func (c *ClientWithResponses) CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateDSPOmnichannelMetricsStudiesParams, body CreateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.CreateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDSPOmnichannelMetricsStudiesResp(rsp)
}

// UpdateDSPOmnichannelMetricsStudiesWithBodyWithResponse request with arbitrary body returning *UpdateDSPOmnichannelMetricsStudiesResp
func (c *ClientWithResponses) UpdateDSPOmnichannelMetricsStudiesWithBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, contentType string, body io.Reader) (*UpdateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.UpdateDSPOmnichannelMetricsStudiesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPOmnichannelMetricsStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPOmnichannelMetricsStudiesResp(rsp)
}

func (c *ClientWithResponses) UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDSPOmnichannelMetricsStudiesParams, body UpdateDSPOmnichannelMetricsStudiesApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateDSPOmnichannelMetricsStudiesResp, error) {
	rsp, err := c.UpdateDSPOmnichannelMetricsStudiesWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDSPOmnichannelMetricsStudiesResp(rsp)
}

// GetDSPOmnichannelMetricsStudyResultWithResponse request returning *GetDSPOmnichannelMetricsStudyResultResp
func (c *ClientWithResponses) GetDSPOmnichannelMetricsStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPOmnichannelMetricsStudyResultParams) (*GetDSPOmnichannelMetricsStudyResultResp, error) {
	rsp, err := c.GetDSPOmnichannelMetricsStudyResult(ctx, studyId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPOmnichannelMetricsStudyResultResp(rsp)
}

// CheckPlanningEligibilityWithBodyWithResponse request with arbitrary body returning *CheckPlanningEligibilityResp
func (c *ClientWithResponses) CheckPlanningEligibilityWithBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, contentType string, body io.Reader) (*CheckPlanningEligibilityResp, error) {
	rsp, err := c.CheckPlanningEligibilityWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckPlanningEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV11PlusJSONRequestBody) (*CheckPlanningEligibilityResp, error) {
	rsp, err := c.CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckPlanningEligibilityResp(rsp)
}

func (c *ClientWithResponses) CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBodyWithResponse(ctx context.Context, params *CheckPlanningEligibilityParams, body CheckPlanningEligibilityApplicationVndMeasurementeligibilityV13PlusJSONRequestBody) (*CheckPlanningEligibilityResp, error) {
	rsp, err := c.CheckPlanningEligibilityWithApplicationVndMeasurementeligibilityV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckPlanningEligibilityResp(rsp)
}

// CancelMeasurementStudiesWithResponse request returning *CancelMeasurementStudiesResp
func (c *ClientWithResponses) CancelMeasurementStudiesWithResponse(ctx context.Context, params *CancelMeasurementStudiesParams) (*CancelMeasurementStudiesResp, error) {
	rsp, err := c.CancelMeasurementStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCancelMeasurementStudiesResp(rsp)
}

// GetStudiesWithResponse request returning *GetStudiesResp
func (c *ClientWithResponses) GetStudiesWithResponse(ctx context.Context, params *GetStudiesParams) (*GetStudiesResp, error) {
	rsp, err := c.GetStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudiesResp(rsp)
}

// GetDSPBrandLiftStudyResultWithResponse request returning *GetDSPBrandLiftStudyResultResp
func (c *ClientWithResponses) GetDSPBrandLiftStudyResultWithResponse(ctx context.Context, studyId string, params *GetDSPBrandLiftStudyResultParams) (*GetDSPBrandLiftStudyResultResp, error) {
	rsp, err := c.GetDSPBrandLiftStudyResult(ctx, studyId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDSPBrandLiftStudyResultResp(rsp)
}

// GetSurveysWithResponse request returning *GetSurveysResp
func (c *ClientWithResponses) GetSurveysWithResponse(ctx context.Context, params *GetSurveysParams) (*GetSurveysResp, error) {
	rsp, err := c.GetSurveys(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSurveysResp(rsp)
}

// CreateSurveysWithBodyWithResponse request with arbitrary body returning *CreateSurveysResp
func (c *ClientWithResponses) CreateSurveysWithBodyWithResponse(ctx context.Context, params *CreateSurveysParams, contentType string, body io.Reader) (*CreateSurveysResp, error) {
	rsp, err := c.CreateSurveysWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveysResp(rsp)
}

func (c *ClientWithResponses) CreateSurveysWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*CreateSurveysResp, error) {
	rsp, err := c.CreateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveysResp(rsp)
}

func (c *ClientWithResponses) CreateSurveysWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*CreateSurveysResp, error) {
	rsp, err := c.CreateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveysResp(rsp)
}

func (c *ClientWithResponses) CreateSurveysWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*CreateSurveysResp, error) {
	rsp, err := c.CreateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveysResp(rsp)
}

func (c *ClientWithResponses) CreateSurveysWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *CreateSurveysParams, body CreateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*CreateSurveysResp, error) {
	rsp, err := c.CreateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveysResp(rsp)
}

// UpdateSurveysWithBodyWithResponse request with arbitrary body returning *UpdateSurveysResp
func (c *ClientWithResponses) UpdateSurveysWithBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, contentType string, body io.Reader) (*UpdateSurveysResp, error) {
	rsp, err := c.UpdateSurveysWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSurveysResp(rsp)
}

func (c *ClientWithResponses) UpdateSurveysWithApplicationVndStudymanagementV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV1PlusJSONRequestBody) (*UpdateSurveysResp, error) {
	rsp, err := c.UpdateSurveysWithApplicationVndStudymanagementV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSurveysResp(rsp)
}

func (c *ClientWithResponses) UpdateSurveysWithApplicationVndStudymanagementV11PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV11PlusJSONRequestBody) (*UpdateSurveysResp, error) {
	rsp, err := c.UpdateSurveysWithApplicationVndStudymanagementV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSurveysResp(rsp)
}

func (c *ClientWithResponses) UpdateSurveysWithApplicationVndStudymanagementV12PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV12PlusJSONRequestBody) (*UpdateSurveysResp, error) {
	rsp, err := c.UpdateSurveysWithApplicationVndStudymanagementV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSurveysResp(rsp)
}

func (c *ClientWithResponses) UpdateSurveysWithApplicationVndStudymanagementV13PlusJSONBodyWithResponse(ctx context.Context, params *UpdateSurveysParams, body UpdateSurveysApplicationVndStudymanagementV13PlusJSONRequestBody) (*UpdateSurveysResp, error) {
	rsp, err := c.UpdateSurveysWithApplicationVndStudymanagementV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSurveysResp(rsp)
}

// GetCuratedStudyResultWithResponse request returning *GetCuratedStudyResultResp
func (c *ClientWithResponses) GetCuratedStudyResultWithResponse(ctx context.Context, studyId string, params *GetCuratedStudyResultParams) (*GetCuratedStudyResultResp, error) {
	rsp, err := c.GetCuratedStudyResult(ctx, studyId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCuratedStudyResultResp(rsp)
}

// VendorProductWithBodyWithResponse request with arbitrary body returning *VendorProductResp
func (c *ClientWithResponses) VendorProductWithBodyWithResponse(ctx context.Context, params *VendorProductParams, contentType string, body io.Reader) (*VendorProductResp, error) {
	rsp, err := c.VendorProductWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseVendorProductResp(rsp)
}

func (c *ClientWithResponses) VendorProductWithApplicationVndMeasurementvendorV1PlusJSONBodyWithResponse(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV1PlusJSONRequestBody) (*VendorProductResp, error) {
	rsp, err := c.VendorProductWithApplicationVndMeasurementvendorV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseVendorProductResp(rsp)
}

func (c *ClientWithResponses) VendorProductWithApplicationVndMeasurementvendorV11PlusJSONBodyWithResponse(ctx context.Context, params *VendorProductParams, body VendorProductApplicationVndMeasurementvendorV11PlusJSONRequestBody) (*VendorProductResp, error) {
	rsp, err := c.VendorProductWithApplicationVndMeasurementvendorV11PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseVendorProductResp(rsp)
}

// OmnichannelMetricsBrandSearchWithBodyWithResponse request with arbitrary body returning *OmnichannelMetricsBrandSearchResp
func (c *ClientWithResponses) OmnichannelMetricsBrandSearchWithBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, contentType string, body io.Reader) (*OmnichannelMetricsBrandSearchResp, error) {
	rsp, err := c.OmnichannelMetricsBrandSearchWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseOmnichannelMetricsBrandSearchResp(rsp)
}

func (c *ClientWithResponses) OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV12PlusJSONBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV12PlusJSONRequestBody) (*OmnichannelMetricsBrandSearchResp, error) {
	rsp, err := c.OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV12PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseOmnichannelMetricsBrandSearchResp(rsp)
}

func (c *ClientWithResponses) OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV13PlusJSONBodyWithResponse(ctx context.Context, params *OmnichannelMetricsBrandSearchParams, body OmnichannelMetricsBrandSearchApplicationVndOcmbrandsV13PlusJSONRequestBody) (*OmnichannelMetricsBrandSearchResp, error) {
	rsp, err := c.OmnichannelMetricsBrandSearchWithApplicationVndOcmbrandsV13PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseOmnichannelMetricsBrandSearchResp(rsp)
}

// VendorProductPolicyWithResponse request returning *VendorProductPolicyResp
func (c *ClientWithResponses) VendorProductPolicyWithResponse(ctx context.Context, params *VendorProductPolicyParams) (*VendorProductPolicyResp, error) {
	rsp, err := c.VendorProductPolicy(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseVendorProductPolicyResp(rsp)
}

// VendorProductSurveyQuestionTemplatesWithResponse request returning *VendorProductSurveyQuestionTemplatesResp
func (c *ClientWithResponses) VendorProductSurveyQuestionTemplatesWithResponse(ctx context.Context, params *VendorProductSurveyQuestionTemplatesParams) (*VendorProductSurveyQuestionTemplatesResp, error) {
	rsp, err := c.VendorProductSurveyQuestionTemplates(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseVendorProductSurveyQuestionTemplatesResp(rsp)
}

// UpdateMeasurementStudiesBrandLiftWithBodyWithResponse request with arbitrary body returning *UpdateMeasurementStudiesBrandLiftResp
func (c *ClientWithResponses) UpdateMeasurementStudiesBrandLiftWithBodyWithResponse(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, contentType string, body io.Reader) (*UpdateMeasurementStudiesBrandLiftResp, error) {
	rsp, err := c.UpdateMeasurementStudiesBrandLiftWithBody(ctx, studyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeasurementStudiesBrandLiftResp(rsp)
}

func (c *ClientWithResponses) UpdateMeasurementStudiesBrandLiftWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBodyWithResponse(ctx context.Context, studyId string, params *UpdateMeasurementStudiesBrandLiftParams, body UpdateMeasurementStudiesBrandLiftApplicationVndMeasurementstudiesbrandliftV1PlusJSONRequestBody) (*UpdateMeasurementStudiesBrandLiftResp, error) {
	rsp, err := c.UpdateMeasurementStudiesBrandLiftWithApplicationVndMeasurementstudiesbrandliftV1PlusJSONBody(ctx, studyId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeasurementStudiesBrandLiftResp(rsp)
}

// CreateMeasurementStudiesSurveyWithBodyWithResponse request with arbitrary body returning *CreateMeasurementStudiesSurveyResp
func (c *ClientWithResponses) CreateMeasurementStudiesSurveyWithBodyWithResponse(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, contentType string, body io.Reader) (*CreateMeasurementStudiesSurveyResp, error) {
	rsp, err := c.CreateMeasurementStudiesSurveyWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateMeasurementStudiesSurveyResp(rsp)
}

func (c *ClientWithResponses) CreateMeasurementStudiesSurveyWithApplicationVndMeasurementstudiessurveyV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateMeasurementStudiesSurveyParams, body CreateMeasurementStudiesSurveyApplicationVndMeasurementstudiessurveyV1PlusJSONRequestBody) (*CreateMeasurementStudiesSurveyResp, error) {
	rsp, err := c.CreateMeasurementStudiesSurveyWithApplicationVndMeasurementstudiessurveyV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateMeasurementStudiesSurveyResp(rsp)
}

// ParseCheckDSPAudienceResearchEligibilityResp parses an HTTP response from a CheckDSPAudienceResearchEligibilityWithResponse call
func ParseCheckDSPAudienceResearchEligibilityResp(rsp *http.Response) (*CheckDSPAudienceResearchEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckDSPAudienceResearchEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EligibilityResponseV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON500 = &dest

	}

	return response, nil
}

// ParseCheckDSPBrandLiftEligibilityResp parses an HTTP response from a CheckDSPBrandLiftEligibilityWithResponse call
func ParseCheckDSPBrandLiftEligibilityResp(rsp *http.Response) (*CheckDSPBrandLiftEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckDSPBrandLiftEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 200:
		var dest EligibilityResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 200:
		var dest EligibilityResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON500 = &dest

	}

	return response, nil
}

// ParseCheckDSPCreativeTestingEligibilityResp parses an HTTP response from a CheckDSPCreativeTestingEligibilityWithResponse call
func ParseCheckDSPCreativeTestingEligibilityResp(rsp *http.Response) (*CheckDSPCreativeTestingEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckDSPCreativeTestingEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EligibilityResponseV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON500 = &dest

	}

	return response, nil
}

// ParseCheckDSPOmnichannelMetricsEligibilityResp parses an HTTP response from a CheckDSPOmnichannelMetricsEligibilityWithResponse call
func ParseCheckDSPOmnichannelMetricsEligibilityResp(rsp *http.Response) (*CheckDSPOmnichannelMetricsEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckDSPOmnichannelMetricsEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 200:
		var dest EligibilityResponseV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 200:
		var dest EligibilityResponseV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPAudienceResearchStudiesResp parses an HTTP response from a GetDSPAudienceResearchStudiesWithResponse call
func ParseGetDSPAudienceResearchStudiesResp(rsp *http.Response) (*GetDSPAudienceResearchStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPAudienceResearchStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDSPAudienceResearchStudiesV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDSPAudienceResearchStudyResp parses an HTTP response from a CreateDSPAudienceResearchStudyWithResponse call
func ParseCreateDSPAudienceResearchStudyResp(rsp *http.Response) (*CreateDSPAudienceResearchStudyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDSPAudienceResearchStudyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DSPAudienceResearchStudyV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	}

	return response, nil
}

// ParseUpdateDSPAudienceResearchStudyResp parses an HTTP response from a UpdateDSPAudienceResearchStudyWithResponse call
func ParseUpdateDSPAudienceResearchStudyResp(rsp *http.Response) (*UpdateDSPAudienceResearchStudyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDSPAudienceResearchStudyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DSPAudienceResearchStudyV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	}

	return response, nil
}

// ParseGetDSPAudienceResearchStudyResultResp parses an HTTP response from a GetDSPAudienceResearchStudyResultWithResponse call
func ParseGetDSPAudienceResearchStudyResultResp(rsp *http.Response) (*GetDSPAudienceResearchStudyResultResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPAudienceResearchStudyResultResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudienceResearchStudyResultV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPBrandLiftStudiesResp parses an HTTP response from a GetDSPBrandLiftStudiesWithResponse call
func ParseGetDSPBrandLiftStudiesResp(rsp *http.Response) (*GetDSPBrandLiftStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPBrandLiftStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPBrandLiftStudiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPBrandLiftStudiesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPBrandLiftStudiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPBrandLiftStudiesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDSPBrandLiftStudiesResp parses an HTTP response from a CreateDSPBrandLiftStudiesWithResponse call
func ParseCreateDSPBrandLiftStudiesResp(rsp *http.Response) (*CreateDSPBrandLiftStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDSPBrandLiftStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDSPBrandLiftStudiesResp parses an HTTP response from a UpdateDSPBrandLiftStudiesWithResponse call
func ParseUpdateDSPBrandLiftStudiesResp(rsp *http.Response) (*UpdateDSPBrandLiftStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDSPBrandLiftStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 422:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON422 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPCreativeTestingStudiesResp parses an HTTP response from a GetDSPCreativeTestingStudiesWithResponse call
func ParseGetDSPCreativeTestingStudiesResp(rsp *http.Response) (*GetDSPCreativeTestingStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPCreativeTestingStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDSPCreativeTestingStudiesV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDSPCreativeTestingStudyResp parses an HTTP response from a CreateDSPCreativeTestingStudyWithResponse call
func ParseCreateDSPCreativeTestingStudyResp(rsp *http.Response) (*CreateDSPCreativeTestingStudyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDSPCreativeTestingStudyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DSPCreativeTestingStudyV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	}

	return response, nil
}

// ParseUpdateDSPCreativeTestingStudyResp parses an HTTP response from a UpdateDSPCreativeTestingStudyWithResponse call
func ParseUpdateDSPCreativeTestingStudyResp(rsp *http.Response) (*UpdateDSPCreativeTestingStudyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDSPCreativeTestingStudyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DSPCreativeTestingStudyV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	}

	return response, nil
}

// ParseGetDSPCreativeTestingStudyResultResp parses an HTTP response from a GetDSPCreativeTestingStudyResultWithResponse call
func ParseGetDSPCreativeTestingStudyResultResp(rsp *http.Response) (*GetDSPCreativeTestingStudyResultResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPCreativeTestingStudyResultResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreativeTestingStudyResultV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPOmnichannelMetricsStudiesResp parses an HTTP response from a GetDSPOmnichannelMetricsStudiesWithResponse call
func ParseGetDSPOmnichannelMetricsStudiesResp(rsp *http.Response) (*GetDSPOmnichannelMetricsStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPOmnichannelMetricsStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPOmnichannelMetricsStudiesV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 200:
		var dest PaginatedDSPOmnichannelMetricsStudiesV1M3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDSPOmnichannelMetricsStudiesResp parses an HTTP response from a CreateDSPOmnichannelMetricsStudiesWithResponse call
func ParseCreateDSPOmnichannelMetricsStudiesResp(rsp *http.Response) (*CreateDSPOmnichannelMetricsStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDSPOmnichannelMetricsStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	}

	return response, nil
}

// ParseUpdateDSPOmnichannelMetricsStudiesResp parses an HTTP response from a UpdateDSPOmnichannelMetricsStudiesWithResponse call
func ParseUpdateDSPOmnichannelMetricsStudiesResp(rsp *http.Response) (*UpdateDSPOmnichannelMetricsStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDSPOmnichannelMetricsStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPOmnichannelMetricsStudyResultResp parses an HTTP response from a GetDSPOmnichannelMetricsStudyResultWithResponse call
func ParseGetDSPOmnichannelMetricsStudyResultResp(rsp *http.Response) (*GetDSPOmnichannelMetricsStudyResultResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPOmnichannelMetricsStudyResultResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV13JSON500 = &dest

	}

	return response, nil
}

// ParseCheckPlanningEligibilityResp parses an HTTP response from a CheckPlanningEligibilityWithResponse call
func ParseCheckPlanningEligibilityResp(rsp *http.Response) (*CheckPlanningEligibilityResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckPlanningEligibilityResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 200:
		var dest PlanningEligibilityResponseV1M3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 200:
		var dest PlanningEligibilityResponseV1M3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementeligibility.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementeligibilityV13JSON500 = &dest

	}

	return response, nil
}

// ParseCancelMeasurementStudiesResp parses an HTTP response from a CancelMeasurementStudiesWithResponse call
func ParseCancelMeasurementStudiesResp(rsp *http.Response) (*CancelMeasurementStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelMeasurementStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest StudyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetStudiesResp parses an HTTP response from a GetStudiesWithResponse call
func ParseGetStudiesResp(rsp *http.Response) (*GetStudiesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStudiesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedBaseStudiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedBaseStudiesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 200:
		var dest PaginatedBaseStudiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 200:
		var dest PaginatedBaseStudiesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetDSPBrandLiftStudyResultResp parses an HTTP response from a GetDSPBrandLiftStudyResultWithResponse call
func ParseGetDSPBrandLiftStudyResultResp(rsp *http.Response) (*GetDSPBrandLiftStudyResultResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDSPBrandLiftStudyResultResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 200:
		var dest BrandLiftStudyResultV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 200:
		var dest BrandLiftStudyResultV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementresult.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV11JSON500 = &dest

	}

	return response, nil
}

// ParseGetSurveysResp parses an HTTP response from a GetSurveysWithResponse call
func ParseGetSurveysResp(rsp *http.Response) (*GetSurveysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSurveysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveysV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveysV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveysV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveysV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSurveysResp parses an HTTP response from a CreateSurveysWithResponse call
func ParseCreateSurveysResp(rsp *http.Response) (*CreateSurveysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSurveysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSurveysResp parses an HTTP response from a UpdateSurveysWithResponse call
func ParseUpdateSurveysResp(rsp *http.Response) (*UpdateSurveysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSurveysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 207:
		var dest SurveyResponsesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.studymanagement.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndStudymanagementV13JSON500 = &dest

	}

	return response, nil
}

// ParseGetCuratedStudyResultResp parses an HTTP response from a GetCuratedStudyResultWithResponse call
func ParseGetCuratedStudyResultResp(rsp *http.Response) (*GetCuratedStudyResultResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCuratedStudyResultResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CuratedStudyResultV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementresultV1JSON500 = &dest

	}

	return response, nil
}

// ParseVendorProductResp parses an HTTP response from a VendorProductWithResponse call
func ParseVendorProductResp(rsp *http.Response) (*VendorProductResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VendorProductResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedVendorProductsV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedVendorProductsV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON500 = &dest

	}

	return response, nil
}

// ParseOmnichannelMetricsBrandSearchResp parses an HTTP response from a OmnichannelMetricsBrandSearchWithResponse call
func ParseOmnichannelMetricsBrandSearchResp(rsp *http.Response) (*OmnichannelMetricsBrandSearchResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OmnichannelMetricsBrandSearchResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 200:
		var dest PaginatedOmnichannelMetricsBrandsV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.2+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV12JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 200:
		var dest PaginatedOmnichannelMetricsBrandsV1M2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.ocmbrands.v1.3+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOcmbrandsV13JSON500 = &dest

	}

	return response, nil
}

// ParseVendorProductPolicyResp parses an HTTP response from a VendorProductPolicyWithResponse call
func ParseVendorProductPolicyResp(rsp *http.Response) (*VendorProductPolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VendorProductPolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedVendorProductPoliciesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedVendorProductPoliciesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON500 = &dest

	}

	return response, nil
}

// ParseVendorProductSurveyQuestionTemplatesResp parses an HTTP response from a VendorProductSurveyQuestionTemplatesWithResponse call
func ParseVendorProductSurveyQuestionTemplatesResp(rsp *http.Response) (*VendorProductSurveyQuestionTemplatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VendorProductSurveyQuestionTemplatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveyQuestionTemplatesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 200:
		var dest PaginatedSurveyQuestionTemplatesV1M1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 400:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 401:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 403:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 404:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 415:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 429:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.measurementvendor.v1.1+json" && rsp.StatusCode == 500:
		var dest ErrorV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementvendorV11JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateMeasurementStudiesBrandLiftResp parses an HTTP response from a UpdateMeasurementStudiesBrandLiftWithResponse call
func ParseUpdateMeasurementStudiesBrandLiftResp(rsp *http.Response) (*UpdateMeasurementStudiesBrandLiftResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMeasurementStudiesBrandLiftResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeasurementBrandLiftStudy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiesbrandliftV1JSON500 = &dest

	}

	return response, nil
}

// ParseCreateMeasurementStudiesSurveyResp parses an HTTP response from a CreateMeasurementStudiesSurveyWithResponse call
func ParseCreateMeasurementStudiesSurveyResp(rsp *http.Response) (*CreateMeasurementStudiesSurveyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMeasurementStudiesSurveyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeasurementStudiesSurvey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MeasurementStudiesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMeasurementstudiessurveyV1JSON500 = &dest

	}

	return response, nil
}
