// Package sponsoredbrandsreportv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package sponsoredbrandsreportv2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AdFormat.
const (
	AdFormatProductCollection AdFormat = "productCollection"
	AdFormatVideo             AdFormat = "video"
)

// Defines values for AdFormatV32.
const (
	AdFormatV32ProductCollection AdFormatV32 = "productCollection"
	AdFormatV32StoreSpotlight    AdFormatV32 = "storeSpotlight"
	AdFormatV32Video             AdFormatV32 = "video"
)

// Defines values for BidAdjustmentBidAdjustmentPredicate.
const (
	BidAdjustmentBidAdjustmentPredicatePlacementGroupDetailPage BidAdjustmentBidAdjustmentPredicate = "placementGroupDetailPage"
	BidAdjustmentBidAdjustmentPredicatePlacementGroupHome       BidAdjustmentBidAdjustmentPredicate = "placementGroupHome"
	BidAdjustmentBidAdjustmentPredicatePlacementGroupOther      BidAdjustmentBidAdjustmentPredicate = "placementGroupOther"
)

// Defines values for BidAdjustmentV33BidAdjustmentPredicate.
const (
	BidAdjustmentV33BidAdjustmentPredicatePlacementGroupDetailPage         BidAdjustmentV33BidAdjustmentPredicate = "placementGroupDetailPage"
	BidAdjustmentV33BidAdjustmentPredicatePlacementGroupHome               BidAdjustmentV33BidAdjustmentPredicate = "placementGroupHome"
	BidAdjustmentV33BidAdjustmentPredicatePlacementGroupOther              BidAdjustmentV33BidAdjustmentPredicate = "placementGroupOther"
	BidAdjustmentV33BidAdjustmentPredicateShopperSegmentNewToBrandPurchase BidAdjustmentV33BidAdjustmentPredicate = "shopperSegmentNewToBrandPurchase"
)

// Defines values for BidOptimizationStrategy.
const (
	MAXIMIZEIMMEDIATESALES      BidOptimizationStrategy = "MAXIMIZE_IMMEDIATE_SALES"
	MAXIMIZENEWTOBRANDCUSTOMERS BidOptimizationStrategy = "MAXIMIZE_NEW_TO_BRAND_CUSTOMERS"
)

// Defines values for BrandType.
const (
	BookAuthor    BrandType = "bookAuthor"
	BrandRegistry BrandType = "brandRegistry"
)

// Defines values for BudgetType.
const (
	Daily    BudgetType = "daily"
	Lifetime BudgetType = "lifetime"
)

// Defines values for CreativeType.
const (
	CreativeTypeProductCollection CreativeType = "productCollection"
	CreativeTypeVideo             CreativeType = "video"
)

// Defines values for MatchType.
const (
	Broad  MatchType = "broad"
	Exact  MatchType = "exact"
	Phrase MatchType = "phrase"
)

// Defines values for MediaStatus.
const (
	Available             MediaStatus = "Available"
	Failed                MediaStatus = "Failed"
	PendingDeepValidation MediaStatus = "PendingDeepValidation"
	Processing            MediaStatus = "Processing"
)

// Defines values for MediaType.
const (
	BrandLogo MediaType = "brandLogo"
	Image     MediaType = "image"
)

// Defines values for NegativeMatchType.
const (
	NegativeExact  NegativeMatchType = "negativeExact"
	NegativePhrase NegativeMatchType = "negativePhrase"
)

// Defines values for ProductPredicateType.
const (
	ProductPredicateTypeAsinBrandSameAs             ProductPredicateType = "asinBrandSameAs"
	ProductPredicateTypeAsinCategorySameAs          ProductPredicateType = "asinCategorySameAs"
	ProductPredicateTypeAsinPriceBetween            ProductPredicateType = "asinPriceBetween"
	ProductPredicateTypeAsinPriceGreaterThan        ProductPredicateType = "asinPriceGreaterThan"
	ProductPredicateTypeAsinPriceLessThan           ProductPredicateType = "asinPriceLessThan"
	ProductPredicateTypeAsinReviewRatingBetween     ProductPredicateType = "asinReviewRatingBetween"
	ProductPredicateTypeAsinReviewRatingGreaterThan ProductPredicateType = "asinReviewRatingGreaterThan"
	ProductPredicateTypeAsinReviewRatingLessThan    ProductPredicateType = "asinReviewRatingLessThan"
	ProductPredicateTypeAsinSameAs                  ProductPredicateType = "asinSameAs"
)

// Defines values for ProgramCreativeType.
const (
	ProgramCreativeTypeVideo ProgramCreativeType = "Video"
)

// Defines values for ProgramProgramType.
const (
	SponsoredBrands ProgramProgramType = "SponsoredBrands"
)

// Defines values for SBCampaignBaseServingStatus.
const (
	SBCampaignBaseServingStatusASINNOTBUYABLE          SBCampaignBaseServingStatus = "ASIN_NOT_BUYABLE"
	SBCampaignBaseServingStatusBILLINGERROR            SBCampaignBaseServingStatus = "BILLING_ERROR"
	SBCampaignBaseServingStatusENDED                   SBCampaignBaseServingStatus = "ENDED"
	SBCampaignBaseServingStatusLANDINGPAGENOTAVAILABLE SBCampaignBaseServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBCampaignBaseServingStatusOUTOFBUDGET             SBCampaignBaseServingStatus = "OUT_OF_BUDGET"
	SBCampaignBaseServingStatusPAUSED                  SBCampaignBaseServingStatus = "PAUSED"
	SBCampaignBaseServingStatusPENDINGREVIEW           SBCampaignBaseServingStatus = "PENDING_REVIEW"
	SBCampaignBaseServingStatusREADY                   SBCampaignBaseServingStatus = "READY"
	SBCampaignBaseServingStatusREJECTED                SBCampaignBaseServingStatus = "REJECTED"
	SBCampaignBaseServingStatusRUNNING                 SBCampaignBaseServingStatus = "RUNNING"
	SBCampaignBaseServingStatusSCHEDULED               SBCampaignBaseServingStatus = "SCHEDULED"
	SBCampaignBaseServingStatusTERMINATED              SBCampaignBaseServingStatus = "TERMINATED"
)

// Defines values for SBCampaignBase32ServingStatus.
const (
	SBCampaignBase32ServingStatusASINNOTBUYABLE          SBCampaignBase32ServingStatus = "ASIN_NOT_BUYABLE"
	SBCampaignBase32ServingStatusBILLINGERROR            SBCampaignBase32ServingStatus = "BILLING_ERROR"
	SBCampaignBase32ServingStatusENDED                   SBCampaignBase32ServingStatus = "ENDED"
	SBCampaignBase32ServingStatusLANDINGPAGENOTAVAILABLE SBCampaignBase32ServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBCampaignBase32ServingStatusOUTOFBUDGET             SBCampaignBase32ServingStatus = "OUT_OF_BUDGET"
	SBCampaignBase32ServingStatusPAUSED                  SBCampaignBase32ServingStatus = "PAUSED"
	SBCampaignBase32ServingStatusPENDINGREVIEW           SBCampaignBase32ServingStatus = "PENDING_REVIEW"
	SBCampaignBase32ServingStatusREADY                   SBCampaignBase32ServingStatus = "READY"
	SBCampaignBase32ServingStatusREJECTED                SBCampaignBase32ServingStatus = "REJECTED"
	SBCampaignBase32ServingStatusRUNNING                 SBCampaignBase32ServingStatus = "RUNNING"
	SBCampaignBase32ServingStatusSCHEDULED               SBCampaignBase32ServingStatus = "SCHEDULED"
	SBCampaignBase32ServingStatusTERMINATED              SBCampaignBase32ServingStatus = "TERMINATED"
)

// Defines values for SBCampaignResponseCommonServingStatus.
const (
	SBCampaignResponseCommonServingStatusASINNOTBUYABLE          SBCampaignResponseCommonServingStatus = "ASIN_NOT_BUYABLE"
	SBCampaignResponseCommonServingStatusBILLINGERROR            SBCampaignResponseCommonServingStatus = "BILLING_ERROR"
	SBCampaignResponseCommonServingStatusENDED                   SBCampaignResponseCommonServingStatus = "ENDED"
	SBCampaignResponseCommonServingStatusLANDINGPAGENOTAVAILABLE SBCampaignResponseCommonServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBCampaignResponseCommonServingStatusOUTOFBUDGET             SBCampaignResponseCommonServingStatus = "OUT_OF_BUDGET"
	SBCampaignResponseCommonServingStatusPAUSED                  SBCampaignResponseCommonServingStatus = "PAUSED"
	SBCampaignResponseCommonServingStatusPENDINGREVIEW           SBCampaignResponseCommonServingStatus = "PENDING_REVIEW"
	SBCampaignResponseCommonServingStatusREADY                   SBCampaignResponseCommonServingStatus = "READY"
	SBCampaignResponseCommonServingStatusREJECTED                SBCampaignResponseCommonServingStatus = "REJECTED"
	SBCampaignResponseCommonServingStatusRUNNING                 SBCampaignResponseCommonServingStatus = "RUNNING"
	SBCampaignResponseCommonServingStatusSCHEDULED               SBCampaignResponseCommonServingStatus = "SCHEDULED"
	SBCampaignResponseCommonServingStatusTERMINATED              SBCampaignResponseCommonServingStatus = "TERMINATED"
)

// Defines values for SBCampaignResponseCommon32ServingStatus.
const (
	SBCampaignResponseCommon32ServingStatusASINNOTBUYABLE          SBCampaignResponseCommon32ServingStatus = "ASIN_NOT_BUYABLE"
	SBCampaignResponseCommon32ServingStatusBILLINGERROR            SBCampaignResponseCommon32ServingStatus = "BILLING_ERROR"
	SBCampaignResponseCommon32ServingStatusENDED                   SBCampaignResponseCommon32ServingStatus = "ENDED"
	SBCampaignResponseCommon32ServingStatusLANDINGPAGENOTAVAILABLE SBCampaignResponseCommon32ServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBCampaignResponseCommon32ServingStatusOUTOFBUDGET             SBCampaignResponseCommon32ServingStatus = "OUT_OF_BUDGET"
	SBCampaignResponseCommon32ServingStatusPAUSED                  SBCampaignResponseCommon32ServingStatus = "PAUSED"
	SBCampaignResponseCommon32ServingStatusPENDINGREVIEW           SBCampaignResponseCommon32ServingStatus = "PENDING_REVIEW"
	SBCampaignResponseCommon32ServingStatusREADY                   SBCampaignResponseCommon32ServingStatus = "READY"
	SBCampaignResponseCommon32ServingStatusREJECTED                SBCampaignResponseCommon32ServingStatus = "REJECTED"
	SBCampaignResponseCommon32ServingStatusRUNNING                 SBCampaignResponseCommon32ServingStatus = "RUNNING"
	SBCampaignResponseCommon32ServingStatusSCHEDULED               SBCampaignResponseCommon32ServingStatus = "SCHEDULED"
	SBCampaignResponseCommon32ServingStatusTERMINATED              SBCampaignResponseCommon32ServingStatus = "TERMINATED"
)

// Defines values for SBCampaignResponseCommonV33ServingStatus.
const (
	SBCampaignResponseCommonV33ServingStatusASINNOTBUYABLE          SBCampaignResponseCommonV33ServingStatus = "ASIN_NOT_BUYABLE"
	SBCampaignResponseCommonV33ServingStatusBILLINGERROR            SBCampaignResponseCommonV33ServingStatus = "BILLING_ERROR"
	SBCampaignResponseCommonV33ServingStatusENDED                   SBCampaignResponseCommonV33ServingStatus = "ENDED"
	SBCampaignResponseCommonV33ServingStatusLANDINGPAGENOTAVAILABLE SBCampaignResponseCommonV33ServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBCampaignResponseCommonV33ServingStatusOUTOFBUDGET             SBCampaignResponseCommonV33ServingStatus = "OUT_OF_BUDGET"
	SBCampaignResponseCommonV33ServingStatusPAUSED                  SBCampaignResponseCommonV33ServingStatus = "PAUSED"
	SBCampaignResponseCommonV33ServingStatusPENDINGREVIEW           SBCampaignResponseCommonV33ServingStatus = "PENDING_REVIEW"
	SBCampaignResponseCommonV33ServingStatusREADY                   SBCampaignResponseCommonV33ServingStatus = "READY"
	SBCampaignResponseCommonV33ServingStatusREJECTED                SBCampaignResponseCommonV33ServingStatus = "REJECTED"
	SBCampaignResponseCommonV33ServingStatusRUNNING                 SBCampaignResponseCommonV33ServingStatus = "RUNNING"
	SBCampaignResponseCommonV33ServingStatusSCHEDULED               SBCampaignResponseCommonV33ServingStatus = "SCHEDULED"
	SBCampaignResponseCommonV33ServingStatusTERMINATED              SBCampaignResponseCommonV33ServingStatus = "TERMINATED"
)

// Defines values for SBDraftKeywordState.
const (
	SBDraftKeywordStateDraft   SBDraftKeywordState = "draft"
	SBDraftKeywordStateEnabled SBDraftKeywordState = "enabled"
	SBDraftKeywordStatePending SBDraftKeywordState = "pending"
)

// Defines values for SBDraftNegativeKeywordState.
const (
	SBDraftNegativeKeywordStateDraft SBDraftNegativeKeywordState = "draft"
)

// Defines values for SBKeywordState.
const (
	SBKeywordStateArchived SBKeywordState = "archived"
	SBKeywordStateDraft    SBKeywordState = "draft"
	SBKeywordStateEnabled  SBKeywordState = "enabled"
	SBKeywordStatePaused   SBKeywordState = "paused"
	SBKeywordStatePending  SBKeywordState = "pending"
)

// Defines values for SBListCampaignsResponseCommonServingStatus.
const (
	SBListCampaignsResponseCommonServingStatusAsinNotBuyable          SBListCampaignsResponseCommonServingStatus = "asinNotBuyable"
	SBListCampaignsResponseCommonServingStatusBillingError            SBListCampaignsResponseCommonServingStatus = "billingError"
	SBListCampaignsResponseCommonServingStatusEnded                   SBListCampaignsResponseCommonServingStatus = "ended"
	SBListCampaignsResponseCommonServingStatusLandingPageNotAvailable SBListCampaignsResponseCommonServingStatus = "landingPageNotAvailable"
	SBListCampaignsResponseCommonServingStatusOutOfBudget             SBListCampaignsResponseCommonServingStatus = "outOfBudget"
	SBListCampaignsResponseCommonServingStatusPaused                  SBListCampaignsResponseCommonServingStatus = "paused"
	SBListCampaignsResponseCommonServingStatusPendingReview           SBListCampaignsResponseCommonServingStatus = "pendingReview"
	SBListCampaignsResponseCommonServingStatusReady                   SBListCampaignsResponseCommonServingStatus = "ready"
	SBListCampaignsResponseCommonServingStatusRejected                SBListCampaignsResponseCommonServingStatus = "rejected"
	SBListCampaignsResponseCommonServingStatusRunning                 SBListCampaignsResponseCommonServingStatus = "running"
	SBListCampaignsResponseCommonServingStatusScheduled               SBListCampaignsResponseCommonServingStatus = "scheduled"
	SBListCampaignsResponseCommonServingStatusTerminated              SBListCampaignsResponseCommonServingStatus = "terminated"
)

// Defines values for SBNegativeExpressionType.
const (
	SBNegativeExpressionTypeAsinBrandSameAs SBNegativeExpressionType = "asinBrandSameAs"
	SBNegativeExpressionTypeAsinSameAs      SBNegativeExpressionType = "asinSameAs"
)

// Defines values for SBNegativeKeywordState.
const (
	SBNegativeKeywordStateArchived SBNegativeKeywordState = "archived"
	SBNegativeKeywordStateDraft    SBNegativeKeywordState = "draft"
	SBNegativeKeywordStateEnabled  SBNegativeKeywordState = "enabled"
	SBNegativeKeywordStatePending  SBNegativeKeywordState = "pending"
)

// Defines values for SBNegativeTargetState.
const (
	SBNegativeTargetStateArchived SBNegativeTargetState = "archived"
	SBNegativeTargetStateEnabled  SBNegativeTargetState = "enabled"
	SBNegativeTargetStatePending  SBNegativeTargetState = "pending"
)

// Defines values for SBProductTargetState.
const (
	SBProductTargetStateArchived SBProductTargetState = "archived"
	SBProductTargetStateDraft    SBProductTargetState = "draft"
	SBProductTargetStateEnabled  SBProductTargetState = "enabled"
	SBProductTargetStatePaused   SBProductTargetState = "paused"
	SBProductTargetStatePending  SBProductTargetState = "pending"
)

// Defines values for SBThemeState.
const (
	SBThemeStateArchived SBThemeState = "archived"
	SBThemeStateEnabled  SBThemeState = "enabled"
	SBThemeStatePaused   SBThemeState = "paused"
)

// Defines values for SBVideoCampaignResponseCommonServingStatus.
const (
	SBVideoCampaignResponseCommonServingStatusASINNOTBUYABLE          SBVideoCampaignResponseCommonServingStatus = "ASIN_NOT_BUYABLE"
	SBVideoCampaignResponseCommonServingStatusBILLINGERROR            SBVideoCampaignResponseCommonServingStatus = "BILLING_ERROR"
	SBVideoCampaignResponseCommonServingStatusENDED                   SBVideoCampaignResponseCommonServingStatus = "ENDED"
	SBVideoCampaignResponseCommonServingStatusLANDINGPAGENOTAVAILABLE SBVideoCampaignResponseCommonServingStatus = "LANDING_PAGE_NOT_AVAILABLE"
	SBVideoCampaignResponseCommonServingStatusOUTOFBUDGET             SBVideoCampaignResponseCommonServingStatus = "OUT_OF_BUDGET"
	SBVideoCampaignResponseCommonServingStatusPAUSED                  SBVideoCampaignResponseCommonServingStatus = "PAUSED"
	SBVideoCampaignResponseCommonServingStatusPENDINGREVIEW           SBVideoCampaignResponseCommonServingStatus = "PENDING_REVIEW"
	SBVideoCampaignResponseCommonServingStatusREADY                   SBVideoCampaignResponseCommonServingStatus = "READY"
	SBVideoCampaignResponseCommonServingStatusREJECTED                SBVideoCampaignResponseCommonServingStatus = "REJECTED"
	SBVideoCampaignResponseCommonServingStatusRUNNING                 SBVideoCampaignResponseCommonServingStatus = "RUNNING"
	SBVideoCampaignResponseCommonServingStatusSCHEDULED               SBVideoCampaignResponseCommonServingStatus = "SCHEDULED"
	SBVideoCampaignResponseCommonServingStatusTERMINATED              SBVideoCampaignResponseCommonServingStatus = "TERMINATED"
)

// Defines values for SBVideoCreativeType.
const (
	SBVideoCreativeTypeVideo SBVideoCreativeType = "video"
)

// Defines values for SbModerationCampaignsResponseModerationStatus.
const (
	APPROVED   SbModerationCampaignsResponseModerationStatus = "APPROVED"
	INPROGRESS SbModerationCampaignsResponseModerationStatus = "IN_PROGRESS"
	REJECTED   SbModerationCampaignsResponseModerationStatus = "REJECTED"
)

// Defines values for State.
const (
	StateArchived State = "archived"
	StateEnabled  State = "enabled"
	StatePaused   State = "paused"
)

// Defines values for ListKeywordsParamsStateFilter.
const (
	ListKeywordsParamsStateFilterArchived ListKeywordsParamsStateFilter = "archived"
	ListKeywordsParamsStateFilterEnabled  ListKeywordsParamsStateFilter = "enabled"
	ListKeywordsParamsStateFilterPaused   ListKeywordsParamsStateFilter = "paused"
)

// Defines values for GetTargetingCategoriesParamsLocale.
const (
	ArAE GetTargetingCategoriesParamsLocale = "ar_AE"
	DeDE GetTargetingCategoriesParamsLocale = "de_DE"
	EnAE GetTargetingCategoriesParamsLocale = "en_AE"
	EnAU GetTargetingCategoriesParamsLocale = "en_AU"
	EnCA GetTargetingCategoriesParamsLocale = "en_CA"
	EnGB GetTargetingCategoriesParamsLocale = "en_GB"
	EnIN GetTargetingCategoriesParamsLocale = "en_IN"
	EnSG GetTargetingCategoriesParamsLocale = "en_SG"
	EnUS GetTargetingCategoriesParamsLocale = "en_US"
	EsES GetTargetingCategoriesParamsLocale = "es_ES"
	EsMX GetTargetingCategoriesParamsLocale = "es_MX"
	FrCA GetTargetingCategoriesParamsLocale = "fr_CA"
	FrFR GetTargetingCategoriesParamsLocale = "fr_FR"
	HiIN GetTargetingCategoriesParamsLocale = "hi_IN"
	ItIT GetTargetingCategoriesParamsLocale = "it_IT"
	JaJP GetTargetingCategoriesParamsLocale = "ja_JP"
	KoKR GetTargetingCategoriesParamsLocale = "ko_KR"
	NlNL GetTargetingCategoriesParamsLocale = "nl_NL"
	PlPL GetTargetingCategoriesParamsLocale = "pl_PL"
	PtBR GetTargetingCategoriesParamsLocale = "pt_BR"
	SvSE GetTargetingCategoriesParamsLocale = "sv_SE"
	TaIN GetTargetingCategoriesParamsLocale = "ta_IN"
	ThTH GetTargetingCategoriesParamsLocale = "th_TH"
	TrTR GetTargetingCategoriesParamsLocale = "tr_TR"
	ViVN GetTargetingCategoriesParamsLocale = "vi_VN"
	ZhCN GetTargetingCategoriesParamsLocale = "zh_CN"
)

// Defines values for GetTargetingCategoriesJSONBodySupplySource.
const (
	AMAZON         GetTargetingCategoriesJSONBodySupplySource = "AMAZON"
	STREAMINGVIDEO GetTargetingCategoriesJSONBodySupplySource = "STREAMING_VIDEO"
)

// Defines values for SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude.
const (
	Archived SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude = "archived"
	Enabled  SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude = "enabled"
	Paused   SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude = "paused"
)

// Defines values for PostV2HsaRecordTypeReportJSONBodyCreativeType.
const (
	PostV2HsaRecordTypeReportJSONBodyCreativeTypeAll   PostV2HsaRecordTypeReportJSONBodyCreativeType = "all"
	PostV2HsaRecordTypeReportJSONBodyCreativeTypeVideo PostV2HsaRecordTypeReportJSONBodyCreativeType = "video"
)

// Defines values for PostV2HsaRecordTypeReportJSONBodySegment.
const (
	Placement PostV2HsaRecordTypeReportJSONBodySegment = "placement"
	Query     PostV2HsaRecordTypeReportJSONBodySegment = "query"
)

// AdFormat The type of ad format.
type AdFormat string

// AdFormatError defines model for AdFormatError.
type AdFormatError struct {
	AdFormatError *BasicErrorObject `json:"AdFormatError,omitempty"`
}

// AdFormatV32 The type of ad format.
type AdFormatV32 string

// AdGroupError defines model for AdGroupError.
type AdGroupError struct {
	AdGroupError *BasicErrorObject `json:"AdGroupError,omitempty"`
}

// AssetsError defines model for AssetsError.
type AssetsError struct {
	AssetsError *BasicErrorObject `json:"AssetsError,omitempty"`
}

// AuthorizationError defines model for AuthorizationError.
type AuthorizationError struct {
	AuthorizationError *BasicErrorObject `json:"AuthorizationError,omitempty"`
}

// BasicErrorObject defines model for BasicErrorObject.
type BasicErrorObject struct {
	Location *string `json:"location,omitempty"`
	Message  string  `json:"message"`
	Reason   string  `json:"reason"`
	Trigger  *string `json:"trigger,omitempty"`
}

// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
type Bid = float32

// BidAdjustment defines model for BidAdjustment.
type BidAdjustment struct {
	// BidAdjustmentPercent Bid adjustment for placement group. Value is a percentage to two decimal places. Example: If this is set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidAdjustmentPercent *float32 `json:"bidAdjustmentPercent,omitempty"`

	// BidAdjustmentPredicate The enum for placement group name
	BidAdjustmentPredicate *BidAdjustmentBidAdjustmentPredicate `json:"bidAdjustmentPredicate,omitempty"`
}

// BidAdjustmentBidAdjustmentPredicate The enum for placement group name
type BidAdjustmentBidAdjustmentPredicate string

// BidAdjustmentV33 defines model for BidAdjustmentV3_3.
type BidAdjustmentV33 struct {
	// BidAdjustmentPercent Bid adjustment for placement groups and shopper segments. Value is a percentage to two decimal places. For bid adjustments in placement groups, min is -99.00 and max is 900.00. For bid adjustments in shopper segments, min is 0.00 and max is 900.00. For example: If -40.00 is set for a $5.00 bid, the resulting bid is $3.00.
	BidAdjustmentPercent *float32 `json:"bidAdjustmentPercent,omitempty"`

	// BidAdjustmentPredicate Determines the predicate (placement groups and shopper segments) that the bid adjustment will be made for.
	// |BidAdjustmentPredicate|Description|
	// |------|-----------|
	// |PLACEMENT_GROUP_DETAIL_PAGE|Predicate for adjusting bids at detail page placement.|
	// |PLACEMENT_GROUP_HOME|Predicate for adjusting bids at home page placement.|
	// |PLACEMENT_GROUP_OTHER|Predicate for adjusting bids at pages other than detail and home pages placement.|
	// |SHOPPER_SEGMENT_NEW_TO_BRAND_PURCHASE|Predicate for adjusting bids for new-to-brand purchase shopper segment.|
	BidAdjustmentPredicate *BidAdjustmentV33BidAdjustmentPredicate `json:"bidAdjustmentPredicate,omitempty"`
}

// BidAdjustmentV33BidAdjustmentPredicate Determines the predicate (placement groups and shopper segments) that the bid adjustment will be made for.
// |BidAdjustmentPredicate|Description|
// |------|-----------|
// |PLACEMENT_GROUP_DETAIL_PAGE|Predicate for adjusting bids at detail page placement.|
// |PLACEMENT_GROUP_HOME|Predicate for adjusting bids at home page placement.|
// |PLACEMENT_GROUP_OTHER|Predicate for adjusting bids at pages other than detail and home pages placement.|
// |SHOPPER_SEGMENT_NEW_TO_BRAND_PURCHASE|Predicate for adjusting bids for new-to-brand purchase shopper segment.|
type BidAdjustmentV33BidAdjustmentPredicate string

// BidError defines model for BidError.
type BidError struct {
	BidError *struct {
		Location   *string `json:"location,omitempty"`
		LowerLimit *string `json:"lowerLimit,omitempty"`
		Message    string  `json:"message"`
		Reason     string  `json:"reason"`
		Trigger    *string `json:"trigger,omitempty"`
		UpperLimit *string `json:"upperLimit,omitempty"`
	} `json:"BidError,omitempty"`
}

// BidOptimizationStrategy Automated bid optimization strategy.
// |Bid optimization strategy|Description|
// |------|-----------|
// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
// `Not supported for video campaigns`
type BidOptimizationStrategy string

// BrandType | brandType | description |
// |-----------|-------------|
// | brandRegistry | The brand is in the brand registry. |
// | bookAuthor    | The brand is a book author. |
type BrandType string

// BrandsError defines model for BrandsError.
type BrandsError struct {
	BrandsError *BasicErrorObject `json:"BrandsError,omitempty"`
}

// BudgetError defines model for BudgetError.
type BudgetError struct {
	BudgetError *struct {
		BudgetType *string `json:"budgetType,omitempty"`
		Location   *string `json:"location,omitempty"`
		MaxBudget  *string `json:"maxBudget,omitempty"`
		Message    string  `json:"message"`
		MinBudget  *string `json:"minBudget,omitempty"`
		Precision  *string `json:"precision,omitempty"`
		Reason     string  `json:"reason"`
		Trigger    *string `json:"trigger,omitempty"`
	} `json:"BudgetError,omitempty"`
}

// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
type BudgetType string

// CampaignError defines model for CampaignError.
type CampaignError struct {
	CampaignError *struct {
		InvalidCharacters *string `json:"invalidCharacters,omitempty"`
		Location          *string `json:"location,omitempty"`
		MaxCampaigns      *string `json:"maxCampaigns,omitempty"`
		MaxLength         *string `json:"maxLength,omitempty"`
		Message           string  `json:"message"`
		Note              *string `json:"note,omitempty"`
		Reason            string  `json:"reason"`
		SupportedStates   *string `json:"supportedStates,omitempty"`
		Trigger           *string `json:"trigger,omitempty"`
	} `json:"CampaignError,omitempty"`
}

// CampaignTags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
type CampaignTags map[string]string

// CreativeError defines model for CreativeError.
type CreativeError struct {
	CreativeError *struct {
		ActualType          *string `json:"actualType,omitempty"`
		Asins               *string `json:"asins,omitempty"`
		AspectRatio         *string `json:"aspectRatio,omitempty"`
		CropField           *string `json:"cropField,omitempty"`
		CropHeight          *string `json:"cropHeight,omitempty"`
		CropWidth           *string `json:"cropWidth,omitempty"`
		Emoji               *string `json:"emoji,omitempty"`
		ExpectedType        *string `json:"expectedType,omitempty"`
		ImageHeight         *string `json:"imageHeight,omitempty"`
		ImageWidth          *string `json:"imageWidth,omitempty"`
		InvalidCharacters   *string `json:"invalidCharacters,omitempty"`
		Left                *string `json:"left,omitempty"`
		Location            *string `json:"location,omitempty"`
		MaxLength           *string `json:"maxLength,omitempty"`
		MaxSize             *string `json:"maxSize,omitempty"`
		Message             string  `json:"message"`
		Min                 *string `json:"min,omitempty"`
		Note                *string `json:"note,omitempty"`
		Reason              string  `json:"reason"`
		RequiredAspectRatio *string `json:"requiredAspectRatio,omitempty"`
		Top                 *string `json:"top,omitempty"`
		Trigger             *string `json:"trigger,omitempty"`
	} `json:"CreativeError,omitempty"`
}

// CreativeType collection is deprecated in favor of productCollection.
type CreativeType string

// DraftsError defines model for DraftsError.
type DraftsError struct {
	DraftsError *BasicErrorObject `json:"DraftsError,omitempty"`
}

// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
type EndDate = string

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
}

// ErrorEntry defines model for ErrorEntry.
type ErrorEntry struct {
	union json.RawMessage
}

// FilterError defines model for FilterError.
type FilterError struct {
	FilterError *BasicErrorObject `json:"FilterError,omitempty"`
}

// GetBatchGetCampaignsresponseV32Response defines model for GetBatchGetCampaignsresponseV32Response.
type GetBatchGetCampaignsresponseV32Response = []GetBatchGetCampaignsresponseV32Response_Item

// GetBatchGetCampaignsresponseV32Response_Item defines model for GetBatchGetCampaignsresponseV32Response.Item.
type GetBatchGetCampaignsresponseV32Response_Item struct {
	union json.RawMessage
}

// GetBatchGetCampaignsresponseV33Response defines model for GetBatchGetCampaignsresponseV33Response.
type GetBatchGetCampaignsresponseV33Response = []GetBatchGetCampaignsresponseV33Response_Item

// GetBatchGetCampaignsresponseV33Response_Item defines model for GetBatchGetCampaignsresponseV33Response.Item.
type GetBatchGetCampaignsresponseV33Response_Item struct {
	union json.RawMessage
}

// GetBrandResponse defines model for GetBrandResponse.
type GetBrandResponse = []struct {
	// BrandEntityId The Brand entity identifier.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// BrandId The Brand identifier.
	BrandId *string `json:"brandId,omitempty"`

	// BrandRegistryName The Brand name.
	BrandRegistryName *string `json:"brandRegistryName,omitempty"`
}

// GetMediaDescriberResponse defines model for GetMediaDescriberResponse.
type GetMediaDescriberResponse struct {
	// MediaId The Media identifier.
	MediaId *MediaId `json:"mediaId,omitempty"`

	// OriginalMediaUrl This is a signed URL which returns the original media in .mp4 file extension. The URL is only active for 7 days and requires to be regenerated if the video is not downloaded within 7 days. If you try to upload the downloaded video using the Asset Library API and get an error, then please retry upload after changing the file extension to .mov.
	OriginalMediaUrl *string `json:"originalMediaUrl,omitempty"`

	// PublishedMediaUrl The preview URL of the media. It is only available when status is `Available`.
	PublishedMediaUrl *string `json:"publishedMediaUrl,omitempty"`

	// Status Media status:
	//  * `Processing` - The media is being processed
	//  * `PendingDeepValidation` - The media is pending additional validation carried out during media conversion.
	//  * `Available` - Media has successfully finished validation and conversion and the media is published.
	//  * `Failed` - Media processing failed
	Status         *MediaStatus `json:"status,omitempty"`
	StatusMetadata *[]struct {
		Code    *string `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"statusMetadata,omitempty"`
}

// GetSbNegativeKeywords defines model for GetSbNegativeKeywords.
type GetSbNegativeKeywords struct {
	// AdGroupId The identifier of the ad group to which the negative keyword is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign to which the negative keyword is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The identifier of the negative keyword.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// KeywordText The keyword text. Maximum length of string is ten words if `matchType` is set to `negativeExact`. Maximum length is 4 words if `matchType` is set to `negativePhrase`.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *NegativeMatchType `json:"matchType,omitempty"`

	// State The current state of the negative keyword. Newly created SB negative keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation review. 'enabled' refers to negative keywords that are active. 'archived' refers to negative keywords that are permanently inactive and cannot be returned to the 'enabled' state.
	State *SBNegativeKeywordState `json:"state,omitempty"`
}

// GetStoresAssetsResponse defines model for GetStoresAssetsResponse.
type GetStoresAssetsResponse = interface{}

// KDPError defines model for KDPError.
type KDPError struct {
	KDPError *BasicErrorObject `json:"KDPError,omitempty"`
}

// KeywordError defines model for KeywordError.
type KeywordError struct {
	KeywordError *struct {
		Bid         *string `json:"bid,omitempty"`
		KeywordText *string `json:"keywordText,omitempty"`
		Location    *string `json:"location,omitempty"`
		MatchType   *string `json:"matchType,omitempty"`
		Message     string  `json:"message"`
		Note        *string `json:"note,omitempty"`
		Reason      string  `json:"reason"`
		Trigger     *string `json:"trigger,omitempty"`
	} `json:"KeywordError,omitempty"`
}

// LandingPageError defines model for LandingPageError.
type LandingPageError struct {
	LandingPageError *struct {
		Actual   *string `json:"actual,omitempty"`
		Expected *string `json:"expected,omitempty"`
		Location *string `json:"location,omitempty"`
		Message  string  `json:"message"`
		Reason   string  `json:"reason"`
		Trigger  *string `json:"trigger,omitempty"`
	} `json:"LandingPageError,omitempty"`
}

// ListNegativeTargets defines model for ListNegativeTargets.
type ListNegativeTargets struct {
	NegativeTargets *[]SBTargetingClause `json:"negativeTargets,omitempty"`
}

// ListRecommendationsRequest defines model for ListRecommendationsRequest.
type ListRecommendationsRequest struct {
	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResultsRecommendations `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// ListRequest defines model for ListRequest.
type ListRequest struct {
	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResults `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// ListSbTargetsResponse defines model for ListSbTargetsResponse.
type ListSbTargetsResponse struct {
	Targets *[]struct {
		// AdGroupId The identifier of the ad group to which the target is associated.
		AdGroupId *int64 `json:"adGroupId,omitempty"`

		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// CampaignId The identifier of the campaign to which the target is associated.
		CampaignId          *int64                  `json:"campaignId,omitempty"`
		Expressions         *[]SBExpression         `json:"expressions,omitempty"`
		ResolvedExpressions *[]SBResolvedExpression `json:"resolvedExpressions,omitempty"`
		State               *SBProductTargetState   `json:"state,omitempty"`

		// TargetId The target identifier.
		TargetId *int64 `json:"targetId,omitempty"`
	} `json:"targets,omitempty"`
}

// MarketplaceError defines model for MarketplaceError.
type MarketplaceError struct {
	MarketplaceError *BasicErrorObject `json:"MarketplaceError,omitempty"`
}

// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
type MatchType string

// MaxResults Sets a limit on the number of results returned by an operation.
type MaxResults = int

// MaxResultsRecommendations Sets a limit on the number of results returned by an operation.
type MaxResultsRecommendations = int

// MediaId The Media identifier.
type MediaId = string

// MediaPublisherAPIError defines model for MediaPublisherAPIError.
type MediaPublisherAPIError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// MediaStatus Media status:
//   - `Processing` - The media is being processed
//   - `PendingDeepValidation` - The media is pending additional validation carried out during media conversion.
//   - `Available` - Media has successfully finished validation and conversion and the media is published.
//   - `Failed` - Media processing failed
type MediaStatus string

// MediaType The supported media types.
type MediaType string

// NegativeMatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
type NegativeMatchType string

// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
type NextToken = string

// OutcomeType The outcome type of the campaign.
// If no outcome is selected then it will default to `PAGE_VISIT`.
// | outcomeType | description |
// |-----------|-------------|
// | BRAND_IMPRESSION_SHARE | Brand Impression Share (BIS) is Top of search (ToS) impression shares for branded search terms. |
// | PAGE_VISIT | Facilitate consumers' awareness of your brand |
type OutcomeType = string

// PageAsinsError defines model for PageAsinsError.
type PageAsinsError struct {
	PageAsinsError *struct {
		Location *string `json:"location,omitempty"`
		Message  string  `json:"message"`
		PageUrl  *string `json:"pageUrl,omitempty"`
		Reason   string  `json:"reason"`
		Trigger  *string `json:"trigger,omitempty"`
	} `json:"PageAsinsError,omitempty"`
}

// PageAsinsResponse defines model for PageAsinsResponse.
type PageAsinsResponse struct {
	// AsinList An array of ASINs. Note that this field is present only if there were no errors during the request. If there were errors, the `code` field is the enumerated error, and the `details` field contains a human-readable description of the error.
	AsinList *[]string `json:"asinList,omitempty"`

	// Code The enumerated response code.
	// | Code | Description |
	// |------|--------|
	// |SUCCESS| The request was successful. The `asinList` field includes all available ASINs.|
	// |INVALID_ARGUMENT| The request was not successful because the address was not for a valid landing page.|
	// |BAD_GATEWAY| The request failed because the landing page at the specified address did not have any ASINs.|
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the `code` field.
	Details *string `json:"details,omitempty"`
}

// PaginationError defines model for PaginationError.
type PaginationError struct {
	PaginationError *struct {
		Expected   *string `json:"expected,omitempty"`
		Location   *string `json:"location,omitempty"`
		Message    string  `json:"message"`
		Reason     string  `json:"reason"`
		Trigger    *string `json:"trigger,omitempty"`
		UpperLimit *string `json:"upperLimit,omitempty"`
	} `json:"PaginationError,omitempty"`
}

// PostSbCampaignsResponse defines model for PostSbCampaignsResponse.
type PostSbCampaignsResponse struct {
	// AdGroupResponses An array of ad groups associated with the campaign.
	AdGroupResponses *[]struct {
		// AdGroupId The ad group identifier.
		AdGroupId *int64 `json:"adGroupId,omitempty"`

		// Code An enumerated response code.
		Code *string `json:"code,omitempty"`

		// Details A human-readable description of the enumerated response code in the `code` field.
		Details *string `json:"details,omitempty"`
	} `json:"adGroupResponses,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Code An enumerated response code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the enumerated response code in the `code` field.
	Details *string `json:"details,omitempty"`

	// KeywordResponses An array of keywords associated with the campaign.
	KeywordResponses *[]SBKeywordResponse `json:"keywordResponses,omitempty"`

	// NegativeKeywordResponses An array of negative keywords associated with the campaign.
	NegativeKeywordResponses *[]SBKeywordResponse `json:"negativeKeywordResponses,omitempty"`
}

// PostSbThemesListResponse defines model for PostSbThemesListResponse.
type PostSbThemesListResponse struct {
	Themes *[]SBTheme `json:"themes,omitempty"`
}

// PostStoresAssetsResponse defines model for PostStoresAssetsResponse.
type PostStoresAssetsResponse struct {
	// AssetID ID of created asset
	AssetID *string `json:"assetID,omitempty"`
	Code    *string `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
}

// ProductItemsError defines model for ProductItemsError.
type ProductItemsError struct {
	ProductItemsError *BasicErrorObject `json:"ProductItemsError,omitempty"`
}

// ProductPredicateType defines model for ProductPredicateType.
type ProductPredicateType string

// ProfileError defines model for ProfileError.
type ProfileError struct {
	ProfileError *BasicErrorObject `json:"ProfileError,omitempty"`
}

// Program The Ad Program that the media will be attached to. Currently, we support `SponsoredBrands` with creative type `Video`
type Program struct {
	CreativeType ProgramCreativeType `json:"creativeType"`
	ProgramType  ProgramProgramType  `json:"programType"`
}

// ProgramCreativeType defines model for Program.CreativeType.
type ProgramCreativeType string

// ProgramProgramType defines model for Program.ProgramType.
type ProgramProgramType string

// PutSbNegativeTargets defines model for PutSbNegativeTargets.
type PutSbNegativeTargets struct {
	// UpdateTargetErrorResults Lists errors that occured during negative target update. Note that errors are correlated to negative target update requests by the `negativeTargetRequestIndex` field. This field corresponds to the order of the negative target in the request. For example, if `negativeTargetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.
	UpdateTargetErrorResults *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the negative target to the negative target array index specified in the request. Zero-based.
		TargetRequestIndex *SBNegativeTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"updateTargetErrorResults,omitempty"`

	// UpdateTargetSuccessResults Lists the successfully updated negative targets. Note that negative targets in the response are correlated to negative targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.
	UpdateTargetSuccessResults *[]struct {
		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the negative target to the negative target array index specified in the request. Zero-based.
		TargetRequestIndex *SBNegativeTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"updateTargetSuccessResults,omitempty"`
}

// PutSbTargetResponse defines model for PutSbTargetResponse.
type PutSbTargetResponse struct {
	// UpdateTargetErrorResults Lists errors that occured during target update. Note that errors are correlated to target update requests by the `targetRequestIndex` field. This field corresponds to the order of the target in the request. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request array.
	UpdateTargetErrorResults *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the target to the target array index specified in the request. Zero-based.
		TargetRequestIndex *SBTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"updateTargetErrorResults,omitempty"`

	// UpdateTargetSuccessResults Lists the successfully updated targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.
	UpdateTargetSuccessResults *[]struct {
		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the target to the target array index specified in the request. Zero-based.
		TargetRequestIndex *SBTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"updateTargetSuccessResults,omitempty"`
}

// PutSbThemesResponse defines model for PutSbThemesResponse.
type PutSbThemesResponse struct {
	// Error Lists errors that occurred during theme target update. Note that errors are correlated to theme target update requests by the `index` field. This field corresponds to the order of the theme target in the request. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request array.
	Error *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// Index Correlates the target to the target array index specified in the request. Zero-based.
		Index *SBTargetRequestIndex `json:"index,omitempty"`

		// ThemeId The identifier of theme target.
		ThemeId *SBThemeId `json:"themeId,omitempty"`
	} `json:"error,omitempty"`

	// Success Lists the successfully updated theme targets. Note that theme targets in the response are correlated to theme targets in the request using the `index` field. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request.
	Success *[]struct {
		// Index Correlates the target to the target array index specified in the request. Zero-based.
		Index *SBTargetRequestIndex `json:"index,omitempty"`

		// ThemeId The identifier of theme target.
		ThemeId *SBThemeId `json:"themeId,omitempty"`
	} `json:"success,omitempty"`
}

// RecommendationError defines model for RecommendationError.
type RecommendationError struct {
	RecommendationError *struct {
		Location *string `json:"location,omitempty"`
		MaxCount *string `json:"maxCount,omitempty"`
		Message  string  `json:"message"`
		Reason   string  `json:"reason"`
		Trigger  *string `json:"trigger,omitempty"`
	} `json:"RecommendationError,omitempty"`
}

// RecommendedBid defines model for RecommendedBid.
type RecommendedBid struct {
	RangeEnd    *float64 `json:"rangeEnd,omitempty"`
	RangeStart  *float64 `json:"rangeStart,omitempty"`
	Recommended *float64 `json:"recommended,omitempty"`
}

// SBAPIBid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
type SBAPIBid = float64

// SBAdGroup Applies to:
// | Operation | Path |
// |-----------| -----|
// |[listAdGroups](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups|
// |[getAdGroup](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups/{adGroupId}|
// <br/>
type SBAdGroup struct {
	// AdGroupId The identifier of the ad group.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign associated with the ad group.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Name The name of the ad group.
	Name *string `json:"name,omitempty"`
}

// SBAdGroupId The ad group identifier.
type SBAdGroupId = int64

// SBBidRecommendationKeyword defines model for SBBidRecommendationKeyword.
type SBBidRecommendationKeyword struct {
	// KeywordText The text of the keyword. Maximum of 10 words.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`
}

// SBBidRecommendationKeywordIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
type SBBidRecommendationKeywordIndex = float32

// SBBidRecommendationThemeIndex Correlates the theme targets to the theme targets array index specified in the request. Zero-based.
type SBBidRecommendationThemeIndex = float32

// SBBrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
type SBBrandLogoCrop struct {
	// Height The number of pixels to crop down from the value specified as `top`
	Height *int `json:"height,omitempty"`

	// Left The leftmost pixel from which to begin cropping
	Left *int `json:"left,omitempty"`

	// Top The highest pixel from which to begin cropping
	Top *int `json:"top,omitempty"`

	// Width The number of pixels to crop rightwards from the value specified as `left`
	Width *int `json:"width,omitempty"`
}

// SBBrandResponse defines model for SBBrandResponse.
type SBBrandResponse struct {
	// Id The Brand identifier.
	Id *int64 `json:"id,omitempty"`

	// Name The Brand name.
	Name *string `json:"name,omitempty"`
}

// SBCampaignBase defines model for SBCampaignBase.
type SBCampaignBase struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBCampaignBaseServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCampaignBaseServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBCampaignBaseServingStatus string

// SBCampaignBase32 defines model for SBCampaignBase32.
type SBCampaignBase32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBCampaignBase32ServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCampaignBase32ServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBCampaignBase32ServingStatus string

// SBCampaignName The campaign name.
type SBCampaignName = string

// SBCampaignResponse defines model for SBCampaignResponse.
type SBCampaignResponse struct {
	union json.RawMessage
}

// SBCampaignResponseCommon defines model for SBCampaignResponseCommon.
type SBCampaignResponseCommon struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Creative Render one or more product images and product details.
	Creative *SBCollectionCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate     *EndDate                              `json:"endDate"`
	LandingPage *SBCampaignResponseCommon_LandingPage `json:"landingPage,omitempty"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBCampaignResponseCommonServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCampaignResponseCommon_LandingPage defines model for SBCampaignResponseCommon.LandingPage.
type SBCampaignResponseCommon_LandingPage struct {
	union json.RawMessage
}

// SBCampaignResponseCommonServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBCampaignResponseCommonServingStatus string

// SBCampaignResponseCommon32 defines model for SBCampaignResponseCommon32.
type SBCampaignResponseCommon32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64                               `json:"campaignId,omitempty"`
	Creative   *SBCampaignResponseCommon32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate     *EndDate                                `json:"endDate"`
	LandingPage *SBCampaignResponseCommon32_LandingPage `json:"landingPage,omitempty"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBCampaignResponseCommon32ServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCampaignResponseCommon32_Creative defines model for SBCampaignResponseCommon32.Creative.
type SBCampaignResponseCommon32_Creative struct {
	union json.RawMessage
}

// SBCampaignResponseCommon32_LandingPage defines model for SBCampaignResponseCommon32.LandingPage.
type SBCampaignResponseCommon32_LandingPage struct {
	union json.RawMessage
}

// SBCampaignResponseCommon32ServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBCampaignResponseCommon32ServingStatus string

// SBCampaignResponseCommonV33 defines model for SBCampaignResponseCommonV3_3.
type SBCampaignResponseCommonV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64                                `json:"campaignId,omitempty"`
	Creative   *SBCampaignResponseCommonV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate     *EndDate                                 `json:"endDate"`
	LandingPage *SBCampaignResponseCommonV33_LandingPage `json:"landingPage,omitempty"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBCampaignResponseCommonV33ServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCampaignResponseCommonV33_Creative defines model for SBCampaignResponseCommonV33.Creative.
type SBCampaignResponseCommonV33_Creative struct {
	union json.RawMessage
}

// SBCampaignResponseCommonV33_LandingPage defines model for SBCampaignResponseCommonV33.LandingPage.
type SBCampaignResponseCommonV33_LandingPage struct {
	union json.RawMessage
}

// SBCampaignResponseCommonV33ServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBCampaignResponseCommonV33ServingStatus string

// SBCampaignResponseV33 SB campaign
type SBCampaignResponseV33 struct {
	union json.RawMessage
}

// SBCategoryResponse defines model for SBCategoryResponse.
type SBCategoryResponse struct {
	// EstimatedReach The estimated daily reach range of the category. Only set when supply source is `STREAMING_VIDEO`
	EstimatedReach *string `json:"estimatedReach,omitempty"`

	// Id The category identifier.
	Id *int64 `json:"id,omitempty"`

	// IsTargetable Set to `true` if the category can be targeted in a targeting expression, and `false` if not.
	IsTargetable *bool `json:"isTargetable,omitempty"`

	// Name The category name.
	Name *string `json:"name,omitempty"`

	// Path The path of the category within the category catalogue.
	Path *string `json:"path,omitempty"`

	// TranslatedName The category name translated to the specified locale in the request.
	TranslatedName *string `json:"translatedName,omitempty"`

	// TranslatedPath The path of the category within the category catalogue translated to the specified locale in the request.
	TranslatedPath *string `json:"translatedPath,omitempty"`
}

// SBCollectionCreative defines model for SBCollectionCreative.
type SBCollectionCreative struct {
	// Asins An array of ASINs associated with the creative. **Note** do not pass an empty array. This results in an error.
	Asins *[]string `json:"asins,omitempty"`

	// BrandLogoAssetID The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.
	BrandLogoAssetID *string `json:"brandLogoAssetID,omitempty"`

	// BrandLogoAssetId The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.
	BrandLogoAssetId *string `json:"brandLogoAssetId,omitempty"`

	// BrandLogoUrl The address of the hosted image.
	BrandLogoUrl *string `json:"brandLogoUrl,omitempty"`

	// BrandName The brand name.
	BrandName *string `json:"brandName,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`

	// ShouldOptimizeAsins Note that this field is supported only in the US and UK marketplaces. Set to `true` to have Amazon show other products from your landing page in the advertisement if they are more relevant to the shopper's search. Set to `false` to use the ASINs specified in the `asins` field. Do not specify in unsupported marketplaces.
	ShouldOptimizeAsins *bool `json:"shouldOptimizeAsins,omitempty"`
}

// SBCommonKeywords defines model for SBCommonKeywords.
type SBCommonKeywords struct {
	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`
}

// SBCommonTargets defines model for SBCommonTargets.
type SBCommonTargets struct {
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`
	Targets *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateCampaignRequest defines model for SBCreateCampaignRequest.
type SBCreateCampaignRequest struct {
	union json.RawMessage
}

// SBCreateCampaignRequestCommon defines model for SBCreateCampaignRequestCommon.
type SBCreateCampaignRequestCommon struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignRequestCommonV32 defines model for SBCreateCampaignRequestCommonV3_2.
type SBCreateCampaignRequestCommonV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                                `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignRequestCommonV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignRequestCommonV32_Creative defines model for SBCreateCampaignRequestCommonV32.Creative.
type SBCreateCampaignRequestCommonV32_Creative struct {
	union json.RawMessage
}

// SBCreateCampaignRequestCommonV33 defines model for SBCreateCampaignRequestCommonV3_3.
type SBCreateCampaignRequestCommonV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                                `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignRequestCommonV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignRequestCommonV33_Creative defines model for SBCreateCampaignRequestCommonV33.Creative.
type SBCreateCampaignRequestCommonV33_Creative struct {
	union json.RawMessage
}

// SBCreateCampaignRequestV32 defines model for SBCreateCampaignRequestV3_2.
type SBCreateCampaignRequestV32 struct {
	union json.RawMessage
}

// SBCreateCampaignRequestV33 defines model for SBCreateCampaignRequestV3_3.
type SBCreateCampaignRequestV33 struct {
	union json.RawMessage
}

// SBCreateCampaignWithExpressions defines model for SBCreateCampaignWithExpressions.
type SBCreateCampaignWithExpressions struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name            *string `json:"name,omitempty"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags    *CampaignTags `json:"tags,omitempty"`
	Targets *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateCampaignWithExpressionsV32 defines model for SBCreateCampaignWithExpressionsV3_2.
type SBCreateCampaignWithExpressionsV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                                  `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignWithExpressionsV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name            *string `json:"name,omitempty"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags    *CampaignTags `json:"tags,omitempty"`
	Targets *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateCampaignWithExpressionsV32_Creative defines model for SBCreateCampaignWithExpressionsV32.Creative.
type SBCreateCampaignWithExpressionsV32_Creative struct {
	union json.RawMessage
}

// SBCreateCampaignWithExpressionsV33 defines model for SBCreateCampaignWithExpressionsV3_3.
type SBCreateCampaignWithExpressionsV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                                  `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignWithExpressionsV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name            *string `json:"name,omitempty"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags    *CampaignTags `json:"tags,omitempty"`
	Targets *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateCampaignWithExpressionsV33_Creative defines model for SBCreateCampaignWithExpressionsV33.Creative.
type SBCreateCampaignWithExpressionsV33_Creative struct {
	union json.RawMessage
}

// SBCreateCampaignWithKeywords defines model for SBCreateCampaignWithKeywords.
type SBCreateCampaignWithKeywords struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignWithKeywordsV32 defines model for SBCreateCampaignWithKeywordsV3_2.
type SBCreateCampaignWithKeywordsV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                               `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignWithKeywordsV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignWithKeywordsV32_Creative defines model for SBCreateCampaignWithKeywordsV32.Creative.
type SBCreateCampaignWithKeywordsV32_Creative struct {
	union json.RawMessage
}

// SBCreateCampaignWithKeywordsV33 defines model for SBCreateCampaignWithKeywordsV3_3.
type SBCreateCampaignWithKeywordsV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                               `json:"budgetType,omitempty"`
	Creative   *SBCreateCampaignWithKeywordsV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBCreateCampaignWithKeywordsV33_Creative defines model for SBCreateCampaignWithKeywordsV33.Creative.
type SBCreateCampaignWithKeywordsV33_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignRequest defines model for SBCreateDraftCampaignRequest.
type SBCreateDraftCampaignRequest struct {
	union json.RawMessage
}

// SBCreateDraftCampaignRequestCommon defines model for SBCreateDraftCampaignRequestCommon.
type SBCreateDraftCampaignRequestCommon struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignRequestCommonV32 defines model for SBCreateDraftCampaignRequestCommonV3_2.
type SBCreateDraftCampaignRequestCommonV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                      `json:"budgetType"`
	Creative   *SBCreateDraftCampaignRequestCommonV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignRequestCommonV32_Creative defines model for SBCreateDraftCampaignRequestCommonV32.Creative.
type SBCreateDraftCampaignRequestCommonV32_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignRequestCommonV33 defines model for SBCreateDraftCampaignRequestCommonV3_3.
type SBCreateDraftCampaignRequestCommonV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                      `json:"budgetType"`
	Creative   *SBCreateDraftCampaignRequestCommonV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignRequestCommonV33_Creative defines model for SBCreateDraftCampaignRequestCommonV33.Creative.
type SBCreateDraftCampaignRequestCommonV33_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignRequestV32 defines model for SBCreateDraftCampaignRequestV3_2.
type SBCreateDraftCampaignRequestV32 struct {
	union json.RawMessage
}

// SBCreateDraftCampaignRequestV33 defines model for SBCreateDraftCampaignRequestV3_3.
type SBCreateDraftCampaignRequestV33 struct {
	union json.RawMessage
}

// SBCreateDraftCampaignWithKeywords defines model for SBCreateDraftCampaignWithKeywords.
type SBCreateDraftCampaignWithKeywords struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignWithKeywordsV32 defines model for SBCreateDraftCampaignWithKeywordsV3_2.
type SBCreateDraftCampaignWithKeywordsV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                     `json:"budgetType"`
	Creative   *SBCreateDraftCampaignWithKeywordsV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignWithKeywordsV32_Creative defines model for SBCreateDraftCampaignWithKeywordsV32.Creative.
type SBCreateDraftCampaignWithKeywordsV32_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignWithKeywordsV33 defines model for SBCreateDraftCampaignWithKeywordsV3_3.
type SBCreateDraftCampaignWithKeywordsV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                     `json:"budgetType"`
	Creative   *SBCreateDraftCampaignWithKeywordsV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBCreateDraftCampaignWithKeywordsV33_Creative defines model for SBCreateDraftCampaignWithKeywordsV33.Creative.
type SBCreateDraftCampaignWithKeywordsV33_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignWithProductTargets defines model for SBCreateDraftCampaignWithProductTargets.
type SBCreateDraftCampaignWithProductTargets struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateDraftCampaignWithProductTargetsV32 defines model for SBCreateDraftCampaignWithProductTargetsV3_2.
type SBCreateDraftCampaignWithProductTargetsV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                           `json:"budgetType"`
	Creative   *SBCreateDraftCampaignWithProductTargetsV32_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateDraftCampaignWithProductTargetsV32_Creative defines model for SBCreateDraftCampaignWithProductTargetsV32.Creative.
type SBCreateDraftCampaignWithProductTargetsV32_Creative struct {
	union json.RawMessage
}

// SBCreateDraftCampaignWithProductTargetsV33 defines model for SBCreateDraftCampaignWithProductTargetsV3_3.
type SBCreateDraftCampaignWithProductTargetsV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                           `json:"budgetType"`
	Creative   *SBCreateDraftCampaignWithProductTargetsV33_Creative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
	LandingPage *SBLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBCreateDraftCampaignWithProductTargetsV33_Creative defines model for SBCreateDraftCampaignWithProductTargetsV33.Creative.
type SBCreateDraftCampaignWithProductTargetsV33_Creative struct {
	union json.RawMessage
}

// SBCreateNegativeTargetingClauseRequest defines model for SBCreateNegativeTargetingClauseRequest.
type SBCreateNegativeTargetingClauseRequest struct {
	// AdGroupId The identifier of an existing ad group. The newly created target is associated to this ad group.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of an existing campaign. The newly created target is associated to this campaign.
	CampaignId  *int64                          `json:"campaignId,omitempty"`
	Expressions *SBNegativeTargetingExpressions `json:"expressions,omitempty"`
}

// SBCreateTargetingClauseRequest defines model for SBCreateTargetingClauseRequest.
type SBCreateTargetingClauseRequest struct {
	// AdGroupId The identifier of an existing ad group. The newly created target is associated to this ad group.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *Bid `json:"bid,omitempty"`

	// CampaignId The identifier of an existing campaign. The newly created target is associated to this campaign.
	CampaignId  *int64                  `json:"campaignId,omitempty"`
	Expressions *SBTargetingExpressions `json:"expressions,omitempty"`
}

// SBCreateTargetsResponse defines model for SBCreateTargetsResponse.
type SBCreateTargetsResponse struct {
	// CreateTargetErrorResults Lists errors that occured during target creation. Note that errors are correlated to target create requests by the `targetRequestIndex` field. This field corresponds to the order of the target object in the request. For example, if `targetRequestIndex` is set to `3`, an error occured during creation of the fourth target in the request.
	CreateTargetErrorResults *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the target to the target array index specified in the request. Zero-based.
		TargetRequestIndex *SBTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"createTargetErrorResults,omitempty"`

	// CreateTargetSuccessResults Lists the successfully created targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.
	CreateTargetSuccessResults *[]struct {
		// TargetId The identifier of a target.
		TargetId *SBTargetId `json:"targetId,omitempty"`

		// TargetRequestIndex Correlates the target to the target array index specified in the request. Zero-based.
		TargetRequestIndex *SBTargetRequestIndex `json:"targetRequestIndex,omitempty"`
	} `json:"createTargetSuccessResults,omitempty"`
}

// SBCreateThemesRequest defines model for SBCreateThemesRequest.
type SBCreateThemesRequest struct {
	// AdGroupId The identifier of the ad group to which the target is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid Bid `json:"bid"`

	// CampaignId The identifier of the campaign to which the target is associated.
	CampaignId *string `json:"campaignId,omitempty"`

	// ThemeType The theme target type.
	// - KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.
	// - KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.
	// - Note: Additional theme types may be added in the future.
	ThemeType ThemeType `json:"themeType"`
}

// SBCreateThemesResponse defines model for SBCreateThemesResponse.
type SBCreateThemesResponse struct {
	// Error Lists errors that occurred during theme target creation. Note that errors are correlated to theme target create requests by the `index` field. This field corresponds to the order of the target object in the request. For example, if `index` is set to `3`, an error occurred during creation of the fourth theme target in the request.
	Error *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// Index Correlates the target to the target array index specified in the request. Zero-based.
		Index *SBTargetRequestIndex `json:"index,omitempty"`
	} `json:"error,omitempty"`

	// Success Lists the successfully created theme targets. Note that theme targets in the response are correlated to theme targets in the request using the `index` field. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request.
	Success *[]struct {
		// Index Correlates the target to the target array index specified in the request. Zero-based.
		Index *SBTargetRequestIndex `json:"index,omitempty"`

		// ThemeId The identifier of theme target.
		ThemeId *SBThemeId `json:"themeId,omitempty"`
	} `json:"success,omitempty"`
}

// SBCreative Note that the values of each field in this object are immutable for an existing campaign.
type SBCreative struct {
	// Asins An array of ASINs associated with the creative. **Note** do not pass an empty array, this results in an error.
	Asins *[]string `json:"asins,omitempty"`

	// BrandLogoAssetID The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.
	BrandLogoAssetID *string `json:"brandLogoAssetID,omitempty"`

	// BrandLogoUrl The address of the hosted image.
	BrandLogoUrl *string `json:"brandLogoUrl,omitempty"`

	// BrandName A brand name. Maximum length is 30 characters.
	BrandName *string `json:"brandName,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`

	// ShouldOptimizeAsins **NOTE** Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to `true` will not have any effect. The value returned in the response will always be `false`. For the GET operation, the value of this field will always be `false`. And starting on September 25th, 2021, this property will be removed completely.
	ShouldOptimizeAsins *bool `json:"shouldOptimizeAsins,omitempty"`
}

// SBCustomImageCrop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted.
type SBCustomImageCrop struct {
	// Height The number of pixels to crop down from the value specified as `top`
	Height *int `json:"height,omitempty"`

	// Left The leftmost pixel from which to begin cropping
	Left *int `json:"left,omitempty"`

	// Top The highest pixel from which to begin cropping
	Top *int `json:"top,omitempty"`

	// Width The number of pixels to crop rightwards from the value specified as `left`
	Width *int `json:"width,omitempty"`
}

// SBCustomUrlLandingPage A landing page including at least 3 ASINs. Note that custom landing page URLs can only be specified by vendors.
type SBCustomUrlLandingPage struct {
	PageType *string `json:"pageType,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SBDetailPageLandingPage An Amazon product detail page.
type SBDetailPageLandingPage struct {
	PageType *string `json:"pageType,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SBDraftCampaign defines model for SBDraftCampaign.
type SBDraftCampaign struct {
	union json.RawMessage
}

// SBDraftCampaign0 defines model for .
type SBDraftCampaign0 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords    *[]SBDraftKeyword              `json:"keywords,omitempty"`
	LandingPage *SBDraftCampaign_0_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaign1 defines model for .
type SBDraftCampaign1 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                        `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaign_1_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftCampaign2 defines model for .
type SBDraftCampaign2 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords *[]SBDraftKeyword `json:"keywords,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
}

// SBDraftCampaign3 defines model for .
type SBDraftCampaign3 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftCampaignBase defines model for SBDraftCampaignBase.
type SBDraftCampaignBase struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                          `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaignBase_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaignBase_LandingPage defines model for SBDraftCampaignBase.LandingPage.
type SBDraftCampaignBase_LandingPage struct {
	union json.RawMessage
}

// SBDraftCampaignBaseV32 defines model for SBDraftCampaignBaseV3_2.
type SBDraftCampaignBaseV32 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                      `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignBaseV32_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                             `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaignBaseV32_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaignBaseV32_Creative defines model for SBDraftCampaignBaseV32.Creative.
type SBDraftCampaignBaseV32_Creative struct {
	union json.RawMessage
}

// SBDraftCampaignBaseV32_LandingPage defines model for SBDraftCampaignBaseV32.LandingPage.
type SBDraftCampaignBaseV32_LandingPage struct {
	union json.RawMessage
}

// SBDraftCampaignBaseV33 defines model for SBDraftCampaignBaseV3_3.
type SBDraftCampaignBaseV33 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                      `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignBaseV33_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                             `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaignBaseV33_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaignBaseV33_Creative defines model for SBDraftCampaignBaseV33.Creative.
type SBDraftCampaignBaseV33_Creative struct {
	union json.RawMessage
}

// SBDraftCampaignBaseV33_LandingPage defines model for SBDraftCampaignBaseV33.LandingPage.
type SBDraftCampaignBaseV33_LandingPage struct {
	union json.RawMessage
}

// SBDraftCampaignDeleteResponse defines model for SBDraftCampaignDeleteResponse.
type SBDraftCampaignDeleteResponse struct {
	// Code The status of the deletion request.
	Code *string `json:"code,omitempty"`

	// DraftCampaignId The campaign identifier.
	DraftCampaignId *int64 `json:"draftCampaignId,omitempty"`
}

// SBDraftCampaignResponse Applies to:
// | Operation | Path |
// |-----------| -----|
// |[createDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| POST /sb/drafts/campaigns|
// |[updateDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| PUT /sb/drafts/campaigns|
// |[deleteDraftCampaign](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| GET /sb/drafts/campaigns/{draftCampaignId}|
// <br/>
type SBDraftCampaignResponse struct {
	union json.RawMessage
}

// SBDraftCampaignResponseCommon defines model for SBDraftCampaignResponseCommon.
type SBDraftCampaignResponseCommon struct {
	// Code The draft campaign response code.
	Code *string `json:"code,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int64 `json:"draftCampaignId,omitempty"`
}

// SBDraftCampaignResponseWithExpressions defines model for SBDraftCampaignResponseWithExpressions.
type SBDraftCampaignResponseWithExpressions struct {
	// Code The draft campaign response code.
	Code *string `json:"code,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId                  *int64                  `json:"draftCampaignId,omitempty"`
	NegativeTargetingClauseResponses *[]SBExpressionResponse `json:"negativeTargetingClauseResponses,omitempty"`
	TargetingClauseResponses         *[]SBExpressionResponse `json:"targetingClauseResponses,omitempty"`
}

// SBDraftCampaignResponseWithKeywords defines model for SBDraftCampaignResponseWithKeywords.
type SBDraftCampaignResponseWithKeywords struct {
	// Code The draft campaign response code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the 'code' field value.
	Details *string `json:"details,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId          *int64               `json:"draftCampaignId,omitempty"`
	KeywordResponses         *[]SBKeywordResponse `json:"keywordResponses,omitempty"`
	NegativeKeywordResponses *[]SBKeywordResponse `json:"negativeKeywordResponses,omitempty"`
}

// SBDraftCampaignV32 defines model for SBDraftCampaignV3_2.
type SBDraftCampaignV32 struct {
	union json.RawMessage
}

// SBDraftCampaignV320 defines model for .
type SBDraftCampaignV320 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                    `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignV32_0_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords    *[]SBDraftKeyword                 `json:"keywords,omitempty"`
	LandingPage *SBDraftCampaignV32_0_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaignV321 defines model for .
type SBDraftCampaignV321 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                    `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignV32_1_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                           `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaignV32_1_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftCampaignV322 defines model for .
type SBDraftCampaignV322 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords *[]SBDraftKeyword `json:"keywords,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
}

// SBDraftCampaignV323 defines model for .
type SBDraftCampaignV323 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftCampaignV33 defines model for SBDraftCampaignV3_3.
type SBDraftCampaignV33 struct {
	union json.RawMessage
}

// SBDraftCampaignV330 defines model for .
type SBDraftCampaignV330 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                    `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignV33_0_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords    *[]SBDraftKeyword                 `json:"keywords,omitempty"`
	LandingPage *SBDraftCampaignV33_0_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBDraftCampaignV331 defines model for .
type SBDraftCampaignV331 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormatV32 `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType                    `json:"budgetType,omitempty"`
	Creative   *SBDraftCampaignV33_1_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                           `json:"endDate,omitempty"`
	LandingPage *SBDraftCampaignV33_1_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftCampaignV332 defines model for .
type SBDraftCampaignV332 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the draft campaign.
	Keywords *[]SBDraftKeyword `json:"keywords,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the draft campaign.
	NegativeKeywords *[]SBDraftNegativeKeyword `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
}

// SBDraftCampaignV333 defines model for .
type SBDraftCampaignV333 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// NegativeTargets An array of negative targets associated with the draft campaign.
	NegativeTargets *[]SBDraftNegativeTargetingClause `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`

	// Targets An array of targets associated with the draft campaign.
	Targets *[]SBDraftTargetingClause `json:"targets,omitempty"`
}

// SBDraftKeyword defines model for SBDraftKeyword.
type SBDraftKeyword struct {
	// AdGroupId The identifier of the ad group associated with the keyword.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign associated with the keyword.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The keyword identifier.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// KeywordText The keyword text. The maximum number of words for this string is 10.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`

	// State | state | description |
	// |-------|-------------|
	// | draft | Newly created keyword. |
	// | pending | Keyword is under moderation. |
	// | enabled | Keyword passed moderation. |
	State *SBDraftKeywordState `json:"state,omitempty"`
}

// SBDraftKeywordState | state | description |
// |-------|-------------|
// | draft | Newly created keyword. |
// | pending | Keyword is under moderation. |
// | enabled | Keyword passed moderation. |
type SBDraftKeywordState string

// SBDraftNegativeKeyword defines model for SBDraftNegativeKeyword.
type SBDraftNegativeKeyword struct {
	// AdGroupId The identifier of the ad group associated with the keyword.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign associated with the keyword.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The keyword identifier.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// KeywordText The keyword text. The maximum number of words for this string is 10.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *NegativeMatchType `json:"matchType,omitempty"`

	// State Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
	State *SBDraftNegativeKeywordState `json:"state,omitempty"`
}

// SBDraftNegativeKeywordState Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
type SBDraftNegativeKeywordState string

// SBDraftNegativeTargetingClause defines model for SBDraftNegativeTargetingClause.
type SBDraftNegativeTargetingClause struct {
	// AdGroupId The identifier of an existing ad group. The newly created target is associated to the specified ad group.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of an existing campaign. The newly created target is associated to the specified campaign.
	CampaignId          *int64                          `json:"campaignId,omitempty"`
	Expressions         *SBNegativeTargetingExpressions `json:"expressions,omitempty"`
	ResolvedExpressions *SBResolvedExpression           `json:"resolvedExpressions,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBDraftTargetingClause defines model for SBDraftTargetingClause.
type SBDraftTargetingClause struct {
	// AdGroupId The identifier of the ad group to which the target is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *Bid `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which the target is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Expressions A name value pair that defines a targeting expression. The `type` field defines the predicate. The `value` field defines the value to match for the predicate.
	Expressions         *SBExpression         `json:"expressions,omitempty"`
	ResolvedExpressions *SBResolvedExpression `json:"resolvedExpressions,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBExpression A name value pair that defines a targeting expression. The `type` field defines the predicate. The `value` field defines the value to match for the predicate.
type SBExpression struct {
	Type *ProductPredicateType `json:"type,omitempty"`

	// Value The text of the targeting expression. The `-` token defines a range. For example, `2-4` defines a range of 2, 3, and 4.
	Value *string `json:"value,omitempty"`
}

// SBExpressionResponse defines model for SBExpressionResponse.
type SBExpressionResponse struct {
	// Code An enumerated response code.
	Code *string `json:"code,omitempty"`

	// TargetId The targeting expression identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBGetDraftCampaignResponse defines model for SBGetDraftCampaignResponse.
type SBGetDraftCampaignResponse struct {
	union json.RawMessage
}

// SBGetDraftCampaignResponseV32 defines model for SBGetDraftCampaignResponseV3_2.
type SBGetDraftCampaignResponseV32 struct {
	union json.RawMessage
}

// SBGetDraftCampaignResponseV33 defines model for SBGetDraftCampaignResponseV3_3.
type SBGetDraftCampaignResponseV33 struct {
	union json.RawMessage
}

// SBKeyword Applies to:
// | Operation | Path |
// |-----------| -----|
// |[listKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords|
// |[getKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords/{keywordId}|
// <br/>
type SBKeyword struct {
	// AdGroupId The identifier of the ad group associated with the keyword.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign associated with the keyword.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The keyword identifier.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// KeywordText The keyword text. The maximum number of words for this string is 10.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// State Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
	State *SBKeywordState `json:"state,omitempty"`
}

// SBKeywordExpression defines model for SBKeywordExpression.
type SBKeywordExpression struct {
	// Type The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	Type *MatchType `json:"type,omitempty"`

	// Value The text of the keyword. Maximum of 10 words.
	Value *string `json:"value,omitempty"`
}

// SBKeywordResponse Applies to:
// | Operation | Path |
// |-----------| -----|
// |[createKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| POST /sb/keywords|
// |[createNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|POST /sb/negativeKeywords|
// |[updateNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|PUT /sb/negativeKeywords|
// |[archiveNegativeKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|DELETE /sb/negativeKeywords/{keywordId}|
// <br/>
type SBKeywordResponse struct {
	// Code An enumerated response code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the enumerated response code in the `code` field.
	Details *string `json:"details,omitempty"`

	// KeywordId The keyword identifier.
	KeywordId *int64 `json:"keywordId,omitempty"`
}

// SBKeywordState Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
type SBKeywordState string

// SBLandingPage Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.
type SBLandingPage struct {
	// Asins An array of ASINs used to generate a simple landing page. The response includes the URL of the generated simple landing page. Do not include this property in the request if the `url` property is also included, these properties are mutually exclusive.
	Asins *[]string `json:"asins,omitempty"`

	// Url URL of an existing simple landing page or Store page. Vendors may also specify the URL of a custom landing page. If a custom URL is specified, the landing page must include the ASINs of at least three products that are advertised as part of the campaign. Do not include this property in the request if the `asins` property is also included, these properties are mutually exclusive.
	Url *string `json:"url,omitempty"`
}

// SBListCampaignsResponse Applies to:
// | Operation | Path |
// |-----------| -----|
// |[listCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| GET /sb/campaigns|
// <br/>
type SBListCampaignsResponse struct {
	union json.RawMessage
}

// SBListCampaignsResponse0 defines model for .
type SBListCampaignsResponse0 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int `json:"campaignId,omitempty"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                                `json:"endDate,omitempty"`
	LandingPage *SBListCampaignsResponse_0_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Value|Description|
	// |-----|-----------|
	// |asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|
	// |billingError| The billing information associated with the account requires correction.|
	// |ended| The value specified in the `endDate` field is in the past.|
	// |landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |outOfBudget| The campaign has run out of budget.|
	// |paused|The campaign state is set to `paused`.|
	// |pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.
	// |ready| The campaign is scheduled for a future date.|
	// |rejected| The campaign failed moderation review.|
	// |running| The campaign is enabled and serving.|
	// |scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |terminated| The state of the campaign is set to `archived`.|
	// <br/>
	ServingStatus *SBListCampaignsResponse0ServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
	State     *State  `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBListCampaignsResponse1 defines model for .
type SBListCampaignsResponse1 struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int `json:"campaignId,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                                `json:"endDate,omitempty"`
	LandingPage *SBListCampaignsResponse_1_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Value|Description|
	// |-----|-----------|
	// |asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|
	// |billingError| The billing information associated with the account requires correction.|
	// |ended| The value specified in the `endDate` field is in the past.|
	// |landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |outOfBudget| The campaign has run out of budget.|
	// |paused|The campaign state is set to `paused`.|
	// |pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.
	// |ready| The campaign is scheduled for a future date.|
	// |rejected| The campaign failed moderation review.|
	// |running| The campaign is enabled and serving.|
	// |scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |terminated| The state of the campaign is set to `archived`.|
	// <br/>
	ServingStatus *SBListCampaignsResponse1ServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
	State     *State  `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBListCampaignsResponseCommon defines model for SBListCampaignsResponseCommon.
type SBListCampaignsResponseCommon struct {
	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate     *string                                    `json:"endDate,omitempty"`
	LandingPage *SBListCampaignsResponseCommon_LandingPage `json:"landingPage,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Value|Description|
	// |-----|-----------|
	// |asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|
	// |billingError| The billing information associated with the account requires correction.|
	// |ended| The value specified in the `endDate` field is in the past.|
	// |landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |outOfBudget| The campaign has run out of budget.|
	// |paused|The campaign state is set to `paused`.|
	// |pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.
	// |ready| The campaign is scheduled for a future date.|
	// |rejected| The campaign failed moderation review.|
	// |running| The campaign is enabled and serving.|
	// |scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |terminated| The state of the campaign is set to `archived`.|
	// <br/>
	ServingStatus *SBListCampaignsResponseCommonServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
	State     *State  `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBListCampaignsResponseCommon_LandingPage defines model for SBListCampaignsResponseCommon.LandingPage.
type SBListCampaignsResponseCommon_LandingPage struct {
	union json.RawMessage
}

// SBListCampaignsResponseCommonServingStatus |Value|Description|
// |-----|-----------|
// |asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|
// |billingError| The billing information associated with the account requires correction.|
// |ended| The value specified in the `endDate` field is in the past.|
// |landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |outOfBudget| The campaign has run out of budget.|
// |paused|The campaign state is set to `paused`.|
// |pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.
// |ready| The campaign is scheduled for a future date.|
// |rejected| The campaign failed moderation review.|
// |running| The campaign is enabled and serving.|
// |scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |terminated| The state of the campaign is set to `archived`.|
// <br/>
type SBListCampaignsResponseCommonServingStatus string

// SBNegativeExpression defines model for SBNegativeExpression.
type SBNegativeExpression struct {
	Type *SBNegativeExpressionType `json:"type,omitempty"`

	// Value The text of the negative expression.
	Value *string `json:"value,omitempty"`
}

// SBNegativeExpressionType defines model for SBNegativeExpression.Type.
type SBNegativeExpressionType string

// SBNegativeKeyword defines model for SBNegativeKeyword.
type SBNegativeKeyword struct {
	// AdGroupId The identifier of the ad group associated with the keyword.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign associated with the keyword.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The keyword identifier.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// KeywordText The keyword text. The maximum number of words for this string is 10.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *NegativeMatchType `json:"matchType,omitempty"`

	// State Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
	State *SBKeywordState `json:"state,omitempty"`
}

// SBNegativeKeywordState The current state of the negative keyword. Newly created SB negative keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation review. 'enabled' refers to negative keywords that are active. 'archived' refers to negative keywords that are permanently inactive and cannot be returned to the 'enabled' state.
type SBNegativeKeywordState string

// SBNegativeTarget defines model for SBNegativeTarget.
type SBNegativeTarget struct {
	Expressions *[]SBExpression `json:"expressions,omitempty"`
}

// SBNegativeTargetId The identifier of a negative target.
type SBNegativeTargetId = int64

// SBNegativeTargetRequestIndex Correlates the negative target to the negative target array index specified in the request. Zero-based.
type SBNegativeTargetRequestIndex = float32

// SBNegativeTargetState defines model for SBNegativeTargetState.
type SBNegativeTargetState string

// SBNegativeTargetingClause defines model for SBNegativeTargetingClause.
type SBNegativeTargetingClause struct {
	// AdGroupId The identifier of an existing ad group. The newly created target is associated to this ad group
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of an existing campaign. The newly created target is associated to this campaign
	CampaignId          *int64                          `json:"campaignId,omitempty"`
	Expressions         *SBNegativeTargetingExpressions `json:"expressions,omitempty"`
	ResolvedExpressions *SBResolvedExpression           `json:"resolvedExpressions,omitempty"`
	State               *SBProductTargetState           `json:"state,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBNegativeTargetingExpressions defines model for SBNegativeTargetingExpressions.
type SBNegativeTargetingExpressions = []SBNegativeExpression

// SBProductCollectionCreative defines model for SBProductCollectionCreative.
type SBProductCollectionCreative struct {
	Asins *[]string `json:"asins,omitempty"`

	// BrandLogoAssetID The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.
	BrandLogoAssetID *string `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop *SBBrandLogoCrop `json:"brandLogoCrop,omitempty"`

	// BrandLogoUrl The address of the hosted image.
	BrandLogoUrl *string `json:"brandLogoUrl,omitempty"`

	// BrandName A brand name. Maximum length is 30 characters.
	BrandName *string `json:"brandName,omitempty"`

	// CustomImageAssetId The identifier of the Custom image from the Store assets library. See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#customimage) for more information on what constitutes a valid Custom image.
	CustomImageAssetId *string `json:"customImageAssetId,omitempty"`

	// CustomImageCrop The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted.
	CustomImageCrop *SBCustomImageCrop `json:"customImageCrop,omitempty"`

	// CustomImageUrl The address of the hosted Custom image.
	CustomImageUrl *string `json:"customImageUrl,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`

	// ShouldOptimizeAsins Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to true will not have any effect. The value returned in the response will always be false. For the GET operation, the value of this field will always be false. And starting on September 25th, 2021, this property will be removed completely.
	ShouldOptimizeAsins *bool `json:"shouldOptimizeAsins,omitempty"`
}

// SBProductListLandingPage A landing page showcasing a list of ASINs.
type SBProductListLandingPage struct {
	PageType *string `json:"pageType,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SBProductTargetState defines model for SBProductTargetState.
type SBProductTargetState string

// SBResolvedExpression defines model for SBResolvedExpression.
type SBResolvedExpression struct {
	Type *ProductPredicateType `json:"type,omitempty"`

	// Value The human-readable target text.
	Value *string `json:"value,omitempty"`
}

// SBStoreLandingPage An Amazon Store page or subpage.
type SBStoreLandingPage struct {
	PageType *string `json:"pageType,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SBStoreSpotlightCreative defines model for SBStoreSpotlightCreative.
type SBStoreSpotlightCreative struct {
	// BrandLogoAssetID The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.
	BrandLogoAssetID *string `json:"brandLogoAssetID,omitempty"`

	// BrandLogoCrop The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.
	BrandLogoCrop *SBBrandLogoCrop `json:"brandLogoCrop,omitempty"`

	// BrandLogoUrl The address of the hosted image.
	BrandLogoUrl *string `json:"brandLogoUrl,omitempty"`

	// BrandName A brand name. Maximum length is 30 characters.
	BrandName *string `json:"brandName,omitempty"`

	// Headline The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.
	Headline *string `json:"headline,omitempty"`
	Subpages *[]struct {
		// Asin An ASIN on the Store subpage. The ASIN image will be used to represent the subpage.
		Asin *string `json:"asin,omitempty"`

		// PageTitle The title of the subpage. Maximum length is 50 characters.
		PageTitle *string `json:"pageTitle,omitempty"`

		// Url URL of an existing Store page. Must be a subpage of the Store landing page associated with the campaign.
		Url *string `json:"url,omitempty"`
	} `json:"subpages,omitempty"`
}

// SBSubmitDraftCampaignResponse defines model for SBSubmitDraftCampaignResponse.
type SBSubmitDraftCampaignResponse struct {
	union json.RawMessage
}

// SBSubmitDraftCampaignResponse0 defines model for .
type SBSubmitDraftCampaignResponse0 struct {
	// CampaignId The identifier of the campaign.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Code The draft campaign response code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the 'code' field value.
	Details *string `json:"details,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId          *int64               `json:"draftCampaignId,omitempty"`
	KeywordResponses         *[]SBKeywordResponse `json:"keywordResponses,omitempty"`
	NegativeKeywordResponses *[]SBKeywordResponse `json:"negativeKeywordResponses,omitempty"`
}

// SBSubmitDraftCampaignResponse1 defines model for .
type SBSubmitDraftCampaignResponse1 struct {
	// CampaignId The identifier of the campaign.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Code The draft campaign response code.
	Code *string `json:"code,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId                  *int64                  `json:"draftCampaignId,omitempty"`
	NegativeTargetingClauseResponses *[]SBExpressionResponse `json:"negativeTargetingClauseResponses,omitempty"`
	TargetingClauseResponses         *[]SBExpressionResponse `json:"targetingClauseResponses,omitempty"`
}

// SBTarget defines model for SBTarget.
type SBTarget struct {
	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid         *SBAPIBid       `json:"bid,omitempty"`
	Expressions *[]SBExpression `json:"expressions,omitempty"`
}

// SBTargetId The identifier of a target.
type SBTargetId = int64

// SBTargetRequestIndex Correlates the target to the target array index specified in the request. Zero-based.
type SBTargetRequestIndex = float32

// SBTargetingClause defines model for SBTargetingClause.
type SBTargetingClause struct {
	// AdGroupId The identifier of the ad group to which the target is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *Bid `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which the target is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Expressions A name value pair that defines a targeting expression. The `type` field defines the predicate. The `value` field defines the value to match for the predicate.
	Expressions         *SBExpression         `json:"expressions,omitempty"`
	ResolvedExpressions *SBResolvedExpression `json:"resolvedExpressions,omitempty"`
	State               *SBProductTargetState `json:"state,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBTargetingClauseResponse defines model for SBTargetingClauseResponse.
type SBTargetingClauseResponse struct {
	Code *string `json:"code,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBTargetingExpressions defines model for SBTargetingExpressions.
type SBTargetingExpressions = []SBExpression

// SBTargetsNegativeTargets defines model for SBTargetsNegativeTargets.
type SBTargetsNegativeTargets struct {
	NegativeTargets *[]SBNegativeTarget `json:"negativeTargets,omitempty"`
	Targets         *[]SBTarget         `json:"targets,omitempty"`
}

// SBTheme | themeType | description |
// |-----------|-------------|
// | KEYWORDS_RELATED_TO_YOUR_BRAND | keywords related to brands. |
// | KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES | keywords related to your landing pages. |
type SBTheme struct {
	// AdGroupId The identifier of the ad group associated with the theme target.
	AdGroupId *string `json:"adGroupId,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign associated with the theme target.
	CampaignId *string       `json:"campaignId,omitempty"`
	State      *SBThemeState `json:"state,omitempty"`

	// ThemeId The theme target identifier.
	ThemeId *string `json:"themeId,omitempty"`

	// ThemeType The theme target type.
	// - KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.
	// - KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.
	// - Note: Additional theme types may be added in the future.
	ThemeType *ThemeType `json:"themeType,omitempty"`
}

// SBThemeId The identifier of theme target.
type SBThemeId = string

// SBThemeState defines model for SBThemeState.
type SBThemeState string

// SBUpdateCampaignResponse Applies to:
// | Operation | Path |
// |-----------| -----|
// |[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|
// |[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|
// <br/>
type SBUpdateCampaignResponse struct {
	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Code An enumerated response code.
	Code *string `json:"code,omitempty"`

	// Details A human-readable description of the enumerated response code in the `code` field.
	Details *string `json:"details,omitempty"`
}

// SBUpdateCampaignResponseDefault |-
//
//	Applies to:
//	| Operation | Path |
//	|-----------| -----|
//	|[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|
//	|[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|
//	<br/>
type SBUpdateCampaignResponseDefault struct {
	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Code An enumerated response code.
	Code *string `json:"code,omitempty"`

	// Description A human-readable description of the enumerated response code in the `code` field.
	Description *string       `json:"description,omitempty"`
	Errors      *[]ErrorEntry `json:"errors,omitempty"`
}

// SBUpdateDraftCampaignRequest defines model for SBUpdateDraftCampaignRequest.
type SBUpdateDraftCampaignRequest struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestCommon defines model for SBUpdateDraftCampaignRequestCommon.
type SBUpdateDraftCampaignRequestCommon struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBUpdateDraftCampaignRequestCommonV32 defines model for SBUpdateDraftCampaignRequestCommonV3_2.
type SBUpdateDraftCampaignRequestCommonV32 struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                      `json:"budgetType"`
	Creative   *SBUpdateDraftCampaignRequestCommonV32_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBUpdateDraftCampaignRequestCommonV32_Creative defines model for SBUpdateDraftCampaignRequestCommonV32.Creative.
type SBUpdateDraftCampaignRequestCommonV32_Creative struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestV32 defines model for SBUpdateDraftCampaignRequestV3_2.
type SBUpdateDraftCampaignRequestV32 struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestV33 defines model for SBUpdateDraftCampaignRequestV3_3.
type SBUpdateDraftCampaignRequestV33 struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestWithKeywords defines model for SBUpdateDraftCampaignRequestWithKeywords.
type SBUpdateDraftCampaignRequestWithKeywords struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBUpdateDraftCampaignRequestWithKeywordsV32 defines model for SBUpdateDraftCampaignRequestWithKeywordsV3_2.
type SBUpdateDraftCampaignRequestWithKeywordsV32 struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                            `json:"budgetType"`
	Creative   *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBUpdateDraftCampaignRequestWithKeywordsV32_Creative defines model for SBUpdateDraftCampaignRequestWithKeywordsV32.Creative.
type SBUpdateDraftCampaignRequestWithKeywordsV32_Creative struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestWithKeywordsV33 defines model for SBUpdateDraftCampaignRequestWithKeywordsV3_3.
type SBUpdateDraftCampaignRequestWithKeywordsV33 struct {
	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                            `json:"budgetType"`
	Creative   *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBUpdateDraftCampaignRequestWithKeywordsV33_Creative defines model for SBUpdateDraftCampaignRequestWithKeywordsV33.Creative.
type SBUpdateDraftCampaignRequestWithKeywordsV33_Creative struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestWithProductTargets defines model for SBUpdateDraftCampaignRequestWithProductTargets.
type SBUpdateDraftCampaignRequestWithProductTargets struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Note that the values of each field in this object are immutable for an existing campaign.
	Creative *SBCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid         *Bid            `json:"bid,omitempty"`
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBUpdateDraftCampaignRequestWithProductTargetsV32 defines model for SBUpdateDraftCampaignRequestWithProductTargetsV3_2.
type SBUpdateDraftCampaignRequestWithProductTargetsV32 struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                                  `json:"budgetType"`
	Creative   *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid         *Bid            `json:"bid,omitempty"`
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative defines model for SBUpdateDraftCampaignRequestWithProductTargetsV32.Creative.
type SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative struct {
	union json.RawMessage
}

// SBUpdateDraftCampaignRequestWithProductTargetsV33 defines model for SBUpdateDraftCampaignRequestWithProductTargetsV3_3.
type SBUpdateDraftCampaignRequestWithProductTargetsV33 struct {
	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to `true` to have Amazon automatically optimize bids for placements below top of search.
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType                                                  `json:"budgetType"`
	Creative   *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid         *Bid            `json:"bid,omitempty"`
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative defines model for SBUpdateDraftCampaignRequestWithProductTargetsV33.Creative.
type SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative struct {
	union json.RawMessage
}

// SBUpdateNegativeTargetingClauseRequest defines model for SBUpdateNegativeTargetingClauseRequest.
type SBUpdateNegativeTargetingClauseRequest struct {
	// AdGroupId The identifier of an existing ad group. The newly created target is associated to this ad group.
	AdGroupId *int64                `json:"adGroupId,omitempty"`
	State     *SBProductTargetState `json:"state,omitempty"`

	// TargetId The target identifier.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBUpdateTargetingClauseRequest defines model for SBUpdateTargetingClauseRequest.
type SBUpdateTargetingClauseRequest struct {
	// AdGroupId The identifier of the ad group to which the target is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *Bid `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which the target is associated.
	CampaignId *int64                `json:"campaignId,omitempty"`
	State      *SBProductTargetState `json:"state,omitempty"`

	// TargetId The identifier of the target.
	TargetId *int64 `json:"targetId,omitempty"`
}

// SBUpdateThemesRequest defines model for SBUpdateThemesRequest.
type SBUpdateThemesRequest struct {
	// AdGroupId The identifier of the ad group to which the target is associated.
	AdGroupId string `json:"adGroupId"`

	// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
	Bid *Bid `json:"bid,omitempty"`

	// CampaignId The identifier of the campaign to which the target is associated.
	CampaignId *string       `json:"campaignId,omitempty"`
	State      *SBThemeState `json:"state,omitempty"`

	// ThemeId The identifier of the theme target.
	ThemeId string `json:"themeId"`
}

// SBVideoCampaignResponseCommon defines model for SBVideoCampaignResponseCommon.
type SBVideoCampaignResponseCommon struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string  `json:"brandEntityId,omitempty"`
	Budget        *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The campaign name.
	Name *SBCampaignName `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// ServingStatus |Status|Description|
	// |------|-----------|
	// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
	// |BILLING_ERROR| Billing information requires correction.|
	// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
	// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
	// |OUT_OF_BUDGET| The campaign has run out of budget.|
	// |PAUSED| The campaign state set to `paused`.|
	// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
	// |READY| The campaign is scheduled for a future date.|
	// |REJECTED| The campaign failed moderation review.|
	// |RUNNING| The campaign is enabled and serving.|
	// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
	// |TERMINATED|The state of the campaign is set to `archived`.|
	ServingStatus *SBVideoCampaignResponseCommonServingStatus `json:"servingStatus,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// SBVideoCampaignResponseCommonServingStatus |Status|Description|
// |------|-----------|
// |ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|
// |BILLING_ERROR| Billing information requires correction.|
// |ENDED| THe `endDate` specified in the campaign object occurs in the past.|
// |LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|
// |OUT_OF_BUDGET| The campaign has run out of budget.|
// |PAUSED| The campaign state set to `paused`.|
// |PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|
// |READY| The campaign is scheduled for a future date.|
// |REJECTED| The campaign failed moderation review.|
// |RUNNING| The campaign is enabled and serving.|
// |SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|
// |TERMINATED|The state of the campaign is set to `archived`.|
type SBVideoCampaignResponseCommonServingStatus string

// SBVideoCreateCampaignRequestCommon defines model for SBVideoCreateCampaignRequestCommon.
type SBVideoCreateCampaignRequestCommon struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`
}

// SBVideoCreateCampaignWithExpressions defines model for SBVideoCreateCampaignWithExpressions.
type SBVideoCreateCampaignWithExpressions struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name            *string `json:"name,omitempty"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBVideoCreateCampaignWithKeywords defines model for SBVideoCreateCampaignWithKeywords.
type SBVideoCreateCampaignWithKeywords struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget amount associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.
	EndDate *EndDate `json:"endDate"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.
	Name *string `json:"name,omitempty"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
	StartDate *StartDate `json:"startDate"`
	State     *State     `json:"state,omitempty"`
}

// SBVideoCreateDraftCampaignRequestCommon defines model for SBVideoCreateDraftCampaignRequestCommon.
type SBVideoCreateDraftCampaignRequestCommon struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBVideoCreateDraftCampaignWithKeywords defines model for SBVideoCreateDraftCampaignWithKeywords.
type SBVideoCreateDraftCampaignWithKeywords struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`

		// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
		NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

		// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
		NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBVideoCreateDraftCampaignWithProductTargets defines model for SBVideoCreateDraftCampaignWithProductTargets.
type SBVideoCreateDraftCampaignWithProductTargets struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string `json:"name"`
	NegativeTargets *[]struct {
		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
	Targets   *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// Expressions An array of targets associated with the campaign.
		Expressions *[]SBExpression `json:"expressions,omitempty"`
	} `json:"targets,omitempty"`
}

// SBVideoCreative defines model for SBVideoCreative.
type SBVideoCreative struct {
	// Asins An array of ASINs associated with the creative.
	Asins *[]string `json:"asins,omitempty"`

	// Type Type of creative
	Type *SBVideoCreativeType `json:"type,omitempty"`

	// VideoMediaIds Video Asset IDs associated with the creative.
	VideoMediaIds *[]string `json:"videoMediaIds,omitempty"`
}

// SBVideoCreativeType Type of creative
type SBVideoCreativeType string

// SBVideoDraftCampaignBase defines model for SBVideoDraftCampaignBase.
type SBVideoDraftCampaignBase struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// BrandEntityId The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget *float32 `json:"budget,omitempty"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType *BudgetType `json:"budgetType,omitempty"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// LandingPage An Amazon product detail page.
	LandingPage *SBDetailPageLandingPage `json:"landingPage,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.
	StartDate *string `json:"startDate,omitempty"`
}

// SBVideoUpdateDraftCampaignRequestCommon defines model for SBVideoUpdateDraftCampaignRequestCommon.
type SBVideoUpdateDraftCampaignRequestCommon struct {
	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBVideoUpdateDraftCampaignRequestWithKeywords defines model for SBVideoUpdateDraftCampaignRequestWithKeywords.
type SBVideoUpdateDraftCampaignRequestWithKeywords struct {
	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Keywords An array of keywords associated with the campaign.
	Keywords *[]struct {
		// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
		Bid *Bid `json:"bid,omitempty"`

		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *MatchType `json:"matchType,omitempty"`
	} `json:"keywords,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name string `json:"name"`

	// NegativeKeywords An array of negative keywords associated with the campaign.
	NegativeKeywords *[]struct {
		// KeywordText The keyword text. Maximum of 10 words.
		KeywordText *string `json:"keywordText,omitempty"`

		// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
		MatchType *NegativeMatchType `json:"matchType,omitempty"`
	} `json:"negativeKeywords,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string `json:"startDate,omitempty"`
}

// SBVideoUpdateDraftCampaignRequestWithProductTargets defines model for SBVideoUpdateDraftCampaignRequestWithProductTargets.
type SBVideoUpdateDraftCampaignRequestWithProductTargets struct {
	// BrandEntityId The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.
	BrandEntityId *string `json:"brandEntityId,omitempty"`

	// Budget The budget associated with the draft campaign.
	Budget float32 `json:"budget"`

	// BudgetType Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.
	BudgetType BudgetType `json:"budgetType"`

	// Creative Render one product image with associated media.
	Creative *SBVideoCreative `json:"creative,omitempty"`

	// DraftCampaignId The identifier of the draft campaign.
	DraftCampaignId *int `json:"draftCampaignId,omitempty"`

	// EndDate The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.
	Name            string              `json:"name"`
	NegativeTargets *[]SBNegativeTarget `json:"negativeTargets,omitempty"`

	// PortfolioId The identifier of the Portfolio to which the draft campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`

	// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.
	StartDate *string     `json:"startDate,omitempty"`
	Targets   *[]SBTarget `json:"targets,omitempty"`
}

// SDRecommendationsBids defines model for SDRecommendationsBids.
type SDRecommendationsBids struct {
	// KeywordsBidsRecommendationErrorResults Lists errors that occurred during creation of keyword bid recommendations.
	KeywordsBidsRecommendationErrorResults *[]struct {
		Code    *string              `json:"code,omitempty"`
		Details *string              `json:"details,omitempty"`
		Keyword *SBKeywordExpression `json:"keyword,omitempty"`

		// KeywordIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
		KeywordIndex *SBBidRecommendationKeywordIndex `json:"keywordIndex,omitempty"`
	} `json:"keywordsBidsRecommendationErrorResults,omitempty"`

	// KeywordsBidsRecommendationSuccessResults Lists the bid recommendations for the keywords specified in the request.
	KeywordsBidsRecommendationSuccessResults *[]struct {
		Keyword *struct {
			// KeywordText The text of the keyword.
			KeywordText *string `json:"keywordText,omitempty"`

			// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
			MatchType *MatchType `json:"matchType,omitempty"`
		} `json:"keyword,omitempty"`

		// KeywordIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
		KeywordIndex *SBBidRecommendationKeywordIndex `json:"keywordIndex,omitempty"`

		// RecommendationId The identifier of the keyword bid recommendation.
		RecommendationId *string         `json:"recommendationId,omitempty"`
		RecommendedBid   *RecommendedBid `json:"recommendedBid,omitempty"`
	} `json:"keywordsBidsRecommendationSuccessResults,omitempty"`

	// TargetsBidsRecommendationErrorResults Lists errors that occurred during creation of target bid recommendations.
	TargetsBidsRecommendationErrorResults *[]struct {
		Code    *string                 `json:"code,omitempty"`
		Details *string                 `json:"details,omitempty"`
		Targets *SBTargetingExpressions `json:"targets,omitempty"`

		// TargetsIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
		TargetsIndex *SBBidRecommendationKeywordIndex `json:"targetsIndex,omitempty"`
	} `json:"targetsBidsRecommendationErrorResults,omitempty"`

	// TargetsBidsRecommendationSuccessResults Lists the bid recommendations for the keywords or targets specified in the request.
	TargetsBidsRecommendationSuccessResults *[]struct {
		// RecommendationId The identifier of the target bid recommendation.
		RecommendationId *interface{}            `json:"recommendationId,omitempty"`
		RecommendedBid   *RecommendedBid         `json:"recommendedBid,omitempty"`
		Targets          *SBTargetingExpressions `json:"targets,omitempty"`

		// TargetsIndex Correlates the keyword to the keyword array index specified in the request. Zero-based.
		TargetsIndex *SBBidRecommendationKeywordIndex `json:"targetsIndex,omitempty"`
	} `json:"targetsBidsRecommendationSuccessResults,omitempty"`

	// ThemeTargetsBidsRecommendationErrorResults Lists errors that occurred during creation of theme targets bid recommendations.
	ThemeTargetsBidsRecommendationErrorResults *[]struct {
		Code    *string `json:"code,omitempty"`
		Details *string `json:"details,omitempty"`

		// ThemeIndex Correlates the theme targets to the theme targets array index specified in the request. Zero-based.
		ThemeIndex *SBBidRecommendationThemeIndex `json:"themeIndex,omitempty"`

		// ThemeType The theme target type.
		// - KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.
		// - KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.
		// - Note: Additional theme types may be added in the future.
		ThemeType *ThemeType `json:"themeType,omitempty"`
	} `json:"themeTargetsBidsRecommendationErrorResults,omitempty"`

	// ThemeTargetsBidsRecommendationSuccessResults Lists the theme targets recommendations for the theme targets specified in the request.
	ThemeTargetsBidsRecommendationSuccessResults *[]struct {
		// RecommendationId The identifier of the target bid recommendation.
		RecommendationId *interface{}    `json:"recommendationId,omitempty"`
		RecommendedBid   *RecommendedBid `json:"recommendedBid,omitempty"`

		// ThemeIndex Correlates the theme targets to the theme targets array index specified in the request. Zero-based.
		ThemeIndex *SBBidRecommendationThemeIndex `json:"themeIndex,omitempty"`

		// ThemeType The theme target type.
		// - KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.
		// - KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.
		// - Note: Additional theme types may be added in the future.
		ThemeType *ThemeType `json:"themeType,omitempty"`
	} `json:"themeTargetsBidsRecommendationSuccessResults,omitempty"`
}

// SbModerationCampaignsResponse defines model for SbModerationCampaignsResponse.
type SbModerationCampaignsResponse struct {
	// CampaignId The campaign identifier.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// EtaForModeration Expected date and time by which moderation will be complete. Note that this field is present in the response only when `moderationStatus` is set to `IN_PROGRESS`.
	EtaForModeration *time.Time `json:"etaForModeration,omitempty"`

	// ModerationStatus The moderation status of the campaign.
	// |Status|Description|
	// |------|-----------|
	// |APPROVED|Moderation for the campaign is complete.|
	// |IN_PROGRESS|Moderation for the campaign is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|
	// |REJECTED|The campaign has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|
	ModerationStatus *SbModerationCampaignsResponseModerationStatus `json:"moderationStatus,omitempty"`

	// PolicyViolations A list of policy violations for a campaign that has failed moderation. Note that this field is present in the response only when `moderationStatus` is set to `REJECTED`.
	PolicyViolations *[]struct {
		// PolicyDescription A human-readable description of the policy.
		PolicyDescription *string `json:"policyDescription,omitempty"`

		// PolicyLinkUrl Address of the policy documentation. Follow the link to learn more about the specified policy.
		PolicyLinkUrl *string `json:"policyLinkUrl,omitempty"`

		// ViolatingAsinContents Information about the specific ASIN in the campaign that violates the specified policy.
		ViolatingAsinContents *[]struct {
			AsinEvidences *[]struct {
				// Asin The ASIN that violates the specified policy.
				Asin *string `json:"asin,omitempty"`
			} `json:"asinEvidences,omitempty"`

			// ModeratedComponent The ad component that includes the ASIN that violates the specified policy.
			ModeratedComponent *string `json:"moderatedComponent,omitempty"`
		} `json:"violatingAsinContents,omitempty"`

		// ViolatingImageContents Information about the specific image that violates the specified policy.
		ViolatingImageContents *[]struct {
			ImageEvidences *[]struct {
				ViolatingImageCrop *struct {
					// Height The height of the content that violates the specified policy within the image.
					Height *int `json:"height,omitempty"`

					// TopLeftX The top left X-coordinate of the content that violates the specfied policy within the image.
					TopLeftX *int `json:"topLeftX,omitempty"`

					// TopLeftY The top left Y-coordinate of the content that violates the specfied policy within the image.
					TopLeftY *int `json:"topLeftY,omitempty"`

					// Width The width of the content that violates the specified policy within the image.
					Width *int `json:"width,omitempty"`
				} `json:"violatingImageCrop,omitempty"`
			} `json:"imageEvidences,omitempty"`

			// ModeratedComponent The ad component that includes the image that violates the specified policy.
			ModeratedComponent *string `json:"moderatedComponent,omitempty"`

			// ReviewedImageUrl Address of the image reviewed during moderation.
			ReviewedImageUrl *string `json:"reviewedImageUrl,omitempty"`
		} `json:"violatingImageContents,omitempty"`

		// ViolatingTextContents Information about the specific text that violates the specified policy in the campaign.
		ViolatingTextContents *[]struct {
			// ModeratedComponent The ad component that includes the text that violates the specified policy.
			ModeratedComponent *string `json:"moderatedComponent,omitempty"`

			// ReviewedText The specific text reviewed during moderation.
			ReviewedText  *string `json:"reviewedText,omitempty"`
			TextEvidences *[]struct {
				// ViolatingText The specific text determined to violate the specified policy in `reviewedText`.
				ViolatingText         *string `json:"violatingText,omitempty"`
				ViolatingTextPosition *struct {
					// End Zero-based index into the text in `reviewedText` where the text specified in `violatingText` ends.
					End *int `json:"end,omitempty"`

					// Start Zero-based index into the text in `reviewedText` where the text specified in `violatingText` starts.
					Start *int `json:"start,omitempty"`
				} `json:"violatingTextPosition,omitempty"`
			} `json:"textEvidences,omitempty"`
		} `json:"violatingTextContents,omitempty"`
	} `json:"policyViolations,omitempty"`
}

// SbModerationCampaignsResponseModerationStatus The moderation status of the campaign.
// |Status|Description|
// |------|-----------|
// |APPROVED|Moderation for the campaign is complete.|
// |IN_PROGRESS|Moderation for the campaign is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|
// |REJECTED|The campaign has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|
type SbModerationCampaignsResponseModerationStatus string

// SbRecommendationsTargetsBrand defines model for SbRecommendationsTargetsBrand.
type SbRecommendationsTargetsBrand struct {
	BrandRecommendationResults *[]SBBrandResponse `json:"brandRecommendationResults,omitempty"`
}

// SbRecommendationsTargetsCategory defines model for SbRecommendationsTargetsCategory.
type SbRecommendationsTargetsCategory struct {
	CategoryRecommendationResults *[]SBCategoryResponse `json:"categoryRecommendationResults,omitempty"`
}

// SbRecommendationsTargetsProductList defines model for SbRecommendationsTargetsProductList.
type SbRecommendationsTargetsProductList struct {
	RecommendedProducts *[]struct {
		// RecommendedTargetAsin The recommended target ASIN.
		RecommendedTargetAsin *string `json:"recommendedTargetAsin,omitempty"`
	} `json:"recommendedProducts,omitempty"`
}

// ShopperSegmentBiddingControls defines model for ShopperSegmentBiddingControls.
type ShopperSegmentBiddingControls struct {
	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`
}

// SpooferError defines model for SpooferError.
type SpooferError struct {
	SpooferError *BasicErrorObject `json:"SpooferError,omitempty"`
}

// StartDate The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.
type StartDate = string

// State defines model for State.
type State string

// TargetError defines model for TargetError.
type TargetError struct {
	TargetError *struct {
		Location    *string `json:"location,omitempty"`
		MatchType   *string `json:"matchType,omitempty"`
		MaxTargets  *string `json:"maxTargets,omitempty"`
		Message     string  `json:"message"`
		Note        *string `json:"note,omitempty"`
		Reason      string  `json:"reason"`
		TargetType  *string `json:"targetType,omitempty"`
		Trigger     *string `json:"trigger,omitempty"`
		ValidStates *string `json:"validStates,omitempty"`
	} `json:"TargetError,omitempty"`
}

// ThemeType The theme target type.
// - KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.
// - KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.
// - Note: Additional theme types may be added in the future.
type ThemeType = string

// UploadLocation The url to upload the media. The url expires in 15 minutes. The upload location only supports `PUT` HTTP Method to upload the media content.
type UploadLocation = string

// V2HsaReportResponse defines model for V2HsaReportResponse.
type V2HsaReportResponse struct {
	// RecordType The record type of the report. It can be `campaign`, `adGroup`, `keyword`, or `targets`.
	RecordType *string `json:"recordType,omitempty"`

	// ReportId The unique ID for your requested report.
	ReportId *string `json:"reportId,omitempty"`

	// Status The status of the report. Status is one of `IN_PROGRESS`, `SUCCESS`, or `FAILURE`.
	Status *string `json:"status,omitempty"`

	// StatusDetails Description of the status.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// V2ReportIdResponse defines model for V2ReportIdResponse.
type V2ReportIdResponse struct {
	// ReportId The unique ID for your requested report.
	ReportId *string `json:"reportId,omitempty"`

	// Status The status of the report. Status is one of `IN_PROGRESS`, `SUCCESS`, or `FAILURE`.
	Status *string `json:"status,omitempty"`

	// StatusDetails Description of the status.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// BadRequest400 defines model for BadRequest400.
type BadRequest400 = Error

// NotFound404 defines model for NotFound404.
type NotFound404 = Error

// GetBrandsParams defines parameters for GetBrands.
type GetBrandsParams struct {
	// BrandTypeFilter The returned array is filtered to include only brands with brand type set to one of the values in the specified comma-delimited list. Returns all brands if not specified.
	BrandTypeFilter *BrandType `form:"brandTypeFilter,omitempty" json:"brandTypeFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CompleteUploadJSONBody defines parameters for CompleteUpload.
type CompleteUploadJSONBody struct {
	// UploadLocation The url to upload the media. The url expires in 15 minutes. The upload location only supports `PUT` HTTP Method to upload the media content.
	UploadLocation *UploadLocation `json:"uploadLocation,omitempty"`

	// Version The version id of the uploaded media. The upload location retrieved from /media/upload API supports versioning and returns version id in the upload response through `x-amz-version-id` header. API user can explicitly specify the version id corresponding to an upload through `version` property. `version` is optional and if it is not specified, media corresponding to the most recent version at the time of API call will be used.
	Version *string `json:"version,omitempty"`
}

// CompleteUploadParams defines parameters for CompleteUpload.
type CompleteUploadParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// DescribeMediaParams defines parameters for DescribeMedia.
type DescribeMediaParams struct {
	// MediaId Media Identifier
	MediaId string `form:"mediaId" json:"mediaId"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// CreateUploadResourceParams defines parameters for CreateUploadResource.
type CreateUploadResourceParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope string `json:"Amazon-Advertising-API-Scope"`
}

// ListAsinsParams defines parameters for ListAsins.
type ListAsinsParams struct {
	// PageUrl For sellers, the address of a Store page. Vendors may also specify the address of a custom landing page. For more information, see the [Stores section](https://advertising.amazon.com/help#GPRM3ZHEXEY5RBFZ) of the Amazon Ads support center.
	PageUrl string `form:"pageUrl" json:"pageUrl"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListAdGroupsParams defines parameters for ListAdGroups.
type ListAdGroupsParams struct {
	// StartIndex Sets a zero-based offset into the requested set of ad groups. Use in conjunction with the `count` parameter to control pagination of the returned array.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of ad groups in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// Name The returned array includes only ad groups with the specified name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// AdGroupIdFilter The returned array includes only ad groups with identifiers matching those specified in the comma-delimited string.
	AdGroupIdFilter *string `form:"adGroupIdFilter,omitempty" json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter The returned array includes only ad groups associated with campaign identifiers matching those specified in the comma-delimited string.
	CampaignIdFilter *string `form:"campaignIdFilter,omitempty" json:"campaignIdFilter,omitempty"`

	// CreativeType Filter by the type of creative the campaign is associated with. To get ad groups associated with non-video campaigns specify 'productCollection'. To get ad groups associated with video campaigns, this must be set to 'video'. Returns all ad groups if not specified.
	CreativeType *CreativeType `form:"creativeType,omitempty" json:"creativeType,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetAdGroupParams defines parameters for GetAdGroup.
type GetAdGroupParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListCampaignsParams defines parameters for ListCampaigns.
type ListCampaignsParams struct {
	// StartIndex Sets a zero-based offset into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of campaigns in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// StateFilter The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list. Defaults to `enabled` and `paused`.<br/><br/>
	// **Note** that Campaigns rejected during moderation have state set to `archived`.
	StateFilter *State `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// Name The returned array includes only campaigns with the specified name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PortfolioIdFilter The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
	PortfolioIdFilter *string `form:"portfolioIdFilter,omitempty" json:"portfolioIdFilter,omitempty"`

	// CampaignIdFilter The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
	CampaignIdFilter *string `form:"campaignIdFilter,omitempty" json:"campaignIdFilter,omitempty"`

	// AdFormatFilter The returned array includes only campaigns with ad format matching those specified in the comma-delimited adFormats. Returns all campaigns if not specified.
	AdFormatFilter *AdFormat `form:"adFormatFilter,omitempty" json:"adFormatFilter,omitempty"`

	// CreativeType Filter by the type of creative the campaign is associated with. To get non-video campaigns specify 'productCollection'. To get video campaigns, this must be set to 'video'. Returns all campaigns if not specified.
	CreativeType *CreativeType `form:"creativeType,omitempty" json:"creativeType,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONBody defines parameters for CreateCampaigns.
type CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONBody = []SBCreateCampaignRequestV32

// CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONBody defines parameters for CreateCampaigns.
type CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONBody = []SBCreateCampaignRequestV33

// CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONBody defines parameters for CreateCampaigns.
type CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONBody = []SBCreateCampaignRequest

// CreateCampaignsParams defines parameters for CreateCampaigns.
type CreateCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONBody defines parameters for UpdateCampaigns.
type UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONBody = []struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	// `Not supported for video campaigns`
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to true to allow Amazon to automatically optimize bids for placements below top of search. `Not supported for video campaigns`
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// Budget The budget associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// CampaignId The identifier of an existing campaign.
	CampaignId *int `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Note that a value must be specified if the `budgetType` for the campaign is set to `lifetime`.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the campaign.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`
	State       *State `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONBody defines parameters for UpdateCampaigns.
type UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONBody = []struct {
	// BidAdjustments List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustment `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	// `Not supported for video campaigns`
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to true to allow Amazon to automatically optimize bids for placements below top of search. `Not supported for video campaigns`
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// Budget The budget associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// CampaignId The identifier of an existing campaign.
	CampaignId *int `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Note that a value must be specified if the `budgetType` for the campaign is set to `lifetime`.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the campaign.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`
	State       *State `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONBody defines parameters for UpdateCampaigns.
type UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONBody = []struct {
	// BidAdjustments List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`
	BidAdjustments *[]BidAdjustmentV33 `json:"bidAdjustments,omitempty"`

	// BidMultiplier A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.
	// `Not supported for video campaigns`
	BidMultiplier *float32 `json:"bidMultiplier,omitempty"`

	// BidOptimization Set to true to allow Amazon to automatically optimize bids for placements below top of search. `Not supported for video campaigns`
	BidOptimization *bool `json:"bidOptimization,omitempty"`

	// BidOptimizationStrategy Automated bid optimization strategy.
	// |Bid optimization strategy|Description|
	// |------|-----------|
	// |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|
	// |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|
	// `Not supported for video campaigns`
	BidOptimizationStrategy *BidOptimizationStrategy `json:"bidOptimizationStrategy,omitempty"`

	// Budget The budget associated with the campaign.
	Budget *float32 `json:"budget,omitempty"`

	// CampaignId The identifier of an existing campaign.
	CampaignId *int `json:"campaignId,omitempty"`

	// EndDate The YYYYMMDD end date for the campaign. Note that a value must be specified if the `budgetType` for the campaign is set to `lifetime`.
	EndDate *string `json:"endDate,omitempty"`

	// Name The name of the campaign.
	Name *string `json:"name,omitempty"`

	// PortfolioId The identifier of the portfolio to which the campaign is associated.
	PortfolioId *int64 `json:"portfolioId,omitempty"`
	State       *State `json:"state,omitempty"`

	// Tags A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
	Tags *CampaignTags `json:"tags,omitempty"`
}

// UpdateCampaignsParams defines parameters for UpdateCampaigns.
type UpdateCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ArchiveCampaignParams defines parameters for ArchiveCampaign.
type ArchiveCampaignParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetCampaignParams defines parameters for GetCampaign.
type GetCampaignParams struct {
	// Locale The returned array includes only keywords associated with locale matching those specified by identifier.
	Locale *string `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListDraftCampaignsParams defines parameters for ListDraftCampaigns.
type ListDraftCampaignsParams struct {
	// StartIndex Sets a zero-based offset into the requested set of draft campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of draft campaigns in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// Name The returned array only includes draft campaigns with the specified name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// DraftCampaignIdFilter The returned array includes only draft campaigns with identifiers matching those specified in the comma-delimited string.
	DraftCampaignIdFilter *string `form:"draftCampaignIdFilter,omitempty" json:"draftCampaignIdFilter,omitempty"`

	// PortfolioIdFilter The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
	PortfolioIdFilter *string `form:"portfolioIdFilter,omitempty" json:"portfolioIdFilter,omitempty"`

	// AdFormatFilter The returned array includes only draft campaigns with ad format matching those specified in the comma-delimited adFormats. Returns all drafts if not specified.
	AdFormatFilter *AdFormat `form:"adFormatFilter,omitempty" json:"adFormatFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody defines parameters for CreateDraftCampaigns.
type CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody = []SBCreateDraftCampaignRequestV32

// CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody defines parameters for CreateDraftCampaigns.
type CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody = []SBCreateDraftCampaignRequestV33

// CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody defines parameters for CreateDraftCampaigns.
type CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody = []SBCreateDraftCampaignRequest

// CreateDraftCampaignsParams defines parameters for CreateDraftCampaigns.
type CreateDraftCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody defines parameters for UpdateDraftCampaigns.
type UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody = []SBUpdateDraftCampaignRequest

// UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody defines parameters for UpdateDraftCampaigns.
type UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody = []SBUpdateDraftCampaignRequestV32

// UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody defines parameters for UpdateDraftCampaigns.
type UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody = []SBUpdateDraftCampaignRequestV33

// UpdateDraftCampaignsParams defines parameters for UpdateDraftCampaigns.
type UpdateDraftCampaignsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONBody defines parameters for SubmitDraftCampaign.
type SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONBody = []int64

// SubmitDraftCampaignParams defines parameters for SubmitDraftCampaign.
type SubmitDraftCampaignParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// DeleteDraftCampaignParams defines parameters for DeleteDraftCampaign.
type DeleteDraftCampaignParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDraftCampaignParams defines parameters for GetDraftCampaign.
type GetDraftCampaignParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListKeywordsParams defines parameters for ListKeywords.
type ListKeywordsParams struct {
	// StartIndex Sets a zero-based offset into the requested set of keywords. Use in conjunction with the `count` parameter to control pagination of the returned array.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten keywords set `startIndex=0` and `count=10`. To return the next ten keywords, set `startIndex=10` and `count=10`, and so on.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// MatchTypeFilter The returned array is filtered to include only keywords with `matchType` set to one of the values in the specified comma-delimited list.
	MatchTypeFilter *MatchType `form:"matchTypeFilter,omitempty" json:"matchTypeFilter,omitempty"`

	// KeywordText The returned array includes only keywords with the specified text.
	KeywordText *string `form:"keywordText,omitempty" json:"keywordText,omitempty"`

	// StateFilter The returned array is filtered to include only keywords with 'state' set to one of the values in the specified comma-delimited list.
	StateFilter *ListKeywordsParamsStateFilter `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// CampaignIdFilter The returned array includes only keywords associated with campaigns matching those specified by identifier in the comma-delimited string.
	CampaignIdFilter *string `form:"campaignIdFilter,omitempty" json:"campaignIdFilter,omitempty"`

	// AdGroupIdFilter The returned array includes only keywords associated with ad groups matching those specified by identifier in the comma-delimited string.
	AdGroupIdFilter *string `form:"adGroupIdFilter,omitempty" json:"adGroupIdFilter,omitempty"`

	// KeywordIdFilter The returned array includes only keywords with identifiers matching those specified in the comma-delimited string.
	KeywordIdFilter *string `form:"keywordIdFilter,omitempty" json:"keywordIdFilter,omitempty"`

	// CreativeType Filter by the type of creative the campaign is associated with. To get keywords associated with non-video campaigns specify 'productCollection'. To get keywords associated with video campaigns, this must be set to 'video'. Returns all keywords if not specified.
	CreativeType *CreativeType `form:"creativeType,omitempty" json:"creativeType,omitempty"`

	// Locale The returned array includes only keywords with locale matching those specified string.
	Locale *string `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListKeywordsParamsStateFilter defines parameters for ListKeywords.
type ListKeywordsParamsStateFilter string

// CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody defines parameters for CreateKeywords.
type CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody = []struct {
	// AdGroupId The identifier of an existing ad group to which the keyword is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// Bid The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The identifier of an existing campaign to which the keyword is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordText The keyword text. The maximum number of words for this string is 10.
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *MatchType `json:"matchType,omitempty"`

	// NativeLanguageKeyword The unlocalized keyword text in the preferred locale of the advertiser.
	NativeLanguageKeyword *string `json:"nativeLanguageKeyword,omitempty"`

	// NativeLanguageLocale The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
	NativeLanguageLocale *string `json:"nativeLanguageLocale,omitempty"`
}

// CreateKeywordsParams defines parameters for CreateKeywords.
type CreateKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody defines parameters for UpdateKeywords.
type UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody = []struct {
	// AdGroupId The identifier of an existing ad group to which the keyword is associated.
	AdGroupId int64 `json:"adGroupId"`

	// Bid The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.
	Bid *float32 `json:"bid,omitempty"`

	// CampaignId The identifier of an existing campaign to which the keyword is associated.
	CampaignId int64 `json:"campaignId"`

	// KeywordId The identifier of the keyword.
	KeywordId int64 `json:"keywordId"`

	// State Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state.
	State *SBKeywordState `json:"state,omitempty"`
}

// UpdateKeywordsParams defines parameters for UpdateKeywords.
type UpdateKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ArchiveKeywordParams defines parameters for ArchiveKeyword.
type ArchiveKeywordParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetKeywordParams defines parameters for GetKeyword.
type GetKeywordParams struct {
	// Locale The returned array includes only keywords associated with locale matching those specified by identifier.
	Locale *string `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSbModerationCampaignsCampaignIdParams defines parameters for GetSbModerationCampaignsCampaignId.
type GetSbModerationCampaignsCampaignIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListNegativeKeywordsParams defines parameters for ListNegativeKeywords.
type ListNegativeKeywordsParams struct {
	// StartIndex Sets a zero-based offset into the requested set of negative keywords. Use in conjunction with the `count` parameter to control pagination of the returned array.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Sets the number of negative keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten negative keywords set `startIndex=0` and `count=10`. To return the next ten negative keywords, set `startIndex=10` and `count=10`, and so on.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// MatchTypeFilter The returned array is filtered to include only negative keywords with `matchType` set to one of the values in the specified comma-delimited list.
	MatchTypeFilter *NegativeMatchType `form:"matchTypeFilter,omitempty" json:"matchTypeFilter,omitempty"`

	// KeywordText The returned array includes only negative keywords with the specified text.
	KeywordText *string `form:"keywordText,omitempty" json:"keywordText,omitempty"`

	// StateFilter The returned array includes only negative keywords with `state` set to the specified value.
	StateFilter *State `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// CampaignIdFilter The returned array includes only negative keywords associated with campaigns matching those specified by identifier in the comma-delimited string.
	CampaignIdFilter *string `form:"campaignIdFilter,omitempty" json:"campaignIdFilter,omitempty"`

	// AdGroupIdFilter The returned array includes only negative keywords associated with ad groups matching those specified by identifier in the comma-delimited string.
	AdGroupIdFilter *string `form:"adGroupIdFilter,omitempty" json:"adGroupIdFilter,omitempty"`

	// KeywordIdFilter The returned array includes only negative keywords with identifiers matching those specified in the comma-delimited string.
	KeywordIdFilter *string `form:"keywordIdFilter,omitempty" json:"keywordIdFilter,omitempty"`

	// CreativeType Filter by the type of creative the campaign is associated with. To get negative keywords associated with non-video campaigns specify 'productCollection'. To get negative keywords associated with video campaigns, this must be set to 'video'. Returns all negative keywords if not specified.
	CreativeType *CreativeType `form:"creativeType,omitempty" json:"creativeType,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody defines parameters for CreateNegativeKeywords.
type CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody = []struct {
	// AdGroupId The identifier of the ad group to which the negative keyword is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign to which the negative keyword is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordText The keyword text. Maximum length is ten words if 'matchType' is 'negativeExact'. Maximum length is 4 words if 'matchType' is 'negativePhrase'
	KeywordText *string `json:"keywordText,omitempty"`

	// MatchType The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
	MatchType *NegativeMatchType `json:"matchType,omitempty"`
}

// CreateNegativeKeywordsParams defines parameters for CreateNegativeKeywords.
type CreateNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody defines parameters for UpdateNegativeKeywords.
type UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody = []struct {
	// AdGroupId The identifier of the ad group to which the negative keyword is associated.
	AdGroupId *int64 `json:"adGroupId,omitempty"`

	// CampaignId The identifier of the campaign to which the negative keyword is associated.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// KeywordId The identifier of the negative keyword.
	KeywordId *int64 `json:"keywordId,omitempty"`

	// State The current state of the negative keyword. Newly created SB negative keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation review. 'enabled' refers to negative keywords that are active. 'archived' refers to negative keywords that are permanently inactive and cannot be returned to the 'enabled' state.
	State *SBNegativeKeywordState `json:"state,omitempty"`
}

// UpdateNegativeKeywordsParams defines parameters for UpdateNegativeKeywords.
type UpdateNegativeKeywordsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ArchiveNegativeKeywordParams defines parameters for ArchiveNegativeKeyword.
type ArchiveNegativeKeywordParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetNegativeKeywordParams defines parameters for GetNegativeKeyword.
type GetNegativeKeywordParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateNegativeTargetsJSONBody defines parameters for CreateNegativeTargets.
type CreateNegativeTargetsJSONBody struct {
	NegativeTargets []SBCreateNegativeTargetingClauseRequest `json:"negativeTargets"`
}

// UpdateNegativeTargetsJSONBody defines parameters for UpdateNegativeTargets.
type UpdateNegativeTargetsJSONBody struct {
	NegativeTargets *[]SBUpdateNegativeTargetingClauseRequest `json:"negativeTargets,omitempty"`
}

// ListNegativeTargetsJSONBody defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBody struct {
	// Filters Restricts results to negative targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one each type of filter. Specifying multiples of the same type of filter results in an error.
	Filters *[]ListNegativeTargetsJSONBody_Filters_Item `json:"filters,omitempty"`

	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResults `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// ListNegativeTargetsJSONBodyFilters0 defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBodyFilters0 struct {
	// FilterType Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all negative targets will be returned.
	FilterType *ListNegativeTargetsJSONBodyFilters0FilterType `json:"filterType,omitempty"`

	// Values A list of creative types.
	Values *[]ListNegativeTargetsJSONBodyFilters0Values `json:"values,omitempty"`
}

// ListNegativeTargetsJSONBodyFilters1 defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBodyFilters1 struct {
	// FilterType Set `filterType` to `TARGETING_STATE` to filter by negative target state.
	FilterType *ListNegativeTargetsJSONBodyFilters1FilterType `json:"filterType,omitempty"`

	// Values A list of negative target states.
	Values *[]SBNegativeTargetState `json:"values,omitempty"`
}

// ListNegativeTargetsJSONBodyFilters2 defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBodyFilters2 struct {
	// FilterType Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.
	FilterType *ListNegativeTargetsJSONBodyFilters2FilterType `json:"filterType,omitempty"`

	// Values A list of campaign identifiers.
	Values *[]string `json:"values,omitempty"`
}

// ListNegativeTargetsJSONBodyFilters3 defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBodyFilters3 struct {
	// FilterType Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.
	FilterType *ListNegativeTargetsJSONBodyFilters3FilterType `json:"filterType,omitempty"`

	// Values A list of ad group identifiers.
	Values *[]string `json:"values,omitempty"`
}

// ListNegativeTargetsJSONBody_Filters_Item defines parameters for ListNegativeTargets.
type ListNegativeTargetsJSONBody_Filters_Item struct {
	union json.RawMessage
}

// GetBidsRecommendationsJSONBody defines parameters for GetBidsRecommendations.
type GetBidsRecommendationsJSONBody struct {
	// AdFormat The type of ad format.
	AdFormat *AdFormat `json:"adFormat,omitempty"`

	// CampaignId The identifier of the campaign for which bid recommendations are created.
	CampaignId *int64 `json:"campaignId,omitempty"`

	// CostType Optional. Support `CPC` (cost per click) and `VCPM` (cost per thousand viewable impressions). If no costType is selected and no outcome is selected, then it will default to `CPC`. If an outcome is specified without a costType, then it will result in an error.
	CostType *string                       `json:"costType,omitempty"`
	Keywords *[]SBBidRecommendationKeyword `json:"keywords,omitempty"`

	// Outcome The outcome type of the campaign.
	// If no outcome is selected then it will default to `PAGE_VISIT`.
	// | outcomeType | description |
	// |-----------|-------------|
	// | BRAND_IMPRESSION_SHARE | Brand Impression Share (BIS) is Top of search (ToS) impression shares for branded search terms. |
	// | PAGE_VISIT | Facilitate consumers' awareness of your brand |
	Outcome    *OutcomeType              `json:"outcome,omitempty"`
	Targets    *[]SBTargetingExpressions `json:"targets,omitempty"`
	ThemeTypes *[]ThemeType              `json:"themeTypes,omitempty"`
}

// GetBidsRecommendationsParams defines parameters for GetBidsRecommendations.
type GetBidsRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody defines parameters for GetBrandRecommendations.
type GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody struct {
	union json.RawMessage
}

// GetBrandRecommendationsParams defines parameters for GetBrandRecommendations.
type GetBrandRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody0 defines parameters for GetBrandRecommendations.
type GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody0 struct {
	// CategoryId The category identifier for which to get recommendations.
	CategoryId *int64 `json:"categoryId,omitempty"`
}

// GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody1 defines parameters for GetBrandRecommendations.
type GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody1 struct {
	// Keyword The keyword for which to get recommendations.
	Keyword *string `json:"keyword,omitempty"`
}

// GetTargetingCategoriesJSONBody defines parameters for GetTargetingCategories.
type GetTargetingCategoriesJSONBody struct {
	// Asins A list of ASINs.
	Asins *[]string `json:"asins,omitempty"`

	// SupplySource The supply source of the campaign. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV. Default value is `AMAZON`.
	SupplySource *GetTargetingCategoriesJSONBodySupplySource `json:"supplySource,omitempty"`
}

// GetTargetingCategoriesParams defines parameters for GetTargetingCategories.
type GetTargetingCategoriesParams struct {
	// Locale Return the categories in the specified locale.
	Locale *GetTargetingCategoriesParamsLocale `form:"locale,omitempty" json:"locale,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetTargetingCategoriesParamsLocale defines parameters for GetTargetingCategories.
type GetTargetingCategoriesParamsLocale string

// GetTargetingCategoriesJSONBodySupplySource defines parameters for GetTargetingCategories.
type GetTargetingCategoriesJSONBodySupplySource string

// GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody defines parameters for GetProductRecommendations.
type GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody struct {
	// Filters Restricts recommendations to the criteria specified in the filters.
	Filters *[]GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody_Filters_Item `json:"filters,omitempty"`

	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResultsRecommendations `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// GetProductRecommendationsParams defines parameters for GetProductRecommendations.
type GetProductRecommendationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBodyFilters0 defines parameters for GetProductRecommendations.
type GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBodyFilters0 struct {
	FilterType *GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBodyFilters0FilterType `json:"filterType,omitempty"`

	// Values A list of ASINs.
	Values *[]string `json:"values,omitempty"`
}

// GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody_Filters_Item defines parameters for GetProductRecommendations.
type GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody_Filters_Item struct {
	union json.RawMessage
}

// CreateTargetsJSONBody defines parameters for CreateTargets.
type CreateTargetsJSONBody struct {
	Targets []SBCreateTargetingClauseRequest `json:"targets"`
}

// UpdateTargetsJSONBody defines parameters for UpdateTargets.
type UpdateTargetsJSONBody struct {
	Targets []SBUpdateTargetingClauseRequest `json:"targets"`
}

// ListTargetsJSONBody defines parameters for ListTargets.
type ListTargetsJSONBody struct {
	// Filters Restricts results to targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one type of each filter. Specifying multiples of the same type of filter results in an error.
	Filters *[]ListTargetsJSONBody_Filters_Item `json:"filters,omitempty"`

	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResults `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`
}

// ListTargetsJSONBodyFilters0 defines parameters for ListTargets.
type ListTargetsJSONBodyFilters0 struct {
	// FilterType Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all targets will be returned.
	FilterType *ListTargetsJSONBodyFilters0FilterType `json:"filterType,omitempty"`

	// Values A list of creative types.
	Values *[]ListTargetsJSONBodyFilters0Values `json:"values,omitempty"`
}

// ListTargetsJSONBodyFilters1 defines parameters for ListTargets.
type ListTargetsJSONBodyFilters1 struct {
	// FilterType Set `filterType` to `TARGETING_STATE` to filter by target state.
	FilterType *ListTargetsJSONBodyFilters1FilterType `json:"filterType,omitempty"`

	// Values A list of target states.
	Values *[]ListTargetsJSONBodyFilters1Values `json:"values,omitempty"`
}

// ListTargetsJSONBodyFilters2 defines parameters for ListTargets.
type ListTargetsJSONBodyFilters2 struct {
	// FilterType Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.
	FilterType *ListTargetsJSONBodyFilters2FilterType `json:"filterType,omitempty"`

	// Values A list of campaign identifiers.
	Values *[]string `json:"values,omitempty"`
}

// ListTargetsJSONBodyFilters3 defines parameters for ListTargets.
type ListTargetsJSONBodyFilters3 struct {
	// FilterType Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.
	FilterType *ListTargetsJSONBodyFilters3FilterType `json:"filterType,omitempty"`

	// Values A list of ad group identifiers.
	Values *[]SBAdGroupId `json:"values,omitempty"`
}

// ListTargetsJSONBody_Filters_Item defines parameters for ListTargets.
type ListTargetsJSONBody_Filters_Item struct {
	union json.RawMessage
}

// GetTargetParams defines parameters for GetTarget.
type GetTargetParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONBody defines parameters for SbCreateThemes.
type SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONBody struct {
	Themes []SBCreateThemesRequest `json:"themes"`
}

// SbCreateThemesParams defines parameters for SbCreateThemes.
type SbCreateThemesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONBody defines parameters for SbUpdateThemes.
type SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONBody struct {
	Themes []SBUpdateThemesRequest `json:"themes"`
}

// SbUpdateThemesParams defines parameters for SbUpdateThemes.
type SbUpdateThemesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBody defines parameters for SbListThemes.
type SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBody struct {
	// AdGroupIdFilter A list of ad group identifiers.
	AdGroupIdFilter *struct {
		Include *[]string `json:"include,omitempty"`
	} `json:"adGroupIdFilter,omitempty"`

	// CampaignIdFilter A list of campaign identifiers.
	CampaignIdFilter *struct {
		Include *[]string `json:"include,omitempty"`
	} `json:"campaignIdFilter,omitempty"`

	// MaxResults Sets a limit on the number of results returned by an operation.
	MaxResults *MaxResults `json:"maxResults,omitempty"`

	// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
	NextToken *NextToken `json:"nextToken,omitempty"`

	// StateFilter A list of theme target states.
	StateFilter *struct {
		Include *[]SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude `json:"include,omitempty"`
	} `json:"stateFilter,omitempty"`

	// ThemeIdFilter A list of theme targets identifiers.
	ThemeIdFilter *struct {
		Include *[]string `json:"include,omitempty"`
	} `json:"themeIdFilter,omitempty"`

	// ThemeTypeFilter A list of theme target type.
	ThemeTypeFilter *struct {
		Include *[]ThemeType `json:"include,omitempty"`
	} `json:"themeTypeFilter,omitempty"`
}

// SbListThemesParams defines parameters for SbListThemes.
type SbListThemesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude defines parameters for SbListThemes.
type SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBodyStateFilterInclude string

// ListAssetsParams defines parameters for ListAssets.
type ListAssetsParams struct {
	// BrandEntityId For sellers, this field is required. It is the Brand entity identifier of the Brand for which assets are returned. This identifier is retrieved using the [getBrands operation](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/brands). For vendors, this field is optional. If a vendor does not specify this field, all assets associated with the vendor are returned. For more information about the [difference between a seller and a vendor](https://advertising.amazon.com/resources/faq#advertising-basics), see the Amazon Ads FAQ.
	BrandEntityId *string `form:"brandEntityId,omitempty" json:"brandEntityId,omitempty"`

	// MediaType Specifies the media types used to filter the returned array. Currently, only the `brandLogo` type is supported. If not specified, all media types are returned.
	MediaType *MediaType `form:"mediaType,omitempty" json:"mediaType,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateAssetMultipartBody defines parameters for CreateAsset.
type CreateAssetMultipartBody struct {
	// Asset The binary data for the image. For more information,  File size must be smaller than 1MB, and the resolution must be a minimum of 400 pixels by 400 pixels.
	Asset *openapi_types.File `json:"asset,omitempty"`

	// AssetInfo A JSON object specifying the Brand entity identifier an media type. The Brand entity identifier is optional, but media type is not.
	// |Field|Type|Values|
	// |-----|-----|-----|
	// |brandEntityId|string|The Brand entity identifier.|
	// |mediaType|string| Only `brandLogo` is currently supported.|
	// Example:
	// ```
	// {
	//   brandEntityId: "12345678",
	//   mediaType: {
	//     "brandLogo"
	//   }
	// }
	// ```
	AssetInfo *string `json:"assetInfo,omitempty"`
}

// CreateAssetParams defines parameters for CreateAsset.
type CreateAssetParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`

	// ContentDisposition The name of the image file.
	ContentDisposition string `json:"Content-Disposition"`

	// ContentType The image format type. The following table lists the valid image types:
	// |Image Type|Description|
	// |----------|-----------|
	// |PNG|[Portable network graphics](https://en.wikipedia.org/wiki/Portable_Network_Graphics)|
	// |JPEG|[JPEG](https://en.wikipedia.org/wiki/JPEG)|
	// |GIF|[Graphics interchange format](https://en.wikipedia.org/wiki/GIF)|
	ContentType string `json:"Content-Type"`
}

// PostV2HsaRecordTypeReportJSONBody defines parameters for PostV2HsaRecordTypeReport.
type PostV2HsaRecordTypeReportJSONBody struct {
	// CreativeType Optional. Supported values are `video` (for video campaigns) and `all` (for both non-video and video campaigns). If not specified, the report will contain data for non-video campaigns. For `ads` report types only, `creativeType` is required and must be set to `all` (`video` is not allowed). To return performance data for [multi-ad group campaigns](https://advertising.amazon.com/API/docs/en-us/sponsored-brands/3-0/openapi/prod#/Campaigns), you must include `creativeType` set to `all`` in your request.
	CreativeType *PostV2HsaRecordTypeReportJSONBodyCreativeType `json:"creativeType,omitempty"`

	// Metrics Each report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).**
	Metrics string `json:"metrics"`

	// ReportDate Date in YYYYMMDD format. The report only contains performance data for the specified date. The time zone is specified by the profile used to request the report. If this date is today, then the performance report may contain partial information. Reports are not available for data older than 60 days. For details on data latency, see [Service Guarantees](../../reference/concepts/developer-notes).
	ReportDate string `json:"reportDate"`

	// Segment Optional. Allows you to run a report based on secondary dimensions. Use `placement` to segment a `campaigns` report by the location on a page where your ad appears. Use `query` to segment a `keywords` report and create a search terms report.
	Segment *PostV2HsaRecordTypeReportJSONBodySegment `json:"segment,omitempty"`
}

// PostV2HsaRecordTypeReportParams defines parameters for PostV2HsaRecordTypeReport.
type PostV2HsaRecordTypeReportParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PostV2HsaRecordTypeReportJSONBodyCreativeType defines parameters for PostV2HsaRecordTypeReport.
type PostV2HsaRecordTypeReportJSONBodyCreativeType string

// PostV2HsaRecordTypeReportJSONBodySegment defines parameters for PostV2HsaRecordTypeReport.
type PostV2HsaRecordTypeReportJSONBodySegment string

// GetV2ReportsReportIdParams defines parameters for GetV2ReportsReportId.
type GetV2ReportsReportIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// DownloadReportParams defines parameters for DownloadReport.
type DownloadReportParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a **Login with Amazon** account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CompleteUploadJSONRequestBody defines body for CompleteUpload for application/json ContentType.
type CompleteUploadJSONRequestBody CompleteUploadJSONBody

// CreateUploadResourceJSONRequestBody defines body for CreateUploadResource for application/json ContentType.
type CreateUploadResourceJSONRequestBody = Program

// CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody defines body for CreateCampaigns for application/vnd.createcampaignsresponse.v3.2+json ContentType.
type CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody = CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONBody

// CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody defines body for CreateCampaigns for application/vnd.createcampaignsresponse.v3.3+json ContentType.
type CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody = CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONBody

// CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody defines body for CreateCampaigns for application/vnd.sbcreatecampaignresponse.v3+json ContentType.
type CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody = CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONBody

// UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody defines body for UpdateCampaigns for application/vnd.sbupdatecampaignresponse.v3+json ContentType.
type UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody = UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONBody

// UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody defines body for UpdateCampaigns for application/vnd.updatecampaignsresponse.v3.2+json ContentType.
type UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody = UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONBody

// UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody defines body for UpdateCampaigns for application/vnd.updatecampaignsresponse.v3.3+json ContentType.
type UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody = UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONBody

// CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody defines body for CreateDraftCampaigns for application/vnd.createdraftcampaignsresponse.v3.2+json ContentType.
type CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody = CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody

// CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody defines body for CreateDraftCampaigns for application/vnd.createdraftcampaignsresponse.v3.3+json ContentType.
type CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody = CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody

// CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody defines body for CreateDraftCampaigns for application/vnd.sbdraftcampaignresponse.v3+json ContentType.
type CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody = CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody

// UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody defines body for UpdateDraftCampaigns for application/vnd.sbdraftcampaignresponse.v3+json ContentType.
type UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody = UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONBody

// UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody defines body for UpdateDraftCampaigns for application/vnd.updatedraftcampaignsresponse.v3.2+json ContentType.
type UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody = UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody

// UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody defines body for UpdateDraftCampaigns for application/vnd.updatedraftcampaignsresponse.v3.3+json ContentType.
type UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody = UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody

// SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody defines body for SubmitDraftCampaign for application/vnd.sbcampaign.v3+json ContentType.
type SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody = SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONBody

// CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody defines body for CreateKeywords for application/vnd.sbkeywordresponse.v3+json ContentType.
type CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody = CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody

// UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody defines body for UpdateKeywords for application/vnd.sbkeywordresponse.v3+json ContentType.
type UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody = UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody

// CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody defines body for CreateNegativeKeywords for application/vnd.sbkeywordresponse.v3+json ContentType.
type CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody = CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody

// UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody defines body for UpdateNegativeKeywords for application/vnd.sbkeywordresponse.v3+json ContentType.
type UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody = UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONBody

// CreateNegativeTargetsJSONRequestBody defines body for CreateNegativeTargets for application/json ContentType.
type CreateNegativeTargetsJSONRequestBody CreateNegativeTargetsJSONBody

// UpdateNegativeTargetsJSONRequestBody defines body for UpdateNegativeTargets for application/json ContentType.
type UpdateNegativeTargetsJSONRequestBody UpdateNegativeTargetsJSONBody

// ListNegativeTargetsJSONRequestBody defines body for ListNegativeTargets for application/json ContentType.
type ListNegativeTargetsJSONRequestBody ListNegativeTargetsJSONBody

// GetBidsRecommendationsJSONRequestBody defines body for GetBidsRecommendations for application/json ContentType.
type GetBidsRecommendationsJSONRequestBody GetBidsRecommendationsJSONBody

// GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody defines body for GetBrandRecommendations for application/vnd.sbbrandrecommendations.v3.0+json ContentType.
type GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONBody

// GetTargetingCategoriesJSONRequestBody defines body for GetTargetingCategories for application/json ContentType.
type GetTargetingCategoriesJSONRequestBody GetTargetingCategoriesJSONBody

// GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody defines body for GetProductRecommendations for application/vnd.sbproductrecommendations.v3.0+json ContentType.
type GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONBody

// CreateTargetsJSONRequestBody defines body for CreateTargets for application/json ContentType.
type CreateTargetsJSONRequestBody CreateTargetsJSONBody

// UpdateTargetsJSONRequestBody defines body for UpdateTargets for application/json ContentType.
type UpdateTargetsJSONRequestBody UpdateTargetsJSONBody

// ListTargetsJSONRequestBody defines body for ListTargets for application/json ContentType.
type ListTargetsJSONRequestBody ListTargetsJSONBody

// SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody defines body for SbCreateThemes for application/vnd.sbthemescreaterequest.v3+json ContentType.
type SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONBody

// SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody defines body for SbUpdateThemes for application/vnd.sbathemessupdaterequest.v3+json ContentType.
type SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONBody

// SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody defines body for SbListThemes for application/vnd.sbthemeslistrequest.v3+json ContentType.
type SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONBody

// CreateAssetMultipartRequestBody defines body for CreateAsset for multipart/form-data ContentType.
type CreateAssetMultipartRequestBody CreateAssetMultipartBody

// PostV2HsaRecordTypeReportJSONRequestBody defines body for PostV2HsaRecordTypeReport for application/json ContentType.
type PostV2HsaRecordTypeReportJSONRequestBody PostV2HsaRecordTypeReportJSONBody

// AsAdFormatError returns the union data inside the ErrorEntry as a AdFormatError
func (t ErrorEntry) AsAdFormatError() (AdFormatError, error) {
	var body AdFormatError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdFormatError overwrites any union data inside the ErrorEntry as the provided AdFormatError
func (t *ErrorEntry) FromAdFormatError(v AdFormatError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdFormatError performs a merge with any union data inside the ErrorEntry, using the provided AdFormatError
func (t *ErrorEntry) MergeAdFormatError(v AdFormatError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdGroupError returns the union data inside the ErrorEntry as a AdGroupError
func (t ErrorEntry) AsAdGroupError() (AdGroupError, error) {
	var body AdGroupError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdGroupError overwrites any union data inside the ErrorEntry as the provided AdGroupError
func (t *ErrorEntry) FromAdGroupError(v AdGroupError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdGroupError performs a merge with any union data inside the ErrorEntry, using the provided AdGroupError
func (t *ErrorEntry) MergeAdGroupError(v AdGroupError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssetsError returns the union data inside the ErrorEntry as a AssetsError
func (t ErrorEntry) AsAssetsError() (AssetsError, error) {
	var body AssetsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsError overwrites any union data inside the ErrorEntry as the provided AssetsError
func (t *ErrorEntry) FromAssetsError(v AssetsError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsError performs a merge with any union data inside the ErrorEntry, using the provided AssetsError
func (t *ErrorEntry) MergeAssetsError(v AssetsError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAuthorizationError returns the union data inside the ErrorEntry as a AuthorizationError
func (t ErrorEntry) AsAuthorizationError() (AuthorizationError, error) {
	var body AuthorizationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthorizationError overwrites any union data inside the ErrorEntry as the provided AuthorizationError
func (t *ErrorEntry) FromAuthorizationError(v AuthorizationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthorizationError performs a merge with any union data inside the ErrorEntry, using the provided AuthorizationError
func (t *ErrorEntry) MergeAuthorizationError(v AuthorizationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsBidError returns the union data inside the ErrorEntry as a BidError
func (t ErrorEntry) AsBidError() (BidError, error) {
	var body BidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBidError overwrites any union data inside the ErrorEntry as the provided BidError
func (t *ErrorEntry) FromBidError(v BidError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBidError performs a merge with any union data inside the ErrorEntry, using the provided BidError
func (t *ErrorEntry) MergeBidError(v BidError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsBrandsError returns the union data inside the ErrorEntry as a BrandsError
func (t ErrorEntry) AsBrandsError() (BrandsError, error) {
	var body BrandsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBrandsError overwrites any union data inside the ErrorEntry as the provided BrandsError
func (t *ErrorEntry) FromBrandsError(v BrandsError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBrandsError performs a merge with any union data inside the ErrorEntry, using the provided BrandsError
func (t *ErrorEntry) MergeBrandsError(v BrandsError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsBudgetError returns the union data inside the ErrorEntry as a BudgetError
func (t ErrorEntry) AsBudgetError() (BudgetError, error) {
	var body BudgetError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBudgetError overwrites any union data inside the ErrorEntry as the provided BudgetError
func (t *ErrorEntry) FromBudgetError(v BudgetError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBudgetError performs a merge with any union data inside the ErrorEntry, using the provided BudgetError
func (t *ErrorEntry) MergeBudgetError(v BudgetError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCampaignError returns the union data inside the ErrorEntry as a CampaignError
func (t ErrorEntry) AsCampaignError() (CampaignError, error) {
	var body CampaignError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaignError overwrites any union data inside the ErrorEntry as the provided CampaignError
func (t *ErrorEntry) FromCampaignError(v CampaignError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaignError performs a merge with any union data inside the ErrorEntry, using the provided CampaignError
func (t *ErrorEntry) MergeCampaignError(v CampaignError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreativeError returns the union data inside the ErrorEntry as a CreativeError
func (t ErrorEntry) AsCreativeError() (CreativeError, error) {
	var body CreativeError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreativeError overwrites any union data inside the ErrorEntry as the provided CreativeError
func (t *ErrorEntry) FromCreativeError(v CreativeError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreativeError performs a merge with any union data inside the ErrorEntry, using the provided CreativeError
func (t *ErrorEntry) MergeCreativeError(v CreativeError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDraftsError returns the union data inside the ErrorEntry as a DraftsError
func (t ErrorEntry) AsDraftsError() (DraftsError, error) {
	var body DraftsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDraftsError overwrites any union data inside the ErrorEntry as the provided DraftsError
func (t *ErrorEntry) FromDraftsError(v DraftsError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDraftsError performs a merge with any union data inside the ErrorEntry, using the provided DraftsError
func (t *ErrorEntry) MergeDraftsError(v DraftsError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsError returns the union data inside the ErrorEntry as a Error
func (t ErrorEntry) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the ErrorEntry as the provided Error
func (t *ErrorEntry) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the ErrorEntry, using the provided Error
func (t *ErrorEntry) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterError returns the union data inside the ErrorEntry as a FilterError
func (t ErrorEntry) AsFilterError() (FilterError, error) {
	var body FilterError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterError overwrites any union data inside the ErrorEntry as the provided FilterError
func (t *ErrorEntry) FromFilterError(v FilterError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterError performs a merge with any union data inside the ErrorEntry, using the provided FilterError
func (t *ErrorEntry) MergeFilterError(v FilterError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKDPError returns the union data inside the ErrorEntry as a KDPError
func (t ErrorEntry) AsKDPError() (KDPError, error) {
	var body KDPError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKDPError overwrites any union data inside the ErrorEntry as the provided KDPError
func (t *ErrorEntry) FromKDPError(v KDPError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKDPError performs a merge with any union data inside the ErrorEntry, using the provided KDPError
func (t *ErrorEntry) MergeKDPError(v KDPError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKeywordError returns the union data inside the ErrorEntry as a KeywordError
func (t ErrorEntry) AsKeywordError() (KeywordError, error) {
	var body KeywordError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeywordError overwrites any union data inside the ErrorEntry as the provided KeywordError
func (t *ErrorEntry) FromKeywordError(v KeywordError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeywordError performs a merge with any union data inside the ErrorEntry, using the provided KeywordError
func (t *ErrorEntry) MergeKeywordError(v KeywordError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLandingPageError returns the union data inside the ErrorEntry as a LandingPageError
func (t ErrorEntry) AsLandingPageError() (LandingPageError, error) {
	var body LandingPageError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLandingPageError overwrites any union data inside the ErrorEntry as the provided LandingPageError
func (t *ErrorEntry) FromLandingPageError(v LandingPageError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLandingPageError performs a merge with any union data inside the ErrorEntry, using the provided LandingPageError
func (t *ErrorEntry) MergeLandingPageError(v LandingPageError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMarketplaceError returns the union data inside the ErrorEntry as a MarketplaceError
func (t ErrorEntry) AsMarketplaceError() (MarketplaceError, error) {
	var body MarketplaceError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMarketplaceError overwrites any union data inside the ErrorEntry as the provided MarketplaceError
func (t *ErrorEntry) FromMarketplaceError(v MarketplaceError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMarketplaceError performs a merge with any union data inside the ErrorEntry, using the provided MarketplaceError
func (t *ErrorEntry) MergeMarketplaceError(v MarketplaceError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPageAsinsError returns the union data inside the ErrorEntry as a PageAsinsError
func (t ErrorEntry) AsPageAsinsError() (PageAsinsError, error) {
	var body PageAsinsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageAsinsError overwrites any union data inside the ErrorEntry as the provided PageAsinsError
func (t *ErrorEntry) FromPageAsinsError(v PageAsinsError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageAsinsError performs a merge with any union data inside the ErrorEntry, using the provided PageAsinsError
func (t *ErrorEntry) MergePageAsinsError(v PageAsinsError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginationError returns the union data inside the ErrorEntry as a PaginationError
func (t ErrorEntry) AsPaginationError() (PaginationError, error) {
	var body PaginationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginationError overwrites any union data inside the ErrorEntry as the provided PaginationError
func (t *ErrorEntry) FromPaginationError(v PaginationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginationError performs a merge with any union data inside the ErrorEntry, using the provided PaginationError
func (t *ErrorEntry) MergePaginationError(v PaginationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProductItemsError returns the union data inside the ErrorEntry as a ProductItemsError
func (t ErrorEntry) AsProductItemsError() (ProductItemsError, error) {
	var body ProductItemsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductItemsError overwrites any union data inside the ErrorEntry as the provided ProductItemsError
func (t *ErrorEntry) FromProductItemsError(v ProductItemsError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductItemsError performs a merge with any union data inside the ErrorEntry, using the provided ProductItemsError
func (t *ErrorEntry) MergeProductItemsError(v ProductItemsError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileError returns the union data inside the ErrorEntry as a ProfileError
func (t ErrorEntry) AsProfileError() (ProfileError, error) {
	var body ProfileError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileError overwrites any union data inside the ErrorEntry as the provided ProfileError
func (t *ErrorEntry) FromProfileError(v ProfileError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileError performs a merge with any union data inside the ErrorEntry, using the provided ProfileError
func (t *ErrorEntry) MergeProfileError(v ProfileError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecommendationError returns the union data inside the ErrorEntry as a RecommendationError
func (t ErrorEntry) AsRecommendationError() (RecommendationError, error) {
	var body RecommendationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecommendationError overwrites any union data inside the ErrorEntry as the provided RecommendationError
func (t *ErrorEntry) FromRecommendationError(v RecommendationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecommendationError performs a merge with any union data inside the ErrorEntry, using the provided RecommendationError
func (t *ErrorEntry) MergeRecommendationError(v RecommendationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSpooferError returns the union data inside the ErrorEntry as a SpooferError
func (t ErrorEntry) AsSpooferError() (SpooferError, error) {
	var body SpooferError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSpooferError overwrites any union data inside the ErrorEntry as the provided SpooferError
func (t *ErrorEntry) FromSpooferError(v SpooferError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSpooferError performs a merge with any union data inside the ErrorEntry, using the provided SpooferError
func (t *ErrorEntry) MergeSpooferError(v SpooferError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTargetError returns the union data inside the ErrorEntry as a TargetError
func (t ErrorEntry) AsTargetError() (TargetError, error) {
	var body TargetError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTargetError overwrites any union data inside the ErrorEntry as the provided TargetError
func (t *ErrorEntry) FromTargetError(v TargetError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTargetError performs a merge with any union data inside the ErrorEntry, using the provided TargetError
func (t *ErrorEntry) MergeTargetError(v TargetError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ErrorEntry) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ErrorEntry) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCampaignResponseCommon32 returns the union data inside the GetBatchGetCampaignsresponseV32Response_Item as a SBCampaignResponseCommon32
func (t GetBatchGetCampaignsresponseV32Response_Item) AsSBCampaignResponseCommon32() (SBCampaignResponseCommon32, error) {
	var body SBCampaignResponseCommon32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCampaignResponseCommon32 overwrites any union data inside the GetBatchGetCampaignsresponseV32Response_Item as the provided SBCampaignResponseCommon32
func (t *GetBatchGetCampaignsresponseV32Response_Item) FromSBCampaignResponseCommon32(v SBCampaignResponseCommon32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCampaignResponseCommon32 performs a merge with any union data inside the GetBatchGetCampaignsresponseV32Response_Item, using the provided SBCampaignResponseCommon32
func (t *GetBatchGetCampaignsresponseV32Response_Item) MergeSBCampaignResponseCommon32(v SBCampaignResponseCommon32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCampaignResponseCommon returns the union data inside the GetBatchGetCampaignsresponseV32Response_Item as a SBVideoCampaignResponseCommon
func (t GetBatchGetCampaignsresponseV32Response_Item) AsSBVideoCampaignResponseCommon() (SBVideoCampaignResponseCommon, error) {
	var body SBVideoCampaignResponseCommon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCampaignResponseCommon overwrites any union data inside the GetBatchGetCampaignsresponseV32Response_Item as the provided SBVideoCampaignResponseCommon
func (t *GetBatchGetCampaignsresponseV32Response_Item) FromSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCampaignResponseCommon performs a merge with any union data inside the GetBatchGetCampaignsresponseV32Response_Item, using the provided SBVideoCampaignResponseCommon
func (t *GetBatchGetCampaignsresponseV32Response_Item) MergeSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBatchGetCampaignsresponseV32Response_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBatchGetCampaignsresponseV32Response_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCampaignResponseCommonV33 returns the union data inside the GetBatchGetCampaignsresponseV33Response_Item as a SBCampaignResponseCommonV33
func (t GetBatchGetCampaignsresponseV33Response_Item) AsSBCampaignResponseCommonV33() (SBCampaignResponseCommonV33, error) {
	var body SBCampaignResponseCommonV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCampaignResponseCommonV33 overwrites any union data inside the GetBatchGetCampaignsresponseV33Response_Item as the provided SBCampaignResponseCommonV33
func (t *GetBatchGetCampaignsresponseV33Response_Item) FromSBCampaignResponseCommonV33(v SBCampaignResponseCommonV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCampaignResponseCommonV33 performs a merge with any union data inside the GetBatchGetCampaignsresponseV33Response_Item, using the provided SBCampaignResponseCommonV33
func (t *GetBatchGetCampaignsresponseV33Response_Item) MergeSBCampaignResponseCommonV33(v SBCampaignResponseCommonV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCampaignResponseCommon returns the union data inside the GetBatchGetCampaignsresponseV33Response_Item as a SBVideoCampaignResponseCommon
func (t GetBatchGetCampaignsresponseV33Response_Item) AsSBVideoCampaignResponseCommon() (SBVideoCampaignResponseCommon, error) {
	var body SBVideoCampaignResponseCommon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCampaignResponseCommon overwrites any union data inside the GetBatchGetCampaignsresponseV33Response_Item as the provided SBVideoCampaignResponseCommon
func (t *GetBatchGetCampaignsresponseV33Response_Item) FromSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCampaignResponseCommon performs a merge with any union data inside the GetBatchGetCampaignsresponseV33Response_Item, using the provided SBVideoCampaignResponseCommon
func (t *GetBatchGetCampaignsresponseV33Response_Item) MergeSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBatchGetCampaignsresponseV33Response_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBatchGetCampaignsresponseV33Response_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCampaignResponseCommon returns the union data inside the SBCampaignResponse as a SBCampaignResponseCommon
func (t SBCampaignResponse) AsSBCampaignResponseCommon() (SBCampaignResponseCommon, error) {
	var body SBCampaignResponseCommon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCampaignResponseCommon overwrites any union data inside the SBCampaignResponse as the provided SBCampaignResponseCommon
func (t *SBCampaignResponse) FromSBCampaignResponseCommon(v SBCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCampaignResponseCommon performs a merge with any union data inside the SBCampaignResponse, using the provided SBCampaignResponseCommon
func (t *SBCampaignResponse) MergeSBCampaignResponseCommon(v SBCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCampaignResponseCommon returns the union data inside the SBCampaignResponse as a SBVideoCampaignResponseCommon
func (t SBCampaignResponse) AsSBVideoCampaignResponseCommon() (SBVideoCampaignResponseCommon, error) {
	var body SBVideoCampaignResponseCommon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCampaignResponseCommon overwrites any union data inside the SBCampaignResponse as the provided SBVideoCampaignResponseCommon
func (t *SBCampaignResponse) FromSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCampaignResponseCommon performs a merge with any union data inside the SBCampaignResponse, using the provided SBVideoCampaignResponseCommon
func (t *SBCampaignResponse) MergeSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBCampaignResponseCommon_LandingPage as a SBProductListLandingPage
func (t SBCampaignResponseCommon_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBCampaignResponseCommon_LandingPage as the provided SBProductListLandingPage
func (t *SBCampaignResponseCommon_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBCampaignResponseCommon_LandingPage, using the provided SBProductListLandingPage
func (t *SBCampaignResponseCommon_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBCampaignResponseCommon_LandingPage as a SBStoreLandingPage
func (t SBCampaignResponseCommon_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBCampaignResponseCommon_LandingPage as the provided SBStoreLandingPage
func (t *SBCampaignResponseCommon_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBCampaignResponseCommon_LandingPage, using the provided SBStoreLandingPage
func (t *SBCampaignResponseCommon_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBCampaignResponseCommon_LandingPage as a SBCustomUrlLandingPage
func (t SBCampaignResponseCommon_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBCampaignResponseCommon_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommon_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBCampaignResponseCommon_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommon_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseCommon_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseCommon_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCampaignResponseCommon32_Creative as a SBProductCollectionCreative
func (t SBCampaignResponseCommon32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCampaignResponseCommon32_Creative as the provided SBProductCollectionCreative
func (t *SBCampaignResponseCommon32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCampaignResponseCommon32_Creative, using the provided SBProductCollectionCreative
func (t *SBCampaignResponseCommon32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCampaignResponseCommon32_Creative as a SBStoreSpotlightCreative
func (t SBCampaignResponseCommon32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCampaignResponseCommon32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCampaignResponseCommon32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCampaignResponseCommon32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCampaignResponseCommon32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseCommon32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseCommon32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBCampaignResponseCommon32_LandingPage as a SBProductListLandingPage
func (t SBCampaignResponseCommon32_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBCampaignResponseCommon32_LandingPage as the provided SBProductListLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBCampaignResponseCommon32_LandingPage, using the provided SBProductListLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBCampaignResponseCommon32_LandingPage as a SBStoreLandingPage
func (t SBCampaignResponseCommon32_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBCampaignResponseCommon32_LandingPage as the provided SBStoreLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBCampaignResponseCommon32_LandingPage, using the provided SBStoreLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBCampaignResponseCommon32_LandingPage as a SBCustomUrlLandingPage
func (t SBCampaignResponseCommon32_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBCampaignResponseCommon32_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBCampaignResponseCommon32_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommon32_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseCommon32_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseCommon32_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCampaignResponseCommonV33_Creative as a SBProductCollectionCreative
func (t SBCampaignResponseCommonV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCampaignResponseCommonV33_Creative as the provided SBProductCollectionCreative
func (t *SBCampaignResponseCommonV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCampaignResponseCommonV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCampaignResponseCommonV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCampaignResponseCommonV33_Creative as a SBStoreSpotlightCreative
func (t SBCampaignResponseCommonV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCampaignResponseCommonV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCampaignResponseCommonV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCampaignResponseCommonV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCampaignResponseCommonV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseCommonV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseCommonV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBCampaignResponseCommonV33_LandingPage as a SBProductListLandingPage
func (t SBCampaignResponseCommonV33_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBCampaignResponseCommonV33_LandingPage as the provided SBProductListLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBCampaignResponseCommonV33_LandingPage, using the provided SBProductListLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBCampaignResponseCommonV33_LandingPage as a SBStoreLandingPage
func (t SBCampaignResponseCommonV33_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBCampaignResponseCommonV33_LandingPage as the provided SBStoreLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBCampaignResponseCommonV33_LandingPage, using the provided SBStoreLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBCampaignResponseCommonV33_LandingPage as a SBCustomUrlLandingPage
func (t SBCampaignResponseCommonV33_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBCampaignResponseCommonV33_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBCampaignResponseCommonV33_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBCampaignResponseCommonV33_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseCommonV33_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseCommonV33_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCampaignResponseCommonV33 returns the union data inside the SBCampaignResponseV33 as a SBCampaignResponseCommonV33
func (t SBCampaignResponseV33) AsSBCampaignResponseCommonV33() (SBCampaignResponseCommonV33, error) {
	var body SBCampaignResponseCommonV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCampaignResponseCommonV33 overwrites any union data inside the SBCampaignResponseV33 as the provided SBCampaignResponseCommonV33
func (t *SBCampaignResponseV33) FromSBCampaignResponseCommonV33(v SBCampaignResponseCommonV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCampaignResponseCommonV33 performs a merge with any union data inside the SBCampaignResponseV33, using the provided SBCampaignResponseCommonV33
func (t *SBCampaignResponseV33) MergeSBCampaignResponseCommonV33(v SBCampaignResponseCommonV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCampaignResponseCommon returns the union data inside the SBCampaignResponseV33 as a SBVideoCampaignResponseCommon
func (t SBCampaignResponseV33) AsSBVideoCampaignResponseCommon() (SBVideoCampaignResponseCommon, error) {
	var body SBVideoCampaignResponseCommon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCampaignResponseCommon overwrites any union data inside the SBCampaignResponseV33 as the provided SBVideoCampaignResponseCommon
func (t *SBCampaignResponseV33) FromSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCampaignResponseCommon performs a merge with any union data inside the SBCampaignResponseV33, using the provided SBVideoCampaignResponseCommon
func (t *SBCampaignResponseV33) MergeSBVideoCampaignResponseCommon(v SBVideoCampaignResponseCommon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCampaignResponseV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCampaignResponseV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateCampaignWithKeywords returns the union data inside the SBCreateCampaignRequest as a SBCreateCampaignWithKeywords
func (t SBCreateCampaignRequest) AsSBCreateCampaignWithKeywords() (SBCreateCampaignWithKeywords, error) {
	var body SBCreateCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithKeywords overwrites any union data inside the SBCreateCampaignRequest as the provided SBCreateCampaignWithKeywords
func (t *SBCreateCampaignRequest) FromSBCreateCampaignWithKeywords(v SBCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithKeywords performs a merge with any union data inside the SBCreateCampaignRequest, using the provided SBCreateCampaignWithKeywords
func (t *SBCreateCampaignRequest) MergeSBCreateCampaignWithKeywords(v SBCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateCampaignWithExpressions returns the union data inside the SBCreateCampaignRequest as a SBCreateCampaignWithExpressions
func (t SBCreateCampaignRequest) AsSBCreateCampaignWithExpressions() (SBCreateCampaignWithExpressions, error) {
	var body SBCreateCampaignWithExpressions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithExpressions overwrites any union data inside the SBCreateCampaignRequest as the provided SBCreateCampaignWithExpressions
func (t *SBCreateCampaignRequest) FromSBCreateCampaignWithExpressions(v SBCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithExpressions performs a merge with any union data inside the SBCreateCampaignRequest, using the provided SBCreateCampaignWithExpressions
func (t *SBCreateCampaignRequest) MergeSBCreateCampaignWithExpressions(v SBCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithKeywords returns the union data inside the SBCreateCampaignRequest as a SBVideoCreateCampaignWithKeywords
func (t SBCreateCampaignRequest) AsSBVideoCreateCampaignWithKeywords() (SBVideoCreateCampaignWithKeywords, error) {
	var body SBVideoCreateCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithKeywords overwrites any union data inside the SBCreateCampaignRequest as the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequest) FromSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithKeywords performs a merge with any union data inside the SBCreateCampaignRequest, using the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequest) MergeSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithExpressions returns the union data inside the SBCreateCampaignRequest as a SBVideoCreateCampaignWithExpressions
func (t SBCreateCampaignRequest) AsSBVideoCreateCampaignWithExpressions() (SBVideoCreateCampaignWithExpressions, error) {
	var body SBVideoCreateCampaignWithExpressions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithExpressions overwrites any union data inside the SBCreateCampaignRequest as the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequest) FromSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithExpressions performs a merge with any union data inside the SBCreateCampaignRequest, using the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequest) MergeSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignRequestCommonV32_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignRequestCommonV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignRequestCommonV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignRequestCommonV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignRequestCommonV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignRequestCommonV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignRequestCommonV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignRequestCommonV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignRequestCommonV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignRequestCommonV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignRequestCommonV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignRequestCommonV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignRequestCommonV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignRequestCommonV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignRequestCommonV33_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignRequestCommonV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignRequestCommonV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignRequestCommonV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignRequestCommonV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignRequestCommonV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignRequestCommonV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignRequestCommonV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignRequestCommonV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignRequestCommonV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignRequestCommonV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignRequestCommonV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignRequestCommonV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignRequestCommonV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateCampaignWithKeywordsV32 returns the union data inside the SBCreateCampaignRequestV32 as a SBCreateCampaignWithKeywordsV32
func (t SBCreateCampaignRequestV32) AsSBCreateCampaignWithKeywordsV32() (SBCreateCampaignWithKeywordsV32, error) {
	var body SBCreateCampaignWithKeywordsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithKeywordsV32 overwrites any union data inside the SBCreateCampaignRequestV32 as the provided SBCreateCampaignWithKeywordsV32
func (t *SBCreateCampaignRequestV32) FromSBCreateCampaignWithKeywordsV32(v SBCreateCampaignWithKeywordsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithKeywordsV32 performs a merge with any union data inside the SBCreateCampaignRequestV32, using the provided SBCreateCampaignWithKeywordsV32
func (t *SBCreateCampaignRequestV32) MergeSBCreateCampaignWithKeywordsV32(v SBCreateCampaignWithKeywordsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateCampaignWithExpressionsV32 returns the union data inside the SBCreateCampaignRequestV32 as a SBCreateCampaignWithExpressionsV32
func (t SBCreateCampaignRequestV32) AsSBCreateCampaignWithExpressionsV32() (SBCreateCampaignWithExpressionsV32, error) {
	var body SBCreateCampaignWithExpressionsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithExpressionsV32 overwrites any union data inside the SBCreateCampaignRequestV32 as the provided SBCreateCampaignWithExpressionsV32
func (t *SBCreateCampaignRequestV32) FromSBCreateCampaignWithExpressionsV32(v SBCreateCampaignWithExpressionsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithExpressionsV32 performs a merge with any union data inside the SBCreateCampaignRequestV32, using the provided SBCreateCampaignWithExpressionsV32
func (t *SBCreateCampaignRequestV32) MergeSBCreateCampaignWithExpressionsV32(v SBCreateCampaignWithExpressionsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithKeywords returns the union data inside the SBCreateCampaignRequestV32 as a SBVideoCreateCampaignWithKeywords
func (t SBCreateCampaignRequestV32) AsSBVideoCreateCampaignWithKeywords() (SBVideoCreateCampaignWithKeywords, error) {
	var body SBVideoCreateCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithKeywords overwrites any union data inside the SBCreateCampaignRequestV32 as the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequestV32) FromSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithKeywords performs a merge with any union data inside the SBCreateCampaignRequestV32, using the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequestV32) MergeSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithExpressions returns the union data inside the SBCreateCampaignRequestV32 as a SBVideoCreateCampaignWithExpressions
func (t SBCreateCampaignRequestV32) AsSBVideoCreateCampaignWithExpressions() (SBVideoCreateCampaignWithExpressions, error) {
	var body SBVideoCreateCampaignWithExpressions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithExpressions overwrites any union data inside the SBCreateCampaignRequestV32 as the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequestV32) FromSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithExpressions performs a merge with any union data inside the SBCreateCampaignRequestV32, using the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequestV32) MergeSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignRequestV32) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignRequestV32) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateCampaignWithKeywordsV33 returns the union data inside the SBCreateCampaignRequestV33 as a SBCreateCampaignWithKeywordsV33
func (t SBCreateCampaignRequestV33) AsSBCreateCampaignWithKeywordsV33() (SBCreateCampaignWithKeywordsV33, error) {
	var body SBCreateCampaignWithKeywordsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithKeywordsV33 overwrites any union data inside the SBCreateCampaignRequestV33 as the provided SBCreateCampaignWithKeywordsV33
func (t *SBCreateCampaignRequestV33) FromSBCreateCampaignWithKeywordsV33(v SBCreateCampaignWithKeywordsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithKeywordsV33 performs a merge with any union data inside the SBCreateCampaignRequestV33, using the provided SBCreateCampaignWithKeywordsV33
func (t *SBCreateCampaignRequestV33) MergeSBCreateCampaignWithKeywordsV33(v SBCreateCampaignWithKeywordsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateCampaignWithExpressionsV33 returns the union data inside the SBCreateCampaignRequestV33 as a SBCreateCampaignWithExpressionsV33
func (t SBCreateCampaignRequestV33) AsSBCreateCampaignWithExpressionsV33() (SBCreateCampaignWithExpressionsV33, error) {
	var body SBCreateCampaignWithExpressionsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateCampaignWithExpressionsV33 overwrites any union data inside the SBCreateCampaignRequestV33 as the provided SBCreateCampaignWithExpressionsV33
func (t *SBCreateCampaignRequestV33) FromSBCreateCampaignWithExpressionsV33(v SBCreateCampaignWithExpressionsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateCampaignWithExpressionsV33 performs a merge with any union data inside the SBCreateCampaignRequestV33, using the provided SBCreateCampaignWithExpressionsV33
func (t *SBCreateCampaignRequestV33) MergeSBCreateCampaignWithExpressionsV33(v SBCreateCampaignWithExpressionsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithKeywords returns the union data inside the SBCreateCampaignRequestV33 as a SBVideoCreateCampaignWithKeywords
func (t SBCreateCampaignRequestV33) AsSBVideoCreateCampaignWithKeywords() (SBVideoCreateCampaignWithKeywords, error) {
	var body SBVideoCreateCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithKeywords overwrites any union data inside the SBCreateCampaignRequestV33 as the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequestV33) FromSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithKeywords performs a merge with any union data inside the SBCreateCampaignRequestV33, using the provided SBVideoCreateCampaignWithKeywords
func (t *SBCreateCampaignRequestV33) MergeSBVideoCreateCampaignWithKeywords(v SBVideoCreateCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateCampaignWithExpressions returns the union data inside the SBCreateCampaignRequestV33 as a SBVideoCreateCampaignWithExpressions
func (t SBCreateCampaignRequestV33) AsSBVideoCreateCampaignWithExpressions() (SBVideoCreateCampaignWithExpressions, error) {
	var body SBVideoCreateCampaignWithExpressions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateCampaignWithExpressions overwrites any union data inside the SBCreateCampaignRequestV33 as the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequestV33) FromSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateCampaignWithExpressions performs a merge with any union data inside the SBCreateCampaignRequestV33, using the provided SBVideoCreateCampaignWithExpressions
func (t *SBCreateCampaignRequestV33) MergeSBVideoCreateCampaignWithExpressions(v SBVideoCreateCampaignWithExpressions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignRequestV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignRequestV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignWithExpressionsV32_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignWithExpressionsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignWithExpressionsV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithExpressionsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignWithExpressionsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithExpressionsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignWithExpressionsV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignWithExpressionsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignWithExpressionsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithExpressionsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignWithExpressionsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithExpressionsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignWithExpressionsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignWithExpressionsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignWithExpressionsV33_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignWithExpressionsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignWithExpressionsV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithExpressionsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignWithExpressionsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithExpressionsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignWithExpressionsV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignWithExpressionsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignWithExpressionsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithExpressionsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignWithExpressionsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithExpressionsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignWithExpressionsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignWithExpressionsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignWithKeywordsV32_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignWithKeywordsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignWithKeywordsV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithKeywordsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignWithKeywordsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithKeywordsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignWithKeywordsV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignWithKeywordsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignWithKeywordsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithKeywordsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignWithKeywordsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithKeywordsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignWithKeywordsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignWithKeywordsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateCampaignWithKeywordsV33_Creative as a SBProductCollectionCreative
func (t SBCreateCampaignWithKeywordsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateCampaignWithKeywordsV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithKeywordsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateCampaignWithKeywordsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateCampaignWithKeywordsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateCampaignWithKeywordsV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateCampaignWithKeywordsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateCampaignWithKeywordsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithKeywordsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateCampaignWithKeywordsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateCampaignWithKeywordsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateCampaignWithKeywordsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateCampaignWithKeywordsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateDraftCampaignWithKeywords returns the union data inside the SBCreateDraftCampaignRequest as a SBCreateDraftCampaignWithKeywords
func (t SBCreateDraftCampaignRequest) AsSBCreateDraftCampaignWithKeywords() (SBCreateDraftCampaignWithKeywords, error) {
	var body SBCreateDraftCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithKeywords overwrites any union data inside the SBCreateDraftCampaignRequest as the provided SBCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequest) FromSBCreateDraftCampaignWithKeywords(v SBCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithKeywords performs a merge with any union data inside the SBCreateDraftCampaignRequest, using the provided SBCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequest) MergeSBCreateDraftCampaignWithKeywords(v SBCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateDraftCampaignWithProductTargets returns the union data inside the SBCreateDraftCampaignRequest as a SBCreateDraftCampaignWithProductTargets
func (t SBCreateDraftCampaignRequest) AsSBCreateDraftCampaignWithProductTargets() (SBCreateDraftCampaignWithProductTargets, error) {
	var body SBCreateDraftCampaignWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithProductTargets overwrites any union data inside the SBCreateDraftCampaignRequest as the provided SBCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequest) FromSBCreateDraftCampaignWithProductTargets(v SBCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithProductTargets performs a merge with any union data inside the SBCreateDraftCampaignRequest, using the provided SBCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequest) MergeSBCreateDraftCampaignWithProductTargets(v SBCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithKeywords returns the union data inside the SBCreateDraftCampaignRequest as a SBVideoCreateDraftCampaignWithKeywords
func (t SBCreateDraftCampaignRequest) AsSBVideoCreateDraftCampaignWithKeywords() (SBVideoCreateDraftCampaignWithKeywords, error) {
	var body SBVideoCreateDraftCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithKeywords overwrites any union data inside the SBCreateDraftCampaignRequest as the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequest) FromSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithKeywords performs a merge with any union data inside the SBCreateDraftCampaignRequest, using the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequest) MergeSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithProductTargets returns the union data inside the SBCreateDraftCampaignRequest as a SBVideoCreateDraftCampaignWithProductTargets
func (t SBCreateDraftCampaignRequest) AsSBVideoCreateDraftCampaignWithProductTargets() (SBVideoCreateDraftCampaignWithProductTargets, error) {
	var body SBVideoCreateDraftCampaignWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithProductTargets overwrites any union data inside the SBCreateDraftCampaignRequest as the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequest) FromSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithProductTargets performs a merge with any union data inside the SBCreateDraftCampaignRequest, using the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequest) MergeSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignRequestCommonV32_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignRequestCommonV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignRequestCommonV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignRequestCommonV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignRequestCommonV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignRequestCommonV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignRequestCommonV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignRequestCommonV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignRequestCommonV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignRequestCommonV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignRequestCommonV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignRequestCommonV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignRequestCommonV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignRequestCommonV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignRequestCommonV33_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignRequestCommonV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignRequestCommonV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignRequestCommonV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignRequestCommonV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignRequestCommonV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignRequestCommonV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignRequestCommonV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignRequestCommonV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignRequestCommonV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignRequestCommonV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignRequestCommonV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignRequestCommonV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignRequestCommonV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateDraftCampaignWithKeywordsV32 returns the union data inside the SBCreateDraftCampaignRequestV32 as a SBCreateDraftCampaignWithKeywordsV32
func (t SBCreateDraftCampaignRequestV32) AsSBCreateDraftCampaignWithKeywordsV32() (SBCreateDraftCampaignWithKeywordsV32, error) {
	var body SBCreateDraftCampaignWithKeywordsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithKeywordsV32 overwrites any union data inside the SBCreateDraftCampaignRequestV32 as the provided SBCreateDraftCampaignWithKeywordsV32
func (t *SBCreateDraftCampaignRequestV32) FromSBCreateDraftCampaignWithKeywordsV32(v SBCreateDraftCampaignWithKeywordsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithKeywordsV32 performs a merge with any union data inside the SBCreateDraftCampaignRequestV32, using the provided SBCreateDraftCampaignWithKeywordsV32
func (t *SBCreateDraftCampaignRequestV32) MergeSBCreateDraftCampaignWithKeywordsV32(v SBCreateDraftCampaignWithKeywordsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateDraftCampaignWithProductTargetsV32 returns the union data inside the SBCreateDraftCampaignRequestV32 as a SBCreateDraftCampaignWithProductTargetsV32
func (t SBCreateDraftCampaignRequestV32) AsSBCreateDraftCampaignWithProductTargetsV32() (SBCreateDraftCampaignWithProductTargetsV32, error) {
	var body SBCreateDraftCampaignWithProductTargetsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithProductTargetsV32 overwrites any union data inside the SBCreateDraftCampaignRequestV32 as the provided SBCreateDraftCampaignWithProductTargetsV32
func (t *SBCreateDraftCampaignRequestV32) FromSBCreateDraftCampaignWithProductTargetsV32(v SBCreateDraftCampaignWithProductTargetsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithProductTargetsV32 performs a merge with any union data inside the SBCreateDraftCampaignRequestV32, using the provided SBCreateDraftCampaignWithProductTargetsV32
func (t *SBCreateDraftCampaignRequestV32) MergeSBCreateDraftCampaignWithProductTargetsV32(v SBCreateDraftCampaignWithProductTargetsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithKeywords returns the union data inside the SBCreateDraftCampaignRequestV32 as a SBVideoCreateDraftCampaignWithKeywords
func (t SBCreateDraftCampaignRequestV32) AsSBVideoCreateDraftCampaignWithKeywords() (SBVideoCreateDraftCampaignWithKeywords, error) {
	var body SBVideoCreateDraftCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithKeywords overwrites any union data inside the SBCreateDraftCampaignRequestV32 as the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequestV32) FromSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithKeywords performs a merge with any union data inside the SBCreateDraftCampaignRequestV32, using the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequestV32) MergeSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithProductTargets returns the union data inside the SBCreateDraftCampaignRequestV32 as a SBVideoCreateDraftCampaignWithProductTargets
func (t SBCreateDraftCampaignRequestV32) AsSBVideoCreateDraftCampaignWithProductTargets() (SBVideoCreateDraftCampaignWithProductTargets, error) {
	var body SBVideoCreateDraftCampaignWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithProductTargets overwrites any union data inside the SBCreateDraftCampaignRequestV32 as the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequestV32) FromSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithProductTargets performs a merge with any union data inside the SBCreateDraftCampaignRequestV32, using the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequestV32) MergeSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignRequestV32) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignRequestV32) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBCreateDraftCampaignWithKeywordsV33 returns the union data inside the SBCreateDraftCampaignRequestV33 as a SBCreateDraftCampaignWithKeywordsV33
func (t SBCreateDraftCampaignRequestV33) AsSBCreateDraftCampaignWithKeywordsV33() (SBCreateDraftCampaignWithKeywordsV33, error) {
	var body SBCreateDraftCampaignWithKeywordsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithKeywordsV33 overwrites any union data inside the SBCreateDraftCampaignRequestV33 as the provided SBCreateDraftCampaignWithKeywordsV33
func (t *SBCreateDraftCampaignRequestV33) FromSBCreateDraftCampaignWithKeywordsV33(v SBCreateDraftCampaignWithKeywordsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithKeywordsV33 performs a merge with any union data inside the SBCreateDraftCampaignRequestV33, using the provided SBCreateDraftCampaignWithKeywordsV33
func (t *SBCreateDraftCampaignRequestV33) MergeSBCreateDraftCampaignWithKeywordsV33(v SBCreateDraftCampaignWithKeywordsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCreateDraftCampaignWithProductTargetsV33 returns the union data inside the SBCreateDraftCampaignRequestV33 as a SBCreateDraftCampaignWithProductTargetsV33
func (t SBCreateDraftCampaignRequestV33) AsSBCreateDraftCampaignWithProductTargetsV33() (SBCreateDraftCampaignWithProductTargetsV33, error) {
	var body SBCreateDraftCampaignWithProductTargetsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCreateDraftCampaignWithProductTargetsV33 overwrites any union data inside the SBCreateDraftCampaignRequestV33 as the provided SBCreateDraftCampaignWithProductTargetsV33
func (t *SBCreateDraftCampaignRequestV33) FromSBCreateDraftCampaignWithProductTargetsV33(v SBCreateDraftCampaignWithProductTargetsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCreateDraftCampaignWithProductTargetsV33 performs a merge with any union data inside the SBCreateDraftCampaignRequestV33, using the provided SBCreateDraftCampaignWithProductTargetsV33
func (t *SBCreateDraftCampaignRequestV33) MergeSBCreateDraftCampaignWithProductTargetsV33(v SBCreateDraftCampaignWithProductTargetsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithKeywords returns the union data inside the SBCreateDraftCampaignRequestV33 as a SBVideoCreateDraftCampaignWithKeywords
func (t SBCreateDraftCampaignRequestV33) AsSBVideoCreateDraftCampaignWithKeywords() (SBVideoCreateDraftCampaignWithKeywords, error) {
	var body SBVideoCreateDraftCampaignWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithKeywords overwrites any union data inside the SBCreateDraftCampaignRequestV33 as the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequestV33) FromSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithKeywords performs a merge with any union data inside the SBCreateDraftCampaignRequestV33, using the provided SBVideoCreateDraftCampaignWithKeywords
func (t *SBCreateDraftCampaignRequestV33) MergeSBVideoCreateDraftCampaignWithKeywords(v SBVideoCreateDraftCampaignWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoCreateDraftCampaignWithProductTargets returns the union data inside the SBCreateDraftCampaignRequestV33 as a SBVideoCreateDraftCampaignWithProductTargets
func (t SBCreateDraftCampaignRequestV33) AsSBVideoCreateDraftCampaignWithProductTargets() (SBVideoCreateDraftCampaignWithProductTargets, error) {
	var body SBVideoCreateDraftCampaignWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoCreateDraftCampaignWithProductTargets overwrites any union data inside the SBCreateDraftCampaignRequestV33 as the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequestV33) FromSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoCreateDraftCampaignWithProductTargets performs a merge with any union data inside the SBCreateDraftCampaignRequestV33, using the provided SBVideoCreateDraftCampaignWithProductTargets
func (t *SBCreateDraftCampaignRequestV33) MergeSBVideoCreateDraftCampaignWithProductTargets(v SBVideoCreateDraftCampaignWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignRequestV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignRequestV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignWithKeywordsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithKeywordsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithKeywordsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignWithKeywordsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithKeywordsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignWithKeywordsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithKeywordsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignWithKeywordsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignWithKeywordsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignWithKeywordsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithKeywordsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithKeywordsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignWithKeywordsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithKeywordsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignWithKeywordsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithKeywordsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignWithKeywordsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignWithKeywordsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignWithProductTargetsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithProductTargetsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithProductTargetsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignWithProductTargetsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithProductTargetsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignWithProductTargetsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithProductTargetsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignWithProductTargetsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignWithProductTargetsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative as a SBProductCollectionCreative
func (t SBCreateDraftCampaignWithProductTargetsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative as the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithProductTargetsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBCreateDraftCampaignWithProductTargetsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative as a SBStoreSpotlightCreative
func (t SBCreateDraftCampaignWithProductTargetsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithProductTargetsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBCreateDraftCampaignWithProductTargetsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBCreateDraftCampaignWithProductTargetsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBCreateDraftCampaignWithProductTargetsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBCreateDraftCampaignWithProductTargetsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaign0 returns the union data inside the SBDraftCampaign as a SBDraftCampaign0
func (t SBDraftCampaign) AsSBDraftCampaign0() (SBDraftCampaign0, error) {
	var body SBDraftCampaign0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaign0 overwrites any union data inside the SBDraftCampaign as the provided SBDraftCampaign0
func (t *SBDraftCampaign) FromSBDraftCampaign0(v SBDraftCampaign0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaign0 performs a merge with any union data inside the SBDraftCampaign, using the provided SBDraftCampaign0
func (t *SBDraftCampaign) MergeSBDraftCampaign0(v SBDraftCampaign0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaign1 returns the union data inside the SBDraftCampaign as a SBDraftCampaign1
func (t SBDraftCampaign) AsSBDraftCampaign1() (SBDraftCampaign1, error) {
	var body SBDraftCampaign1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaign1 overwrites any union data inside the SBDraftCampaign as the provided SBDraftCampaign1
func (t *SBDraftCampaign) FromSBDraftCampaign1(v SBDraftCampaign1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaign1 performs a merge with any union data inside the SBDraftCampaign, using the provided SBDraftCampaign1
func (t *SBDraftCampaign) MergeSBDraftCampaign1(v SBDraftCampaign1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaign2 returns the union data inside the SBDraftCampaign as a SBDraftCampaign2
func (t SBDraftCampaign) AsSBDraftCampaign2() (SBDraftCampaign2, error) {
	var body SBDraftCampaign2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaign2 overwrites any union data inside the SBDraftCampaign as the provided SBDraftCampaign2
func (t *SBDraftCampaign) FromSBDraftCampaign2(v SBDraftCampaign2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaign2 performs a merge with any union data inside the SBDraftCampaign, using the provided SBDraftCampaign2
func (t *SBDraftCampaign) MergeSBDraftCampaign2(v SBDraftCampaign2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaign3 returns the union data inside the SBDraftCampaign as a SBDraftCampaign3
func (t SBDraftCampaign) AsSBDraftCampaign3() (SBDraftCampaign3, error) {
	var body SBDraftCampaign3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaign3 overwrites any union data inside the SBDraftCampaign as the provided SBDraftCampaign3
func (t *SBDraftCampaign) FromSBDraftCampaign3(v SBDraftCampaign3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaign3 performs a merge with any union data inside the SBDraftCampaign, using the provided SBDraftCampaign3
func (t *SBDraftCampaign) MergeSBDraftCampaign3(v SBDraftCampaign3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaign) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaign) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBDraftCampaignBase_LandingPage as a SBProductListLandingPage
func (t SBDraftCampaignBase_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBDraftCampaignBase_LandingPage as the provided SBProductListLandingPage
func (t *SBDraftCampaignBase_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBDraftCampaignBase_LandingPage, using the provided SBProductListLandingPage
func (t *SBDraftCampaignBase_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBDraftCampaignBase_LandingPage as a SBStoreLandingPage
func (t SBDraftCampaignBase_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBDraftCampaignBase_LandingPage as the provided SBStoreLandingPage
func (t *SBDraftCampaignBase_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBDraftCampaignBase_LandingPage, using the provided SBStoreLandingPage
func (t *SBDraftCampaignBase_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBDraftCampaignBase_LandingPage as a SBCustomUrlLandingPage
func (t SBDraftCampaignBase_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBDraftCampaignBase_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBase_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBDraftCampaignBase_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBase_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignBase_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignBase_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBDraftCampaignBaseV32_Creative as a SBProductCollectionCreative
func (t SBDraftCampaignBaseV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBDraftCampaignBaseV32_Creative as the provided SBProductCollectionCreative
func (t *SBDraftCampaignBaseV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBDraftCampaignBaseV32_Creative, using the provided SBProductCollectionCreative
func (t *SBDraftCampaignBaseV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBDraftCampaignBaseV32_Creative as a SBStoreSpotlightCreative
func (t SBDraftCampaignBaseV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBDraftCampaignBaseV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBDraftCampaignBaseV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBDraftCampaignBaseV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBDraftCampaignBaseV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignBaseV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignBaseV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBDraftCampaignBaseV32_LandingPage as a SBProductListLandingPage
func (t SBDraftCampaignBaseV32_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBDraftCampaignBaseV32_LandingPage as the provided SBProductListLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV32_LandingPage, using the provided SBProductListLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBDraftCampaignBaseV32_LandingPage as a SBStoreLandingPage
func (t SBDraftCampaignBaseV32_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBDraftCampaignBaseV32_LandingPage as the provided SBStoreLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV32_LandingPage, using the provided SBStoreLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBDraftCampaignBaseV32_LandingPage as a SBCustomUrlLandingPage
func (t SBDraftCampaignBaseV32_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBDraftCampaignBaseV32_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV32_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBaseV32_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignBaseV32_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignBaseV32_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBDraftCampaignBaseV33_Creative as a SBProductCollectionCreative
func (t SBDraftCampaignBaseV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBDraftCampaignBaseV33_Creative as the provided SBProductCollectionCreative
func (t *SBDraftCampaignBaseV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBDraftCampaignBaseV33_Creative, using the provided SBProductCollectionCreative
func (t *SBDraftCampaignBaseV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBDraftCampaignBaseV33_Creative as a SBStoreSpotlightCreative
func (t SBDraftCampaignBaseV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBDraftCampaignBaseV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBDraftCampaignBaseV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBDraftCampaignBaseV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBDraftCampaignBaseV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignBaseV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignBaseV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBDraftCampaignBaseV33_LandingPage as a SBProductListLandingPage
func (t SBDraftCampaignBaseV33_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBDraftCampaignBaseV33_LandingPage as the provided SBProductListLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV33_LandingPage, using the provided SBProductListLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBDraftCampaignBaseV33_LandingPage as a SBStoreLandingPage
func (t SBDraftCampaignBaseV33_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBDraftCampaignBaseV33_LandingPage as the provided SBStoreLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV33_LandingPage, using the provided SBStoreLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBDraftCampaignBaseV33_LandingPage as a SBCustomUrlLandingPage
func (t SBDraftCampaignBaseV33_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBDraftCampaignBaseV33_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBDraftCampaignBaseV33_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBDraftCampaignBaseV33_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignBaseV33_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignBaseV33_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignResponseWithKeywords returns the union data inside the SBDraftCampaignResponse as a SBDraftCampaignResponseWithKeywords
func (t SBDraftCampaignResponse) AsSBDraftCampaignResponseWithKeywords() (SBDraftCampaignResponseWithKeywords, error) {
	var body SBDraftCampaignResponseWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignResponseWithKeywords overwrites any union data inside the SBDraftCampaignResponse as the provided SBDraftCampaignResponseWithKeywords
func (t *SBDraftCampaignResponse) FromSBDraftCampaignResponseWithKeywords(v SBDraftCampaignResponseWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignResponseWithKeywords performs a merge with any union data inside the SBDraftCampaignResponse, using the provided SBDraftCampaignResponseWithKeywords
func (t *SBDraftCampaignResponse) MergeSBDraftCampaignResponseWithKeywords(v SBDraftCampaignResponseWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignResponseWithExpressions returns the union data inside the SBDraftCampaignResponse as a SBDraftCampaignResponseWithExpressions
func (t SBDraftCampaignResponse) AsSBDraftCampaignResponseWithExpressions() (SBDraftCampaignResponseWithExpressions, error) {
	var body SBDraftCampaignResponseWithExpressions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignResponseWithExpressions overwrites any union data inside the SBDraftCampaignResponse as the provided SBDraftCampaignResponseWithExpressions
func (t *SBDraftCampaignResponse) FromSBDraftCampaignResponseWithExpressions(v SBDraftCampaignResponseWithExpressions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignResponseWithExpressions performs a merge with any union data inside the SBDraftCampaignResponse, using the provided SBDraftCampaignResponseWithExpressions
func (t *SBDraftCampaignResponse) MergeSBDraftCampaignResponseWithExpressions(v SBDraftCampaignResponseWithExpressions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignV320 returns the union data inside the SBDraftCampaignV32 as a SBDraftCampaignV320
func (t SBDraftCampaignV32) AsSBDraftCampaignV320() (SBDraftCampaignV320, error) {
	var body SBDraftCampaignV320
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV320 overwrites any union data inside the SBDraftCampaignV32 as the provided SBDraftCampaignV320
func (t *SBDraftCampaignV32) FromSBDraftCampaignV320(v SBDraftCampaignV320) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV320 performs a merge with any union data inside the SBDraftCampaignV32, using the provided SBDraftCampaignV320
func (t *SBDraftCampaignV32) MergeSBDraftCampaignV320(v SBDraftCampaignV320) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV321 returns the union data inside the SBDraftCampaignV32 as a SBDraftCampaignV321
func (t SBDraftCampaignV32) AsSBDraftCampaignV321() (SBDraftCampaignV321, error) {
	var body SBDraftCampaignV321
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV321 overwrites any union data inside the SBDraftCampaignV32 as the provided SBDraftCampaignV321
func (t *SBDraftCampaignV32) FromSBDraftCampaignV321(v SBDraftCampaignV321) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV321 performs a merge with any union data inside the SBDraftCampaignV32, using the provided SBDraftCampaignV321
func (t *SBDraftCampaignV32) MergeSBDraftCampaignV321(v SBDraftCampaignV321) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV322 returns the union data inside the SBDraftCampaignV32 as a SBDraftCampaignV322
func (t SBDraftCampaignV32) AsSBDraftCampaignV322() (SBDraftCampaignV322, error) {
	var body SBDraftCampaignV322
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV322 overwrites any union data inside the SBDraftCampaignV32 as the provided SBDraftCampaignV322
func (t *SBDraftCampaignV32) FromSBDraftCampaignV322(v SBDraftCampaignV322) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV322 performs a merge with any union data inside the SBDraftCampaignV32, using the provided SBDraftCampaignV322
func (t *SBDraftCampaignV32) MergeSBDraftCampaignV322(v SBDraftCampaignV322) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV323 returns the union data inside the SBDraftCampaignV32 as a SBDraftCampaignV323
func (t SBDraftCampaignV32) AsSBDraftCampaignV323() (SBDraftCampaignV323, error) {
	var body SBDraftCampaignV323
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV323 overwrites any union data inside the SBDraftCampaignV32 as the provided SBDraftCampaignV323
func (t *SBDraftCampaignV32) FromSBDraftCampaignV323(v SBDraftCampaignV323) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV323 performs a merge with any union data inside the SBDraftCampaignV32, using the provided SBDraftCampaignV323
func (t *SBDraftCampaignV32) MergeSBDraftCampaignV323(v SBDraftCampaignV323) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignV32) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignV32) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignV330 returns the union data inside the SBDraftCampaignV33 as a SBDraftCampaignV330
func (t SBDraftCampaignV33) AsSBDraftCampaignV330() (SBDraftCampaignV330, error) {
	var body SBDraftCampaignV330
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV330 overwrites any union data inside the SBDraftCampaignV33 as the provided SBDraftCampaignV330
func (t *SBDraftCampaignV33) FromSBDraftCampaignV330(v SBDraftCampaignV330) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV330 performs a merge with any union data inside the SBDraftCampaignV33, using the provided SBDraftCampaignV330
func (t *SBDraftCampaignV33) MergeSBDraftCampaignV330(v SBDraftCampaignV330) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV331 returns the union data inside the SBDraftCampaignV33 as a SBDraftCampaignV331
func (t SBDraftCampaignV33) AsSBDraftCampaignV331() (SBDraftCampaignV331, error) {
	var body SBDraftCampaignV331
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV331 overwrites any union data inside the SBDraftCampaignV33 as the provided SBDraftCampaignV331
func (t *SBDraftCampaignV33) FromSBDraftCampaignV331(v SBDraftCampaignV331) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV331 performs a merge with any union data inside the SBDraftCampaignV33, using the provided SBDraftCampaignV331
func (t *SBDraftCampaignV33) MergeSBDraftCampaignV331(v SBDraftCampaignV331) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV332 returns the union data inside the SBDraftCampaignV33 as a SBDraftCampaignV332
func (t SBDraftCampaignV33) AsSBDraftCampaignV332() (SBDraftCampaignV332, error) {
	var body SBDraftCampaignV332
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV332 overwrites any union data inside the SBDraftCampaignV33 as the provided SBDraftCampaignV332
func (t *SBDraftCampaignV33) FromSBDraftCampaignV332(v SBDraftCampaignV332) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV332 performs a merge with any union data inside the SBDraftCampaignV33, using the provided SBDraftCampaignV332
func (t *SBDraftCampaignV33) MergeSBDraftCampaignV332(v SBDraftCampaignV332) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDraftCampaignV333 returns the union data inside the SBDraftCampaignV33 as a SBDraftCampaignV333
func (t SBDraftCampaignV33) AsSBDraftCampaignV333() (SBDraftCampaignV333, error) {
	var body SBDraftCampaignV333
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignV333 overwrites any union data inside the SBDraftCampaignV33 as the provided SBDraftCampaignV333
func (t *SBDraftCampaignV33) FromSBDraftCampaignV333(v SBDraftCampaignV333) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignV333 performs a merge with any union data inside the SBDraftCampaignV33, using the provided SBDraftCampaignV333
func (t *SBDraftCampaignV33) MergeSBDraftCampaignV333(v SBDraftCampaignV333) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBDraftCampaignV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBDraftCampaignV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignBase returns the union data inside the SBGetDraftCampaignResponse as a SBDraftCampaignBase
func (t SBGetDraftCampaignResponse) AsSBDraftCampaignBase() (SBDraftCampaignBase, error) {
	var body SBDraftCampaignBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignBase overwrites any union data inside the SBGetDraftCampaignResponse as the provided SBDraftCampaignBase
func (t *SBGetDraftCampaignResponse) FromSBDraftCampaignBase(v SBDraftCampaignBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignBase performs a merge with any union data inside the SBGetDraftCampaignResponse, using the provided SBDraftCampaignBase
func (t *SBGetDraftCampaignResponse) MergeSBDraftCampaignBase(v SBDraftCampaignBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoDraftCampaignBase returns the union data inside the SBGetDraftCampaignResponse as a SBVideoDraftCampaignBase
func (t SBGetDraftCampaignResponse) AsSBVideoDraftCampaignBase() (SBVideoDraftCampaignBase, error) {
	var body SBVideoDraftCampaignBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoDraftCampaignBase overwrites any union data inside the SBGetDraftCampaignResponse as the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponse) FromSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoDraftCampaignBase performs a merge with any union data inside the SBGetDraftCampaignResponse, using the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponse) MergeSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBGetDraftCampaignResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBGetDraftCampaignResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignBaseV32 returns the union data inside the SBGetDraftCampaignResponseV32 as a SBDraftCampaignBaseV32
func (t SBGetDraftCampaignResponseV32) AsSBDraftCampaignBaseV32() (SBDraftCampaignBaseV32, error) {
	var body SBDraftCampaignBaseV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignBaseV32 overwrites any union data inside the SBGetDraftCampaignResponseV32 as the provided SBDraftCampaignBaseV32
func (t *SBGetDraftCampaignResponseV32) FromSBDraftCampaignBaseV32(v SBDraftCampaignBaseV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignBaseV32 performs a merge with any union data inside the SBGetDraftCampaignResponseV32, using the provided SBDraftCampaignBaseV32
func (t *SBGetDraftCampaignResponseV32) MergeSBDraftCampaignBaseV32(v SBDraftCampaignBaseV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoDraftCampaignBase returns the union data inside the SBGetDraftCampaignResponseV32 as a SBVideoDraftCampaignBase
func (t SBGetDraftCampaignResponseV32) AsSBVideoDraftCampaignBase() (SBVideoDraftCampaignBase, error) {
	var body SBVideoDraftCampaignBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoDraftCampaignBase overwrites any union data inside the SBGetDraftCampaignResponseV32 as the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponseV32) FromSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoDraftCampaignBase performs a merge with any union data inside the SBGetDraftCampaignResponseV32, using the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponseV32) MergeSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBGetDraftCampaignResponseV32) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBGetDraftCampaignResponseV32) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBDraftCampaignBaseV33 returns the union data inside the SBGetDraftCampaignResponseV33 as a SBDraftCampaignBaseV33
func (t SBGetDraftCampaignResponseV33) AsSBDraftCampaignBaseV33() (SBDraftCampaignBaseV33, error) {
	var body SBDraftCampaignBaseV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDraftCampaignBaseV33 overwrites any union data inside the SBGetDraftCampaignResponseV33 as the provided SBDraftCampaignBaseV33
func (t *SBGetDraftCampaignResponseV33) FromSBDraftCampaignBaseV33(v SBDraftCampaignBaseV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDraftCampaignBaseV33 performs a merge with any union data inside the SBGetDraftCampaignResponseV33, using the provided SBDraftCampaignBaseV33
func (t *SBGetDraftCampaignResponseV33) MergeSBDraftCampaignBaseV33(v SBDraftCampaignBaseV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoDraftCampaignBase returns the union data inside the SBGetDraftCampaignResponseV33 as a SBVideoDraftCampaignBase
func (t SBGetDraftCampaignResponseV33) AsSBVideoDraftCampaignBase() (SBVideoDraftCampaignBase, error) {
	var body SBVideoDraftCampaignBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoDraftCampaignBase overwrites any union data inside the SBGetDraftCampaignResponseV33 as the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponseV33) FromSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoDraftCampaignBase performs a merge with any union data inside the SBGetDraftCampaignResponseV33, using the provided SBVideoDraftCampaignBase
func (t *SBGetDraftCampaignResponseV33) MergeSBVideoDraftCampaignBase(v SBVideoDraftCampaignBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBGetDraftCampaignResponseV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBGetDraftCampaignResponseV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBListCampaignsResponse0 returns the union data inside the SBListCampaignsResponse as a SBListCampaignsResponse0
func (t SBListCampaignsResponse) AsSBListCampaignsResponse0() (SBListCampaignsResponse0, error) {
	var body SBListCampaignsResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBListCampaignsResponse0 overwrites any union data inside the SBListCampaignsResponse as the provided SBListCampaignsResponse0
func (t *SBListCampaignsResponse) FromSBListCampaignsResponse0(v SBListCampaignsResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBListCampaignsResponse0 performs a merge with any union data inside the SBListCampaignsResponse, using the provided SBListCampaignsResponse0
func (t *SBListCampaignsResponse) MergeSBListCampaignsResponse0(v SBListCampaignsResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBListCampaignsResponse1 returns the union data inside the SBListCampaignsResponse as a SBListCampaignsResponse1
func (t SBListCampaignsResponse) AsSBListCampaignsResponse1() (SBListCampaignsResponse1, error) {
	var body SBListCampaignsResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBListCampaignsResponse1 overwrites any union data inside the SBListCampaignsResponse as the provided SBListCampaignsResponse1
func (t *SBListCampaignsResponse) FromSBListCampaignsResponse1(v SBListCampaignsResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBListCampaignsResponse1 performs a merge with any union data inside the SBListCampaignsResponse, using the provided SBListCampaignsResponse1
func (t *SBListCampaignsResponse) MergeSBListCampaignsResponse1(v SBListCampaignsResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBListCampaignsResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBListCampaignsResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductListLandingPage returns the union data inside the SBListCampaignsResponseCommon_LandingPage as a SBProductListLandingPage
func (t SBListCampaignsResponseCommon_LandingPage) AsSBProductListLandingPage() (SBProductListLandingPage, error) {
	var body SBProductListLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductListLandingPage overwrites any union data inside the SBListCampaignsResponseCommon_LandingPage as the provided SBProductListLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) FromSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductListLandingPage performs a merge with any union data inside the SBListCampaignsResponseCommon_LandingPage, using the provided SBProductListLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) MergeSBProductListLandingPage(v SBProductListLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreLandingPage returns the union data inside the SBListCampaignsResponseCommon_LandingPage as a SBStoreLandingPage
func (t SBListCampaignsResponseCommon_LandingPage) AsSBStoreLandingPage() (SBStoreLandingPage, error) {
	var body SBStoreLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreLandingPage overwrites any union data inside the SBListCampaignsResponseCommon_LandingPage as the provided SBStoreLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) FromSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreLandingPage performs a merge with any union data inside the SBListCampaignsResponseCommon_LandingPage, using the provided SBStoreLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) MergeSBStoreLandingPage(v SBStoreLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBDetailPageLandingPage returns the union data inside the SBListCampaignsResponseCommon_LandingPage as a SBDetailPageLandingPage
func (t SBListCampaignsResponseCommon_LandingPage) AsSBDetailPageLandingPage() (SBDetailPageLandingPage, error) {
	var body SBDetailPageLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBDetailPageLandingPage overwrites any union data inside the SBListCampaignsResponseCommon_LandingPage as the provided SBDetailPageLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) FromSBDetailPageLandingPage(v SBDetailPageLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBDetailPageLandingPage performs a merge with any union data inside the SBListCampaignsResponseCommon_LandingPage, using the provided SBDetailPageLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) MergeSBDetailPageLandingPage(v SBDetailPageLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBCustomUrlLandingPage returns the union data inside the SBListCampaignsResponseCommon_LandingPage as a SBCustomUrlLandingPage
func (t SBListCampaignsResponseCommon_LandingPage) AsSBCustomUrlLandingPage() (SBCustomUrlLandingPage, error) {
	var body SBCustomUrlLandingPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBCustomUrlLandingPage overwrites any union data inside the SBListCampaignsResponseCommon_LandingPage as the provided SBCustomUrlLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) FromSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBCustomUrlLandingPage performs a merge with any union data inside the SBListCampaignsResponseCommon_LandingPage, using the provided SBCustomUrlLandingPage
func (t *SBListCampaignsResponseCommon_LandingPage) MergeSBCustomUrlLandingPage(v SBCustomUrlLandingPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBListCampaignsResponseCommon_LandingPage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBListCampaignsResponseCommon_LandingPage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBSubmitDraftCampaignResponse0 returns the union data inside the SBSubmitDraftCampaignResponse as a SBSubmitDraftCampaignResponse0
func (t SBSubmitDraftCampaignResponse) AsSBSubmitDraftCampaignResponse0() (SBSubmitDraftCampaignResponse0, error) {
	var body SBSubmitDraftCampaignResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBSubmitDraftCampaignResponse0 overwrites any union data inside the SBSubmitDraftCampaignResponse as the provided SBSubmitDraftCampaignResponse0
func (t *SBSubmitDraftCampaignResponse) FromSBSubmitDraftCampaignResponse0(v SBSubmitDraftCampaignResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBSubmitDraftCampaignResponse0 performs a merge with any union data inside the SBSubmitDraftCampaignResponse, using the provided SBSubmitDraftCampaignResponse0
func (t *SBSubmitDraftCampaignResponse) MergeSBSubmitDraftCampaignResponse0(v SBSubmitDraftCampaignResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBSubmitDraftCampaignResponse1 returns the union data inside the SBSubmitDraftCampaignResponse as a SBSubmitDraftCampaignResponse1
func (t SBSubmitDraftCampaignResponse) AsSBSubmitDraftCampaignResponse1() (SBSubmitDraftCampaignResponse1, error) {
	var body SBSubmitDraftCampaignResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBSubmitDraftCampaignResponse1 overwrites any union data inside the SBSubmitDraftCampaignResponse as the provided SBSubmitDraftCampaignResponse1
func (t *SBSubmitDraftCampaignResponse) FromSBSubmitDraftCampaignResponse1(v SBSubmitDraftCampaignResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBSubmitDraftCampaignResponse1 performs a merge with any union data inside the SBSubmitDraftCampaignResponse, using the provided SBSubmitDraftCampaignResponse1
func (t *SBSubmitDraftCampaignResponse) MergeSBSubmitDraftCampaignResponse1(v SBSubmitDraftCampaignResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBSubmitDraftCampaignResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBSubmitDraftCampaignResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBUpdateDraftCampaignRequestWithKeywords returns the union data inside the SBUpdateDraftCampaignRequest as a SBUpdateDraftCampaignRequestWithKeywords
func (t SBUpdateDraftCampaignRequest) AsSBUpdateDraftCampaignRequestWithKeywords() (SBUpdateDraftCampaignRequestWithKeywords, error) {
	var body SBUpdateDraftCampaignRequestWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithKeywords overwrites any union data inside the SBUpdateDraftCampaignRequest as the provided SBUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequest) FromSBUpdateDraftCampaignRequestWithKeywords(v SBUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithKeywords performs a merge with any union data inside the SBUpdateDraftCampaignRequest, using the provided SBUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequest) MergeSBUpdateDraftCampaignRequestWithKeywords(v SBUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBUpdateDraftCampaignRequestWithProductTargets returns the union data inside the SBUpdateDraftCampaignRequest as a SBUpdateDraftCampaignRequestWithProductTargets
func (t SBUpdateDraftCampaignRequest) AsSBUpdateDraftCampaignRequestWithProductTargets() (SBUpdateDraftCampaignRequestWithProductTargets, error) {
	var body SBUpdateDraftCampaignRequestWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithProductTargets overwrites any union data inside the SBUpdateDraftCampaignRequest as the provided SBUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequest) FromSBUpdateDraftCampaignRequestWithProductTargets(v SBUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithProductTargets performs a merge with any union data inside the SBUpdateDraftCampaignRequest, using the provided SBUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequest) MergeSBUpdateDraftCampaignRequestWithProductTargets(v SBUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithKeywords returns the union data inside the SBUpdateDraftCampaignRequest as a SBVideoUpdateDraftCampaignRequestWithKeywords
func (t SBUpdateDraftCampaignRequest) AsSBVideoUpdateDraftCampaignRequestWithKeywords() (SBVideoUpdateDraftCampaignRequestWithKeywords, error) {
	var body SBVideoUpdateDraftCampaignRequestWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithKeywords overwrites any union data inside the SBUpdateDraftCampaignRequest as the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequest) FromSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithKeywords performs a merge with any union data inside the SBUpdateDraftCampaignRequest, using the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequest) MergeSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithProductTargets returns the union data inside the SBUpdateDraftCampaignRequest as a SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t SBUpdateDraftCampaignRequest) AsSBVideoUpdateDraftCampaignRequestWithProductTargets() (SBVideoUpdateDraftCampaignRequestWithProductTargets, error) {
	var body SBVideoUpdateDraftCampaignRequestWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithProductTargets overwrites any union data inside the SBUpdateDraftCampaignRequest as the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequest) FromSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithProductTargets performs a merge with any union data inside the SBUpdateDraftCampaignRequest, using the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequest) MergeSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative as a SBProductCollectionCreative
func (t SBUpdateDraftCampaignRequestCommonV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative as the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestCommonV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative, using the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestCommonV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative as a SBStoreSpotlightCreative
func (t SBUpdateDraftCampaignRequestCommonV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestCommonV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestCommonV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestCommonV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestCommonV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestCommonV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBUpdateDraftCampaignRequestWithKeywordsV32 returns the union data inside the SBUpdateDraftCampaignRequestV32 as a SBUpdateDraftCampaignRequestWithKeywordsV32
func (t SBUpdateDraftCampaignRequestV32) AsSBUpdateDraftCampaignRequestWithKeywordsV32() (SBUpdateDraftCampaignRequestWithKeywordsV32, error) {
	var body SBUpdateDraftCampaignRequestWithKeywordsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithKeywordsV32 overwrites any union data inside the SBUpdateDraftCampaignRequestV32 as the provided SBUpdateDraftCampaignRequestWithKeywordsV32
func (t *SBUpdateDraftCampaignRequestV32) FromSBUpdateDraftCampaignRequestWithKeywordsV32(v SBUpdateDraftCampaignRequestWithKeywordsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithKeywordsV32 performs a merge with any union data inside the SBUpdateDraftCampaignRequestV32, using the provided SBUpdateDraftCampaignRequestWithKeywordsV32
func (t *SBUpdateDraftCampaignRequestV32) MergeSBUpdateDraftCampaignRequestWithKeywordsV32(v SBUpdateDraftCampaignRequestWithKeywordsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBUpdateDraftCampaignRequestWithProductTargetsV32 returns the union data inside the SBUpdateDraftCampaignRequestV32 as a SBUpdateDraftCampaignRequestWithProductTargetsV32
func (t SBUpdateDraftCampaignRequestV32) AsSBUpdateDraftCampaignRequestWithProductTargetsV32() (SBUpdateDraftCampaignRequestWithProductTargetsV32, error) {
	var body SBUpdateDraftCampaignRequestWithProductTargetsV32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithProductTargetsV32 overwrites any union data inside the SBUpdateDraftCampaignRequestV32 as the provided SBUpdateDraftCampaignRequestWithProductTargetsV32
func (t *SBUpdateDraftCampaignRequestV32) FromSBUpdateDraftCampaignRequestWithProductTargetsV32(v SBUpdateDraftCampaignRequestWithProductTargetsV32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithProductTargetsV32 performs a merge with any union data inside the SBUpdateDraftCampaignRequestV32, using the provided SBUpdateDraftCampaignRequestWithProductTargetsV32
func (t *SBUpdateDraftCampaignRequestV32) MergeSBUpdateDraftCampaignRequestWithProductTargetsV32(v SBUpdateDraftCampaignRequestWithProductTargetsV32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithKeywords returns the union data inside the SBUpdateDraftCampaignRequestV32 as a SBVideoUpdateDraftCampaignRequestWithKeywords
func (t SBUpdateDraftCampaignRequestV32) AsSBVideoUpdateDraftCampaignRequestWithKeywords() (SBVideoUpdateDraftCampaignRequestWithKeywords, error) {
	var body SBVideoUpdateDraftCampaignRequestWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithKeywords overwrites any union data inside the SBUpdateDraftCampaignRequestV32 as the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequestV32) FromSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithKeywords performs a merge with any union data inside the SBUpdateDraftCampaignRequestV32, using the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequestV32) MergeSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithProductTargets returns the union data inside the SBUpdateDraftCampaignRequestV32 as a SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t SBUpdateDraftCampaignRequestV32) AsSBVideoUpdateDraftCampaignRequestWithProductTargets() (SBVideoUpdateDraftCampaignRequestWithProductTargets, error) {
	var body SBVideoUpdateDraftCampaignRequestWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithProductTargets overwrites any union data inside the SBUpdateDraftCampaignRequestV32 as the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequestV32) FromSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithProductTargets performs a merge with any union data inside the SBUpdateDraftCampaignRequestV32, using the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequestV32) MergeSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestV32) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestV32) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBUpdateDraftCampaignRequestWithKeywordsV33 returns the union data inside the SBUpdateDraftCampaignRequestV33 as a SBUpdateDraftCampaignRequestWithKeywordsV33
func (t SBUpdateDraftCampaignRequestV33) AsSBUpdateDraftCampaignRequestWithKeywordsV33() (SBUpdateDraftCampaignRequestWithKeywordsV33, error) {
	var body SBUpdateDraftCampaignRequestWithKeywordsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithKeywordsV33 overwrites any union data inside the SBUpdateDraftCampaignRequestV33 as the provided SBUpdateDraftCampaignRequestWithKeywordsV33
func (t *SBUpdateDraftCampaignRequestV33) FromSBUpdateDraftCampaignRequestWithKeywordsV33(v SBUpdateDraftCampaignRequestWithKeywordsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithKeywordsV33 performs a merge with any union data inside the SBUpdateDraftCampaignRequestV33, using the provided SBUpdateDraftCampaignRequestWithKeywordsV33
func (t *SBUpdateDraftCampaignRequestV33) MergeSBUpdateDraftCampaignRequestWithKeywordsV33(v SBUpdateDraftCampaignRequestWithKeywordsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBUpdateDraftCampaignRequestWithProductTargetsV33 returns the union data inside the SBUpdateDraftCampaignRequestV33 as a SBUpdateDraftCampaignRequestWithProductTargetsV33
func (t SBUpdateDraftCampaignRequestV33) AsSBUpdateDraftCampaignRequestWithProductTargetsV33() (SBUpdateDraftCampaignRequestWithProductTargetsV33, error) {
	var body SBUpdateDraftCampaignRequestWithProductTargetsV33
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBUpdateDraftCampaignRequestWithProductTargetsV33 overwrites any union data inside the SBUpdateDraftCampaignRequestV33 as the provided SBUpdateDraftCampaignRequestWithProductTargetsV33
func (t *SBUpdateDraftCampaignRequestV33) FromSBUpdateDraftCampaignRequestWithProductTargetsV33(v SBUpdateDraftCampaignRequestWithProductTargetsV33) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBUpdateDraftCampaignRequestWithProductTargetsV33 performs a merge with any union data inside the SBUpdateDraftCampaignRequestV33, using the provided SBUpdateDraftCampaignRequestWithProductTargetsV33
func (t *SBUpdateDraftCampaignRequestV33) MergeSBUpdateDraftCampaignRequestWithProductTargetsV33(v SBUpdateDraftCampaignRequestWithProductTargetsV33) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithKeywords returns the union data inside the SBUpdateDraftCampaignRequestV33 as a SBVideoUpdateDraftCampaignRequestWithKeywords
func (t SBUpdateDraftCampaignRequestV33) AsSBVideoUpdateDraftCampaignRequestWithKeywords() (SBVideoUpdateDraftCampaignRequestWithKeywords, error) {
	var body SBVideoUpdateDraftCampaignRequestWithKeywords
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithKeywords overwrites any union data inside the SBUpdateDraftCampaignRequestV33 as the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequestV33) FromSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithKeywords performs a merge with any union data inside the SBUpdateDraftCampaignRequestV33, using the provided SBVideoUpdateDraftCampaignRequestWithKeywords
func (t *SBUpdateDraftCampaignRequestV33) MergeSBVideoUpdateDraftCampaignRequestWithKeywords(v SBVideoUpdateDraftCampaignRequestWithKeywords) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBVideoUpdateDraftCampaignRequestWithProductTargets returns the union data inside the SBUpdateDraftCampaignRequestV33 as a SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t SBUpdateDraftCampaignRequestV33) AsSBVideoUpdateDraftCampaignRequestWithProductTargets() (SBVideoUpdateDraftCampaignRequestWithProductTargets, error) {
	var body SBVideoUpdateDraftCampaignRequestWithProductTargets
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBVideoUpdateDraftCampaignRequestWithProductTargets overwrites any union data inside the SBUpdateDraftCampaignRequestV33 as the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequestV33) FromSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBVideoUpdateDraftCampaignRequestWithProductTargets performs a merge with any union data inside the SBUpdateDraftCampaignRequestV33, using the provided SBVideoUpdateDraftCampaignRequestWithProductTargets
func (t *SBUpdateDraftCampaignRequestV33) MergeSBVideoUpdateDraftCampaignRequestWithProductTargets(v SBVideoUpdateDraftCampaignRequestWithProductTargets) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestV33) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestV33) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative as a SBProductCollectionCreative
func (t SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative as the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative as a SBStoreSpotlightCreative
func (t SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestWithKeywordsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative as a SBProductCollectionCreative
func (t SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative as the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative as a SBStoreSpotlightCreative
func (t SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithKeywordsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestWithKeywordsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative as a SBProductCollectionCreative
func (t SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative as the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative, using the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative as a SBStoreSpotlightCreative
func (t SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative as the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative, using the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestWithProductTargetsV32_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSBProductCollectionCreative returns the union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative as a SBProductCollectionCreative
func (t SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) AsSBProductCollectionCreative() (SBProductCollectionCreative, error) {
	var body SBProductCollectionCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBProductCollectionCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative as the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) FromSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBProductCollectionCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative, using the provided SBProductCollectionCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) MergeSBProductCollectionCreative(v SBProductCollectionCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSBStoreSpotlightCreative returns the union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative as a SBStoreSpotlightCreative
func (t SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) AsSBStoreSpotlightCreative() (SBStoreSpotlightCreative, error) {
	var body SBStoreSpotlightCreative
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSBStoreSpotlightCreative overwrites any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative as the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) FromSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSBStoreSpotlightCreative performs a merge with any union data inside the SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative, using the provided SBStoreSpotlightCreative
func (t *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) MergeSBStoreSpotlightCreative(v SBStoreSpotlightCreative) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SBUpdateDraftCampaignRequestWithProductTargetsV33_Creative) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBrands request
	GetBrands(ctx context.Context, params *GetBrandsParams) (*http.Response, error)

	// CompleteUploadWithBody request with any body
	CompleteUploadWithBody(ctx context.Context, params *CompleteUploadParams, contentType string, body io.Reader) (*http.Response, error)

	CompleteUpload(ctx context.Context, params *CompleteUploadParams, body CompleteUploadJSONRequestBody) (*http.Response, error)

	// DescribeMedia request
	DescribeMedia(ctx context.Context, params *DescribeMediaParams) (*http.Response, error)

	// CreateUploadResourceWithBody request with any body
	CreateUploadResourceWithBody(ctx context.Context, params *CreateUploadResourceParams, contentType string, body io.Reader) (*http.Response, error)

	CreateUploadResource(ctx context.Context, params *CreateUploadResourceParams, body CreateUploadResourceJSONRequestBody) (*http.Response, error)

	// ListAsins request
	ListAsins(ctx context.Context, params *ListAsinsParams) (*http.Response, error)

	// ListAdGroups request
	ListAdGroups(ctx context.Context, params *ListAdGroupsParams) (*http.Response, error)

	// GetAdGroup request
	GetAdGroup(ctx context.Context, adGroupId int64, params *GetAdGroupParams) (*http.Response, error)

	// ListCampaigns request
	ListCampaigns(ctx context.Context, params *ListCampaignsParams) (*http.Response, error)

	// CreateCampaignsWithBody request with any body
	CreateCampaignsWithBody(ctx context.Context, params *CreateCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateCampaignsWithApplicationVndCreatecampaignsresponseV32PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody) (*http.Response, error)

	CreateCampaignsWithApplicationVndCreatecampaignsresponseV33PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody) (*http.Response, error)

	CreateCampaignsWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateCampaignsWithBody request with any body
	UpdateCampaignsWithBody(ctx context.Context, params *UpdateCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateCampaignsWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody) (*http.Response, error)

	UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody) (*http.Response, error)

	UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody) (*http.Response, error)

	// ArchiveCampaign request
	ArchiveCampaign(ctx context.Context, campaignId int64, params *ArchiveCampaignParams) (*http.Response, error)

	// GetCampaign request
	GetCampaign(ctx context.Context, campaignId int64, params *GetCampaignParams) (*http.Response, error)

	// ListDraftCampaigns request
	ListDraftCampaigns(ctx context.Context, params *ListDraftCampaignsParams) (*http.Response, error)

	// CreateDraftCampaignsWithBody request with any body
	CreateDraftCampaignsWithBody(ctx context.Context, params *CreateDraftCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Response, error)

	CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Response, error)

	CreateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateDraftCampaignsWithBody request with any body
	UpdateDraftCampaignsWithBody(ctx context.Context, params *UpdateDraftCampaignsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Response, error)

	UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Response, error)

	UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Response, error)

	// SubmitDraftCampaignWithBody request with any body
	SubmitDraftCampaignWithBody(ctx context.Context, params *SubmitDraftCampaignParams, contentType string, body io.Reader) (*http.Response, error)

	SubmitDraftCampaignWithApplicationVndSbcampaignV3PlusJSONBody(ctx context.Context, params *SubmitDraftCampaignParams, body SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody) (*http.Response, error)

	// DeleteDraftCampaign request
	DeleteDraftCampaign(ctx context.Context, draftCampaignId int64, params *DeleteDraftCampaignParams) (*http.Response, error)

	// GetDraftCampaign request
	GetDraftCampaign(ctx context.Context, draftCampaignId int64, params *GetDraftCampaignParams) (*http.Response, error)

	// ListKeywords request
	ListKeywords(ctx context.Context, params *ListKeywordsParams) (*http.Response, error)

	// CreateKeywordsWithBody request with any body
	CreateKeywordsWithBody(ctx context.Context, params *CreateKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *CreateKeywordsParams, body CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateKeywordsWithBody request with any body
	UpdateKeywordsWithBody(ctx context.Context, params *UpdateKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *UpdateKeywordsParams, body UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error)

	// ArchiveKeyword request
	ArchiveKeyword(ctx context.Context, keywordId int64, params *ArchiveKeywordParams) (*http.Response, error)

	// GetKeyword request
	GetKeyword(ctx context.Context, keywordId int64, params *GetKeywordParams) (*http.Response, error)

	// GetSbModerationCampaignsCampaignId request
	GetSbModerationCampaignsCampaignId(ctx context.Context, campaignId int64, params *GetSbModerationCampaignsCampaignIdParams) (*http.Response, error)

	// ListNegativeKeywords request
	ListNegativeKeywords(ctx context.Context, params *ListNegativeKeywordsParams) (*http.Response, error)

	// CreateNegativeKeywordsWithBody request with any body
	CreateNegativeKeywordsWithBody(ctx context.Context, params *CreateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *CreateNegativeKeywordsParams, body CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error)

	// UpdateNegativeKeywordsWithBody request with any body
	UpdateNegativeKeywordsWithBody(ctx context.Context, params *UpdateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *UpdateNegativeKeywordsParams, body UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error)

	// ArchiveNegativeKeyword request
	ArchiveNegativeKeyword(ctx context.Context, keywordId int64, params *ArchiveNegativeKeywordParams) (*http.Response, error)

	// GetNegativeKeyword request
	GetNegativeKeyword(ctx context.Context, keywordId int64, params *GetNegativeKeywordParams) (*http.Response, error)

	// CreateNegativeTargetsWithBody request with any body
	CreateNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateNegativeTargets(ctx context.Context, body CreateNegativeTargetsJSONRequestBody) (*http.Response, error)

	// UpdateNegativeTargetsWithBody request with any body
	UpdateNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	UpdateNegativeTargets(ctx context.Context, body UpdateNegativeTargetsJSONRequestBody) (*http.Response, error)

	// ListNegativeTargetsWithBody request with any body
	ListNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ListNegativeTargets(ctx context.Context, body ListNegativeTargetsJSONRequestBody) (*http.Response, error)

	// ArchiveNegativeTarget request
	ArchiveNegativeTarget(ctx context.Context, negativeTargetId SBNegativeTargetId) (*http.Response, error)

	// GetNegativeTarget request
	GetNegativeTarget(ctx context.Context, negativeTargetId SBNegativeTargetId) (*http.Response, error)

	// GetBidsRecommendationsWithBody request with any body
	GetBidsRecommendationsWithBody(ctx context.Context, params *GetBidsRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	GetBidsRecommendations(ctx context.Context, params *GetBidsRecommendationsParams, body GetBidsRecommendationsJSONRequestBody) (*http.Response, error)

	// GetBrandRecommendationsWithBody request with any body
	GetBrandRecommendationsWithBody(ctx context.Context, params *GetBrandRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	GetBrandRecommendationsWithApplicationVndSbbrandrecommendationsV30PlusJSONBody(ctx context.Context, params *GetBrandRecommendationsParams, body GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody) (*http.Response, error)

	// GetTargetingCategoriesWithBody request with any body
	GetTargetingCategoriesWithBody(ctx context.Context, params *GetTargetingCategoriesParams, contentType string, body io.Reader) (*http.Response, error)

	GetTargetingCategories(ctx context.Context, params *GetTargetingCategoriesParams, body GetTargetingCategoriesJSONRequestBody) (*http.Response, error)

	// GetProductRecommendationsWithBody request with any body
	GetProductRecommendationsWithBody(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Response, error)

	GetProductRecommendationsWithApplicationVndSbproductrecommendationsV30PlusJSONBody(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody) (*http.Response, error)

	// CreateTargetsWithBody request with any body
	CreateTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateTargets(ctx context.Context, body CreateTargetsJSONRequestBody) (*http.Response, error)

	// UpdateTargetsWithBody request with any body
	UpdateTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	UpdateTargets(ctx context.Context, body UpdateTargetsJSONRequestBody) (*http.Response, error)

	// ListTargetsWithBody request with any body
	ListTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ListTargets(ctx context.Context, body ListTargetsJSONRequestBody) (*http.Response, error)

	// ArchiveTarget request
	ArchiveTarget(ctx context.Context, targetId SBTargetId) (*http.Response, error)

	// GetTarget request
	GetTarget(ctx context.Context, targetId SBTargetId, params *GetTargetParams) (*http.Response, error)

	// SbCreateThemesWithBody request with any body
	SbCreateThemesWithBody(ctx context.Context, params *SbCreateThemesParams, contentType string, body io.Reader) (*http.Response, error)

	SbCreateThemesWithApplicationVndSbthemescreaterequestV3PlusJSONBody(ctx context.Context, params *SbCreateThemesParams, body SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody) (*http.Response, error)

	// SbUpdateThemesWithBody request with any body
	SbUpdateThemesWithBody(ctx context.Context, params *SbUpdateThemesParams, contentType string, body io.Reader) (*http.Response, error)

	SbUpdateThemesWithApplicationVndSbathemessupdaterequestV3PlusJSONBody(ctx context.Context, params *SbUpdateThemesParams, body SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody) (*http.Response, error)

	// SbListThemesWithBody request with any body
	SbListThemesWithBody(ctx context.Context, params *SbListThemesParams, contentType string, body io.Reader) (*http.Response, error)

	SbListThemesWithApplicationVndSbthemeslistrequestV3PlusJSONBody(ctx context.Context, params *SbListThemesParams, body SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody) (*http.Response, error)

	// ListAssets request
	ListAssets(ctx context.Context, params *ListAssetsParams) (*http.Response, error)

	// CreateAssetWithBody request with any body
	CreateAssetWithBody(ctx context.Context, params *CreateAssetParams, contentType string, body io.Reader) (*http.Response, error)

	// PostV2HsaRecordTypeReportWithBody request with any body
	PostV2HsaRecordTypeReportWithBody(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, contentType string, body io.Reader) (*http.Response, error)

	PostV2HsaRecordTypeReport(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, body PostV2HsaRecordTypeReportJSONRequestBody) (*http.Response, error)

	// GetV2ReportsReportId request
	GetV2ReportsReportId(ctx context.Context, reportId string, params *GetV2ReportsReportIdParams) (*http.Response, error)

	// DownloadReport request
	DownloadReport(ctx context.Context, reportId string, params *DownloadReportParams) (*http.Response, error)
}

func (c *Client) GetBrands(ctx context.Context, params *GetBrandsParams) (*http.Response, error) {
	req, err := NewGetBrandsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CompleteUploadWithBody(ctx context.Context, params *CompleteUploadParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCompleteUploadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CompleteUpload(ctx context.Context, params *CompleteUploadParams, body CompleteUploadJSONRequestBody) (*http.Response, error) {
	req, err := NewCompleteUploadRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DescribeMedia(ctx context.Context, params *DescribeMediaParams) (*http.Response, error) {
	req, err := NewDescribeMediaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateUploadResourceWithBody(ctx context.Context, params *CreateUploadResourceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateUploadResourceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateUploadResource(ctx context.Context, params *CreateUploadResourceParams, body CreateUploadResourceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateUploadResourceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListAsins(ctx context.Context, params *ListAsinsParams) (*http.Response, error) {
	req, err := NewListAsinsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListAdGroups(ctx context.Context, params *ListAdGroupsParams) (*http.Response, error) {
	req, err := NewListAdGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetAdGroup(ctx context.Context, adGroupId int64, params *GetAdGroupParams) (*http.Response, error) {
	req, err := NewGetAdGroupRequest(c.Server, adGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListCampaigns(ctx context.Context, params *ListCampaignsParams) (*http.Response, error) {
	req, err := NewListCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateCampaignsWithBody(ctx context.Context, params *CreateCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateCampaignsWithApplicationVndCreatecampaignsresponseV32PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateCampaignsWithApplicationVndCreatecampaignsresponseV33PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateCampaignsWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateCampaignsRequestWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateCampaignsWithBody(ctx context.Context, params *UpdateCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateCampaignsWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateCampaignsRequestWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ArchiveCampaign(ctx context.Context, campaignId int64, params *ArchiveCampaignParams) (*http.Response, error) {
	req, err := NewArchiveCampaignRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCampaign(ctx context.Context, campaignId int64, params *GetCampaignParams) (*http.Response, error) {
	req, err := NewGetCampaignRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListDraftCampaigns(ctx context.Context, params *ListDraftCampaignsParams) (*http.Response, error) {
	req, err := NewListDraftCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDraftCampaignsWithBody(ctx context.Context, params *CreateDraftCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDraftCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDraftCampaignsWithBody(ctx context.Context, params *UpdateDraftCampaignsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDraftCampaignsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitDraftCampaignWithBody(ctx context.Context, params *SubmitDraftCampaignParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitDraftCampaignRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SubmitDraftCampaignWithApplicationVndSbcampaignV3PlusJSONBody(ctx context.Context, params *SubmitDraftCampaignParams, body SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitDraftCampaignRequestWithApplicationVndSbcampaignV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DeleteDraftCampaign(ctx context.Context, draftCampaignId int64, params *DeleteDraftCampaignParams) (*http.Response, error) {
	req, err := NewDeleteDraftCampaignRequest(c.Server, draftCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDraftCampaign(ctx context.Context, draftCampaignId int64, params *GetDraftCampaignParams) (*http.Response, error) {
	req, err := NewGetDraftCampaignRequest(c.Server, draftCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListKeywords(ctx context.Context, params *ListKeywordsParams) (*http.Response, error) {
	req, err := NewListKeywordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateKeywordsWithBody(ctx context.Context, params *CreateKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *CreateKeywordsParams, body CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateKeywordsWithBody(ctx context.Context, params *UpdateKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *UpdateKeywordsParams, body UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ArchiveKeyword(ctx context.Context, keywordId int64, params *ArchiveKeywordParams) (*http.Response, error) {
	req, err := NewArchiveKeywordRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetKeyword(ctx context.Context, keywordId int64, params *GetKeywordParams) (*http.Response, error) {
	req, err := NewGetKeywordRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSbModerationCampaignsCampaignId(ctx context.Context, campaignId int64, params *GetSbModerationCampaignsCampaignIdParams) (*http.Response, error) {
	req, err := NewGetSbModerationCampaignsCampaignIdRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListNegativeKeywords(ctx context.Context, params *ListNegativeKeywordsParams) (*http.Response, error) {
	req, err := NewListNegativeKeywordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateNegativeKeywordsWithBody(ctx context.Context, params *CreateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *CreateNegativeKeywordsParams, body CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateNegativeKeywordsWithBody(ctx context.Context, params *UpdateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateNegativeKeywordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx context.Context, params *UpdateNegativeKeywordsParams, body UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ArchiveNegativeKeyword(ctx context.Context, keywordId int64, params *ArchiveNegativeKeywordParams) (*http.Response, error) {
	req, err := NewArchiveNegativeKeywordRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetNegativeKeyword(ctx context.Context, keywordId int64, params *GetNegativeKeywordParams) (*http.Response, error) {
	req, err := NewGetNegativeKeywordRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateNegativeTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateNegativeTargets(ctx context.Context, body CreateNegativeTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateNegativeTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateNegativeTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateNegativeTargets(ctx context.Context, body UpdateNegativeTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateNegativeTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListNegativeTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListNegativeTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListNegativeTargets(ctx context.Context, body ListNegativeTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewListNegativeTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ArchiveNegativeTarget(ctx context.Context, negativeTargetId SBNegativeTargetId) (*http.Response, error) {
	req, err := NewArchiveNegativeTargetRequest(c.Server, negativeTargetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetNegativeTarget(ctx context.Context, negativeTargetId SBNegativeTargetId) (*http.Response, error) {
	req, err := NewGetNegativeTargetRequest(c.Server, negativeTargetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBidsRecommendationsWithBody(ctx context.Context, params *GetBidsRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetBidsRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBidsRecommendations(ctx context.Context, params *GetBidsRecommendationsParams, body GetBidsRecommendationsJSONRequestBody) (*http.Response, error) {
	req, err := NewGetBidsRecommendationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBrandRecommendationsWithBody(ctx context.Context, params *GetBrandRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetBrandRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetBrandRecommendationsWithApplicationVndSbbrandrecommendationsV30PlusJSONBody(ctx context.Context, params *GetBrandRecommendationsParams, body GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetBrandRecommendationsRequestWithApplicationVndSbbrandrecommendationsV30PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTargetingCategoriesWithBody(ctx context.Context, params *GetTargetingCategoriesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetTargetingCategoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTargetingCategories(ctx context.Context, params *GetTargetingCategoriesParams, body GetTargetingCategoriesJSONRequestBody) (*http.Response, error) {
	req, err := NewGetTargetingCategoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductRecommendationsWithBody(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetProductRecommendationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductRecommendationsWithApplicationVndSbproductrecommendationsV30PlusJSONBody(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewGetProductRecommendationsRequestWithApplicationVndSbproductrecommendationsV30PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateTargets(ctx context.Context, body CreateTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateTargets(ctx context.Context, body UpdateTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListTargetsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewListTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListTargets(ctx context.Context, body ListTargetsJSONRequestBody) (*http.Response, error) {
	req, err := NewListTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ArchiveTarget(ctx context.Context, targetId SBTargetId) (*http.Response, error) {
	req, err := NewArchiveTargetRequest(c.Server, targetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetTarget(ctx context.Context, targetId SBTargetId, params *GetTargetParams) (*http.Response, error) {
	req, err := NewGetTargetRequest(c.Server, targetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbCreateThemesWithBody(ctx context.Context, params *SbCreateThemesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSbCreateThemesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbCreateThemesWithApplicationVndSbthemescreaterequestV3PlusJSONBody(ctx context.Context, params *SbCreateThemesParams, body SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSbCreateThemesRequestWithApplicationVndSbthemescreaterequestV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbUpdateThemesWithBody(ctx context.Context, params *SbUpdateThemesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSbUpdateThemesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbUpdateThemesWithApplicationVndSbathemessupdaterequestV3PlusJSONBody(ctx context.Context, params *SbUpdateThemesParams, body SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSbUpdateThemesRequestWithApplicationVndSbathemessupdaterequestV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbListThemesWithBody(ctx context.Context, params *SbListThemesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSbListThemesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SbListThemesWithApplicationVndSbthemeslistrequestV3PlusJSONBody(ctx context.Context, params *SbListThemesParams, body SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewSbListThemesRequestWithApplicationVndSbthemeslistrequestV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListAssets(ctx context.Context, params *ListAssetsParams) (*http.Response, error) {
	req, err := NewListAssetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateAssetWithBody(ctx context.Context, params *CreateAssetParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAssetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PostV2HsaRecordTypeReportWithBody(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV2HsaRecordTypeReportRequestWithBody(c.Server, recordType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PostV2HsaRecordTypeReport(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, body PostV2HsaRecordTypeReportJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV2HsaRecordTypeReportRequest(c.Server, recordType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetV2ReportsReportId(ctx context.Context, reportId string, params *GetV2ReportsReportIdParams) (*http.Response, error) {
	req, err := NewGetV2ReportsReportIdRequest(c.Server, reportId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) DownloadReport(ctx context.Context, reportId string, params *DownloadReportParams) (*http.Response, error) {
	req, err := NewDownloadReportRequest(c.Server, reportId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetBrandsRequest generates requests for GetBrands
func NewGetBrandsRequest(server string, params *GetBrandsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BrandTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "brandTypeFilter", runtime.ParamLocationQuery, *params.BrandTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCompleteUploadRequest calls the generic CompleteUpload builder with application/json body
func NewCompleteUploadRequest(server string, params *CompleteUploadParams, body CompleteUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteUploadRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCompleteUploadRequestWithBody generates requests for CompleteUpload with any type of body
func NewCompleteUploadRequestWithBody(server string, params *CompleteUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDescribeMediaRequest generates requests for DescribeMedia
func NewDescribeMediaRequest(server string, params *DescribeMediaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/describe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mediaId", runtime.ParamLocationQuery, params.MediaId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateUploadResourceRequest calls the generic CreateUploadResource builder with application/json body
func NewCreateUploadResourceRequest(server string, params *CreateUploadResourceParams, body CreateUploadResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUploadResourceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateUploadResourceRequestWithBody generates requests for CreateUploadResource with any type of body
func NewCreateUploadResourceRequestWithBody(server string, params *CreateUploadResourceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAsinsRequest generates requests for ListAsins
func NewListAsinsRequest(server string, params *ListAsinsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pageAsins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageUrl", runtime.ParamLocationQuery, params.PageUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAdGroupsRequest generates requests for ListAdGroups
func NewListAdGroupsRequest(server string, params *ListAdGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/adGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdGroupIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adGroupIdFilter", runtime.ParamLocationQuery, *params.AdGroupIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CampaignIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignIdFilter", runtime.ParamLocationQuery, *params.CampaignIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CreativeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeType", runtime.ParamLocationQuery, *params.CreativeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetAdGroupRequest generates requests for GetAdGroup
func NewGetAdGroupRequest(server string, adGroupId int64, params *GetAdGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "adGroupId", runtime.ParamLocationPath, adGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/adGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListCampaignsRequest generates requests for ListCampaigns
func NewListCampaignsRequest(server string, params *ListCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stateFilter", runtime.ParamLocationQuery, *params.StateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PortfolioIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioIdFilter", runtime.ParamLocationQuery, *params.PortfolioIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CampaignIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignIdFilter", runtime.ParamLocationQuery, *params.CampaignIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdFormatFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adFormatFilter", runtime.ParamLocationQuery, *params.AdFormatFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CreativeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeType", runtime.ParamLocationQuery, *params.CreativeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV32PlusJSONBody calls the generic CreateCampaigns builder with application/vnd.createcampaignsresponse.v3.2+json body
func NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV32PlusJSONBody(server string, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignsRequestWithBody(server, params, "application/vnd.createcampaignsresponse.v3.2+json", bodyReader)
}

// NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV33PlusJSONBody calls the generic CreateCampaigns builder with application/vnd.createcampaignsresponse.v3.3+json body
func NewCreateCampaignsRequestWithApplicationVndCreatecampaignsresponseV33PlusJSONBody(server string, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignsRequestWithBody(server, params, "application/vnd.createcampaignsresponse.v3.3+json", bodyReader)
}

// NewCreateCampaignsRequestWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody calls the generic CreateCampaigns builder with application/vnd.sbcreatecampaignresponse.v3+json body
func NewCreateCampaignsRequestWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody(server string, params *CreateCampaignsParams, body CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignsRequestWithBody(server, params, "application/vnd.sbcreatecampaignresponse.v3+json", bodyReader)
}

// NewCreateCampaignsRequestWithBody generates requests for CreateCampaigns with any type of body
func NewCreateCampaignsRequestWithBody(server string, params *CreateCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateCampaignsRequestWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody calls the generic UpdateCampaigns builder with application/vnd.sbupdatecampaignresponse.v3+json body
func NewUpdateCampaignsRequestWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody(server string, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignsRequestWithBody(server, params, "application/vnd.sbupdatecampaignresponse.v3+json", bodyReader)
}

// NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody calls the generic UpdateCampaigns builder with application/vnd.updatecampaignsresponse.v3.2+json body
func NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody(server string, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignsRequestWithBody(server, params, "application/vnd.updatecampaignsresponse.v3.2+json", bodyReader)
}

// NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody calls the generic UpdateCampaigns builder with application/vnd.updatecampaignsresponse.v3.3+json body
func NewUpdateCampaignsRequestWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody(server string, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignsRequestWithBody(server, params, "application/vnd.updatecampaignsresponse.v3.3+json", bodyReader)
}

// NewUpdateCampaignsRequestWithBody generates requests for UpdateCampaigns with any type of body
func NewUpdateCampaignsRequestWithBody(server string, params *UpdateCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewArchiveCampaignRequest generates requests for ArchiveCampaign
func NewArchiveCampaignRequest(server string, campaignId int64, params *ArchiveCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCampaignRequest generates requests for GetCampaign
func NewGetCampaignRequest(server string, campaignId int64, params *GetCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListDraftCampaignsRequest generates requests for ListDraftCampaigns
func NewListDraftCampaignsRequest(server string, params *ListDraftCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.DraftCampaignIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "draftCampaignIdFilter", runtime.ParamLocationQuery, *params.DraftCampaignIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.PortfolioIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolioIdFilter", runtime.ParamLocationQuery, *params.PortfolioIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdFormatFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adFormatFilter", runtime.ParamLocationQuery, *params.AdFormatFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody calls the generic CreateDraftCampaigns builder with application/vnd.createdraftcampaignsresponse.v3.2+json body
func NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody(server string, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDraftCampaignsRequestWithBody(server, params, "application/vnd.createdraftcampaignsresponse.v3.2+json", bodyReader)
}

// NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody calls the generic CreateDraftCampaigns builder with application/vnd.createdraftcampaignsresponse.v3.3+json body
func NewCreateDraftCampaignsRequestWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody(server string, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDraftCampaignsRequestWithBody(server, params, "application/vnd.createdraftcampaignsresponse.v3.3+json", bodyReader)
}

// NewCreateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody calls the generic CreateDraftCampaigns builder with application/vnd.sbdraftcampaignresponse.v3+json body
func NewCreateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(server string, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDraftCampaignsRequestWithBody(server, params, "application/vnd.sbdraftcampaignresponse.v3+json", bodyReader)
}

// NewCreateDraftCampaignsRequestWithBody generates requests for CreateDraftCampaigns with any type of body
func NewCreateDraftCampaignsRequestWithBody(server string, params *CreateDraftCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody calls the generic UpdateDraftCampaigns builder with application/vnd.sbdraftcampaignresponse.v3+json body
func NewUpdateDraftCampaignsRequestWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(server string, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDraftCampaignsRequestWithBody(server, params, "application/vnd.sbdraftcampaignresponse.v3+json", bodyReader)
}

// NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody calls the generic UpdateDraftCampaigns builder with application/vnd.updatedraftcampaignsresponse.v3.2+json body
func NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody(server string, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDraftCampaignsRequestWithBody(server, params, "application/vnd.updatedraftcampaignsresponse.v3.2+json", bodyReader)
}

// NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody calls the generic UpdateDraftCampaigns builder with application/vnd.updatedraftcampaignsresponse.v3.3+json body
func NewUpdateDraftCampaignsRequestWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody(server string, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDraftCampaignsRequestWithBody(server, params, "application/vnd.updatedraftcampaignsresponse.v3.3+json", bodyReader)
}

// NewUpdateDraftCampaignsRequestWithBody generates requests for UpdateDraftCampaigns with any type of body
func NewUpdateDraftCampaignsRequestWithBody(server string, params *UpdateDraftCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSubmitDraftCampaignRequestWithApplicationVndSbcampaignV3PlusJSONBody calls the generic SubmitDraftCampaign builder with application/vnd.sbcampaign.v3+json body
func NewSubmitDraftCampaignRequestWithApplicationVndSbcampaignV3PlusJSONBody(server string, params *SubmitDraftCampaignParams, body SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitDraftCampaignRequestWithBody(server, params, "application/vnd.sbcampaign.v3+json", bodyReader)
}

// NewSubmitDraftCampaignRequestWithBody generates requests for SubmitDraftCampaign with any type of body
func NewSubmitDraftCampaignRequestWithBody(server string, params *SubmitDraftCampaignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDeleteDraftCampaignRequest generates requests for DeleteDraftCampaign
func NewDeleteDraftCampaignRequest(server string, draftCampaignId int64, params *DeleteDraftCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "draftCampaignId", runtime.ParamLocationPath, draftCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDraftCampaignRequest generates requests for GetDraftCampaign
func NewGetDraftCampaignRequest(server string, draftCampaignId int64, params *GetDraftCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "draftCampaignId", runtime.ParamLocationPath, draftCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/drafts/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListKeywordsRequest generates requests for ListKeywords
func NewListKeywordsRequest(server string, params *ListKeywordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MatchTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchTypeFilter", runtime.ParamLocationQuery, *params.MatchTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.KeywordText != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywordText", runtime.ParamLocationQuery, *params.KeywordText); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stateFilter", runtime.ParamLocationQuery, *params.StateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CampaignIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignIdFilter", runtime.ParamLocationQuery, *params.CampaignIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdGroupIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adGroupIdFilter", runtime.ParamLocationQuery, *params.AdGroupIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.KeywordIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywordIdFilter", runtime.ParamLocationQuery, *params.KeywordIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CreativeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeType", runtime.ParamLocationQuery, *params.CreativeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody calls the generic CreateKeywords builder with application/vnd.sbkeywordresponse.v3+json body
func NewCreateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(server string, params *CreateKeywordsParams, body CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeywordsRequestWithBody(server, params, "application/vnd.sbkeywordresponse.v3+json", bodyReader)
}

// NewCreateKeywordsRequestWithBody generates requests for CreateKeywords with any type of body
func NewCreateKeywordsRequestWithBody(server string, params *CreateKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody calls the generic UpdateKeywords builder with application/vnd.sbkeywordresponse.v3+json body
func NewUpdateKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(server string, params *UpdateKeywordsParams, body UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKeywordsRequestWithBody(server, params, "application/vnd.sbkeywordresponse.v3+json", bodyReader)
}

// NewUpdateKeywordsRequestWithBody generates requests for UpdateKeywords with any type of body
func NewUpdateKeywordsRequestWithBody(server string, params *UpdateKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/keywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewArchiveKeywordRequest generates requests for ArchiveKeyword
func NewArchiveKeywordRequest(server string, keywordId int64, params *ArchiveKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/keywords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetKeywordRequest generates requests for GetKeyword
func NewGetKeywordRequest(server string, keywordId int64, params *GetKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/keywords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSbModerationCampaignsCampaignIdRequest generates requests for GetSbModerationCampaignsCampaignId
func NewGetSbModerationCampaignsCampaignIdRequest(server string, campaignId int64, params *GetSbModerationCampaignsCampaignIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaignId", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/moderation/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListNegativeKeywordsRequest generates requests for ListNegativeKeywords
func NewListNegativeKeywordsRequest(server string, params *ListNegativeKeywordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MatchTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchTypeFilter", runtime.ParamLocationQuery, *params.MatchTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.KeywordText != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywordText", runtime.ParamLocationQuery, *params.KeywordText); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StateFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stateFilter", runtime.ParamLocationQuery, *params.StateFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CampaignIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignIdFilter", runtime.ParamLocationQuery, *params.CampaignIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdGroupIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adGroupIdFilter", runtime.ParamLocationQuery, *params.AdGroupIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.KeywordIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywordIdFilter", runtime.ParamLocationQuery, *params.KeywordIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CreativeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeType", runtime.ParamLocationQuery, *params.CreativeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody calls the generic CreateNegativeKeywords builder with application/vnd.sbkeywordresponse.v3+json body
func NewCreateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(server string, params *CreateNegativeKeywordsParams, body CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNegativeKeywordsRequestWithBody(server, params, "application/vnd.sbkeywordresponse.v3+json", bodyReader)
}

// NewCreateNegativeKeywordsRequestWithBody generates requests for CreateNegativeKeywords with any type of body
func NewCreateNegativeKeywordsRequestWithBody(server string, params *CreateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody calls the generic UpdateNegativeKeywords builder with application/vnd.sbkeywordresponse.v3+json body
func NewUpdateNegativeKeywordsRequestWithApplicationVndSbkeywordresponseV3PlusJSONBody(server string, params *UpdateNegativeKeywordsParams, body UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNegativeKeywordsRequestWithBody(server, params, "application/vnd.sbkeywordresponse.v3+json", bodyReader)
}

// NewUpdateNegativeKeywordsRequestWithBody generates requests for UpdateNegativeKeywords with any type of body
func NewUpdateNegativeKeywordsRequestWithBody(server string, params *UpdateNegativeKeywordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeKeywords")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewArchiveNegativeKeywordRequest generates requests for ArchiveNegativeKeyword
func NewArchiveNegativeKeywordRequest(server string, keywordId int64, params *ArchiveNegativeKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeKeywords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetNegativeKeywordRequest generates requests for GetNegativeKeyword
func NewGetNegativeKeywordRequest(server string, keywordId int64, params *GetNegativeKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeKeywords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateNegativeTargetsRequest calls the generic CreateNegativeTargets builder with application/json body
func NewCreateNegativeTargetsRequest(server string, body CreateNegativeTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNegativeTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNegativeTargetsRequestWithBody generates requests for CreateNegativeTargets with any type of body
func NewCreateNegativeTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNegativeTargetsRequest calls the generic UpdateNegativeTargets builder with application/json body
func NewUpdateNegativeTargetsRequest(server string, body UpdateNegativeTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNegativeTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNegativeTargetsRequestWithBody generates requests for UpdateNegativeTargets with any type of body
func NewUpdateNegativeTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListNegativeTargetsRequest calls the generic ListNegativeTargets builder with application/json body
func NewListNegativeTargetsRequest(server string, body ListNegativeTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListNegativeTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewListNegativeTargetsRequestWithBody generates requests for ListNegativeTargets with any type of body
func NewListNegativeTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveNegativeTargetRequest generates requests for ArchiveNegativeTarget
func NewArchiveNegativeTargetRequest(server string, negativeTargetId SBNegativeTargetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "negativeTargetId", runtime.ParamLocationPath, negativeTargetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNegativeTargetRequest generates requests for GetNegativeTarget
func NewGetNegativeTargetRequest(server string, negativeTargetId SBNegativeTargetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "negativeTargetId", runtime.ParamLocationPath, negativeTargetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/negativeTargets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBidsRecommendationsRequest calls the generic GetBidsRecommendations builder with application/json body
func NewGetBidsRecommendationsRequest(server string, params *GetBidsRecommendationsParams, body GetBidsRecommendationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBidsRecommendationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetBidsRecommendationsRequestWithBody generates requests for GetBidsRecommendations with any type of body
func NewGetBidsRecommendationsRequestWithBody(server string, params *GetBidsRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/bids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetBrandRecommendationsRequestWithApplicationVndSbbrandrecommendationsV30PlusJSONBody calls the generic GetBrandRecommendations builder with application/vnd.sbbrandrecommendations.v3.0+json body
func NewGetBrandRecommendationsRequestWithApplicationVndSbbrandrecommendationsV30PlusJSONBody(server string, params *GetBrandRecommendationsParams, body GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetBrandRecommendationsRequestWithBody(server, params, "application/vnd.sbbrandrecommendations.v3.0+json", bodyReader)
}

// NewGetBrandRecommendationsRequestWithBody generates requests for GetBrandRecommendations with any type of body
func NewGetBrandRecommendationsRequestWithBody(server string, params *GetBrandRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/targets/brand")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetTargetingCategoriesRequest calls the generic GetTargetingCategories builder with application/json body
func NewGetTargetingCategoriesRequest(server string, params *GetTargetingCategoriesParams, body GetTargetingCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTargetingCategoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetTargetingCategoriesRequestWithBody generates requests for GetTargetingCategories with any type of body
func NewGetTargetingCategoriesRequestWithBody(server string, params *GetTargetingCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/targets/category")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetProductRecommendationsRequestWithApplicationVndSbproductrecommendationsV30PlusJSONBody calls the generic GetProductRecommendations builder with application/vnd.sbproductrecommendations.v3.0+json body
func NewGetProductRecommendationsRequestWithApplicationVndSbproductrecommendationsV30PlusJSONBody(server string, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductRecommendationsRequestWithBody(server, params, "application/vnd.sbproductrecommendations.v3.0+json", bodyReader)
}

// NewGetProductRecommendationsRequestWithBody generates requests for GetProductRecommendations with any type of body
func NewGetProductRecommendationsRequestWithBody(server string, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/recommendations/targets/product/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateTargetsRequest calls the generic CreateTargets builder with application/json body
func NewCreateTargetsRequest(server string, body CreateTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTargetsRequestWithBody generates requests for CreateTargets with any type of body
func NewCreateTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTargetsRequest calls the generic UpdateTargets builder with application/json body
func NewUpdateTargetsRequest(server string, body UpdateTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateTargetsRequestWithBody generates requests for UpdateTargets with any type of body
func NewUpdateTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTargetsRequest calls the generic ListTargets builder with application/json body
func NewListTargetsRequest(server string, body ListTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewListTargetsRequestWithBody generates requests for ListTargets with any type of body
func NewListTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveTargetRequest generates requests for ArchiveTarget
func NewArchiveTargetRequest(server string, targetId SBTargetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetId", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetRequest generates requests for GetTarget
func NewGetTargetRequest(server string, targetId SBTargetId, params *GetTargetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetId", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSbCreateThemesRequestWithApplicationVndSbthemescreaterequestV3PlusJSONBody calls the generic SbCreateThemes builder with application/vnd.sbthemescreaterequest.v3+json body
func NewSbCreateThemesRequestWithApplicationVndSbthemescreaterequestV3PlusJSONBody(server string, params *SbCreateThemesParams, body SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSbCreateThemesRequestWithBody(server, params, "application/vnd.sbthemescreaterequest.v3+json", bodyReader)
}

// NewSbCreateThemesRequestWithBody generates requests for SbCreateThemes with any type of body
func NewSbCreateThemesRequestWithBody(server string, params *SbCreateThemesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/themes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSbUpdateThemesRequestWithApplicationVndSbathemessupdaterequestV3PlusJSONBody calls the generic SbUpdateThemes builder with application/vnd.sbathemessupdaterequest.v3+json body
func NewSbUpdateThemesRequestWithApplicationVndSbathemessupdaterequestV3PlusJSONBody(server string, params *SbUpdateThemesParams, body SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSbUpdateThemesRequestWithBody(server, params, "application/vnd.sbathemessupdaterequest.v3+json", bodyReader)
}

// NewSbUpdateThemesRequestWithBody generates requests for SbUpdateThemes with any type of body
func NewSbUpdateThemesRequestWithBody(server string, params *SbUpdateThemesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/themes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSbListThemesRequestWithApplicationVndSbthemeslistrequestV3PlusJSONBody calls the generic SbListThemes builder with application/vnd.sbthemeslistrequest.v3+json body
func NewSbListThemesRequestWithApplicationVndSbthemeslistrequestV3PlusJSONBody(server string, params *SbListThemesParams, body SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSbListThemesRequestWithBody(server, params, "application/vnd.sbthemeslistrequest.v3+json", bodyReader)
}

// NewSbListThemesRequestWithBody generates requests for SbListThemes with any type of body
func NewSbListThemesRequestWithBody(server string, params *SbListThemesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sb/themes/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListAssetsRequest generates requests for ListAssets
func NewListAssetsRequest(server string, params *ListAssetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stores/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BrandEntityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "brandEntityId", runtime.ParamLocationQuery, *params.BrandEntityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MediaType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mediaType", runtime.ParamLocationQuery, *params.MediaType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateAssetRequestWithBody generates requests for CreateAsset with any type of body
func NewCreateAssetRequestWithBody(server string, params *CreateAssetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stores/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Disposition", runtime.ParamLocationHeader, params.ContentDisposition)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Disposition", headerParam2)

		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam3)

	}

	return req, nil
}

// NewPostV2HsaRecordTypeReportRequest calls the generic PostV2HsaRecordTypeReport builder with application/json body
func NewPostV2HsaRecordTypeReportRequest(server string, recordType string, params *PostV2HsaRecordTypeReportParams, body PostV2HsaRecordTypeReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2HsaRecordTypeReportRequestWithBody(server, recordType, params, "application/json", bodyReader)
}

// NewPostV2HsaRecordTypeReportRequestWithBody generates requests for PostV2HsaRecordTypeReport with any type of body
func NewPostV2HsaRecordTypeReportRequestWithBody(server string, recordType string, params *PostV2HsaRecordTypeReportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recordType", runtime.ParamLocationPath, recordType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/hsa/%s/report", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetV2ReportsReportIdRequest generates requests for GetV2ReportsReportId
func NewGetV2ReportsReportIdRequest(server string, reportId string, params *GetV2ReportsReportIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewDownloadReportRequest generates requests for DownloadReport
func NewDownloadReportRequest(server string, reportId string, params *DownloadReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/reports/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBrandsWithResponse request
	GetBrandsWithResponse(ctx context.Context, params *GetBrandsParams) (*GetBrandsResp, error)

	// CompleteUploadWithBodyWithResponse request with any body
	CompleteUploadWithBodyWithResponse(ctx context.Context, params *CompleteUploadParams, contentType string, body io.Reader) (*CompleteUploadResp, error)

	CompleteUploadWithResponse(ctx context.Context, params *CompleteUploadParams, body CompleteUploadJSONRequestBody) (*CompleteUploadResp, error)

	// DescribeMediaWithResponse request
	DescribeMediaWithResponse(ctx context.Context, params *DescribeMediaParams) (*DescribeMediaResp, error)

	// CreateUploadResourceWithBodyWithResponse request with any body
	CreateUploadResourceWithBodyWithResponse(ctx context.Context, params *CreateUploadResourceParams, contentType string, body io.Reader) (*CreateUploadResourceResp, error)

	CreateUploadResourceWithResponse(ctx context.Context, params *CreateUploadResourceParams, body CreateUploadResourceJSONRequestBody) (*CreateUploadResourceResp, error)

	// ListAsinsWithResponse request
	ListAsinsWithResponse(ctx context.Context, params *ListAsinsParams) (*ListAsinsResp, error)

	// ListAdGroupsWithResponse request
	ListAdGroupsWithResponse(ctx context.Context, params *ListAdGroupsParams) (*ListAdGroupsResp, error)

	// GetAdGroupWithResponse request
	GetAdGroupWithResponse(ctx context.Context, adGroupId int64, params *GetAdGroupParams) (*GetAdGroupResp, error)

	// ListCampaignsWithResponse request
	ListCampaignsWithResponse(ctx context.Context, params *ListCampaignsParams) (*ListCampaignsResp, error)

	// CreateCampaignsWithBodyWithResponse request with any body
	CreateCampaignsWithBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, contentType string, body io.Reader) (*CreateCampaignsResp, error)

	CreateCampaignsWithApplicationVndCreatecampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody) (*CreateCampaignsResp, error)

	CreateCampaignsWithApplicationVndCreatecampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody) (*CreateCampaignsResp, error)

	CreateCampaignsWithApplicationVndSbcreatecampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody) (*CreateCampaignsResp, error)

	// UpdateCampaignsWithBodyWithResponse request with any body
	UpdateCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, contentType string, body io.Reader) (*UpdateCampaignsResp, error)

	UpdateCampaignsWithApplicationVndSbupdatecampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody) (*UpdateCampaignsResp, error)

	UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody) (*UpdateCampaignsResp, error)

	UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody) (*UpdateCampaignsResp, error)

	// ArchiveCampaignWithResponse request
	ArchiveCampaignWithResponse(ctx context.Context, campaignId int64, params *ArchiveCampaignParams) (*ArchiveCampaignResp, error)

	// GetCampaignWithResponse request
	GetCampaignWithResponse(ctx context.Context, campaignId int64, params *GetCampaignParams) (*GetCampaignResp, error)

	// ListDraftCampaignsWithResponse request
	ListDraftCampaignsWithResponse(ctx context.Context, params *ListDraftCampaignsParams) (*ListDraftCampaignsResp, error)

	// CreateDraftCampaignsWithBodyWithResponse request with any body
	CreateDraftCampaignsWithBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, contentType string, body io.Reader) (*CreateDraftCampaignsResp, error)

	CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody) (*CreateDraftCampaignsResp, error)

	CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody) (*CreateDraftCampaignsResp, error)

	CreateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*CreateDraftCampaignsResp, error)

	// UpdateDraftCampaignsWithBodyWithResponse request with any body
	UpdateDraftCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, contentType string, body io.Reader) (*UpdateDraftCampaignsResp, error)

	UpdateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error)

	UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error)

	UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error)

	// SubmitDraftCampaignWithBodyWithResponse request with any body
	SubmitDraftCampaignWithBodyWithResponse(ctx context.Context, params *SubmitDraftCampaignParams, contentType string, body io.Reader) (*SubmitDraftCampaignResp, error)

	SubmitDraftCampaignWithApplicationVndSbcampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *SubmitDraftCampaignParams, body SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody) (*SubmitDraftCampaignResp, error)

	// DeleteDraftCampaignWithResponse request
	DeleteDraftCampaignWithResponse(ctx context.Context, draftCampaignId int64, params *DeleteDraftCampaignParams) (*DeleteDraftCampaignResp, error)

	// GetDraftCampaignWithResponse request
	GetDraftCampaignWithResponse(ctx context.Context, draftCampaignId int64, params *GetDraftCampaignParams) (*GetDraftCampaignResp, error)

	// ListKeywordsWithResponse request
	ListKeywordsWithResponse(ctx context.Context, params *ListKeywordsParams) (*ListKeywordsResp, error)

	// CreateKeywordsWithBodyWithResponse request with any body
	CreateKeywordsWithBodyWithResponse(ctx context.Context, params *CreateKeywordsParams, contentType string, body io.Reader) (*CreateKeywordsResp, error)

	CreateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateKeywordsParams, body CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*CreateKeywordsResp, error)

	// UpdateKeywordsWithBodyWithResponse request with any body
	UpdateKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateKeywordsParams, contentType string, body io.Reader) (*UpdateKeywordsResp, error)

	UpdateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateKeywordsParams, body UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*UpdateKeywordsResp, error)

	// ArchiveKeywordWithResponse request
	ArchiveKeywordWithResponse(ctx context.Context, keywordId int64, params *ArchiveKeywordParams) (*ArchiveKeywordResp, error)

	// GetKeywordWithResponse request
	GetKeywordWithResponse(ctx context.Context, keywordId int64, params *GetKeywordParams) (*GetKeywordResp, error)

	// GetSbModerationCampaignsCampaignIdWithResponse request
	GetSbModerationCampaignsCampaignIdWithResponse(ctx context.Context, campaignId int64, params *GetSbModerationCampaignsCampaignIdParams) (*GetSbModerationCampaignsCampaignIdResp, error)

	// ListNegativeKeywordsWithResponse request
	ListNegativeKeywordsWithResponse(ctx context.Context, params *ListNegativeKeywordsParams) (*ListNegativeKeywordsResp, error)

	// CreateNegativeKeywordsWithBodyWithResponse request with any body
	CreateNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateNegativeKeywordsParams, contentType string, body io.Reader) (*CreateNegativeKeywordsResp, error)

	CreateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateNegativeKeywordsParams, body CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*CreateNegativeKeywordsResp, error)

	// UpdateNegativeKeywordsWithBodyWithResponse request with any body
	UpdateNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateNegativeKeywordsResp, error)

	UpdateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateNegativeKeywordsParams, body UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*UpdateNegativeKeywordsResp, error)

	// ArchiveNegativeKeywordWithResponse request
	ArchiveNegativeKeywordWithResponse(ctx context.Context, keywordId int64, params *ArchiveNegativeKeywordParams) (*ArchiveNegativeKeywordResp, error)

	// GetNegativeKeywordWithResponse request
	GetNegativeKeywordWithResponse(ctx context.Context, keywordId int64, params *GetNegativeKeywordParams) (*GetNegativeKeywordResp, error)

	// CreateNegativeTargetsWithBodyWithResponse request with any body
	CreateNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNegativeTargetsResp, error)

	CreateNegativeTargetsWithResponse(ctx context.Context, body CreateNegativeTargetsJSONRequestBody) (*CreateNegativeTargetsResp, error)

	// UpdateNegativeTargetsWithBodyWithResponse request with any body
	UpdateNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateNegativeTargetsResp, error)

	UpdateNegativeTargetsWithResponse(ctx context.Context, body UpdateNegativeTargetsJSONRequestBody) (*UpdateNegativeTargetsResp, error)

	// ListNegativeTargetsWithBodyWithResponse request with any body
	ListNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ListNegativeTargetsResp, error)

	ListNegativeTargetsWithResponse(ctx context.Context, body ListNegativeTargetsJSONRequestBody) (*ListNegativeTargetsResp, error)

	// ArchiveNegativeTargetWithResponse request
	ArchiveNegativeTargetWithResponse(ctx context.Context, negativeTargetId SBNegativeTargetId) (*ArchiveNegativeTargetResp, error)

	// GetNegativeTargetWithResponse request
	GetNegativeTargetWithResponse(ctx context.Context, negativeTargetId SBNegativeTargetId) (*GetNegativeTargetResp, error)

	// GetBidsRecommendationsWithBodyWithResponse request with any body
	GetBidsRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBidsRecommendationsParams, contentType string, body io.Reader) (*GetBidsRecommendationsResp, error)

	GetBidsRecommendationsWithResponse(ctx context.Context, params *GetBidsRecommendationsParams, body GetBidsRecommendationsJSONRequestBody) (*GetBidsRecommendationsResp, error)

	// GetBrandRecommendationsWithBodyWithResponse request with any body
	GetBrandRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBrandRecommendationsParams, contentType string, body io.Reader) (*GetBrandRecommendationsResp, error)

	GetBrandRecommendationsWithApplicationVndSbbrandrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetBrandRecommendationsParams, body GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody) (*GetBrandRecommendationsResp, error)

	// GetTargetingCategoriesWithBodyWithResponse request with any body
	GetTargetingCategoriesWithBodyWithResponse(ctx context.Context, params *GetTargetingCategoriesParams, contentType string, body io.Reader) (*GetTargetingCategoriesResp, error)

	GetTargetingCategoriesWithResponse(ctx context.Context, params *GetTargetingCategoriesParams, body GetTargetingCategoriesJSONRequestBody) (*GetTargetingCategoriesResp, error)

	// GetProductRecommendationsWithBodyWithResponse request with any body
	GetProductRecommendationsWithBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*GetProductRecommendationsResp, error)

	GetProductRecommendationsWithApplicationVndSbproductrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody) (*GetProductRecommendationsResp, error)

	// CreateTargetsWithBodyWithResponse request with any body
	CreateTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTargetsResp, error)

	CreateTargetsWithResponse(ctx context.Context, body CreateTargetsJSONRequestBody) (*CreateTargetsResp, error)

	// UpdateTargetsWithBodyWithResponse request with any body
	UpdateTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateTargetsResp, error)

	UpdateTargetsWithResponse(ctx context.Context, body UpdateTargetsJSONRequestBody) (*UpdateTargetsResp, error)

	// ListTargetsWithBodyWithResponse request with any body
	ListTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ListTargetsResp, error)

	ListTargetsWithResponse(ctx context.Context, body ListTargetsJSONRequestBody) (*ListTargetsResp, error)

	// ArchiveTargetWithResponse request
	ArchiveTargetWithResponse(ctx context.Context, targetId SBTargetId) (*ArchiveTargetResp, error)

	// GetTargetWithResponse request
	GetTargetWithResponse(ctx context.Context, targetId SBTargetId, params *GetTargetParams) (*GetTargetResp, error)

	// SbCreateThemesWithBodyWithResponse request with any body
	SbCreateThemesWithBodyWithResponse(ctx context.Context, params *SbCreateThemesParams, contentType string, body io.Reader) (*SbCreateThemesResp, error)

	SbCreateThemesWithApplicationVndSbthemescreaterequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbCreateThemesParams, body SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody) (*SbCreateThemesResp, error)

	// SbUpdateThemesWithBodyWithResponse request with any body
	SbUpdateThemesWithBodyWithResponse(ctx context.Context, params *SbUpdateThemesParams, contentType string, body io.Reader) (*SbUpdateThemesResp, error)

	SbUpdateThemesWithApplicationVndSbathemessupdaterequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbUpdateThemesParams, body SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody) (*SbUpdateThemesResp, error)

	// SbListThemesWithBodyWithResponse request with any body
	SbListThemesWithBodyWithResponse(ctx context.Context, params *SbListThemesParams, contentType string, body io.Reader) (*SbListThemesResp, error)

	SbListThemesWithApplicationVndSbthemeslistrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbListThemesParams, body SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody) (*SbListThemesResp, error)

	// ListAssetsWithResponse request
	ListAssetsWithResponse(ctx context.Context, params *ListAssetsParams) (*ListAssetsResp, error)

	// CreateAssetWithBodyWithResponse request with any body
	CreateAssetWithBodyWithResponse(ctx context.Context, params *CreateAssetParams, contentType string, body io.Reader) (*CreateAssetResp, error)

	// PostV2HsaRecordTypeReportWithBodyWithResponse request with any body
	PostV2HsaRecordTypeReportWithBodyWithResponse(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, contentType string, body io.Reader) (*PostV2HsaRecordTypeReportResp, error)

	PostV2HsaRecordTypeReportWithResponse(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, body PostV2HsaRecordTypeReportJSONRequestBody) (*PostV2HsaRecordTypeReportResp, error)

	// GetV2ReportsReportIdWithResponse request
	GetV2ReportsReportIdWithResponse(ctx context.Context, reportId string, params *GetV2ReportsReportIdParams) (*GetV2ReportsReportIdResp, error)

	// DownloadReportWithResponse request
	DownloadReportWithResponse(ctx context.Context, reportId string, params *DownloadReportParams) (*DownloadReportResp, error)
}

type GetBrandsResp struct {
	Body                         []byte
	HTTPResponse                 *http.Response
	ApplicationvndBrandV3JSON200 *GetBrandResponse
}

// Status returns HTTPResponse.Status
func (r GetBrandsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBrandsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteUploadResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// MediaId The Media identifier.
		MediaId *MediaId `json:"mediaId,omitempty"`
	}
	JSON400 *MediaPublisherAPIError
	JSON404 *MediaPublisherAPIError
	JSON500 *MediaPublisherAPIError
}

// Status returns HTTPResponse.Status
func (r CompleteUploadResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteUploadResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DescribeMediaResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DescribeMediaResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DescribeMediaResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUploadResourceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadLocation
	JSON400      *MediaPublisherAPIError
	JSON500      *MediaPublisherAPIError
}

// Status returns HTTPResponse.Status
func (r CreateUploadResourceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUploadResourceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAsinsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndPageasinsV3JSON200 *PageAsinsResponse
}

// Status returns HTTPResponse.Status
func (r ListAsinsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAsinsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAdGroupsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSbadgroupV3JSON200 *[]SBAdGroup
	ApplicationvndErrorV3JSON404     *Error
}

// Status returns HTTPResponse.Status
func (r ListAdGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAdGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdGroupResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSbadgroupV3JSON200 *SBAdGroup
	ApplicationvndErrorV3JSON404     *Error
}

// Status returns HTTPResponse.Status
func (r GetAdGroupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdGroupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCampaignsResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndBatchgetcampaignsresponseV32JSON200 *GetBatchGetCampaignsresponseV32Response
	ApplicationvndBatchgetcampaignsresponseV33JSON200 *GetBatchGetCampaignsresponseV33Response
	ApplicationvndSbcampaignV3JSON200                 *[]SBListCampaignsResponse
}

// Status returns HTTPResponse.Status
func (r ListCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignsResp struct {
	Body                                            []byte
	HTTPResponse                                    *http.Response
	ApplicationvndCreatecampaignsresponseV32JSON207 *PostSbCampaignsResponse
	ApplicationvndCreatecampaignsresponseV33JSON207 *PostSbCampaignsResponse
	ApplicationvndSbcreatecampaignresponseV3JSON207 *PostSbCampaignsResponse
	ApplicationvndErrorV3JSON404                    *Error
}

// Status returns HTTPResponse.Status
func (r CreateCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCampaignsResp struct {
	Body                                            []byte
	HTTPResponse                                    *http.Response
	ApplicationvndSbupdatecampaignresponseV3JSON207 *[]SBUpdateCampaignResponse
	ApplicationvndUpdatecampaignsresponseV32JSON207 *[]SBUpdateCampaignResponse
	ApplicationvndUpdatecampaignsresponseV33JSON207 *[]SBUpdateCampaignResponse
	ApplicationvndErrorV3JSON404                    *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveCampaignResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndArchivecampaignsresponseV33JSON200 *SBUpdateCampaignResponseDefault
	ApplicationvndSbupdatecampaignresponseV3JSON200  *SBUpdateCampaignResponse
	ApplicationvndErrorV3JSON404                     *Error
}

// Status returns HTTPResponse.Status
func (r ArchiveCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignResp struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationvndSbcampaignV3JSON200  *SBCampaignResponse
	ApplicationvndSbcampaignV32JSON200 *struct {
		union json.RawMessage
	}
	ApplicationvndSbcampaignV33JSON200 *SBCampaignResponseV33
	ApplicationvndErrorV3JSON404       *Error
}

// Status returns HTTPResponse.Status
func (r GetCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDraftCampaignsResp struct {
	Body                                                   []byte
	HTTPResponse                                           *http.Response
	ApplicationvndBatchgetdraftcampaignsresponseV32JSON200 *[]SBGetDraftCampaignResponseV32
	ApplicationvndBatchgetdraftcampaignsresponseV33JSON200 *[]SBGetDraftCampaignResponseV33
	ApplicationvndSbdraftcampaignV3JSON200                 *[]SBGetDraftCampaignResponse
}

// Status returns HTTPResponse.Status
func (r ListDraftCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDraftCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDraftCampaignsResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndCreatedraftcampaignsresponseV32JSON207 *[]SBDraftCampaignResponse
	ApplicationvndCreatedraftcampaignsresponseV33JSON207 *[]SBDraftCampaignResponse
	ApplicationvndSbdraftcampaignresponseV3JSON207       *[]SBDraftCampaignResponse
	ApplicationvndErrorV3JSON404                         *Error
}

// Status returns HTTPResponse.Status
func (r CreateDraftCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDraftCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDraftCampaignsResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndSbdraftcampaignresponseV3JSON207       *[]SBDraftCampaignResponse
	ApplicationvndUpdatedraftcampaignsresponseV32JSON207 *[]SBDraftCampaignResponse
	ApplicationvndUpdatedraftcampaignsresponseV33JSON207 *[]SBDraftCampaignResponse
	ApplicationvndErrorV3JSON404                         *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDraftCampaignsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDraftCampaignsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitDraftCampaignResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndSbdraftcampaignresponseV3JSON207       *SBSubmitDraftCampaignResponse
	ApplicationvndSubmitdraftcampaignsresponseV33JSON207 *[]SBSubmitDraftCampaignResponse
	ApplicationvndErrorV3JSON404                         *Error
}

// Status returns HTTPResponse.Status
func (r SubmitDraftCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitDraftCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDraftCampaignResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndDeletedraftcampaignsresponseV33JSON200 *SBDraftCampaignDeleteResponse
	ApplicationvndSbdraftcampaignresponseV3JSON200       *SBDraftCampaignDeleteResponse
	ApplicationvndErrorV3JSON404                         *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDraftCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDraftCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDraftCampaignResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndSbdraftcampaignV3JSON200  *SBDraftCampaign
	ApplicationvndSbdraftcampaignV32JSON200 *SBDraftCampaignV32
	ApplicationvndSbdraftcampaignV33JSON200 *SBDraftCampaignV33
	ApplicationvndErrorV3JSON404            *Error
}

// Status returns HTTPResponse.Status
func (r GetDraftCampaignResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDraftCampaignResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListKeywordsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndSbkeywordV3JSON200  *[]SBKeyword
	ApplicationvndSbkeywordV32JSON200 *[]SBKeyword
}

// Status returns HTTPResponse.Status
func (r ListKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON207 *SBKeywordResponse
}

// Status returns HTTPResponse.Status
func (r CreateKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON207 *SBKeywordResponse
}

// Status returns HTTPResponse.Status
func (r UpdateKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveKeywordResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON200 *SBKeywordResponse
	ApplicationvndErrorV3JSON404             *Error
}

// Status returns HTTPResponse.Status
func (r ArchiveKeywordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveKeywordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeywordResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndSbkeywordV3JSON200 *SBKeyword
	ApplicationvndErrorV3JSON404     *Error
}

// Status returns HTTPResponse.Status
func (r GetKeywordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeywordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSbModerationCampaignsCampaignIdResp struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationvndSbmoderationV3JSON200 *SbModerationCampaignsResponse
	ApplicationvndErrorV3JSON404        *Error
}

// Status returns HTTPResponse.Status
func (r GetSbModerationCampaignsCampaignIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSbModerationCampaignsCampaignIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNegativeKeywordsResp struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndSbnegativekeywordV3JSON200  *[]SBNegativeKeyword
	ApplicationvndSbnegativekeywordV32JSON200 *[]SBNegativeKeyword
}

// Status returns HTTPResponse.Status
func (r ListNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON207 *[]SBKeywordResponse
}

// Status returns HTTPResponse.Status
func (r CreateNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNegativeKeywordsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON207 *[]SBKeywordResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNegativeKeywordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNegativeKeywordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveNegativeKeywordResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbkeywordresponseV3JSON200 *SBKeywordResponse
	ApplicationvndErrorV3JSON404             *Error
}

// Status returns HTTPResponse.Status
func (r ArchiveNegativeKeywordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveNegativeKeywordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNegativeKeywordResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndSbnegativekeywordV3JSON200 *GetSbNegativeKeywords
}

// Status returns HTTPResponse.Status
func (r GetNegativeKeywordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNegativeKeywordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNegativeTargetsResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndSbcreatenegativetargetsrequestV3JSON200 *SBCreateTargetsResponse
	ApplicationvndSberrorV30JSON400                       *BadRequest400
}

// Status returns HTTPResponse.Status
func (r CreateNegativeTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNegativeTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNegativeTargetsResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndUpdatenegativetargetsresponseV3JSON200 *PutSbNegativeTargets
	ApplicationvndSberrorV30JSON400                      *BadRequest400
}

// Status returns HTTPResponse.Status
func (r UpdateNegativeTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNegativeTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNegativeTargetsResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndSblistnegativetargetsresponseV3JSON200 *struct {
		NegativeTargets *[]SBTargetingClause `json:"negativeTargets,omitempty"`

		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken *NextToken `json:"nextToken,omitempty"`
	}
	ApplicationvndSblistnegativetargetsresponseV32JSON200 *struct {
		NegativeTargets *[]SBTargetingClause `json:"negativeTargets,omitempty"`

		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken *NextToken `json:"nextToken,omitempty"`
	}
	ApplicationvndSberrorV30JSON400 *BadRequest400
}

// Status returns HTTPResponse.Status
func (r ListNegativeTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNegativeTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveNegativeTargetResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndSbnegativetargetV3JSON200 *SBTargetingClauseResponse
	ApplicationvndSberrorV30JSON400         *BadRequest400
	ApplicationvndSberrorV30JSON404         *NotFound404
}

// Status returns HTTPResponse.Status
func (r ArchiveNegativeTargetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveNegativeTargetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNegativeTargetResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndSbnegativetargetV3JSON200 *SBNegativeTargetingClause
	ApplicationvndSberrorV30JSON400         *BadRequest400
	ApplicationvndSberrorV30JSON404         *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetNegativeTargetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNegativeTargetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBidsRecommendationsResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbbidsrecommendationV3JSON200 *SDRecommendationsBids
}

// Status returns HTTPResponse.Status
func (r GetBidsRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBidsRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBrandRecommendationsResp struct {
	Body                                                   []byte
	HTTPResponse                                           *http.Response
	ApplicationvndSbbrandrecommendationsresponseV30JSON200 *SbRecommendationsTargetsBrand
}

// Status returns HTTPResponse.Status
func (r GetBrandRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBrandRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetingCategoriesResp struct {
	Body                                                      []byte
	HTTPResponse                                              *http.Response
	ApplicationvndSbcategoryrecommendationsresponseV32JSON200 *SbRecommendationsTargetsCategory
}

// Status returns HTTPResponse.Status
func (r GetTargetingCategoriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetingCategoriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductRecommendationsResp struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	ApplicationvndSbproductrecommendationsresponseV30JSON200 *struct {
		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken           *NextToken `json:"nextToken,omitempty"`
		RecommendedProducts *[]struct {
			// RecommendedTargetAsin The recommended target ASIN.
			RecommendedTargetAsin *string `json:"recommendedTargetAsin,omitempty"`
		} `json:"recommendedProducts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProductRecommendationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductRecommendationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTargetsResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndSbcreatetargetsresponseV3JSON200 *SBCreateTargetsResponse
	ApplicationvndSberrorV30JSON400                *BadRequest400
}

// Status returns HTTPResponse.Status
func (r CreateTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTargetsResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndUpdatetargetsresponseV3JSON200 *PutSbTargetResponse
	ApplicationvndSberrorV30JSON400              *BadRequest400
}

// Status returns HTTPResponse.Status
func (r UpdateTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTargetsResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndSblisttargetsresponseV3JSON200 *struct {
		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken *NextToken `json:"nextToken,omitempty"`
		Targets   *[]struct {
			// AdGroupId The identifier of the ad group to which the target is associated.
			AdGroupId *int64 `json:"adGroupId,omitempty"`

			// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
			Bid *Bid `json:"bid,omitempty"`

			// CampaignId The identifier of the campaign to which the target is associated.
			CampaignId          *int64                  `json:"campaignId,omitempty"`
			Expressions         *[]SBExpression         `json:"expressions,omitempty"`
			ResolvedExpressions *[]SBResolvedExpression `json:"resolvedExpressions,omitempty"`
			State               *SBProductTargetState   `json:"state,omitempty"`

			// TargetId The target identifier.
			TargetId *int64 `json:"targetId,omitempty"`
		} `json:"targets,omitempty"`
	}
	ApplicationvndSblisttargetsresponseV32JSON200 *struct {
		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken *NextToken `json:"nextToken,omitempty"`
		Targets   *[]struct {
			// AdGroupId The identifier of the ad group to which the target is associated.
			AdGroupId *int64 `json:"adGroupId,omitempty"`

			// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
			Bid *Bid `json:"bid,omitempty"`

			// CampaignId The identifier of the campaign to which the target is associated.
			CampaignId          *int64                  `json:"campaignId,omitempty"`
			Expressions         *[]SBExpression         `json:"expressions,omitempty"`
			ResolvedExpressions *[]SBResolvedExpression `json:"resolvedExpressions,omitempty"`
			State               *SBProductTargetState   `json:"state,omitempty"`

			// TargetId The target identifier.
			TargetId *int64 `json:"targetId,omitempty"`
		} `json:"targets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTargetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTargetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveTargetResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndSbtargetresponseV3JSON200 *SBTargetingClauseResponse
	ApplicationvndSberrorV30JSON400         *BadRequest400
	ApplicationvndSberrorV30JSON404         *NotFound404
}

// Status returns HTTPResponse.Status
func (r ArchiveTargetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveTargetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetResp struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndSbtargetV3JSON200 *SBTargetingClause
	ApplicationvndSberrorV30JSON400 *BadRequest400
	ApplicationvndSberrorV30JSON404 *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetTargetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SbCreateThemesResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndSbthemescreateresponseV3JSON200 *SBCreateThemesResponse
	ApplicationvndSberrorV30JSON400               *BadRequest400
}

// Status returns HTTPResponse.Status
func (r SbCreateThemesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SbCreateThemesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SbUpdateThemesResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndSbthemesupdateresponseV3JSON200 *PutSbThemesResponse
	ApplicationvndSberrorV30JSON400               *BadRequest400
}

// Status returns HTTPResponse.Status
func (r SbUpdateThemesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SbUpdateThemesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SbListThemesResp struct {
	Body                                        []byte
	HTTPResponse                                *http.Response
	ApplicationvndSbthemeslistresponseV3JSON200 *struct {
		// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
		NextToken *NextToken `json:"nextToken,omitempty"`
		Themes    *[]SBTheme `json:"themes,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SbListThemesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SbListThemesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAssetsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndMediaassetV3JSON200 *GetStoresAssetsResponse
}

// Status returns HTTPResponse.Status
func (r ListAssetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssetResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostStoresAssetsResponse
}

// Status returns HTTPResponse.Status
func (r CreateAssetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2HsaRecordTypeReportResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2HsaReportResponse
	JSON406      *Error
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r PostV2HsaRecordTypeReportResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2HsaRecordTypeReportResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ReportsReportIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ReportIdResponse
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetV2ReportsReportIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ReportsReportIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadReportResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON429      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DownloadReportResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadReportResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBrandsWithResponse request returning *GetBrandsResp
func (c *ClientWithResponses) GetBrandsWithResponse(ctx context.Context, params *GetBrandsParams) (*GetBrandsResp, error) {
	rsp, err := c.GetBrands(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBrandsResp(rsp)
}

// CompleteUploadWithBodyWithResponse request with arbitrary body returning *CompleteUploadResp
func (c *ClientWithResponses) CompleteUploadWithBodyWithResponse(ctx context.Context, params *CompleteUploadParams, contentType string, body io.Reader) (*CompleteUploadResp, error) {
	rsp, err := c.CompleteUploadWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCompleteUploadResp(rsp)
}

func (c *ClientWithResponses) CompleteUploadWithResponse(ctx context.Context, params *CompleteUploadParams, body CompleteUploadJSONRequestBody) (*CompleteUploadResp, error) {
	rsp, err := c.CompleteUpload(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCompleteUploadResp(rsp)
}

// DescribeMediaWithResponse request returning *DescribeMediaResp
func (c *ClientWithResponses) DescribeMediaWithResponse(ctx context.Context, params *DescribeMediaParams) (*DescribeMediaResp, error) {
	rsp, err := c.DescribeMedia(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDescribeMediaResp(rsp)
}

// CreateUploadResourceWithBodyWithResponse request with arbitrary body returning *CreateUploadResourceResp
func (c *ClientWithResponses) CreateUploadResourceWithBodyWithResponse(ctx context.Context, params *CreateUploadResourceParams, contentType string, body io.Reader) (*CreateUploadResourceResp, error) {
	rsp, err := c.CreateUploadResourceWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUploadResourceResp(rsp)
}

func (c *ClientWithResponses) CreateUploadResourceWithResponse(ctx context.Context, params *CreateUploadResourceParams, body CreateUploadResourceJSONRequestBody) (*CreateUploadResourceResp, error) {
	rsp, err := c.CreateUploadResource(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUploadResourceResp(rsp)
}

// ListAsinsWithResponse request returning *ListAsinsResp
func (c *ClientWithResponses) ListAsinsWithResponse(ctx context.Context, params *ListAsinsParams) (*ListAsinsResp, error) {
	rsp, err := c.ListAsins(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAsinsResp(rsp)
}

// ListAdGroupsWithResponse request returning *ListAdGroupsResp
func (c *ClientWithResponses) ListAdGroupsWithResponse(ctx context.Context, params *ListAdGroupsParams) (*ListAdGroupsResp, error) {
	rsp, err := c.ListAdGroups(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAdGroupsResp(rsp)
}

// GetAdGroupWithResponse request returning *GetAdGroupResp
func (c *ClientWithResponses) GetAdGroupWithResponse(ctx context.Context, adGroupId int64, params *GetAdGroupParams) (*GetAdGroupResp, error) {
	rsp, err := c.GetAdGroup(ctx, adGroupId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdGroupResp(rsp)
}

// ListCampaignsWithResponse request returning *ListCampaignsResp
func (c *ClientWithResponses) ListCampaignsWithResponse(ctx context.Context, params *ListCampaignsParams) (*ListCampaignsResp, error) {
	rsp, err := c.ListCampaigns(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListCampaignsResp(rsp)
}

// CreateCampaignsWithBodyWithResponse request with arbitrary body returning *CreateCampaignsResp
func (c *ClientWithResponses) CreateCampaignsWithBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, contentType string, body io.Reader) (*CreateCampaignsResp, error) {
	rsp, err := c.CreateCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateCampaignsWithApplicationVndCreatecampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV32PlusJSONRequestBody) (*CreateCampaignsResp, error) {
	rsp, err := c.CreateCampaignsWithApplicationVndCreatecampaignsresponseV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateCampaignsWithApplicationVndCreatecampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndCreatecampaignsresponseV33PlusJSONRequestBody) (*CreateCampaignsResp, error) {
	rsp, err := c.CreateCampaignsWithApplicationVndCreatecampaignsresponseV33PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateCampaignsWithApplicationVndSbcreatecampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateCampaignsParams, body CreateCampaignsApplicationVndSbcreatecampaignresponseV3PlusJSONRequestBody) (*CreateCampaignsResp, error) {
	rsp, err := c.CreateCampaignsWithApplicationVndSbcreatecampaignresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignsResp(rsp)
}

// UpdateCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateCampaignsResp
func (c *ClientWithResponses) UpdateCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, contentType string, body io.Reader) (*UpdateCampaignsResp, error) {
	rsp, err := c.UpdateCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateCampaignsWithApplicationVndSbupdatecampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndSbupdatecampaignresponseV3PlusJSONRequestBody) (*UpdateCampaignsResp, error) {
	rsp, err := c.UpdateCampaignsWithApplicationVndSbupdatecampaignresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV32PlusJSONRequestBody) (*UpdateCampaignsResp, error) {
	rsp, err := c.UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *UpdateCampaignsParams, body UpdateCampaignsApplicationVndUpdatecampaignsresponseV33PlusJSONRequestBody) (*UpdateCampaignsResp, error) {
	rsp, err := c.UpdateCampaignsWithApplicationVndUpdatecampaignsresponseV33PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignsResp(rsp)
}

// ArchiveCampaignWithResponse request returning *ArchiveCampaignResp
func (c *ClientWithResponses) ArchiveCampaignWithResponse(ctx context.Context, campaignId int64, params *ArchiveCampaignParams) (*ArchiveCampaignResp, error) {
	rsp, err := c.ArchiveCampaign(ctx, campaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseArchiveCampaignResp(rsp)
}

// GetCampaignWithResponse request returning *GetCampaignResp
func (c *ClientWithResponses) GetCampaignWithResponse(ctx context.Context, campaignId int64, params *GetCampaignParams) (*GetCampaignResp, error) {
	rsp, err := c.GetCampaign(ctx, campaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignResp(rsp)
}

// ListDraftCampaignsWithResponse request returning *ListDraftCampaignsResp
func (c *ClientWithResponses) ListDraftCampaignsWithResponse(ctx context.Context, params *ListDraftCampaignsParams) (*ListDraftCampaignsResp, error) {
	rsp, err := c.ListDraftCampaigns(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListDraftCampaignsResp(rsp)
}

// CreateDraftCampaignsWithBodyWithResponse request with arbitrary body returning *CreateDraftCampaignsResp
func (c *ClientWithResponses) CreateDraftCampaignsWithBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, contentType string, body io.Reader) (*CreateDraftCampaignsResp, error) {
	rsp, err := c.CreateDraftCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV32PlusJSONRequestBody) (*CreateDraftCampaignsResp, error) {
	rsp, err := c.CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndCreatedraftcampaignsresponseV33PlusJSONRequestBody) (*CreateDraftCampaignsResp, error) {
	rsp, err := c.CreateDraftCampaignsWithApplicationVndCreatedraftcampaignsresponseV33PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) CreateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateDraftCampaignsParams, body CreateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*CreateDraftCampaignsResp, error) {
	rsp, err := c.CreateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDraftCampaignsResp(rsp)
}

// UpdateDraftCampaignsWithBodyWithResponse request with arbitrary body returning *UpdateDraftCampaignsResp
func (c *ClientWithResponses) UpdateDraftCampaignsWithBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, contentType string, body io.Reader) (*UpdateDraftCampaignsResp, error) {
	rsp, err := c.UpdateDraftCampaignsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndSbdraftcampaignresponseV3PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error) {
	rsp, err := c.UpdateDraftCampaignsWithApplicationVndSbdraftcampaignresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV32PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error) {
	rsp, err := c.UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDraftCampaignsResp(rsp)
}

func (c *ClientWithResponses) UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDraftCampaignsParams, body UpdateDraftCampaignsApplicationVndUpdatedraftcampaignsresponseV33PlusJSONRequestBody) (*UpdateDraftCampaignsResp, error) {
	rsp, err := c.UpdateDraftCampaignsWithApplicationVndUpdatedraftcampaignsresponseV33PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDraftCampaignsResp(rsp)
}

// SubmitDraftCampaignWithBodyWithResponse request with arbitrary body returning *SubmitDraftCampaignResp
func (c *ClientWithResponses) SubmitDraftCampaignWithBodyWithResponse(ctx context.Context, params *SubmitDraftCampaignParams, contentType string, body io.Reader) (*SubmitDraftCampaignResp, error) {
	rsp, err := c.SubmitDraftCampaignWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitDraftCampaignResp(rsp)
}

func (c *ClientWithResponses) SubmitDraftCampaignWithApplicationVndSbcampaignV3PlusJSONBodyWithResponse(ctx context.Context, params *SubmitDraftCampaignParams, body SubmitDraftCampaignApplicationVndSbcampaignV3PlusJSONRequestBody) (*SubmitDraftCampaignResp, error) {
	rsp, err := c.SubmitDraftCampaignWithApplicationVndSbcampaignV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitDraftCampaignResp(rsp)
}

// DeleteDraftCampaignWithResponse request returning *DeleteDraftCampaignResp
func (c *ClientWithResponses) DeleteDraftCampaignWithResponse(ctx context.Context, draftCampaignId int64, params *DeleteDraftCampaignParams) (*DeleteDraftCampaignResp, error) {
	rsp, err := c.DeleteDraftCampaign(ctx, draftCampaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDraftCampaignResp(rsp)
}

// GetDraftCampaignWithResponse request returning *GetDraftCampaignResp
func (c *ClientWithResponses) GetDraftCampaignWithResponse(ctx context.Context, draftCampaignId int64, params *GetDraftCampaignParams) (*GetDraftCampaignResp, error) {
	rsp, err := c.GetDraftCampaign(ctx, draftCampaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDraftCampaignResp(rsp)
}

// ListKeywordsWithResponse request returning *ListKeywordsResp
func (c *ClientWithResponses) ListKeywordsWithResponse(ctx context.Context, params *ListKeywordsParams) (*ListKeywordsResp, error) {
	rsp, err := c.ListKeywords(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListKeywordsResp(rsp)
}

// CreateKeywordsWithBodyWithResponse request with arbitrary body returning *CreateKeywordsResp
func (c *ClientWithResponses) CreateKeywordsWithBodyWithResponse(ctx context.Context, params *CreateKeywordsParams, contentType string, body io.Reader) (*CreateKeywordsResp, error) {
	rsp, err := c.CreateKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeywordsResp(rsp)
}

func (c *ClientWithResponses) CreateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateKeywordsParams, body CreateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*CreateKeywordsResp, error) {
	rsp, err := c.CreateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeywordsResp(rsp)
}

// UpdateKeywordsWithBodyWithResponse request with arbitrary body returning *UpdateKeywordsResp
func (c *ClientWithResponses) UpdateKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateKeywordsParams, contentType string, body io.Reader) (*UpdateKeywordsResp, error) {
	rsp, err := c.UpdateKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeywordsResp(rsp)
}

func (c *ClientWithResponses) UpdateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateKeywordsParams, body UpdateKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*UpdateKeywordsResp, error) {
	rsp, err := c.UpdateKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeywordsResp(rsp)
}

// ArchiveKeywordWithResponse request returning *ArchiveKeywordResp
func (c *ClientWithResponses) ArchiveKeywordWithResponse(ctx context.Context, keywordId int64, params *ArchiveKeywordParams) (*ArchiveKeywordResp, error) {
	rsp, err := c.ArchiveKeyword(ctx, keywordId, params)
	if err != nil {
		return nil, err
	}
	return ParseArchiveKeywordResp(rsp)
}

// GetKeywordWithResponse request returning *GetKeywordResp
func (c *ClientWithResponses) GetKeywordWithResponse(ctx context.Context, keywordId int64, params *GetKeywordParams) (*GetKeywordResp, error) {
	rsp, err := c.GetKeyword(ctx, keywordId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKeywordResp(rsp)
}

// GetSbModerationCampaignsCampaignIdWithResponse request returning *GetSbModerationCampaignsCampaignIdResp
func (c *ClientWithResponses) GetSbModerationCampaignsCampaignIdWithResponse(ctx context.Context, campaignId int64, params *GetSbModerationCampaignsCampaignIdParams) (*GetSbModerationCampaignsCampaignIdResp, error) {
	rsp, err := c.GetSbModerationCampaignsCampaignId(ctx, campaignId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSbModerationCampaignsCampaignIdResp(rsp)
}

// ListNegativeKeywordsWithResponse request returning *ListNegativeKeywordsResp
func (c *ClientWithResponses) ListNegativeKeywordsWithResponse(ctx context.Context, params *ListNegativeKeywordsParams) (*ListNegativeKeywordsResp, error) {
	rsp, err := c.ListNegativeKeywords(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListNegativeKeywordsResp(rsp)
}

// CreateNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *CreateNegativeKeywordsResp
func (c *ClientWithResponses) CreateNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *CreateNegativeKeywordsParams, contentType string, body io.Reader) (*CreateNegativeKeywordsResp, error) {
	rsp, err := c.CreateNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) CreateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateNegativeKeywordsParams, body CreateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*CreateNegativeKeywordsResp, error) {
	rsp, err := c.CreateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNegativeKeywordsResp(rsp)
}

// UpdateNegativeKeywordsWithBodyWithResponse request with arbitrary body returning *UpdateNegativeKeywordsResp
func (c *ClientWithResponses) UpdateNegativeKeywordsWithBodyWithResponse(ctx context.Context, params *UpdateNegativeKeywordsParams, contentType string, body io.Reader) (*UpdateNegativeKeywordsResp, error) {
	rsp, err := c.UpdateNegativeKeywordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNegativeKeywordsResp(rsp)
}

func (c *ClientWithResponses) UpdateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateNegativeKeywordsParams, body UpdateNegativeKeywordsApplicationVndSbkeywordresponseV3PlusJSONRequestBody) (*UpdateNegativeKeywordsResp, error) {
	rsp, err := c.UpdateNegativeKeywordsWithApplicationVndSbkeywordresponseV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNegativeKeywordsResp(rsp)
}

// ArchiveNegativeKeywordWithResponse request returning *ArchiveNegativeKeywordResp
func (c *ClientWithResponses) ArchiveNegativeKeywordWithResponse(ctx context.Context, keywordId int64, params *ArchiveNegativeKeywordParams) (*ArchiveNegativeKeywordResp, error) {
	rsp, err := c.ArchiveNegativeKeyword(ctx, keywordId, params)
	if err != nil {
		return nil, err
	}
	return ParseArchiveNegativeKeywordResp(rsp)
}

// GetNegativeKeywordWithResponse request returning *GetNegativeKeywordResp
func (c *ClientWithResponses) GetNegativeKeywordWithResponse(ctx context.Context, keywordId int64, params *GetNegativeKeywordParams) (*GetNegativeKeywordResp, error) {
	rsp, err := c.GetNegativeKeyword(ctx, keywordId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNegativeKeywordResp(rsp)
}

// CreateNegativeTargetsWithBodyWithResponse request with arbitrary body returning *CreateNegativeTargetsResp
func (c *ClientWithResponses) CreateNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNegativeTargetsResp, error) {
	rsp, err := c.CreateNegativeTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNegativeTargetsResp(rsp)
}

func (c *ClientWithResponses) CreateNegativeTargetsWithResponse(ctx context.Context, body CreateNegativeTargetsJSONRequestBody) (*CreateNegativeTargetsResp, error) {
	rsp, err := c.CreateNegativeTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNegativeTargetsResp(rsp)
}

// UpdateNegativeTargetsWithBodyWithResponse request with arbitrary body returning *UpdateNegativeTargetsResp
func (c *ClientWithResponses) UpdateNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateNegativeTargetsResp, error) {
	rsp, err := c.UpdateNegativeTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNegativeTargetsResp(rsp)
}

func (c *ClientWithResponses) UpdateNegativeTargetsWithResponse(ctx context.Context, body UpdateNegativeTargetsJSONRequestBody) (*UpdateNegativeTargetsResp, error) {
	rsp, err := c.UpdateNegativeTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNegativeTargetsResp(rsp)
}

// ListNegativeTargetsWithBodyWithResponse request with arbitrary body returning *ListNegativeTargetsResp
func (c *ClientWithResponses) ListNegativeTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ListNegativeTargetsResp, error) {
	rsp, err := c.ListNegativeTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListNegativeTargetsResp(rsp)
}

func (c *ClientWithResponses) ListNegativeTargetsWithResponse(ctx context.Context, body ListNegativeTargetsJSONRequestBody) (*ListNegativeTargetsResp, error) {
	rsp, err := c.ListNegativeTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseListNegativeTargetsResp(rsp)
}

// ArchiveNegativeTargetWithResponse request returning *ArchiveNegativeTargetResp
func (c *ClientWithResponses) ArchiveNegativeTargetWithResponse(ctx context.Context, negativeTargetId SBNegativeTargetId) (*ArchiveNegativeTargetResp, error) {
	rsp, err := c.ArchiveNegativeTarget(ctx, negativeTargetId)
	if err != nil {
		return nil, err
	}
	return ParseArchiveNegativeTargetResp(rsp)
}

// GetNegativeTargetWithResponse request returning *GetNegativeTargetResp
func (c *ClientWithResponses) GetNegativeTargetWithResponse(ctx context.Context, negativeTargetId SBNegativeTargetId) (*GetNegativeTargetResp, error) {
	rsp, err := c.GetNegativeTarget(ctx, negativeTargetId)
	if err != nil {
		return nil, err
	}
	return ParseGetNegativeTargetResp(rsp)
}

// GetBidsRecommendationsWithBodyWithResponse request with arbitrary body returning *GetBidsRecommendationsResp
func (c *ClientWithResponses) GetBidsRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBidsRecommendationsParams, contentType string, body io.Reader) (*GetBidsRecommendationsResp, error) {
	rsp, err := c.GetBidsRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBidsRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetBidsRecommendationsWithResponse(ctx context.Context, params *GetBidsRecommendationsParams, body GetBidsRecommendationsJSONRequestBody) (*GetBidsRecommendationsResp, error) {
	rsp, err := c.GetBidsRecommendations(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBidsRecommendationsResp(rsp)
}

// GetBrandRecommendationsWithBodyWithResponse request with arbitrary body returning *GetBrandRecommendationsResp
func (c *ClientWithResponses) GetBrandRecommendationsWithBodyWithResponse(ctx context.Context, params *GetBrandRecommendationsParams, contentType string, body io.Reader) (*GetBrandRecommendationsResp, error) {
	rsp, err := c.GetBrandRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBrandRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetBrandRecommendationsWithApplicationVndSbbrandrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetBrandRecommendationsParams, body GetBrandRecommendationsApplicationVndSbbrandrecommendationsV30PlusJSONRequestBody) (*GetBrandRecommendationsResp, error) {
	rsp, err := c.GetBrandRecommendationsWithApplicationVndSbbrandrecommendationsV30PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetBrandRecommendationsResp(rsp)
}

// GetTargetingCategoriesWithBodyWithResponse request with arbitrary body returning *GetTargetingCategoriesResp
func (c *ClientWithResponses) GetTargetingCategoriesWithBodyWithResponse(ctx context.Context, params *GetTargetingCategoriesParams, contentType string, body io.Reader) (*GetTargetingCategoriesResp, error) {
	rsp, err := c.GetTargetingCategoriesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetingCategoriesResp(rsp)
}

func (c *ClientWithResponses) GetTargetingCategoriesWithResponse(ctx context.Context, params *GetTargetingCategoriesParams, body GetTargetingCategoriesJSONRequestBody) (*GetTargetingCategoriesResp, error) {
	rsp, err := c.GetTargetingCategories(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetingCategoriesResp(rsp)
}

// GetProductRecommendationsWithBodyWithResponse request with arbitrary body returning *GetProductRecommendationsResp
func (c *ClientWithResponses) GetProductRecommendationsWithBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, contentType string, body io.Reader) (*GetProductRecommendationsResp, error) {
	rsp, err := c.GetProductRecommendationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetProductRecommendationsResp(rsp)
}

func (c *ClientWithResponses) GetProductRecommendationsWithApplicationVndSbproductrecommendationsV30PlusJSONBodyWithResponse(ctx context.Context, params *GetProductRecommendationsParams, body GetProductRecommendationsApplicationVndSbproductrecommendationsV30PlusJSONRequestBody) (*GetProductRecommendationsResp, error) {
	rsp, err := c.GetProductRecommendationsWithApplicationVndSbproductrecommendationsV30PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetProductRecommendationsResp(rsp)
}

// CreateTargetsWithBodyWithResponse request with arbitrary body returning *CreateTargetsResp
func (c *ClientWithResponses) CreateTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTargetsResp, error) {
	rsp, err := c.CreateTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateTargetsResp(rsp)
}

func (c *ClientWithResponses) CreateTargetsWithResponse(ctx context.Context, body CreateTargetsJSONRequestBody) (*CreateTargetsResp, error) {
	rsp, err := c.CreateTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateTargetsResp(rsp)
}

// UpdateTargetsWithBodyWithResponse request with arbitrary body returning *UpdateTargetsResp
func (c *ClientWithResponses) UpdateTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateTargetsResp, error) {
	rsp, err := c.UpdateTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTargetsResp(rsp)
}

func (c *ClientWithResponses) UpdateTargetsWithResponse(ctx context.Context, body UpdateTargetsJSONRequestBody) (*UpdateTargetsResp, error) {
	rsp, err := c.UpdateTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTargetsResp(rsp)
}

// ListTargetsWithBodyWithResponse request with arbitrary body returning *ListTargetsResp
func (c *ClientWithResponses) ListTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ListTargetsResp, error) {
	rsp, err := c.ListTargetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseListTargetsResp(rsp)
}

func (c *ClientWithResponses) ListTargetsWithResponse(ctx context.Context, body ListTargetsJSONRequestBody) (*ListTargetsResp, error) {
	rsp, err := c.ListTargets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseListTargetsResp(rsp)
}

// ArchiveTargetWithResponse request returning *ArchiveTargetResp
func (c *ClientWithResponses) ArchiveTargetWithResponse(ctx context.Context, targetId SBTargetId) (*ArchiveTargetResp, error) {
	rsp, err := c.ArchiveTarget(ctx, targetId)
	if err != nil {
		return nil, err
	}
	return ParseArchiveTargetResp(rsp)
}

// GetTargetWithResponse request returning *GetTargetResp
func (c *ClientWithResponses) GetTargetWithResponse(ctx context.Context, targetId SBTargetId, params *GetTargetParams) (*GetTargetResp, error) {
	rsp, err := c.GetTarget(ctx, targetId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetResp(rsp)
}

// SbCreateThemesWithBodyWithResponse request with arbitrary body returning *SbCreateThemesResp
func (c *ClientWithResponses) SbCreateThemesWithBodyWithResponse(ctx context.Context, params *SbCreateThemesParams, contentType string, body io.Reader) (*SbCreateThemesResp, error) {
	rsp, err := c.SbCreateThemesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSbCreateThemesResp(rsp)
}

func (c *ClientWithResponses) SbCreateThemesWithApplicationVndSbthemescreaterequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbCreateThemesParams, body SbCreateThemesApplicationVndSbthemescreaterequestV3PlusJSONRequestBody) (*SbCreateThemesResp, error) {
	rsp, err := c.SbCreateThemesWithApplicationVndSbthemescreaterequestV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSbCreateThemesResp(rsp)
}

// SbUpdateThemesWithBodyWithResponse request with arbitrary body returning *SbUpdateThemesResp
func (c *ClientWithResponses) SbUpdateThemesWithBodyWithResponse(ctx context.Context, params *SbUpdateThemesParams, contentType string, body io.Reader) (*SbUpdateThemesResp, error) {
	rsp, err := c.SbUpdateThemesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSbUpdateThemesResp(rsp)
}

func (c *ClientWithResponses) SbUpdateThemesWithApplicationVndSbathemessupdaterequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbUpdateThemesParams, body SbUpdateThemesApplicationVndSbathemessupdaterequestV3PlusJSONRequestBody) (*SbUpdateThemesResp, error) {
	rsp, err := c.SbUpdateThemesWithApplicationVndSbathemessupdaterequestV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSbUpdateThemesResp(rsp)
}

// SbListThemesWithBodyWithResponse request with arbitrary body returning *SbListThemesResp
func (c *ClientWithResponses) SbListThemesWithBodyWithResponse(ctx context.Context, params *SbListThemesParams, contentType string, body io.Reader) (*SbListThemesResp, error) {
	rsp, err := c.SbListThemesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSbListThemesResp(rsp)
}

func (c *ClientWithResponses) SbListThemesWithApplicationVndSbthemeslistrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *SbListThemesParams, body SbListThemesApplicationVndSbthemeslistrequestV3PlusJSONRequestBody) (*SbListThemesResp, error) {
	rsp, err := c.SbListThemesWithApplicationVndSbthemeslistrequestV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSbListThemesResp(rsp)
}

// ListAssetsWithResponse request returning *ListAssetsResp
func (c *ClientWithResponses) ListAssetsWithResponse(ctx context.Context, params *ListAssetsParams) (*ListAssetsResp, error) {
	rsp, err := c.ListAssets(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAssetsResp(rsp)
}

// CreateAssetWithBodyWithResponse request with arbitrary body returning *CreateAssetResp
func (c *ClientWithResponses) CreateAssetWithBodyWithResponse(ctx context.Context, params *CreateAssetParams, contentType string, body io.Reader) (*CreateAssetResp, error) {
	rsp, err := c.CreateAssetWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssetResp(rsp)
}

// PostV2HsaRecordTypeReportWithBodyWithResponse request with arbitrary body returning *PostV2HsaRecordTypeReportResp
func (c *ClientWithResponses) PostV2HsaRecordTypeReportWithBodyWithResponse(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, contentType string, body io.Reader) (*PostV2HsaRecordTypeReportResp, error) {
	rsp, err := c.PostV2HsaRecordTypeReportWithBody(ctx, recordType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV2HsaRecordTypeReportResp(rsp)
}

func (c *ClientWithResponses) PostV2HsaRecordTypeReportWithResponse(ctx context.Context, recordType string, params *PostV2HsaRecordTypeReportParams, body PostV2HsaRecordTypeReportJSONRequestBody) (*PostV2HsaRecordTypeReportResp, error) {
	rsp, err := c.PostV2HsaRecordTypeReport(ctx, recordType, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV2HsaRecordTypeReportResp(rsp)
}

// GetV2ReportsReportIdWithResponse request returning *GetV2ReportsReportIdResp
func (c *ClientWithResponses) GetV2ReportsReportIdWithResponse(ctx context.Context, reportId string, params *GetV2ReportsReportIdParams) (*GetV2ReportsReportIdResp, error) {
	rsp, err := c.GetV2ReportsReportId(ctx, reportId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ReportsReportIdResp(rsp)
}

// DownloadReportWithResponse request returning *DownloadReportResp
func (c *ClientWithResponses) DownloadReportWithResponse(ctx context.Context, reportId string, params *DownloadReportParams) (*DownloadReportResp, error) {
	rsp, err := c.DownloadReport(ctx, reportId, params)
	if err != nil {
		return nil, err
	}
	return ParseDownloadReportResp(rsp)
}

// ParseGetBrandsResp parses an HTTP response from a GetBrandsWithResponse call
func ParseGetBrandsResp(rsp *http.Response) (*GetBrandsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBrandsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetBrandResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrandV3JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteUploadResp parses an HTTP response from a CompleteUploadWithResponse call
func ParseCompleteUploadResp(rsp *http.Response) (*CompleteUploadResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteUploadResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// MediaId The Media identifier.
			MediaId *MediaId `json:"mediaId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MediaPublisherAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MediaPublisherAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MediaPublisherAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDescribeMediaResp parses an HTTP response from a DescribeMediaWithResponse call
func ParseDescribeMediaResp(rsp *http.Response) (*DescribeMediaResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DescribeMediaResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateUploadResourceResp parses an HTTP response from a CreateUploadResourceWithResponse call
func ParseCreateUploadResourceResp(rsp *http.Response) (*CreateUploadResourceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUploadResourceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadLocation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MediaPublisherAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest MediaPublisherAPIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAsinsResp parses an HTTP response from a ListAsinsWithResponse call
func ParseListAsinsResp(rsp *http.Response) (*ListAsinsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAsinsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PageAsinsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPageasinsV3JSON200 = &dest

	}

	return response, nil
}

// ParseListAdGroupsResp parses an HTTP response from a ListAdGroupsWithResponse call
func ParseListAdGroupsResp(rsp *http.Response) (*ListAdGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAdGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SBAdGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetAdGroupResp parses an HTTP response from a GetAdGroupWithResponse call
func ParseGetAdGroupResp(rsp *http.Response) (*GetAdGroupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdGroupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBAdGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbadgroupV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseListCampaignsResp parses an HTTP response from a ListCampaignsWithResponse call
func ParseListCampaignsResp(rsp *http.Response) (*ListCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.batchgetcampaignsresponse.v3.2+json" && rsp.StatusCode == 200:
		var dest GetBatchGetCampaignsresponseV32Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBatchgetcampaignsresponseV32JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.batchgetcampaignsresponse.v3.3+json" && rsp.StatusCode == 200:
		var dest GetBatchGetCampaignsresponseV33Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBatchgetcampaignsresponseV33JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbcampaign.v3+json" && rsp.StatusCode == 200:
		var dest []SBListCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignV3JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCampaignsResp parses an HTTP response from a CreateCampaignsWithResponse call
func ParseCreateCampaignsResp(rsp *http.Response) (*CreateCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.createcampaignsresponse.v3.2+json" && rsp.StatusCode == 207:
		var dest PostSbCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCreatecampaignsresponseV32JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.createcampaignsresponse.v3.3+json" && rsp.StatusCode == 207:
		var dest PostSbCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCreatecampaignsresponseV33JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbcreatecampaignresponse.v3+json" && rsp.StatusCode == 207:
		var dest PostSbCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcreatecampaignresponseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCampaignsResp parses an HTTP response from a UpdateCampaignsWithResponse call
func ParseUpdateCampaignsResp(rsp *http.Response) (*UpdateCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbupdatecampaignresponse.v3+json" && rsp.StatusCode == 207:
		var dest []SBUpdateCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbupdatecampaignresponseV3JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.updatecampaignsresponse.v3.2+json" && rsp.StatusCode == 207:
		var dest []SBUpdateCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatecampaignsresponseV32JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.updatecampaignsresponse.v3.3+json" && rsp.StatusCode == 207:
		var dest []SBUpdateCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatecampaignsresponseV33JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseArchiveCampaignResp parses an HTTP response from a ArchiveCampaignWithResponse call
func ParseArchiveCampaignResp(rsp *http.Response) (*ArchiveCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.archivecampaignsresponse.v3.3+json" && rsp.StatusCode == 200:
		var dest SBUpdateCampaignResponseDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndArchivecampaignsresponseV33JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbupdatecampaignresponse.v3+json" && rsp.StatusCode == 200:
		var dest SBUpdateCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbupdatecampaignresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetCampaignResp parses an HTTP response from a GetCampaignWithResponse call
func ParseGetCampaignResp(rsp *http.Response) (*GetCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbcampaign.v3+json" && rsp.StatusCode == 200:
		var dest SBCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbcampaign.v3.2+json" && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignV32JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbcampaign.v3.3+json" && rsp.StatusCode == 200:
		var dest SBCampaignResponseV33
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcampaignV33JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseListDraftCampaignsResp parses an HTTP response from a ListDraftCampaignsWithResponse call
func ParseListDraftCampaignsResp(rsp *http.Response) (*ListDraftCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDraftCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.batchgetdraftcampaignsresponse.v3.2+json" && rsp.StatusCode == 200:
		var dest []SBGetDraftCampaignResponseV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBatchgetdraftcampaignsresponseV32JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.batchgetdraftcampaignsresponse.v3.3+json" && rsp.StatusCode == 200:
		var dest []SBGetDraftCampaignResponseV33
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBatchgetdraftcampaignsresponseV33JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaign.v3+json" && rsp.StatusCode == 200:
		var dest []SBGetDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignV3JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDraftCampaignsResp parses an HTTP response from a CreateDraftCampaignsWithResponse call
func ParseCreateDraftCampaignsResp(rsp *http.Response) (*CreateDraftCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDraftCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.createdraftcampaignsresponse.v3.2+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCreatedraftcampaignsresponseV32JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.createdraftcampaignsresponse.v3.3+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCreatedraftcampaignsresponseV33JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaignresponse.v3+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignresponseV3JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDraftCampaignsResp parses an HTTP response from a UpdateDraftCampaignsWithResponse call
func ParseUpdateDraftCampaignsResp(rsp *http.Response) (*UpdateDraftCampaignsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDraftCampaignsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaignresponse.v3+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignresponseV3JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.updatedraftcampaignsresponse.v3.2+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatedraftcampaignsresponseV32JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.updatedraftcampaignsresponse.v3.3+json" && rsp.StatusCode == 207:
		var dest []SBDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatedraftcampaignsresponseV33JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseSubmitDraftCampaignResp parses an HTTP response from a SubmitDraftCampaignWithResponse call
func ParseSubmitDraftCampaignResp(rsp *http.Response) (*SubmitDraftCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitDraftCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaignresponse.v3+json" && rsp.StatusCode == 207:
		var dest SBSubmitDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignresponseV3JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.submitdraftcampaignsresponse.v3.3+json" && rsp.StatusCode == 207:
		var dest []SBSubmitDraftCampaignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSubmitdraftcampaignsresponseV33JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteDraftCampaignResp parses an HTTP response from a DeleteDraftCampaignWithResponse call
func ParseDeleteDraftCampaignResp(rsp *http.Response) (*DeleteDraftCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDraftCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.deletedraftcampaignsresponse.v3.3+json" && rsp.StatusCode == 200:
		var dest SBDraftCampaignDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDeletedraftcampaignsresponseV33JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaignresponse.v3+json" && rsp.StatusCode == 200:
		var dest SBDraftCampaignDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetDraftCampaignResp parses an HTTP response from a GetDraftCampaignWithResponse call
func ParseGetDraftCampaignResp(rsp *http.Response) (*GetDraftCampaignResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDraftCampaignResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaign.v3+json" && rsp.StatusCode == 200:
		var dest SBDraftCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaign.v3.2+json" && rsp.StatusCode == 200:
		var dest SBDraftCampaignV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignV32JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbdraftcampaign.v3.3+json" && rsp.StatusCode == 200:
		var dest SBDraftCampaignV33
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbdraftcampaignV33JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseListKeywordsResp parses an HTTP response from a ListKeywordsWithResponse call
func ParseListKeywordsResp(rsp *http.Response) (*ListKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbkeyword.v3+json" && rsp.StatusCode == 200:
		var dest []SBKeyword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbkeyword.v3.2+json" && rsp.StatusCode == 200:
		var dest []SBKeyword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordV32JSON200 = &dest

	}

	return response, nil
}

// ParseCreateKeywordsResp parses an HTTP response from a CreateKeywordsWithResponse call
func ParseCreateKeywordsResp(rsp *http.Response) (*CreateKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON207 = &dest

	}

	return response, nil
}

// ParseUpdateKeywordsResp parses an HTTP response from a UpdateKeywordsWithResponse call
func ParseUpdateKeywordsResp(rsp *http.Response) (*UpdateKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON207 = &dest

	}

	return response, nil
}

// ParseArchiveKeywordResp parses an HTTP response from a ArchiveKeywordWithResponse call
func ParseArchiveKeywordResp(rsp *http.Response) (*ArchiveKeywordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveKeywordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetKeywordResp parses an HTTP response from a GetKeywordWithResponse call
func ParseGetKeywordResp(rsp *http.Response) (*GetKeywordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeywordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBKeyword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetSbModerationCampaignsCampaignIdResp parses an HTTP response from a GetSbModerationCampaignsCampaignIdWithResponse call
func ParseGetSbModerationCampaignsCampaignIdResp(rsp *http.Response) (*GetSbModerationCampaignsCampaignIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSbModerationCampaignsCampaignIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SbModerationCampaignsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbmoderationV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseListNegativeKeywordsResp parses an HTTP response from a ListNegativeKeywordsWithResponse call
func ParseListNegativeKeywordsResp(rsp *http.Response) (*ListNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sbnegativekeyword.v3+json" && rsp.StatusCode == 200:
		var dest []SBNegativeKeyword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbnegativekeywordV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sbnegativekeyword.v3.2+json" && rsp.StatusCode == 200:
		var dest []SBNegativeKeyword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbnegativekeywordV32JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNegativeKeywordsResp parses an HTTP response from a CreateNegativeKeywordsWithResponse call
func ParseCreateNegativeKeywordsResp(rsp *http.Response) (*CreateNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest []SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON207 = &dest

	}

	return response, nil
}

// ParseUpdateNegativeKeywordsResp parses an HTTP response from a UpdateNegativeKeywordsWithResponse call
func ParseUpdateNegativeKeywordsResp(rsp *http.Response) (*UpdateNegativeKeywordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNegativeKeywordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest []SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON207 = &dest

	}

	return response, nil
}

// ParseArchiveNegativeKeywordResp parses an HTTP response from a ArchiveNegativeKeywordWithResponse call
func ParseArchiveNegativeKeywordResp(rsp *http.Response) (*ArchiveNegativeKeywordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveNegativeKeywordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBKeywordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbkeywordresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndErrorV3JSON404 = &dest

	}

	return response, nil
}

// ParseGetNegativeKeywordResp parses an HTTP response from a GetNegativeKeywordWithResponse call
func ParseGetNegativeKeywordResp(rsp *http.Response) (*GetNegativeKeywordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNegativeKeywordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSbNegativeKeywords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbnegativekeywordV3JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNegativeTargetsResp parses an HTTP response from a CreateNegativeTargetsWithResponse call
func ParseCreateNegativeTargetsResp(rsp *http.Response) (*CreateNegativeTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNegativeTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBCreateTargetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcreatenegativetargetsrequestV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateNegativeTargetsResp parses an HTTP response from a UpdateNegativeTargetsWithResponse call
func ParseUpdateNegativeTargetsResp(rsp *http.Response) (*UpdateNegativeTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNegativeTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutSbNegativeTargets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatenegativetargetsresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseListNegativeTargetsResp parses an HTTP response from a ListNegativeTargetsWithResponse call
func ParseListNegativeTargetsResp(rsp *http.Response) (*ListNegativeTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNegativeTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sblistnegativetargetsresponse.v3+json" && rsp.StatusCode == 200:
		var dest struct {
			NegativeTargets *[]SBTargetingClause `json:"negativeTargets,omitempty"`

			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken *NextToken `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSblistnegativetargetsresponseV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sblistnegativetargetsresponse.v3.2+json" && rsp.StatusCode == 200:
		var dest struct {
			NegativeTargets *[]SBTargetingClause `json:"negativeTargets,omitempty"`

			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken *NextToken `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSblistnegativetargetsresponseV32JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseArchiveNegativeTargetResp parses an HTTP response from a ArchiveNegativeTargetWithResponse call
func ParseArchiveNegativeTargetResp(rsp *http.Response) (*ArchiveNegativeTargetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveNegativeTargetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingClauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbnegativetargetV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON404 = &dest

	}

	return response, nil
}

// ParseGetNegativeTargetResp parses an HTTP response from a GetNegativeTargetWithResponse call
func ParseGetNegativeTargetResp(rsp *http.Response) (*GetNegativeTargetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNegativeTargetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBNegativeTargetingClause
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbnegativetargetV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON404 = &dest

	}

	return response, nil
}

// ParseGetBidsRecommendationsResp parses an HTTP response from a GetBidsRecommendationsWithResponse call
func ParseGetBidsRecommendationsResp(rsp *http.Response) (*GetBidsRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBidsRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SDRecommendationsBids
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbidsrecommendationV3JSON200 = &dest

	}

	return response, nil
}

// ParseGetBrandRecommendationsResp parses an HTTP response from a GetBrandRecommendationsWithResponse call
func ParseGetBrandRecommendationsResp(rsp *http.Response) (*GetBrandRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBrandRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SbRecommendationsTargetsBrand
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbbrandrecommendationsresponseV30JSON200 = &dest

	}

	return response, nil
}

// ParseGetTargetingCategoriesResp parses an HTTP response from a GetTargetingCategoriesWithResponse call
func ParseGetTargetingCategoriesResp(rsp *http.Response) (*GetTargetingCategoriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetingCategoriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SbRecommendationsTargetsCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcategoryrecommendationsresponseV32JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductRecommendationsResp parses an HTTP response from a GetProductRecommendationsWithResponse call
func ParseGetProductRecommendationsResp(rsp *http.Response) (*GetProductRecommendationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductRecommendationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken           *NextToken `json:"nextToken,omitempty"`
			RecommendedProducts *[]struct {
				// RecommendedTargetAsin The recommended target ASIN.
				RecommendedTargetAsin *string `json:"recommendedTargetAsin,omitempty"`
			} `json:"recommendedProducts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbproductrecommendationsresponseV30JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTargetsResp parses an HTTP response from a CreateTargetsWithResponse call
func ParseCreateTargetsResp(rsp *http.Response) (*CreateTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBCreateTargetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbcreatetargetsresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateTargetsResp parses an HTTP response from a UpdateTargetsWithResponse call
func ParseUpdateTargetsResp(rsp *http.Response) (*UpdateTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutSbTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndUpdatetargetsresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseListTargetsResp parses an HTTP response from a ListTargetsWithResponse call
func ParseListTargetsResp(rsp *http.Response) (*ListTargetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTargetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.sblisttargetsresponse.v3+json" && rsp.StatusCode == 200:
		var dest struct {
			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken *NextToken `json:"nextToken,omitempty"`
			Targets   *[]struct {
				// AdGroupId The identifier of the ad group to which the target is associated.
				AdGroupId *int64 `json:"adGroupId,omitempty"`

				// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
				Bid *Bid `json:"bid,omitempty"`

				// CampaignId The identifier of the campaign to which the target is associated.
				CampaignId          *int64                  `json:"campaignId,omitempty"`
				Expressions         *[]SBExpression         `json:"expressions,omitempty"`
				ResolvedExpressions *[]SBResolvedExpression `json:"resolvedExpressions,omitempty"`
				State               *SBProductTargetState   `json:"state,omitempty"`

				// TargetId The target identifier.
				TargetId *int64 `json:"targetId,omitempty"`
			} `json:"targets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSblisttargetsresponseV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.sblisttargetsresponse.v3.2+json" && rsp.StatusCode == 200:
		var dest struct {
			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken *NextToken `json:"nextToken,omitempty"`
			Targets   *[]struct {
				// AdGroupId The identifier of the ad group to which the target is associated.
				AdGroupId *int64 `json:"adGroupId,omitempty"`

				// Bid The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).
				Bid *Bid `json:"bid,omitempty"`

				// CampaignId The identifier of the campaign to which the target is associated.
				CampaignId          *int64                  `json:"campaignId,omitempty"`
				Expressions         *[]SBExpression         `json:"expressions,omitempty"`
				ResolvedExpressions *[]SBResolvedExpression `json:"resolvedExpressions,omitempty"`
				State               *SBProductTargetState   `json:"state,omitempty"`

				// TargetId The target identifier.
				TargetId *int64 `json:"targetId,omitempty"`
			} `json:"targets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSblisttargetsresponseV32JSON200 = &dest

	}

	return response, nil
}

// ParseArchiveTargetResp parses an HTTP response from a ArchiveTargetWithResponse call
func ParseArchiveTargetResp(rsp *http.Response) (*ArchiveTargetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveTargetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingClauseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON404 = &dest

	}

	return response, nil
}

// ParseGetTargetResp parses an HTTP response from a GetTargetWithResponse call
func ParseGetTargetResp(rsp *http.Response) (*GetTargetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBTargetingClause
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbtargetV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON404 = &dest

	}

	return response, nil
}

// ParseSbCreateThemesResp parses an HTTP response from a SbCreateThemesWithResponse call
func ParseSbCreateThemesResp(rsp *http.Response) (*SbCreateThemesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SbCreateThemesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SBCreateThemesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbthemescreateresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseSbUpdateThemesResp parses an HTTP response from a SbUpdateThemesWithResponse call
func ParseSbUpdateThemesResp(rsp *http.Response) (*SbUpdateThemesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SbUpdateThemesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutSbThemesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbthemesupdateresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSberrorV30JSON400 = &dest

	}

	return response, nil
}

// ParseSbListThemesResp parses an HTTP response from a SbListThemesWithResponse call
func ParseSbListThemesResp(rsp *http.Response) (*SbListThemesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SbListThemesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextToken Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
			NextToken *NextToken `json:"nextToken,omitempty"`
			Themes    *[]SBTheme `json:"themes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSbthemeslistresponseV3JSON200 = &dest

	}

	return response, nil
}

// ParseListAssetsResp parses an HTTP response from a ListAssetsWithResponse call
func ParseListAssetsResp(rsp *http.Response) (*ListAssetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetStoresAssetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndMediaassetV3JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAssetResp parses an HTTP response from a CreateAssetWithResponse call
func ParseCreateAssetResp(rsp *http.Response) (*CreateAssetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostStoresAssetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2HsaRecordTypeReportResp parses an HTTP response from a PostV2HsaRecordTypeReportWithResponse call
func ParsePostV2HsaRecordTypeReportResp(rsp *http.Response) (*PostV2HsaRecordTypeReportResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2HsaRecordTypeReportResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2HsaReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV2ReportsReportIdResp parses an HTTP response from a GetV2ReportsReportIdWithResponse call
func ParseGetV2ReportsReportIdResp(rsp *http.Response) (*GetV2ReportsReportIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ReportsReportIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ReportIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDownloadReportResp parses an HTTP response from a DownloadReportWithResponse call
func ParseDownloadReportResp(rsp *http.Response) (*DownloadReportResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadReportResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
