// Package dsp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package dsp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AapMobileAppTargetingDeviceOrientationTargeting.
const (
	AapMobileAppTargetingDeviceOrientationTargetingANY       AapMobileAppTargetingDeviceOrientationTargeting = "ANY"
	AapMobileAppTargetingDeviceOrientationTargetingLANDSCAPE AapMobileAppTargetingDeviceOrientationTargeting = "LANDSCAPE"
	AapMobileAppTargetingDeviceOrientationTargetingPORTRAIT  AapMobileAppTargetingDeviceOrientationTargeting = "PORTRAIT"
)

// Defines values for AapMobileAppTargetingDeviceTypeTargeting.
const (
	AapMobileAppTargetingDeviceTypeTargetingANDROID      AapMobileAppTargetingDeviceTypeTargeting = "ANDROID"
	AapMobileAppTargetingDeviceTypeTargetingIPAD         AapMobileAppTargetingDeviceTypeTargeting = "IPAD"
	AapMobileAppTargetingDeviceTypeTargetingIPHONE       AapMobileAppTargetingDeviceTypeTargeting = "IPHONE"
	AapMobileAppTargetingDeviceTypeTargetingKINDLEFIRE   AapMobileAppTargetingDeviceTypeTargeting = "KINDLE_FIRE"
	AapMobileAppTargetingDeviceTypeTargetingKINDLEFIREHD AapMobileAppTargetingDeviceTypeTargeting = "KINDLE_FIRE_HD"
)

// Defines values for AapMobileAppTargetingV3DeviceOrientationTargeting.
const (
	AapMobileAppTargetingV3DeviceOrientationTargetingANY       AapMobileAppTargetingV3DeviceOrientationTargeting = "ANY"
	AapMobileAppTargetingV3DeviceOrientationTargetingLANDSCAPE AapMobileAppTargetingV3DeviceOrientationTargeting = "LANDSCAPE"
	AapMobileAppTargetingV3DeviceOrientationTargetingPORTRAIT  AapMobileAppTargetingV3DeviceOrientationTargeting = "PORTRAIT"
)

// Defines values for AapMobileAppTargetingV3DeviceTypeTargeting.
const (
	AapMobileAppTargetingV3DeviceTypeTargetingANDROID      AapMobileAppTargetingV3DeviceTypeTargeting = "ANDROID"
	AapMobileAppTargetingV3DeviceTypeTargetingIPAD         AapMobileAppTargetingV3DeviceTypeTargeting = "IPAD"
	AapMobileAppTargetingV3DeviceTypeTargetingIPHONE       AapMobileAppTargetingV3DeviceTypeTargeting = "IPHONE"
	AapMobileAppTargetingV3DeviceTypeTargetingKINDLEFIRE   AapMobileAppTargetingV3DeviceTypeTargeting = "KINDLE_FIRE"
	AapMobileAppTargetingV3DeviceTypeTargetingKINDLEFIREHD AapMobileAppTargetingV3DeviceTypeTargeting = "KINDLE_FIRE_HD"
)

// Defines values for AudienceFeeFeeName.
const (
	AUTOMOTIVE        AudienceFeeFeeName = "AUTOMOTIVE"
	INMARKETLIFESTYLE AudienceFeeFeeName = "IN_MARKET_LIFESTYLE"
)

// Defines values for AutoOptimization.
const (
	BID    AutoOptimization = "BID"
	BUDGET AutoOptimization = "BUDGET"
)

// Defines values for BiddingStrategy.
const (
	MAXIMIZEPERFORMANCE BiddingStrategy = "MAXIMIZE_PERFORMANCE"
	SPENDBUDGETINFULL   BiddingStrategy = "SPEND_BUDGET_IN_FULL"
)

// Defines values for BrandSuitabilityRiskLevel.
const (
	BrandSuitabilityRiskLevelALLOWALL      BrandSuitabilityRiskLevel = "ALLOW_ALL"
	BrandSuitabilityRiskLevelHIGH          BrandSuitabilityRiskLevel = "HIGH"
	BrandSuitabilityRiskLevelHIGHMEDIUM    BrandSuitabilityRiskLevel = "HIGH_MEDIUM"
	BrandSuitabilityRiskLevelHIGHMEDIUMLOW BrandSuitabilityRiskLevel = "HIGH_MEDIUM_LOW"
)

// Defines values for BudgetCapRecurrenceTimePeriod.
const (
	BudgetCapRecurrenceTimePeriodDAILY    BudgetCapRecurrenceTimePeriod = "DAILY"
	BudgetCapRecurrenceTimePeriodMONTHLY  BudgetCapRecurrenceTimePeriod = "MONTHLY"
	BudgetCapRecurrenceTimePeriodUNCAPPED BudgetCapRecurrenceTimePeriod = "UNCAPPED"
)

// Defines values for CreativeOptionsCreativeRotationType.
const (
	RANDOM   CreativeOptionsCreativeRotationType = "RANDOM"
	WEIGHTED CreativeOptionsCreativeRotationType = "WEIGHTED"
)

// Defines values for CurrencyCode.
const (
	CAD CurrencyCode = "CAD"
	MXN CurrencyCode = "MXN"
	USD CurrencyCode = "USD"
)

// Defines values for DayPartDayOfWeek.
const (
	FRIDAY    DayPartDayOfWeek = "FRIDAY"
	MONDAY    DayPartDayOfWeek = "MONDAY"
	SATURDAY  DayPartDayOfWeek = "SATURDAY"
	SUNDAY    DayPartDayOfWeek = "SUNDAY"
	THURSDAY  DayPartDayOfWeek = "THURSDAY"
	TUESDAY   DayPartDayOfWeek = "TUESDAY"
	WEDNESDAY DayPartDayOfWeek = "WEDNESDAY"
)

// Defines values for DayPartTargetingTimeZonePreference.
const (
	ADSERVERTIMEZONE DayPartTargetingTimeZonePreference = "AD_SERVER_TIMEZONE"
	USERTIMEZONE     DayPartTargetingTimeZonePreference = "USER_TIMEZONE"
)

// Defines values for DealFeeFeeCalculationType.
const (
	FIXEDCPM  DealFeeFeeCalculationType = "FIXED_CPM"
	FLOORRATE DealFeeFeeCalculationType = "FLOOR_RATE"
)

// Defines values for DealInfoDealType.
const (
	DealInfoDealTypePREFERREDDEAL  DealInfoDealType = "PREFERRED_DEAL"
	DealInfoDealTypePRIVATEAUCTION DealInfoDealType = "PRIVATE_AUCTION"
)

// Defines values for DealInfoV12DealType.
const (
	DealInfoV12DealTypePREFERREDDEAL  DealInfoV12DealType = "PREFERRED_DEAL"
	DealInfoV12DealTypePRIVATEAUCTION DealInfoV12DealType = "PRIVATE_AUCTION"
)

// Defines values for DeliveryActivationStatus.
const (
	DeliveryActivationStatusACTIVE   DeliveryActivationStatus = "ACTIVE"
	DeliveryActivationStatusINACTIVE DeliveryActivationStatus = "INACTIVE"
)

// Defines values for DiscoveryLineItemTypes.
const (
	DiscoveryLineItemTypesAAPMOBILEAPP        DiscoveryLineItemTypes = "AAP_MOBILE_APP"
	DiscoveryLineItemTypesAMAZONMOBILEDISPLAY DiscoveryLineItemTypes = "AMAZON_MOBILE_DISPLAY"
	DiscoveryLineItemTypesSTANDARDDISPLAY     DiscoveryLineItemTypes = "STANDARD_DISPLAY"
	DiscoveryLineItemTypesVIDEO               DiscoveryLineItemTypes = "VIDEO"
)

// Defines values for DoubleVerifyBrandSafetyAppAgeRating.
const (
	DoubleVerifyBrandSafetyAppAgeRatingADULTSONLY DoubleVerifyBrandSafetyAppAgeRating = "ADULTS_ONLY"
	DoubleVerifyBrandSafetyAppAgeRatingEVERYONE   DoubleVerifyBrandSafetyAppAgeRating = "EVERYONE"
	DoubleVerifyBrandSafetyAppAgeRatingMATURE     DoubleVerifyBrandSafetyAppAgeRating = "MATURE"
	DoubleVerifyBrandSafetyAppAgeRatingTEEN       DoubleVerifyBrandSafetyAppAgeRating = "TEEN"
	DoubleVerifyBrandSafetyAppAgeRatingTWEENS     DoubleVerifyBrandSafetyAppAgeRating = "TWEENS"
	DoubleVerifyBrandSafetyAppAgeRatingUNKNOWN    DoubleVerifyBrandSafetyAppAgeRating = "UNKNOWN"
)

// Defines values for DoubleVerifyBrandSafetyAppStarRating.
const (
	DoubleVerifyBrandSafetyAppStarRatingALLOWALL          DoubleVerifyBrandSafetyAppStarRating = "ALLOW_ALL"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT15 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_15"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT20 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_20"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT25 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_25"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT30 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_30"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT35 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_35"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT40 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_40"
	DoubleVerifyBrandSafetyAppStarRatingAPPSTARRATINGLT45 DoubleVerifyBrandSafetyAppStarRating = "APP_STAR_RATING_LT_45"
)

// Defines values for DoubleVerifyBrandSafetyHighSeverityContent.
const (
	DoubleVerifyBrandSafetyHighSeverityContentADULTCONTENT                   DoubleVerifyBrandSafetyHighSeverityContent = "ADULT_CONTENT"
	DoubleVerifyBrandSafetyHighSeverityContentDRUGSSUBSTANCES                DoubleVerifyBrandSafetyHighSeverityContent = "DRUGS_SUBSTANCES"
	DoubleVerifyBrandSafetyHighSeverityContentEXTREMEGRAPHICSVIOLENCEWEAPONS DoubleVerifyBrandSafetyHighSeverityContent = "EXTREME_GRAPHICS_VIOLENCE_WEAPONS"
	DoubleVerifyBrandSafetyHighSeverityContentHATESPEECHPROFANITY            DoubleVerifyBrandSafetyHighSeverityContent = "HATE_SPEECH_PROFANITY"
	DoubleVerifyBrandSafetyHighSeverityContentILLEGALACTIVITIES              DoubleVerifyBrandSafetyHighSeverityContent = "ILLEGAL_ACTIVITIES"
	DoubleVerifyBrandSafetyHighSeverityContentINCENTIVIZEDMALWARECLUTTER     DoubleVerifyBrandSafetyHighSeverityContent = "INCENTIVIZED_MALWARE_CLUTTER"
	DoubleVerifyBrandSafetyHighSeverityContentPIRACYCOPYRIGHTINFRINGEMENT    DoubleVerifyBrandSafetyHighSeverityContent = "PIRACY_COPYRIGHT_INFRINGEMENT"
)

// Defines values for DoubleVerifyBrandSafetyMediumSeverityContent.
const (
	DoubleVerifyBrandSafetyMediumSeverityContentADSERVER                        DoubleVerifyBrandSafetyMediumSeverityContent = "AD_SERVER"
	DoubleVerifyBrandSafetyMediumSeverityContentADULTCONTENT                    DoubleVerifyBrandSafetyMediumSeverityContent = "ADULT_CONTENT"
	DoubleVerifyBrandSafetyMediumSeverityContentCELEBRITYGOSSIP                 DoubleVerifyBrandSafetyMediumSeverityContent = "CELEBRITY_GOSSIP"
	DoubleVerifyBrandSafetyMediumSeverityContentCULTSSURVIVALISM                DoubleVerifyBrandSafetyMediumSeverityContent = "CULTS_SURVIVALISM"
	DoubleVerifyBrandSafetyMediumSeverityContentDISASTERAVIATION                DoubleVerifyBrandSafetyMediumSeverityContent = "DISASTER_AVIATION"
	DoubleVerifyBrandSafetyMediumSeverityContentDISASTERMANMADE                 DoubleVerifyBrandSafetyMediumSeverityContent = "DISASTER_MAN_MADE"
	DoubleVerifyBrandSafetyMediumSeverityContentDISASTERNATURAL                 DoubleVerifyBrandSafetyMediumSeverityContent = "DISASTER_NATURAL"
	DoubleVerifyBrandSafetyMediumSeverityContentDISASTERTERRORISTSEVENTS        DoubleVerifyBrandSafetyMediumSeverityContent = "DISASTER_TERRORISTS_EVENTS"
	DoubleVerifyBrandSafetyMediumSeverityContentDISASTERVEHICLE                 DoubleVerifyBrandSafetyMediumSeverityContent = "DISASTER_VEHICLE"
	DoubleVerifyBrandSafetyMediumSeverityContentDRUGSALCOHOL                    DoubleVerifyBrandSafetyMediumSeverityContent = "DRUGS_ALCOHOL"
	DoubleVerifyBrandSafetyMediumSeverityContentDRUGSSMOKING                    DoubleVerifyBrandSafetyMediumSeverityContent = "DRUGS_SMOKING"
	DoubleVerifyBrandSafetyMediumSeverityContentGAMBLING                        DoubleVerifyBrandSafetyMediumSeverityContent = "GAMBLING"
	DoubleVerifyBrandSafetyMediumSeverityContentINFLAMMATORYPOLITICSNEWS        DoubleVerifyBrandSafetyMediumSeverityContent = "INFLAMMATORY_POLITICS_NEWS"
	DoubleVerifyBrandSafetyMediumSeverityContentNEGATIVENEWSFINANCIAL           DoubleVerifyBrandSafetyMediumSeverityContent = "NEGATIVE_NEWS_FINANCIAL"
	DoubleVerifyBrandSafetyMediumSeverityContentNEGATIVENEWSPHARMACEUTICAL      DoubleVerifyBrandSafetyMediumSeverityContent = "NEGATIVE_NEWS_PHARMACEUTICAL"
	DoubleVerifyBrandSafetyMediumSeverityContentNONSTANDARDCONTENTNONENGLISH    DoubleVerifyBrandSafetyMediumSeverityContent = "NON_STANDARD_CONTENT_NON_ENGLISH"
	DoubleVerifyBrandSafetyMediumSeverityContentNONSTANDARDCONTENTPARKINGPAGE   DoubleVerifyBrandSafetyMediumSeverityContent = "NON_STANDARD_CONTENT_PARKING_PAGE"
	DoubleVerifyBrandSafetyMediumSeverityContentOCCULT                          DoubleVerifyBrandSafetyMediumSeverityContent = "OCCULT"
	DoubleVerifyBrandSafetyMediumSeverityContentSEXEDUCATION                    DoubleVerifyBrandSafetyMediumSeverityContent = "SEX_EDUCATION"
	DoubleVerifyBrandSafetyMediumSeverityContentUNMODERATEDUGCFORUMSIMAGESVIDEO DoubleVerifyBrandSafetyMediumSeverityContent = "UNMODERATED_UGC_FORUMS_IMAGES_VIDEO"
)

// Defines values for DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites.
const (
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesALLOWALL                DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "ALLOW_ALL"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE02  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_02"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE04  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_04"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE06  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_06"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE08  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_08"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE10  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_10"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE100 DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_100"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE25  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_25"
	DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesFRAUDTRAFFICLEVELGTE50  DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites = "FRAUD_TRAFFIC_LEVEL_GTE_50"
)

// Defines values for DoubleVerifyViewabilityBrandExposureViewabilityTargeting.
const (
	DoubleVerifyViewabilityBrandExposureViewabilityTargetingALLOWALL                                    DoubleVerifyViewabilityBrandExposureViewabilityTargeting = "ALLOW_ALL"
	DoubleVerifyViewabilityBrandExposureViewabilityTargetingBRANDEXPOSUREVIEWABILITYGTE10SECAVGDURATION DoubleVerifyViewabilityBrandExposureViewabilityTargeting = "BRAND_EXPOSURE_VIEWABILITY_GTE_10_SEC_AVG_DURATION"
	DoubleVerifyViewabilityBrandExposureViewabilityTargetingBRANDEXPOSUREVIEWABILITYGTE15SECAVGDURATION DoubleVerifyViewabilityBrandExposureViewabilityTargeting = "BRAND_EXPOSURE_VIEWABILITY_GTE_15_SEC_AVG_DURATION"
	DoubleVerifyViewabilityBrandExposureViewabilityTargetingBRANDEXPOSUREVIEWABILITYGTE5SECAVGDURATION  DoubleVerifyViewabilityBrandExposureViewabilityTargeting = "BRAND_EXPOSURE_VIEWABILITY_GTE_5_SEC_AVG_DURATION"
)

// Defines values for DoubleVerifyViewabilityMrcViewabilityTargeting.
const (
	DoubleVerifyViewabilityMrcViewabilityTargetingALLOWALL            DoubleVerifyViewabilityMrcViewabilityTargeting = "ALLOW_ALL"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE30 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_30"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE40 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_40"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE50 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_50"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE55 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_55"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE60 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_60"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE65 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_65"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE70 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_70"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE75 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_75"
	DoubleVerifyViewabilityMrcViewabilityTargetingMRCVIEWABILITYGTE80 DoubleVerifyViewabilityMrcViewabilityTargeting = "MRC_VIEWABILITY_GTE_80"
)

// Defines values for DspAdChoicesPositionV1.
const (
	BOTTOMLEFT  DspAdChoicesPositionV1 = "BOTTOM_LEFT"
	BOTTOMRIGHT DspAdChoicesPositionV1 = "BOTTOM_RIGHT"
	TOPLEFT     DspAdChoicesPositionV1 = "TOP_LEFT"
	TOPRIGHT    DspAdChoicesPositionV1 = "TOP_RIGHT"
)

// Defines values for DspClickThroughAndroidAppDownloadActionV1StorePriority.
const (
	AMAZONAPPSTORETHENPLAYSTORE DspClickThroughAndroidAppDownloadActionV1StorePriority = "AMAZON_APP_STORE_THEN_PLAY_STORE"
	PLAYSTORETHENAMAZONAPPSTORE DspClickThroughAndroidAppDownloadActionV1StorePriority = "PLAY_STORE_THEN_AMAZON_APP_STORE"
)

// Defines values for DspClickThroughDestinationV1.
const (
	DspClickThroughDestinationV1AMAZON DspClickThroughDestinationV1 = "AMAZON"
	DspClickThroughDestinationV1OTHER  DspClickThroughDestinationV1 = "OTHER"
)

// Defines values for DspCreativeApprovalStatusV1.
const (
	APPROVED               DspCreativeApprovalStatusV1 = "APPROVED"
	APPROVEDWITHEXCEPTIONS DspCreativeApprovalStatusV1 = "APPROVED_WITH_EXCEPTIONS"
	NOTAPPROVED            DspCreativeApprovalStatusV1 = "NOT_APPROVED"
	PENDING                DspCreativeApprovalStatusV1 = "PENDING"
	WAITINGFORLINEITEM     DspCreativeApprovalStatusV1 = "WAITING_FOR_LINEITEM"
)

// Defines values for DspCreativeMarketplaceV1.
const (
	DspCreativeMarketplaceV1US DspCreativeMarketplaceV1 = "US"
)

// Defines values for DspCreativeSupplyV1.
const (
	DspCreativeSupplyV1DESKTOP   DspCreativeSupplyV1 = "DESKTOP"
	DspCreativeSupplyV1MOBILEAAP DspCreativeSupplyV1 = "MOBILE_AAP"
	DspCreativeSupplyV1MOBILEOO  DspCreativeSupplyV1 = "MOBILE_OO"
)

// Defines values for DspRecFormatV1.
const (
	ADDTOCART DspRecFormatV1 = "ADD_TO_CART"
	COUPON    DspRecFormatV1 = "COUPON"
	SHOPNOW   DspRecFormatV1 = "SHOP_NOW"
)

// Defines values for DspRecOptimizationGoalV1.
const (
	DspRecOptimizationGoalV1CLICKTHROUGHRATE   DspRecOptimizationGoalV1 = "CLICK_THROUGH_RATE"
	DspRecOptimizationGoalV1DETAILPAGEVIEWRATE DspRecOptimizationGoalV1 = "DETAIL_PAGE_VIEW_RATE"
	DspRecOptimizationGoalV1PURCHASERATE       DspRecOptimizationGoalV1 = "PURCHASE_RATE"
)

// Defines values for DspThirdPartyTrackerTypeV1.
const (
	IMPRESSION DspThirdPartyTrackerTypeV1 = "IMPRESSION"
)

// Defines values for DvBrandSafetyAppStarRating.
const (
	DvBrandSafetyAppStarRatingALLOWALL                    DvBrandSafetyAppStarRating = "ALLOW_ALL"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT1POINT5STARS DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_1_POINT_5_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT2POINT5STARS DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_2_POINT_5_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT2STARS       DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_2_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT3POINT5STARS DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_3_POINT_5_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT3STARS       DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_3_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT4POINT5STARS DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_4_POINT_5_STARS"
	DvBrandSafetyAppStarRatingAPPSTARRATINGLT4STARS       DvBrandSafetyAppStarRating = "APP_STAR_RATING_LT_4_STARS"
)

// Defines values for FrequencyCapTimeUnit.
const (
	DAYS  FrequencyCapTimeUnit = "DAYS"
	HOURS FrequencyCapTimeUnit = "HOURS"
)

// Defines values for FrequencyCapType.
const (
	FrequencyCapTypeCUSTOM   FrequencyCapType = "CUSTOM"
	FrequencyCapTypeUNCAPPED FrequencyCapType = "UNCAPPED"
)

// Defines values for GeoLocationCategory.
const (
	CITY       GeoLocationCategory = "CITY"
	COUNTRY    GeoLocationCategory = "COUNTRY"
	DMA        GeoLocationCategory = "DMA"
	POSTALCODE GeoLocationCategory = "POSTAL_CODE"
	STATE      GeoLocationCategory = "STATE"
)

// Defines values for GeoLocationTargetingLocationTargetingBy.
const (
	IPADDRESS           GeoLocationTargetingLocationTargetingBy = "IPADDRESS"
	IPADDRESSPOSTALCODE GeoLocationTargetingLocationTargetingBy = "IPADDRESS_POSTALCODE"
)

// Defines values for Goal.
const (
	GoalAWARENESS              Goal = "AWARENESS"
	GoalCONSIDERATIONSONAMAZON Goal = "CONSIDERATIONS_ON_AMAZON"
	GoalCONVERSIONSOFFAMAZON   Goal = "CONVERSIONS_OFF_AMAZON"
	GoalENGAGEMENTWITHMYAD     Goal = "ENGAGEMENT_WITH_MY_AD"
	GoalMOBILEAPPINSTALLS      Goal = "MOBILE_APP_INSTALLS"
	GoalPURCHASESONAMAZON      Goal = "PURCHASES_ON_AMAZON"
)

// Defines values for GoalKpi.
const (
	GoalKpiCLICKTHROUGHRATE       GoalKpi = "CLICK_THROUGH_RATE"
	GoalKpiCOSTPERACQUISITION     GoalKpi = "COST_PER_ACQUISITION"
	GoalKpiCOSTPERCLICK           GoalKpi = "COST_PER_CLICK"
	GoalKpiCOSTPERDETAILPAGEVIEW  GoalKpi = "COST_PER_DETAIL_PAGE_VIEW"
	GoalKpiCOSTPERVIDEOCOMPLETION GoalKpi = "COST_PER_VIDEO_COMPLETION"
	GoalKpiDETAILPAGEVIEWRATE     GoalKpi = "DETAIL_PAGE_VIEW_RATE"
	GoalKpiNONE                   GoalKpi = "NONE"
	GoalKpiOTHER                  GoalKpi = "OTHER"
	GoalKpiREACH                  GoalKpi = "REACH"
	GoalKpiRETURNONADSPEND        GoalKpi = "RETURN_ON_AD_SPEND"
	GoalKpiTOTALRETURNONADSPEND   GoalKpi = "TOTAL_RETURN_ON_AD_SPEND"
	GoalKpiVIDEOCOMPLETIONRATE    GoalKpi = "VIDEO_COMPLETION_RATE"
)

// Defines values for GoalKpiV11.
const (
	GoalKpiV11CLICKTHROUGHRATE         GoalKpiV11 = "CLICK_THROUGH_RATE"
	GoalKpiV11COMBINEDRETURNONADSPEND  GoalKpiV11 = "COMBINED_RETURN_ON_AD_SPEND"
	GoalKpiV11COSTPERACTION            GoalKpiV11 = "COST_PER_ACTION"
	GoalKpiV11COSTPERCLICK             GoalKpiV11 = "COST_PER_CLICK"
	GoalKpiV11COSTPERDETAILPAGEVIEW    GoalKpiV11 = "COST_PER_DETAIL_PAGE_VIEW"
	GoalKpiV11COSTPERFIRSTAPPOPEN      GoalKpiV11 = "COST_PER_FIRST_APP_OPEN"
	GoalKpiV11COSTPERINSTALL           GoalKpiV11 = "COST_PER_INSTALL"
	GoalKpiV11COSTPERVIDEOCOMPLETION   GoalKpiV11 = "COST_PER_VIDEO_COMPLETION"
	GoalKpiV11DETAILPAGEVIEWRATE       GoalKpiV11 = "DETAIL_PAGE_VIEW_RATE"
	GoalKpiV11NONE                     GoalKpiV11 = "NONE"
	GoalKpiV11OTHER                    GoalKpiV11 = "OTHER"
	GoalKpiV11REACH                    GoalKpiV11 = "REACH"
	GoalKpiV11RETURNONADSPEND          GoalKpiV11 = "RETURN_ON_AD_SPEND"
	GoalKpiV11TOTALCOSTPERSUBSCRIPTION GoalKpiV11 = "TOTAL_COST_PER_SUBSCRIPTION"
	GoalKpiV11TOTALRETURNONADSPEND     GoalKpiV11 = "TOTAL_RETURN_ON_AD_SPEND"
	GoalKpiV11VIDEOCOMPLETIONRATE      GoalKpiV11 = "VIDEO_COMPLETION_RATE"
)

// Defines values for IasBrandSafetyLevel.
const (
	IasBrandSafetyLevelALLOWALL                             IasBrandSafetyLevel = "ALLOW_ALL"
	IasBrandSafetyLevelBRANDSAFETYEXCLUEHIGHANDMODERATERISK IasBrandSafetyLevel = "BRAND_SAFETY_EXCLUE_HIGH_AND_MODERATE_RISK"
	IasBrandSafetyLevelBRANDSAFETYEXCLUEHIGHRISK            IasBrandSafetyLevel = "BRAND_SAFETY_EXCLUE_HIGH_RISK"
)

// Defines values for IasBrandSafetyLevelV3.
const (
	IasBrandSafetyLevelV3ALLOWALL                              IasBrandSafetyLevelV3 = "ALLOW_ALL"
	IasBrandSafetyLevelV3BRANDSAFETYEXCLUDEHIGHANDMODERATERISK IasBrandSafetyLevelV3 = "BRAND_SAFETY_EXCLUDE_HIGH_AND_MODERATE_RISK"
	IasBrandSafetyLevelV3BRANDSAFETYEXCLUDEHIGHRISK            IasBrandSafetyLevelV3 = "BRAND_SAFETY_EXCLUDE_HIGH_RISK"
)

// Defines values for IasFraudInvalidTraffic.
const (
	IasFraudInvalidTrafficALLOWALL                                   IasFraudInvalidTraffic = "ALLOW_ALL"
	IasFraudInvalidTrafficFRAUDINVALIDTRAFFICEXCLUDEHIGHMODERATERISK IasFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_MODERATE_RISK"
	IasFraudInvalidTrafficFRAUDINVALIDTRAFFICEXCLUDEHIGHRISK         IasFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_RISK"
)

// Defines values for IasViewabilityStandard.
const (
	IasViewabilityStandardGROUPM   IasViewabilityStandard = "GROUPM"
	IasViewabilityStandardMRC      IasViewabilityStandard = "MRC"
	IasViewabilityStandardNONE     IasViewabilityStandard = "NONE"
	IasViewabilityStandardPUBLICIS IasViewabilityStandard = "PUBLICIS"
)

// Defines values for IntegralAdScienceFraudInvalidTraffic.
const (
	IntegralAdScienceFraudInvalidTrafficALLOWALL                                   IntegralAdScienceFraudInvalidTraffic = "ALLOW_ALL"
	IntegralAdScienceFraudInvalidTrafficFRAUDINVALIDTRAFFICEXCLUDEHIGHMODERATERISK IntegralAdScienceFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_MODERATE_RISK"
	IntegralAdScienceFraudInvalidTrafficFRAUDINVALIDTRAFFICEXCLUDEHIGHRISK         IntegralAdScienceFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_RISK"
)

// Defines values for LineItemCreativeAssociationOperation.
const (
	CREATE LineItemCreativeAssociationOperation = "CREATE"
	DELETE LineItemCreativeAssociationOperation = "DELETE"
)

// Defines values for LineItemDeliveryStatus.
const (
	LineItemDeliveryStatusCREATIVESNOTRUNNING LineItemDeliveryStatus = "CREATIVES_NOT_RUNNING"
	LineItemDeliveryStatusDELIVERING          LineItemDeliveryStatus = "DELIVERING"
	LineItemDeliveryStatusENDED               LineItemDeliveryStatus = "ENDED"
	LineItemDeliveryStatusINACTIVE            LineItemDeliveryStatus = "INACTIVE"
	LineItemDeliveryStatusOUTOFBUDGET         LineItemDeliveryStatus = "OUT_OF_BUDGET"
	LineItemDeliveryStatusREADYTODELIVER      LineItemDeliveryStatus = "READY_TO_DELIVER"
)

// Defines values for LineItemType.
const (
	LineItemTypeAAPMOBILEAPP        LineItemType = "AAP_MOBILE_APP"
	LineItemTypeAMAZONMOBILEDISPLAY LineItemType = "AMAZON_MOBILE_DISPLAY"
	LineItemTypeSTANDARDDISPLAY     LineItemType = "STANDARD_DISPLAY"
)

// Defines values for MergedDomainListDomainListMergedTargetingType.
const (
	MergedDomainListDomainListMergedTargetingTypeEXCLUDE MergedDomainListDomainListMergedTargetingType = "EXCLUDE"
	MergedDomainListDomainListMergedTargetingTypeINCLUDE MergedDomainListDomainListMergedTargetingType = "INCLUDE"
)

// Defines values for MobileAppTargetingAppTargetingOption.
const (
	EXCLUDEAPPS MobileAppTargetingAppTargetingOption = "EXCLUDE_APPS"
	INCLUDEAPPS MobileAppTargetingAppTargetingOption = "INCLUDE_APPS"
)

// Defines values for MobileOsTargeting.
const (
	MobileOsTargetingANDROID MobileOsTargeting = "ANDROID"
	MobileOsTargetingANY     MobileOsTargeting = "ANY"
	MobileOsTargetingIOS     MobileOsTargeting = "IOS"
)

// Defines values for ODCViewabilityStandard.
const (
	ODCViewabilityStandardMRC  ODCViewabilityStandard = "MRC"
	ODCViewabilityStandardNONE ODCViewabilityStandard = "NONE"
)

// Defines values for ODCViewabilityViewabilityTargeting.
const (
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT20 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_20"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT30 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_30"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT40 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_40"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT50 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_50"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT60 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_60"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT70 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_70"
	ODCViewabilityViewabilityTargetingVIEWABILITYTIERGT80 ODCViewabilityViewabilityTargeting = "VIEWABILITY_TIER_GT_80"
)

// Defines values for OptimizationGoal.
const (
	OptimizationGoalAWARENESS              OptimizationGoal = "AWARENESS"
	OptimizationGoalCONSIDERATIONSONAMAZON OptimizationGoal = "CONSIDERATIONS_ON_AMAZON"
	OptimizationGoalCONVERSIONSOFFAMAZON   OptimizationGoal = "CONVERSIONS_OFF_AMAZON"
	OptimizationGoalENGAGEMENTWITHMYAD     OptimizationGoal = "ENGAGEMENT_WITH_MY_AD"
	OptimizationGoalMOBILEAPPINSTALLS      OptimizationGoal = "MOBILE_APP_INSTALLS"
	OptimizationGoalPURCHASESONAMAZON      OptimizationGoal = "PURCHASES_ON_AMAZON"
)

// Defines values for OptimizationGoalKpi.
const (
	OptimizationGoalKpiCLICKTHROUGHRATE       OptimizationGoalKpi = "CLICK_THROUGH_RATE"
	OptimizationGoalKpiCOSTPERACQUISITION     OptimizationGoalKpi = "COST_PER_ACQUISITION"
	OptimizationGoalKpiCOSTPERCLICK           OptimizationGoalKpi = "COST_PER_CLICK"
	OptimizationGoalKpiCOSTPERDETAILPAGEVIEW  OptimizationGoalKpi = "COST_PER_DETAIL_PAGE_VIEW"
	OptimizationGoalKpiCOSTPERDOWNLOAD        OptimizationGoalKpi = "COST_PER_DOWNLOAD"
	OptimizationGoalKpiCOSTPERVIDEOCOMPLETION OptimizationGoalKpi = "COST_PER_VIDEO_COMPLETION"
	OptimizationGoalKpiDETAILPAGEVIEWRATE     OptimizationGoalKpi = "DETAIL_PAGE_VIEW_RATE"
	OptimizationGoalKpiNONE                   OptimizationGoalKpi = "NONE"
	OptimizationGoalKpiOTHER                  OptimizationGoalKpi = "OTHER"
	OptimizationGoalKpiREACH                  OptimizationGoalKpi = "REACH"
	OptimizationGoalKpiRETURNONADSPEND        OptimizationGoalKpi = "RETURN_ON_AD_SPEND"
	OptimizationGoalKpiTOTALRETURNONADSPEND   OptimizationGoalKpi = "TOTAL_RETURN_ON_AD_SPEND"
	OptimizationGoalKpiVIDEOCOMPLETIONRATE    OptimizationGoalKpi = "VIDEO_COMPLETION_RATE"
)

// Defines values for OptimizationGoalKpiV24.
const (
	OptimizationGoalKpiV24CLICKTHROUGHRATE         OptimizationGoalKpiV24 = "CLICK_THROUGH_RATE"
	OptimizationGoalKpiV24COMBINEDRETURNONADSPEND  OptimizationGoalKpiV24 = "COMBINED_RETURN_ON_AD_SPEND"
	OptimizationGoalKpiV24COSTPERACTION            OptimizationGoalKpiV24 = "COST_PER_ACTION"
	OptimizationGoalKpiV24COSTPERCLICK             OptimizationGoalKpiV24 = "COST_PER_CLICK"
	OptimizationGoalKpiV24COSTPERDETAILPAGEVIEW    OptimizationGoalKpiV24 = "COST_PER_DETAIL_PAGE_VIEW"
	OptimizationGoalKpiV24COSTPERFIRSTAPPOPEN      OptimizationGoalKpiV24 = "COST_PER_FIRST_APP_OPEN"
	OptimizationGoalKpiV24COSTPERINSTALL           OptimizationGoalKpiV24 = "COST_PER_INSTALL"
	OptimizationGoalKpiV24COSTPERVIDEOCOMPLETION   OptimizationGoalKpiV24 = "COST_PER_VIDEO_COMPLETION"
	OptimizationGoalKpiV24DETAILPAGEVIEWRATE       OptimizationGoalKpiV24 = "DETAIL_PAGE_VIEW_RATE"
	OptimizationGoalKpiV24NONE                     OptimizationGoalKpiV24 = "NONE"
	OptimizationGoalKpiV24OTHER                    OptimizationGoalKpiV24 = "OTHER"
	OptimizationGoalKpiV24REACH                    OptimizationGoalKpiV24 = "REACH"
	OptimizationGoalKpiV24RETURNONADSPEND          OptimizationGoalKpiV24 = "RETURN_ON_AD_SPEND"
	OptimizationGoalKpiV24TOTALCOSTPERSUBSCRIPTION OptimizationGoalKpiV24 = "TOTAL_COST_PER_SUBSCRIPTION"
	OptimizationGoalKpiV24TOTALRETURNONADSPEND     OptimizationGoalKpiV24 = "TOTAL_RETURN_ON_AD_SPEND"
	OptimizationGoalKpiV24VIDEOCOMPLETIONRATE      OptimizationGoalKpiV24 = "VIDEO_COMPLETION_RATE"
)

// Defines values for OracleDataCloudFraudInvalidTraffic.
const (
	ALLOWALL                               OracleDataCloudFraudInvalidTraffic = "ALLOW_ALL"
	FRAUDINVALIDTRAFFICESSENTIALPROTECTION OracleDataCloudFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_ESSENTIAL_PROTECTION"
	FRAUDINVALIDTRAFFICMAXIMUMPROTECTION   OracleDataCloudFraudInvalidTraffic = "FRAUD_INVALID_TRAFFIC_MAXIMUM_PROTECTION"
)

// Defines values for OracleDataCloudBrandSafetyEssentialProtection.
const (
	OracleDataCloudBrandSafetyEssentialProtectionADULT      OracleDataCloudBrandSafetyEssentialProtection = "ADULT"
	OracleDataCloudBrandSafetyEssentialProtectionARMS       OracleDataCloudBrandSafetyEssentialProtection = "ARMS"
	OracleDataCloudBrandSafetyEssentialProtectionCRIME      OracleDataCloudBrandSafetyEssentialProtection = "CRIME"
	OracleDataCloudBrandSafetyEssentialProtectionDRUGS      OracleDataCloudBrandSafetyEssentialProtection = "DRUGS"
	OracleDataCloudBrandSafetyEssentialProtectionHATESPEECH OracleDataCloudBrandSafetyEssentialProtection = "HATE_SPEECH"
	OracleDataCloudBrandSafetyEssentialProtectionINJURY     OracleDataCloudBrandSafetyEssentialProtection = "INJURY"
	OracleDataCloudBrandSafetyEssentialProtectionMILITARY   OracleDataCloudBrandSafetyEssentialProtection = "MILITARY"
	OracleDataCloudBrandSafetyEssentialProtectionOBSCENITY  OracleDataCloudBrandSafetyEssentialProtection = "OBSCENITY"
	OracleDataCloudBrandSafetyEssentialProtectionPIRACY     OracleDataCloudBrandSafetyEssentialProtection = "PIRACY"
	OracleDataCloudBrandSafetyEssentialProtectionTERRORISM  OracleDataCloudBrandSafetyEssentialProtection = "TERRORISM"
	OracleDataCloudBrandSafetyEssentialProtectionTOBACCO    OracleDataCloudBrandSafetyEssentialProtection = "TOBACCO"
)

// Defines values for OracleDataCloudBrandSafetyTargetingOption.
const (
	ESSENTIALPROTECTION OracleDataCloudBrandSafetyTargetingOption = "ESSENTIAL_PROTECTION"
	MAXIMUMPROTECTION   OracleDataCloudBrandSafetyTargetingOption = "MAXIMUM_PROTECTION"
	NOBRANDSAFETY       OracleDataCloudBrandSafetyTargetingOption = "NO_BRAND_SAFETY"
)

// Defines values for OrderDeliveryStatus.
const (
	DELIVERING          OrderDeliveryStatus = "DELIVERING"
	ENDED               OrderDeliveryStatus = "ENDED"
	INACTIVE            OrderDeliveryStatus = "INACTIVE"
	LINEITEMSNOTRUNNING OrderDeliveryStatus = "LINEITEMS_NOT_RUNNING"
	OUTOFBUDGET         OrderDeliveryStatus = "OUT_OF_BUDGET"
	READYTODELIVER      OrderDeliveryStatus = "READY_TO_DELIVER"
)

// Defines values for OttContentGenres.
const (
	OttContentGenresACTION            OttContentGenres = "ACTION"
	OttContentGenresADVENTURE         OttContentGenres = "ADVENTURE"
	OttContentGenresANIMATION         OttContentGenres = "ANIMATION"
	OttContentGenresBIOGRAPHY         OttContentGenres = "BIOGRAPHY"
	OttContentGenresCOMEDY            OttContentGenres = "COMEDY"
	OttContentGenresCRIME             OttContentGenres = "CRIME"
	OttContentGenresDOCUMENTARY       OttContentGenres = "DOCUMENTARY"
	OttContentGenresDRAMA             OttContentGenres = "DRAMA"
	OttContentGenresFAMILY            OttContentGenres = "FAMILY"
	OttContentGenresFANTASY           OttContentGenres = "FANTASY"
	OttContentGenresFILMNOIR          OttContentGenres = "FILM_NOIR"
	OttContentGenresGAMESHOW          OttContentGenres = "GAME_SHOW"
	OttContentGenresGENRENOTAVAILABLE OttContentGenres = "GENRE_NOT_AVAILABLE"
	OttContentGenresHISTORY           OttContentGenres = "HISTORY"
	OttContentGenresHORROR            OttContentGenres = "HORROR"
	OttContentGenresMUSICAL           OttContentGenres = "MUSICAL"
	OttContentGenresMYSTERY           OttContentGenres = "MYSTERY"
	OttContentGenresNEWS              OttContentGenres = "NEWS"
	OttContentGenresREALITYTV         OttContentGenres = "REALITY_TV"
	OttContentGenresROMANCE           OttContentGenres = "ROMANCE"
	OttContentGenresSCIENCEFICTION    OttContentGenres = "SCIENCE_FICTION"
	OttContentGenresSHORT             OttContentGenres = "SHORT"
	OttContentGenresSPORT             OttContentGenres = "SPORT"
	OttContentGenresSUPERHERO         OttContentGenres = "SUPER_HERO"
	OttContentGenresTALKSHOW          OttContentGenres = "TALK_SHOW"
	OttContentGenresTHRILLER          OttContentGenres = "THRILLER"
	OttContentGenresWAR               OttContentGenres = "WAR"
	OttContentGenresWESTERN           OttContentGenres = "WESTERN"
)

// Defines values for PacingCatchUpBoost.
const (
	CATCHUPBOOST2X PacingCatchUpBoost = "CATCH_UP_BOOST_2X"
	CATCHUPBOOST3X PacingCatchUpBoost = "CATCH_UP_BOOST_3X"
	CATCHUPBOOST4X PacingCatchUpBoost = "CATCH_UP_BOOST_4X"
	NONE           PacingCatchUpBoost = "NONE"
)

// Defines values for PacingDeliveryProfile.
const (
	EVENLY      PacingDeliveryProfile = "EVENLY"
	FRONTLOADED PacingDeliveryProfile = "FRONT_LOADED"
)

// Defines values for PixelEvent.
const (
	MARKETINGLANDINGPAGE PixelEvent = "MARKETING_LANDING_PAGE"
)

// Defines values for PixelPurpose.
const (
	CONVERSION  PixelPurpose = "CONVERSION"
	ENGAGEMENT  PixelPurpose = "ENGAGEMENT"
	REMARKETING PixelPurpose = "REMARKETING"
)

// Defines values for ProductLocation.
const (
	ProductLocationNOTSOLDONAMAZON ProductLocation = "NOT_SOLD_ON_AMAZON"
	ProductLocationSOLDONAMAZON    ProductLocation = "SOLD_ON_AMAZON"
)

// Defines values for ProductTrackingDomain.
const (
	ProductTrackingDomainAMAZONCA           ProductTrackingDomain = "AMAZON_CA"
	ProductTrackingDomainAMAZONMX           ProductTrackingDomain = "AMAZON_MX"
	ProductTrackingDomainAMAZONUS           ProductTrackingDomain = "AMAZON_US"
	ProductTrackingDomainPRIMENOWCA         ProductTrackingDomain = "PRIME_NOW_CA"
	ProductTrackingDomainPRIMENOWUS         ProductTrackingDomain = "PRIME_NOW_US"
	ProductTrackingDomainWHOLEFOODSMARKETUS ProductTrackingDomain = "WHOLE_FOODS_MARKET_US"
)

// Defines values for ProductTrackingItemProductAssociation.
const (
	ProductTrackingItemProductAssociationFEATURED    ProductTrackingItemProductAssociation = "FEATURED"
	ProductTrackingItemProductAssociationNOTFEATURED ProductTrackingItemProductAssociation = "NOT_FEATURED"
)

// Defines values for SegmentGroupIntraOperator.
const (
	AND SegmentGroupIntraOperator = "AND"
	OR  SegmentGroupIntraOperator = "OR"
)

// Defines values for SiteLanguageTargeting.
const (
	EN SiteLanguageTargeting = "EN"
	ES SiteLanguageTargeting = "ES"
)

// Defines values for StandardDisplayTargetingDeviceTypeTargeting.
const (
	StandardDisplayTargetingDeviceTypeTargetingDESKTOP          StandardDisplayTargetingDeviceTypeTargeting = "DESKTOP"
	StandardDisplayTargetingDeviceTypeTargetingDESKTOPANDMOBILE StandardDisplayTargetingDeviceTypeTargeting = "DESKTOP_AND_MOBILE"
	StandardDisplayTargetingDeviceTypeTargetingMOBILE           StandardDisplayTargetingDeviceTypeTargeting = "MOBILE"
)

// Defines values for StandardDisplayTargetingV3DeviceTypeTargeting.
const (
	StandardDisplayTargetingV3DeviceTypeTargetingDESKTOP          StandardDisplayTargetingV3DeviceTypeTargeting = "DESKTOP"
	StandardDisplayTargetingV3DeviceTypeTargetingDESKTOPANDMOBILE StandardDisplayTargetingV3DeviceTypeTargeting = "DESKTOP_AND_MOBILE"
	StandardDisplayTargetingV3DeviceTypeTargetingMOBILE           StandardDisplayTargetingV3DeviceTypeTargeting = "MOBILE"
)

// Defines values for SupplySourceSupplySourceType.
const (
	SupplySourceSupplySourceTypeAMAZONEXCLUSIVE SupplySourceSupplySourceType = "AMAZON_EXCLUSIVE"
	SupplySourceSupplySourceTypeDEAL            SupplySourceSupplySourceType = "DEAL"
	SupplySourceSupplySourceTypeOPENEXCHANGE    SupplySourceSupplySourceType = "OPEN_EXCHANGE"
)

// Defines values for SupportedLineItemTypes.
const (
	AAPMOBILEAPP        SupportedLineItemTypes = "AAP_MOBILE_APP"
	AMAZONMOBILEDISPLAY SupportedLineItemTypes = "AMAZON_MOBILE_DISPLAY"
	STANDARDDISPLAY     SupportedLineItemTypes = "STANDARD_DISPLAY"
	VIDEO               SupportedLineItemTypes = "VIDEO"
)

// Defines values for SupportedPolicyType.
const (
	DOMAIN  SupportedPolicyType = "DOMAIN"
	PRODUCT SupportedPolicyType = "PRODUCT"
)

// Defines values for SupportedProductAssociationV1.
const (
	SupportedProductAssociationV1FEATURED              SupportedProductAssociationV1 = "FEATURED"
	SupportedProductAssociationV1FEATUREDWITHVARIATION SupportedProductAssociationV1 = "FEATURED_WITH_VARIATION"
	SupportedProductAssociationV1NOTFEATURED           SupportedProductAssociationV1 = "NOT_FEATURED"
)

// Defines values for SupportedProductTrackingDomainV1.
const (
	SupportedProductTrackingDomainV1AMAZONCA           SupportedProductTrackingDomainV1 = "AMAZON_CA"
	SupportedProductTrackingDomainV1AMAZONMX           SupportedProductTrackingDomainV1 = "AMAZON_MX"
	SupportedProductTrackingDomainV1AMAZONUS           SupportedProductTrackingDomainV1 = "AMAZON_US"
	SupportedProductTrackingDomainV1FRESHSTORESUS      SupportedProductTrackingDomainV1 = "FRESH_STORES_US"
	SupportedProductTrackingDomainV1PRIMENOWCA         SupportedProductTrackingDomainV1 = "PRIME_NOW_CA"
	SupportedProductTrackingDomainV1PRIMENOWUS         SupportedProductTrackingDomainV1 = "PRIME_NOW_US"
	SupportedProductTrackingDomainV1PRIMEVIDEOROWNA    SupportedProductTrackingDomainV1 = "PRIME_VIDEO_ROW_NA"
	SupportedProductTrackingDomainV1WHOLEFOODSMARKETUS SupportedProductTrackingDomainV1 = "WHOLE_FOODS_MARKET_US"
)

// Defines values for TargetingType.
const (
	TargetingTypeEXCLUDE TargetingType = "EXCLUDE"
	TargetingTypeINCLUDE TargetingType = "INCLUDE"
)

// Defines values for ThirdPartyFeeFeeAllocation.
const (
	ABSORBWITHAGENCYFEE ThirdPartyFeeFeeAllocation = "ABSORB_WITH_AGENCY_FEE"
	PASSTOADVERTISER    ThirdPartyFeeFeeAllocation = "PASS_TO_ADVERTISER"
)

// Defines values for ThirdPartyFeeProviderName.
const (
	COMSCORE                   ThirdPartyFeeProviderName = "COM_SCORE"
	CPM1                       ThirdPartyFeeProviderName = "CPM_1"
	CPM2                       ThirdPartyFeeProviderName = "CPM_2"
	CPM3                       ThirdPartyFeeProviderName = "CPM_3"
	DOUBLECLICKCAMPAIGNMANAGER ThirdPartyFeeProviderName = "DOUBLE_CLICK_CAMPAIGN_MANAGER"
	DOUBLEVERIFY               ThirdPartyFeeProviderName = "DOUBLE_VERIFY"
	INTEGRALADSCIENCE          ThirdPartyFeeProviderName = "INTEGRAL_AD_SCIENCE"
)

// Defines values for UserLocationTargeting.
const (
	UserLocationTargetingEVERYWHERE UserLocationTargeting = "EVERYWHERE"
	UserLocationTargetingNONUS      UserLocationTargeting = "NON_US"
	UserLocationTargetingUS         UserLocationTargeting = "US"
)

// Defines values for VideoTargetingDeviceTypeTargeting.
const (
	VideoTargetingDeviceTypeTargetingCONNECTEDTV VideoTargetingDeviceTypeTargeting = "CONNECTED_TV"
	VideoTargetingDeviceTypeTargetingDESKTOP     VideoTargetingDeviceTypeTargeting = "DESKTOP"
	VideoTargetingDeviceTypeTargetingMOBILE      VideoTargetingDeviceTypeTargeting = "MOBILE"
)

// Defines values for VideoTargetingMobileEnvironmentTargeting.
const (
	VideoTargetingMobileEnvironmentTargetingAPP VideoTargetingMobileEnvironmentTargeting = "APP"
	VideoTargetingMobileEnvironmentTargetingWEB VideoTargetingMobileEnvironmentTargeting = "WEB"
)

// Defines values for VideoTargetingVideoAdFormatTargeting.
const (
	VideoTargetingVideoAdFormatTargetingINSTREAM             VideoTargetingVideoAdFormatTargeting = "IN_STREAM"
	VideoTargetingVideoAdFormatTargetingINSTREAMANDOUTSTREAM VideoTargetingVideoAdFormatTargeting = "IN_STREAM_AND_OUT_STREAM"
	VideoTargetingVideoAdFormatTargetingOUTSTREAM            VideoTargetingVideoAdFormatTargeting = "OUT_STREAM"
)

// Defines values for VideoTargetingVideoCompletionTargeting.
const (
	VideoTargetingVideoCompletionTargetingNOTARGETING          VideoTargetingVideoCompletionTargeting = "NO_TARGETING"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE10 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_10"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE20 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_20"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE30 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_30"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE40 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_40"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE50 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_50"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE60 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_60"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE70 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_70"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE80 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_80"
	VideoTargetingVideoCompletionTargetingVIDEOCOMPLETIONGTE90 VideoTargetingVideoCompletionTargeting = "VIDEO_COMPLETION_GTE_90"
)

// Defines values for VideoTargetingVideoInitiationTypeTargeting.
const (
	VideoTargetingVideoInitiationTypeTargetingANY               VideoTargetingVideoInitiationTypeTargeting = "ANY"
	VideoTargetingVideoInitiationTypeTargetingAUTOPLAYONLY      VideoTargetingVideoInitiationTypeTargeting = "AUTOPLAY_ONLY"
	VideoTargetingVideoInitiationTypeTargetingUNKNOWN           VideoTargetingVideoInitiationTypeTargeting = "UNKNOWN"
	VideoTargetingVideoInitiationTypeTargetingUSERINITIATEDONLY VideoTargetingVideoInitiationTypeTargeting = "USER_INITIATED_ONLY"
)

// Defines values for VideoTargetingVideoPlayerSizeTargeting.
const (
	VideoTargetingVideoPlayerSizeTargetingANY     VideoTargetingVideoPlayerSizeTargeting = "ANY"
	VideoTargetingVideoPlayerSizeTargetingLARGE   VideoTargetingVideoPlayerSizeTargeting = "LARGE"
	VideoTargetingVideoPlayerSizeTargetingMEDIUM  VideoTargetingVideoPlayerSizeTargeting = "MEDIUM"
	VideoTargetingVideoPlayerSizeTargetingSMALL   VideoTargetingVideoPlayerSizeTargeting = "SMALL"
	VideoTargetingVideoPlayerSizeTargetingUNKNOWN VideoTargetingVideoPlayerSizeTargeting = "UNKNOWN"
)

// Defines values for VideoTargetingV3DeviceTypeTargeting.
const (
	VideoTargetingV3DeviceTypeTargetingCONNECTEDTV VideoTargetingV3DeviceTypeTargeting = "CONNECTED_TV"
	VideoTargetingV3DeviceTypeTargetingDESKTOP     VideoTargetingV3DeviceTypeTargeting = "DESKTOP"
	VideoTargetingV3DeviceTypeTargetingMOBILE      VideoTargetingV3DeviceTypeTargeting = "MOBILE"
)

// Defines values for VideoTargetingV3MobileEnvironmentTargeting.
const (
	VideoTargetingV3MobileEnvironmentTargetingAPP VideoTargetingV3MobileEnvironmentTargeting = "APP"
	VideoTargetingV3MobileEnvironmentTargetingWEB VideoTargetingV3MobileEnvironmentTargeting = "WEB"
)

// Defines values for VideoTargetingV3VideoAdFormatTargeting.
const (
	VideoTargetingV3VideoAdFormatTargetingINSTREAM             VideoTargetingV3VideoAdFormatTargeting = "IN_STREAM"
	VideoTargetingV3VideoAdFormatTargetingINSTREAMANDOUTSTREAM VideoTargetingV3VideoAdFormatTargeting = "IN_STREAM_AND_OUT_STREAM"
	VideoTargetingV3VideoAdFormatTargetingOUTSTREAM            VideoTargetingV3VideoAdFormatTargeting = "OUT_STREAM"
)

// Defines values for VideoTargetingV3VideoCompletionTargeting.
const (
	VideoTargetingV3VideoCompletionTargetingNOTARGETING          VideoTargetingV3VideoCompletionTargeting = "NO_TARGETING"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE10 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_10"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE20 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_20"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE30 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_30"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE40 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_40"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE50 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_50"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE60 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_60"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE70 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_70"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE80 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_80"
	VideoTargetingV3VideoCompletionTargetingVIDEOCOMPLETIONGTE90 VideoTargetingV3VideoCompletionTargeting = "VIDEO_COMPLETION_GTE_90"
)

// Defines values for VideoTargetingV3VideoInitiationTypeTargeting.
const (
	VideoTargetingV3VideoInitiationTypeTargetingANY               VideoTargetingV3VideoInitiationTypeTargeting = "ANY"
	VideoTargetingV3VideoInitiationTypeTargetingAUTOPLAYONLY      VideoTargetingV3VideoInitiationTypeTargeting = "AUTOPLAY_ONLY"
	VideoTargetingV3VideoInitiationTypeTargetingUNKNOWN           VideoTargetingV3VideoInitiationTypeTargeting = "UNKNOWN"
	VideoTargetingV3VideoInitiationTypeTargetingUSERINITIATEDONLY VideoTargetingV3VideoInitiationTypeTargeting = "USER_INITIATED_ONLY"
)

// Defines values for VideoTargetingV3VideoPlayerSizeTargeting.
const (
	VideoTargetingV3VideoPlayerSizeTargetingANY     VideoTargetingV3VideoPlayerSizeTargeting = "ANY"
	VideoTargetingV3VideoPlayerSizeTargetingLARGE   VideoTargetingV3VideoPlayerSizeTargeting = "LARGE"
	VideoTargetingV3VideoPlayerSizeTargetingMEDIUM  VideoTargetingV3VideoPlayerSizeTargeting = "MEDIUM"
	VideoTargetingV3VideoPlayerSizeTargetingSMALL   VideoTargetingV3VideoPlayerSizeTargeting = "SMALL"
	VideoTargetingV3VideoPlayerSizeTargetingUNKNOWN VideoTargetingV3VideoPlayerSizeTargeting = "UNKNOWN"
)

// Defines values for ViewabilityTier.
const (
	ViewabilityTierALLOWALL            ViewabilityTier = "ALLOW_ALL"
	ViewabilityTierVIEWABILITYTIERGT40 ViewabilityTier = "VIEWABILITY_TIER_GT_40"
	ViewabilityTierVIEWABILITYTIERGT50 ViewabilityTier = "VIEWABILITY_TIER_GT_50"
	ViewabilityTierVIEWABILITYTIERGT60 ViewabilityTier = "VIEWABILITY_TIER_GT_60"
	ViewabilityTierVIEWABILITYTIERGT70 ViewabilityTier = "VIEWABILITY_TIER_GT_70"
	ViewabilityTierVIEWABILITYTIERLT40 ViewabilityTier = "VIEWABILITY_TIER_LT_40"
)

// Defines values for GetGoalConfigurationsParamsProductLocation.
const (
	GetGoalConfigurationsParamsProductLocationNOTSOLDONAMAZON GetGoalConfigurationsParamsProductLocation = "NOT_SOLD_ON_AMAZON"
	GetGoalConfigurationsParamsProductLocationSOLDONAMAZON    GetGoalConfigurationsParamsProductLocation = "SOLD_ON_AMAZON"
)

// Defines values for GetSupplySourcesParamsSupplySourceType.
const (
	GetSupplySourcesParamsSupplySourceTypeAMAZONEXCLUSIVE GetSupplySourcesParamsSupplySourceType = "AMAZON_EXCLUSIVE"
	GetSupplySourcesParamsSupplySourceTypeDEAL            GetSupplySourcesParamsSupplySourceType = "DEAL"
	GetSupplySourcesParamsSupplySourceTypeOPENEXCHANGE    GetSupplySourcesParamsSupplySourceType = "OPEN_EXCHANGE"
)

// Defines values for GetSupplySourcesParamsDeviceTypes.
const (
	GetSupplySourcesParamsDeviceTypesCONNECTEDTV      GetSupplySourcesParamsDeviceTypes = "CONNECTED_TV"
	GetSupplySourcesParamsDeviceTypesDESKTOP          GetSupplySourcesParamsDeviceTypes = "DESKTOP"
	GetSupplySourcesParamsDeviceTypesDESKTOPANDMOBILE GetSupplySourcesParamsDeviceTypes = "DESKTOP_AND_MOBILE"
	GetSupplySourcesParamsDeviceTypesMOBILE           GetSupplySourcesParamsDeviceTypes = "MOBILE"
)

// AapMobileAppTargeting defines model for AapMobileAppTargeting.
type AapMobileAppTargeting struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceOrientationTargeting The mobile device orientation targeting type.
	DeviceOrientationTargeting *AapMobileAppTargetingDeviceOrientationTargeting `json:"deviceOrientationTargeting,omitempty"`

	// DeviceTypeTargeting The targeted mobile application device type. Note that this is applicable only for the `AAP_MOBILE APP` type of line item. It is required input for `AAP_MOBILE APP` line item type.
	DeviceTypeTargeting *[]AapMobileAppTargetingDeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`
	MobileAppTargeting   *MobileAppTargeting   `json:"mobileAppTargeting,omitempty"`
	SegmentTargeting     *SegmentTargeting     `json:"segmentTargeting,omitempty"`
	SupplyTargeting      *SupplyTargeting      `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *ThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
	UserLocationTargeting *UserLocationTargeting `json:"userLocationTargeting,omitempty"`
}

// AapMobileAppTargetingDeviceOrientationTargeting The mobile device orientation targeting type.
type AapMobileAppTargetingDeviceOrientationTargeting string

// AapMobileAppTargetingDeviceTypeTargeting defines model for AapMobileAppTargeting.DeviceTypeTargeting.
type AapMobileAppTargetingDeviceTypeTargeting string

// AapMobileAppTargetingV3 defines model for AapMobileAppTargetingV3.
type AapMobileAppTargetingV3 struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceOrientationTargeting The mobile device orientation targeting type.
	DeviceOrientationTargeting *AapMobileAppTargetingV3DeviceOrientationTargeting `json:"deviceOrientationTargeting,omitempty"`

	// DeviceTypeTargeting The targeted mobile application device type. Note that this is applicable only for the `AAP_MOBILE APP` type of line item. It is required input for `AAP_MOBILE APP` line item type.
	DeviceTypeTargeting *[]AapMobileAppTargetingV3DeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`
	MobileAppTargeting   *MobileAppTargeting   `json:"mobileAppTargeting,omitempty"`
	SegmentTargeting     *SegmentTargeting     `json:"segmentTargeting,omitempty"`
	SupplyTargeting      *SupplyTargeting      `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *MobileAppThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, US advertisers can choose from `US`, `EVERYWHERE`, `NON-US`; Canada advertisers can choose from `CA`, `EVERYWHERE`; Mexico advertisers can choose from `MX`, `EVERYWHERE`; Brazil advertisers can choose from `BR`, `EVERYWHERE`.
	UserLocationTargeting *UserLocationTargetingV3 `json:"userLocationTargeting,omitempty"`
}

// AapMobileAppTargetingV3DeviceOrientationTargeting The mobile device orientation targeting type.
type AapMobileAppTargetingV3DeviceOrientationTargeting string

// AapMobileAppTargetingV3DeviceTypeTargeting defines model for AapMobileAppTargetingV3.DeviceTypeTargeting.
type AapMobileAppTargetingV3DeviceTypeTargeting string

// AapMobileAppTargetingV31 defines model for AapMobileAppTargetingV3_1.
type AapMobileAppTargetingV31 = AapMobileAppTargetingV3

// AapMobileAppTargetingV32 defines model for AapMobileAppTargetingV3_2.
type AapMobileAppTargetingV32 = AapMobileAppTargetingV31

// AgencyFee The service fee associated with an agency.
type AgencyFee struct {
	// FeePercentage Fee expressed as a percentage of the total budget.
	FeePercentage *float64 `json:"feePercentage,omitempty"`
}

// AmazonConsoleFee A service fee for using the Amazon Ad Platform. Fees are applied as a percentage of supply costs.
type AmazonConsoleFee struct {
	// FeePercentage The service fee expressed as a percentage.
	FeePercentage float64 `json:"feePercentage"`
}

// AmazonMobileDisplayTargeting defines model for AmazonMobileDisplayTargeting.
type AmazonMobileDisplayTargeting struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContextualTargeting Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
	ContextualTargeting *bool `json:"contextualTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// MobileOsTargeting The mobile operating system targeting type.
	MobileOsTargeting *MobileOsTargeting `json:"mobileOsTargeting,omitempty"`
	SegmentTargeting  *SegmentTargeting  `json:"segmentTargeting,omitempty"`
	SupplyTargeting   *SupplyTargeting   `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *ThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
	UserLocationTargeting *UserLocationTargeting `json:"userLocationTargeting,omitempty"`
}

// AmazonMobileDisplayTargetingV3 defines model for AmazonMobileDisplayTargetingV3.
type AmazonMobileDisplayTargetingV3 struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContextualTargeting Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
	ContextualTargeting *bool `json:"contextualTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// MobileOsTargeting The mobile operating system targeting type.
	MobileOsTargeting *MobileOsTargeting `json:"mobileOsTargeting,omitempty"`
	SegmentTargeting  *SegmentTargeting  `json:"segmentTargeting,omitempty"`
	SupplyTargeting   *SupplyTargeting   `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *MobileDisplayThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, US advertisers can choose from `US`, `EVERYWHERE`, `NON-US`; Canada advertisers can choose from `CA`, `EVERYWHERE`; Mexico advertisers can choose from `MX`, `EVERYWHERE`; Brazil advertisers can choose from `BR`, `EVERYWHERE`.
	UserLocationTargeting *UserLocationTargetingV3 `json:"userLocationTargeting,omitempty"`
}

// AmazonMobileDisplayTargetingV31 defines model for AmazonMobileDisplayTargetingV3_1.
type AmazonMobileDisplayTargetingV31 = AmazonMobileDisplayTargetingV3

// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
type AmazonViewabilityTargeting struct {
	// IncludeUnmeasurableImpressions Set to `true` to include impressions where impressions can't be measured.
	IncludeUnmeasurableImpressions bool `json:"includeUnmeasurableImpressions"`

	// ViewabilityTier The type of viewability tier.
	ViewabilityTier ViewabilityTier `json:"viewabilityTier"`
}

// App defines model for App.
type App struct {
	// Id The app identifier.
	Id *string `json:"id,omitempty"`

	// Name The app name.
	Name *string `json:"name,omitempty"`
}

// AppliedFees defines model for AppliedFees.
type AppliedFees struct {
	// AmazonDspConsoleFee A service fee for using the Amazon Ad Platform. Fees are applied as a percentage of supply costs.
	AmazonDspConsoleFee *AmazonConsoleFee `json:"amazonDspConsoleFee,omitempty"`

	// AudienceFees The list of audience fees associated with the line item.
	AudienceFees *[]AudienceFee `json:"audienceFees,omitempty"`

	// ThirdPartyFees The list of third party fees associated with the line item.
	ThirdPartyFees *[]ThirdPartyFee `json:"thirdPartyFees,omitempty"`
}

// Apps defines model for Apps.
type Apps struct {
	Apps      *[]App  `json:"apps,omitempty"`
	NextToken *string `json:"nextToken,omitempty"`
}

// AudienceFee The audience fee applied to Amazon (in-market and lifestyle) third-party (automotive).
type AudienceFee struct {
	// Amount The amount of the audience fee.
	Amount float64 `json:"amount"`

	// FeeName The category of the audience fee.
	FeeName AudienceFeeFeeName `json:"feeName"`
}

// AudienceFeeFeeName The category of the audience fee.
type AudienceFeeFeeName string

// AutoOptimization defines model for AutoOptimization.
type AutoOptimization string

// AutoOptimizations The list of optimizations supported.
type AutoOptimizations = []string

// Bidding The bid values associated with a line item.
type Bidding struct {
	// BaseSupplyBid The base bid per thousand impressions for ad inventory. Expressed in dollars.
	BaseSupplyBid float64 `json:"baseSupplyBid"`

	// MaxSupplyBid The maximum cost-per-thousand impressions bid for media supply. Expressed in dollars.
	MaxSupplyBid *float64 `json:"maxSupplyBid,omitempty"`
}

// BiddingStrategy It specifies how Amazon Advertising determines bids on your behalf for each opportunity to serve an impression. It is immutable once the order has started delivering.
type BiddingStrategy string

// BrandSuitabilityRiskLevel The Double Verify brand suitability risk level.
type BrandSuitabilityRiskLevel string

// BudgetCap Adding a budget cap can result in under-delivery.
type BudgetCap struct {
	// Amount The spending limit amount.
	Amount float64 `json:"amount"`

	// RecurrenceTimePeriod The type of recurrence for the spending limit.
	RecurrenceTimePeriod BudgetCapRecurrenceTimePeriod `json:"recurrenceTimePeriod"`
}

// BudgetCapRecurrenceTimePeriod The type of recurrence for the spending limit.
type BudgetCapRecurrenceTimePeriod string

// ConversionTracking defines model for ConversionTracking.
type ConversionTracking struct {
	// Pixels A list of pixels associated with the campaign.
	Pixels   *PixelTracking   `json:"pixels,omitempty"`
	Products *ProductTracking `json:"products,omitempty"`
}

// ConversionTrackingV21 defines model for ConversionTrackingV2_1.
type ConversionTrackingV21 struct {
	// Pixels A list of pixels associated with the campaign.
	Pixels   *PixelTracking      `json:"pixels,omitempty"`
	Products *ProductTrackingV21 `json:"products,omitempty"`
}

// Creative defines model for Creative.
type Creative struct {
	// AdvertiserId The identifier of the advertiser.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// CreativeId The identifier of the creative.
	CreativeId *string `json:"creativeId,omitempty"`

	// ExternalId The external identifier of the creative.
	ExternalId *string `json:"externalId,omitempty"`

	// Name The creative name.
	Name *string `json:"name,omitempty"`

	// Size The creative size.
	Size *string `json:"size,omitempty"`

	// SupportedLineItemTypes Supported lineItemTypes where creatives can be associated. VIDEO line item type is supported since version `application/vnd.dspcreatives.v2.1+json`
	SupportedLineItemTypes *[]SupportedLineItemTypes `json:"supportedLineItemTypes,omitempty"`

	// Type The creative type.
	Type *string `json:"type,omitempty"`
}

// CreativeOptions defines model for CreativeOptions.
type CreativeOptions struct {
	// CreativeRotationType The creative rotation type.
	CreativeRotationType *CreativeOptionsCreativeRotationType `json:"creativeRotationType,omitempty"`
}

// CreativeOptionsCreativeRotationType The creative rotation type.
type CreativeOptionsCreativeRotationType string

// Creatives defines model for Creatives.
type Creatives struct {
	Response *[]Creative `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// CurrencyCode The currency code.
type CurrencyCode string

// CurrencyCodeV3 The currency code.
type CurrencyCodeV3 = CurrencyCode

// DayPart The parts of a day.
type DayPart struct {
	// DayOfWeek The day of the week.
	DayOfWeek DayPartDayOfWeek `json:"dayOfWeek"`
	HourSlots []int64          `json:"hourSlots"`
}

// DayPartDayOfWeek The day of the week.
type DayPartDayOfWeek string

// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
type DayPartTargeting struct {
	// DayParts The list of parts of the day.
	DayParts []DayPart `json:"dayParts"`

	// TimeZonePreference The time zone associated with line item delivery.
	TimeZonePreference DayPartTargetingTimeZonePreference `json:"timeZonePreference"`
}

// DayPartTargetingTimeZonePreference The time zone associated with line item delivery.
type DayPartTargetingTimeZonePreference string

// DealFee The fee associated with the deal. This will be the same value as deal price, but includes more information such as currency code.
type DealFee struct {
	// Amount The price agreed upon with the publisher. Given in base currency units multiplied by scaling factor ('scale').
	Amount *int `json:"amount,omitempty"`

	// Currency Base currency, such as US Dollar, given in ISO 4217.
	Currency *string `json:"currency,omitempty"`

	// FeeCalculationType How the fee is applied.
	FeeCalculationType *DealFeeFeeCalculationType `json:"feeCalculationType,omitempty"`

	// Scale Scale of the amount relative to the base currency unit. For instance, if the scale is 100000, the currency is USD, and the amount is 50000, the human-readable fee is $0.50.
	Scale *int `json:"scale,omitempty"`
}

// DealFeeFeeCalculationType How the fee is applied.
type DealFeeFeeCalculationType string

// DealInfo Deal metadata present only for the DEAL type.
type DealInfo struct {
	DealGroup *string `json:"dealGroup,omitempty"`

	// DealPrice Price of the deal
	DealPrice *float64          `json:"dealPrice,omitempty"`
	DealType  *DealInfoDealType `json:"dealType,omitempty"`
	EndDate   *time.Time        `json:"endDate,omitempty"`

	// ExchangeName The name of the supply source item to which the deal belongs. If deal belongs to OPEN_EXCHANGE, it is the name of the consolidated supply source item.
	ExchangeName  *string    `json:"exchangeName,omitempty"`
	PublisherName *string    `json:"publisherName,omitempty"`
	StartDate     *time.Time `json:"startDate,omitempty"`
}

// DealInfoDealType defines model for DealInfo.DealType.
type DealInfoDealType string

// DealInfoV11 Deal metadata present only for the DEAL type.
type DealInfoV11 = DealInfo

// DealInfoV12 defines model for DealInfoV1_2.
type DealInfoV12 struct {
	DealGroup *string `json:"dealGroup,omitempty"`

	// DealId ID provided by the user while creating the deal.
	DealId *string `json:"dealId,omitempty"`

	// DealPrice Price of the deal
	DealPrice *float64             `json:"dealPrice,omitempty"`
	DealType  *DealInfoV12DealType `json:"dealType,omitempty"`
	EndDate   *time.Time           `json:"endDate,omitempty"`

	// ExchangeName The name of the supply source item to which the deal belongs. If deal belongs to OPEN_EXCHANGE, it is the name of the consolidated supply source item.
	ExchangeName  *string    `json:"exchangeName,omitempty"`
	PublisherName *string    `json:"publisherName,omitempty"`
	StartDate     *time.Time `json:"startDate,omitempty"`
}

// DealInfoV12DealType defines model for DealInfoV12.DealType.
type DealInfoV12DealType string

// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
type DeliveryActivationStatus string

// DiscoveryLineItemTypes defines model for DiscoveryLineItemTypes.
type DiscoveryLineItemTypes string

// DomainFileMetaData defines model for DomainFileMetaData.
type DomainFileMetaData struct {
	// FileKey The S3 key of domain list file.
	FileKey string `json:"fileKey"`

	// FileName The domain list file name.
	FileName string `json:"fileName"`
}

// DomainFileValidationResponse defines model for DomainFileValidationResponse.
type DomainFileValidationResponse struct {
	// AddedDomainSize Number of domains in the file that have been added to the line item.
	AddedDomainSize *int `json:"addedDomainSize,omitempty"`

	// DuplicateDomainSize Number of duplicate domains in the file. The unique ones of them are added to the line item.
	DuplicateDomainSize *int `json:"duplicateDomainSize,omitempty"`

	// DuplicateDomainsFileUrl The URL of duplicate domains file. It expires in 1 hour.
	DuplicateDomainsFileUrl *string `json:"duplicateDomainsFileUrl,omitempty"`

	// FileName The uploaded file name.
	FileName *string `json:"fileName,omitempty"`

	// InvalidDomainSize Number of invalid domains in the file. They are not added to the line item.
	InvalidDomainSize *int `json:"invalidDomainSize,omitempty"`

	// InvalidDomainsFileUrl The URL of invalid domains file. It expires in 1 hour.
	InvalidDomainsFileUrl *string `json:"invalidDomainsFileUrl,omitempty"`
}

// DomainList defines model for DomainList.
type DomainList struct {
	// InheritFromAdvertiser Inherit domains from advertiser settings.
	InheritFromAdvertiser *bool             `json:"inheritFromAdvertiser,omitempty"`
	MergedDomainList      *MergedDomainList `json:"mergedDomainList,omitempty"`
}

// DomainListMetadata defines model for DomainListMetadata.
type DomainListMetadata struct {
	Created *time.Time `json:"created,omitempty"`
	Id      *string    `json:"id,omitempty"`
	Name    *string    `json:"name,omitempty"`

	// Size Number of URLs specified in this list
	Size    *int       `json:"size,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type DoubleVerify struct {
	AuthenticBrandSafety *DoubleVerifyAuthenticBrandSafety `json:"authenticBrandSafety,omitempty"`

	// BrandSafety In an update from Double Verify (DV), support for `HATE_SPEECH_PROFANITY`, medium severity `ADULT_CONTENT`, and `SEX_EDUCATION` has been dropped. Additionally, DV has moved away from high severity content and medium severity content in favor of content categories and content categories with risk. Any value found below that is represented as a content category will continue to exclude the particular content category that the value represents. Any value found below that is represented as a content category with risk will now exclude the high and medium content category with risk that the value represents. Please consider adopting the latest version of the line item APIs for updated support of DV brand safety.
	BrandSafety *DoubleVerifyBrandSafety `json:"brandSafety,omitempty"`

	// CustomContextualSegmentId The custom segment identifier.
	CustomContextualSegmentId *string                          `json:"customContextualSegmentId,omitempty"`
	FraudInvalidTraffic       *DoubleVerifyFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
	Viewability               *DoubleVerifyViewability         `json:"viewability,omitempty"`
}

// DoubleVerifyAuthenticBrandSafety defines model for DoubleVerifyAuthenticBrandSafety.
type DoubleVerifyAuthenticBrandSafety struct {
	// DoubleVerifySegmentId The segment identifier.
	DoubleVerifySegmentId *string `json:"doubleVerifySegmentId,omitempty"`
}

// DoubleVerifyBrandSafety In an update from Double Verify (DV), support for `HATE_SPEECH_PROFANITY`, medium severity `ADULT_CONTENT`, and `SEX_EDUCATION` has been dropped. Additionally, DV has moved away from high severity content and medium severity content in favor of content categories and content categories with risk. Any value found below that is represented as a content category will continue to exclude the particular content category that the value represents. Any value found below that is represented as a content category with risk will now exclude the high and medium content category with risk that the value represents. Please consider adopting the latest version of the line item APIs for updated support of DV brand safety.
type DoubleVerifyBrandSafety struct {
	// AppAgeRating A list of app age rating to be used for excluding apps.
	AppAgeRating *[]DoubleVerifyBrandSafetyAppAgeRating `json:"appAgeRating,omitempty"`

	// AppStarRating Exclude by app star rating (app inventory only)
	AppStarRating *DoubleVerifyBrandSafetyAppStarRating `json:"appStarRating,omitempty"`

	// ExcludeAppsWithInsufficientRating Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
	ExcludeAppsWithInsufficientRating *bool `json:"excludeAppsWithInsufficientRating,omitempty"`

	// HighSeverityContent A list of high severity content and corresponding status.
	HighSeverityContent *[]DoubleVerifyBrandSafetyHighSeverityContent `json:"highSeverityContent,omitempty"`

	// MediumSeverityContent A list of medium severity content and corresponding status.
	MediumSeverityContent *[]DoubleVerifyBrandSafetyMediumSeverityContent `json:"mediumSeverityContent,omitempty"`

	// UnknownContent Set to `true` to exclude unknown content.
	UnknownContent *bool `json:"unknownContent,omitempty"`
}

// DoubleVerifyBrandSafetyAppAgeRating defines model for DoubleVerifyBrandSafety.AppAgeRating.
type DoubleVerifyBrandSafetyAppAgeRating string

// DoubleVerifyBrandSafetyAppStarRating Exclude by app star rating (app inventory only)
type DoubleVerifyBrandSafetyAppStarRating string

// DoubleVerifyBrandSafetyHighSeverityContent defines model for DoubleVerifyBrandSafety.HighSeverityContent.
type DoubleVerifyBrandSafetyHighSeverityContent string

// DoubleVerifyBrandSafetyMediumSeverityContent defines model for DoubleVerifyBrandSafety.MediumSeverityContent.
type DoubleVerifyBrandSafetyMediumSeverityContent string

// DoubleVerifyFraudInvalidTraffic defines model for DoubleVerifyFraudInvalidTraffic.
type DoubleVerifyFraudInvalidTraffic struct {
	// BlockAppAndSites Set to `true` to block applications and sites with insufficient historical fraud and invalid traffic statistics. This will not be applicable if ALLOW_ALL is chosen.
	BlockAppAndSites    *bool                                               `json:"blockAppAndSites,omitempty"`
	ExcludeAppsAndSites *DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites `json:"excludeAppsAndSites,omitempty"`

	// ExcludeImpressions Set to `true` to exclude impressions delivered to devices identified to be fraudulent or invalid.
	ExcludeImpressions *bool `json:"excludeImpressions,omitempty"`
}

// DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites defines model for DoubleVerifyFraudInvalidTraffic.ExcludeAppsAndSites.
type DoubleVerifyFraudInvalidTrafficExcludeAppsAndSites string

// DoubleVerifyV21 Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type DoubleVerifyV21 = DoubleVerify

// DoubleVerifyViewability defines model for DoubleVerifyViewability.
type DoubleVerifyViewability struct {
	// BrandExposureViewabilityTargeting The type of brand exposure viewability targeting.
	BrandExposureViewabilityTargeting *DoubleVerifyViewabilityBrandExposureViewabilityTargeting `json:"brandExposureViewabilityTargeting,omitempty"`

	// IncludeUnmeasurableImpressions Set to `true` to include impressions where impressions can't be measured.
	IncludeUnmeasurableImpressions *bool `json:"includeUnmeasurableImpressions,omitempty"`

	// MrcViewabilityTargeting The type of MRC viewability targeting.
	MrcViewabilityTargeting *DoubleVerifyViewabilityMrcViewabilityTargeting `json:"mrcViewabilityTargeting,omitempty"`
}

// DoubleVerifyViewabilityBrandExposureViewabilityTargeting The type of brand exposure viewability targeting.
type DoubleVerifyViewabilityBrandExposureViewabilityTargeting string

// DoubleVerifyViewabilityMrcViewabilityTargeting The type of MRC viewability targeting.
type DoubleVerifyViewabilityMrcViewabilityTargeting string

// DoubleVerifyViewabilityV21 defines model for DoubleVerifyViewabilityV2_1.
type DoubleVerifyViewabilityV21 = DoubleVerifyViewability

// DspAdChoicesPositionV1 Default value is TOP_RIGHT.
type DspAdChoicesPositionV1 string

// DspAssetV1 Asset to be associated with creative.
type DspAssetV1 struct {
	// AssetId The uploaded asset Id. This Id is provided by Creative Assets API when user registers an asset with assetType after upload.
	AssetId string `json:"assetId"`

	// Url The asset's URL. This will be provided if asset linked with the creative being read is not registered in Creative Assets API.
	Url *string `json:"url,omitempty"`

	// Version The uploaded asset version. This version is provided by Creative Assets API when user registers an asset with assetType after upload.
	Version string `json:"version"`
}

// DspBaseCreateCreativeRequestV1 defines model for DspBaseCreateCreativeRequestV1.
type DspBaseCreateCreativeRequestV1 struct {
	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`
}

// DspBaseReadCreativeV1 This holds common read-only properties of all creative types.
type DspBaseReadCreativeV1 struct {
	// ApprovalStatus The creative approval status.
	ApprovalStatus *DspCreativeApprovalStatusV1 `json:"approvalStatus,omitempty"`

	// CreatedDate The creative created date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// LastUpdatedDate The creative last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`
}

// DspBaseUpdateCreativeRequestV1 defines model for DspBaseUpdateCreativeRequestV1.
type DspBaseUpdateCreativeRequestV1 struct {
	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// Name The creative name.
	Name string `json:"name"`
}

// DspBaseWriteCreativeV1 This holds common mutable properties of all creative types update request.
type DspBaseWriteCreativeV1 struct {
	// Name The creative name.
	Name string `json:"name"`
}

// DspClickThroughAndroidAppDownloadActionV1 To target Android app download as click through action, at least `storeId`, `productAsin` or `downloadUrl` must be provided. If both `storeId` and `productAsin` is provided, `storePriority` must be provided as well. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
type DspClickThroughAndroidAppDownloadActionV1 struct {
	// DownloadUrl URL to direct users to download app. By default, This will be built automatically using `playStoreId` and `productAsin` information provided. It can be overriden.
	DownloadUrl *string `json:"downloadUrl,omitempty"`

	// IsRtb Indicates whether it's for real time bidding or not. Default value is `false`. This is applicable only to `MOBILE_AAP` supply.
	IsRtb *bool `json:"isRtb,omitempty"`

	// ProductAsin Amazon product Asin, used to build the download URL. This is applicable only to `MOBILE_AAP` supply.
	ProductAsin *string `json:"productAsin,omitempty"`

	// StoreId Android play store Id for app, used to build the download URL.
	StoreId *string `json:"storeId,omitempty"`

	// StorePriority The higher priority store will be tried first, then if it does not exist on device the second store will be tried. Default value is `PLAY_STORE_THEN_AMAZON_APP_STORE`. This is applicable only to `MOBILE_AAP` supply.
	StorePriority *DspClickThroughAndroidAppDownloadActionV1StorePriority `json:"storePriority,omitempty"`
}

// DspClickThroughAndroidAppDownloadActionV1StorePriority The higher priority store will be tried first, then if it does not exist on device the second store will be tried. Default value is `PLAY_STORE_THEN_AMAZON_APP_STORE`. This is applicable only to `MOBILE_AAP` supply.
type DspClickThroughAndroidAppDownloadActionV1StorePriority string

// DspClickThroughDestinationV1 Choose `AMAZON` if the `click through` links to an Amazon site like Amazon.com or IMDb. Otherwise choose `OTHER`.
type DspClickThroughDestinationV1 string

// DspClickThroughDetailPageActionV1 Click through Action - Detail Page. This is applicable only to `MOBILE_OO` and `MOBILE_AAP` supply.
type DspClickThroughDetailPageActionV1 struct {
	// EnableDeepLinking Allow to open URL in Amazon App, if available on device. By default it is false. This will be considered only for `MOBILE_AAP` supply.
	EnableDeepLinking *bool `json:"enableDeepLinking,omitempty"`

	// ProductAsin Define which product's detail page the customer should be taken to when tapping on the creative.
	ProductAsin string `json:"productAsin"`
}

// DspClickThroughIosAppDownloadActionV1 Click through action - IOS App Download. This is applicable only to `MOBILE_AAP` supply.
type DspClickThroughIosAppDownloadActionV1 struct {
	// DownloadUrl URL to direct users to download app. By default, This will be built automatically using `storeLink` information provided. It can be overridden.
	DownloadUrl *string `json:"downloadUrl,omitempty"`

	// StoreLink Apple app store link for app, used to build the download URL.
	StoreLink string `json:"storeLink"`
}

// DspClickThroughKindleAppDownloadActionV1 Click through Action - Kindle App Download. This is applicable only to `MOBILE_AAP` supply.
type DspClickThroughKindleAppDownloadActionV1 struct {
	// DownloadUrl URL to direct users to download app. By default, this will be built automatically using `productAsin` information provided. It can be overridden.
	DownloadUrl *string `json:"downloadUrl,omitempty"`

	// ProductAsin Amazon product Asin, used to build the download URL.
	ProductAsin string `json:"productAsin"`
}

// DspClickThroughSearchAsinActionV1 Click through Action - Search Asins. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
type DspClickThroughSearchAsinActionV1 struct {
	// EnableDeepLinking Allow to open URL in Amazon App, if available on device. This will be considered only for `MOBILE_AAP` supply. Default value is `false`.
	EnableDeepLinking *bool `json:"enableDeepLinking,omitempty"`

	// ProductAsins Define the Asins to query for in the search results that will be displayed on click-through.
	ProductAsins []string `json:"productAsins"`
}

// DspClickThroughSearchKeywordActionV1 Click through action - Search Keywords. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
type DspClickThroughSearchKeywordActionV1 struct {
	// EnableDeepLinking Allow to open URL in Amazon App, if available on device. This will be considered only for `MOBILE_AAP` supply. By default it is `false`.
	EnableDeepLinking *bool `json:"enableDeepLinking,omitempty"`

	// Keywords Define the keywords to query for in the search results that will be displayed on click-through.
	Keywords []string `json:"keywords"`
}

// DspCreateImageCreativeRequestV1 defines model for DspCreateImageCreativeRequestV1.
type DspCreateImageCreativeRequestV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
	ClickThroughAction DspImageClickThroughActionV1 `json:"clickThroughAction"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size   DspSizeV1                `json:"size"`
	Supply DspImageCreativeSupplyV1 `json:"supply"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspCreateImageCreativesRequestV1 Create image creatives request.
type DspCreateImageCreativesRequestV1 = []DspCreateImageCreativeRequestV1

// DspCreateRecCreativeRequestV1 defines model for DspCreateRecCreativeRequestV1.
type DspCreateRecCreativeRequestV1 struct {
	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// AllowThirdPartySellers If it's true, orders can be fulfilled by third party sellers.
	AllowThirdPartySellers *bool `json:"allowThirdPartySellers,omitempty"`

	// AllowedFormats A list of formats configured to display for the creative.
	AllowedFormats *[]DspRecFormatV1 `json:"allowedFormats,omitempty"`

	// AllowedSizes A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
	AllowedSizes *[]DspSizeV1 `json:"allowedSizes,omitempty"`

	// AssociatedProducts Product objects associated with the creative.
	AssociatedProducts []DspRecProductV1 `json:"associatedProducts"`

	// Content Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
	Content *DspRecContentV1 `json:"content,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// OptimizationGoal Metric which creative optimization should attempt to improve.
	OptimizationGoal *DspRecOptimizationGoalV1 `json:"optimizationGoal,omitempty"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string `json:"thirdPartyClickTrackers,omitempty"`

	// ThirdPartyTrackers URL used for tracking interactions with third party
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspCreateRecCreativesRequestV1 Create Responsive eCommerce creatives (REC) request.
type DspCreateRecCreativesRequestV1 = []DspCreateRecCreativeRequestV1

// DspCreateThirdPartyCreativeRequestV1 defines model for DspCreateThirdPartyCreativeRequestV1.
type DspCreateThirdPartyCreativeRequestV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// Destination Choose `AMAZON` if the `tag` links to an Amazon site like Amazon.com or IMDb. Otherwise choose `OTHER`.
	Destination *DspClickThroughDestinationV1 `json:"destination,omitempty"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// Supply Different supported supply of creative.
	Supply DspCreativeSupplyV1 `json:"supply"`

	// TagSource The third party tag associated with creative.
	TagSource          string                    `json:"tagSource"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspCreateThirdPartyCreativesRequestV1 Create Third Party creatives request.
type DspCreateThirdPartyCreativesRequestV1 = []DspCreateThirdPartyCreativeRequestV1

// DspCreateVideoCreativeRequestV1 defines model for DspCreateVideoCreativeRequestV1.
type DspCreateVideoCreativeRequestV1 struct {
	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Click through action for video creatives
	ClickThroughAction DspVideoClickThroughActionV1 `json:"clickThroughAction"`

	// ExternalId The creative external identifier.
	ExternalId *string `json:"externalId,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name               string                    `json:"name"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspCreateVideoCreativesRequestV1 Create video creatives request.
type DspCreateVideoCreativesRequestV1 = []DspCreateVideoCreativeRequestV1

// DspCreativeApprovalStatusV1 The creative approval status.
type DspCreativeApprovalStatusV1 string

// DspCreativeMarketplaceV1 Marketplace where this creative is applicable.
type DspCreativeMarketplaceV1 string

// DspCreativeModerationV1 The creative moderation summary.
type DspCreativeModerationV1 struct {
	// AdditionalNotes The additional notes.
	AdditionalNotes *[]string `json:"additionalNotes,omitempty"`
	CreativeId      *string   `json:"creativeId,omitempty"`

	// Reasons The reasons why creative is not approved.
	Reasons *[]string `json:"reasons,omitempty"`

	// Status The creative approval status.
	Status *DspCreativeApprovalStatusV1 `json:"status,omitempty"`
}

// DspCreativePreviewResponseV1 Creative preview response.
type DspCreativePreviewResponseV1 struct {
	// PreviewContent The HTML content
	PreviewContent *string `json:"previewContent,omitempty"`
}

// DspCreativeResponseV1 Response for the creative create/update operations. If operation is successful, it contains only creativeId. If it is a failure, it contains only errorDetails.
type DspCreativeResponseV1 struct {
	// CreativeId The creative Id.
	CreativeId *string `json:"creativeId,omitempty"`

	// ErrorDetails The error response object.
	ErrorDetails *Error `json:"errorDetails,omitempty"`
}

// DspCreativeSupplyV1 Different supported supply of creative.
type DspCreativeSupplyV1 string

// DspCustomUrlActionV1 Click through Action - Custom Url.
type DspCustomUrlActionV1 struct {
	// Url Define where the creative links to on click.
	Url string `json:"url"`
}

// DspImageClickThroughActionV1 Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
type DspImageClickThroughActionV1 struct {
	// AndroidAppDownload To target Android app download as click through action, at least `storeId`, `productAsin` or `downloadUrl` must be provided. If both `storeId` and `productAsin` is provided, `storePriority` must be provided as well. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
	AndroidAppDownload *DspClickThroughAndroidAppDownloadActionV1 `json:"androidAppDownload,omitempty"`

	// CustomUrl Click through Action - Custom Url.
	CustomUrl *DspCustomUrlActionV1 `json:"customUrl,omitempty"`

	// DetailPage Click through Action - Detail Page. This is applicable only to `MOBILE_OO` and `MOBILE_AAP` supply.
	DetailPage *DspClickThroughDetailPageActionV1 `json:"detailPage,omitempty"`

	// IosAppDownload Click through action - IOS App Download. This is applicable only to `MOBILE_AAP` supply.
	IosAppDownload *DspClickThroughIosAppDownloadActionV1 `json:"iosAppDownload,omitempty"`

	// KindleAppDownload Click through Action - Kindle App Download. This is applicable only to `MOBILE_AAP` supply.
	KindleAppDownload *DspClickThroughKindleAppDownloadActionV1 `json:"kindleAppDownload,omitempty"`

	// SearchAsin Click through Action - Search Asins. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
	SearchAsin *DspClickThroughSearchAsinActionV1 `json:"searchAsin,omitempty"`

	// SearchKeyword Click through action - Search Keywords. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
	SearchKeyword *DspClickThroughSearchKeywordActionV1 `json:"searchKeyword,omitempty"`
}

// DspImageCreativePreviewModelV1 Image creative preview model. Populate this to preview a new creative.
type DspImageCreativePreviewModelV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition DspAdChoicesPositionV1 `json:"adChoicesPosition"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
	ClickThroughAction *DspImageClickThroughActionV1 `json:"clickThroughAction,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Size Size of the creative.
	Size   DspSizeV1                `json:"size"`
	Supply DspImageCreativeSupplyV1 `json:"supply"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspImageCreativePreviewRequestV1 Image creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
type DspImageCreativePreviewRequestV1 struct {
	// CreativeId The creative Id.
	CreativeId *string `json:"creativeId,omitempty"`

	// CreativeModel Image creative preview model. Populate this to preview a new creative.
	CreativeModel *DspImageCreativePreviewModelV1 `json:"creativeModel,omitempty"`

	// PreviewConfiguration Configuration settings for preview
	PreviewConfiguration *DspPreviewConfigurationV1 `json:"previewConfiguration,omitempty"`
}

// DspImageCreativeSupplyV1 Different supported supply of creative.
type DspImageCreativeSupplyV1 = DspCreativeSupplyV1

// DspImageCreativeV1 defines model for DspImageCreativeV1.
type DspImageCreativeV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// ApprovalStatus The creative approval status.
	ApprovalStatus *DspCreativeApprovalStatusV1 `json:"approvalStatus,omitempty"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
	ClickThroughAction DspImageClickThroughActionV1 `json:"clickThroughAction"`

	// CreatedDate The creative created date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// LastUpdatedDate The creative last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size   DspSizeV1                `json:"size"`
	Supply DspImageCreativeSupplyV1 `json:"supply"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspImageCreativesResponseV1 Create/Update operation's image creatives response.
type DspImageCreativesResponseV1 = []DspCreativeResponseV1

// DspPreviewConfigurationV1 Configuration settings for preview
type DspPreviewConfigurationV1 struct {
	// IsOnAmazon If it's true, shows preview in amazon websites, else shows in other websites
	IsOnAmazon *bool `json:"isOnAmazon,omitempty"`
}

// DspReadImageCreativesResponseV1 Read image creatives response.
type DspReadImageCreativesResponseV1 struct {
	Creatives *[]DspImageCreativeV1 `json:"creatives,omitempty"`
}

// DspReadRecCreativesResponseV1 Read Responsive eCommerce creative (REC) creatives response.
type DspReadRecCreativesResponseV1 struct {
	Creatives *[]DspRecCreativeV1 `json:"creatives,omitempty"`
}

// DspReadThirdPartyCreativesResponseV1 Read Third Party creative creatives response.
type DspReadThirdPartyCreativesResponseV1 struct {
	Creatives *[]DspThirdPartyCreativeV1 `json:"creatives,omitempty"`
}

// DspReadVideoCreativesResponseV1 Read video creatives response.
type DspReadVideoCreativesResponseV1 struct {
	Creatives *[]DspVideoCreativeV1 `json:"creatives,omitempty"`
}

// DspReadWriteImageCreativeAttributesV1 This holds common properties that can we written and updated for image creative.
type DspReadWriteImageCreativeAttributesV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
	ClickThroughAction DspImageClickThroughActionV1 `json:"clickThroughAction"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspReadWriteRecCreativeAttributesV1 This holds common properties that can we written and updated for REC creative.
type DspReadWriteRecCreativeAttributesV1 struct {
	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AllowThirdPartySellers If it's true, orders can be fulfilled by third party sellers.
	AllowThirdPartySellers *bool `json:"allowThirdPartySellers,omitempty"`

	// AllowedFormats A list of formats configured to display for the creative.
	AllowedFormats *[]DspRecFormatV1 `json:"allowedFormats,omitempty"`

	// AllowedSizes A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
	AllowedSizes *[]DspSizeV1 `json:"allowedSizes,omitempty"`

	// AssociatedProducts Product objects associated with the creative.
	AssociatedProducts []DspRecProductV1 `json:"associatedProducts"`

	// Content Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
	Content *DspRecContentV1 `json:"content,omitempty"`

	// OptimizationGoal Metric which creative optimization should attempt to improve.
	OptimizationGoal *DspRecOptimizationGoalV1 `json:"optimizationGoal,omitempty"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string `json:"thirdPartyClickTrackers,omitempty"`

	// ThirdPartyTrackers URL used for tracking interactions with third party
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspReadWriteThirdPartyCreativeAttributesV1 This holds common properties that can we written and updated for Third Party creative.
type DspReadWriteThirdPartyCreativeAttributesV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// Destination Choose `AMAZON` if the `tag` links to an Amazon site like Amazon.com or IMDb. Otherwise choose `OTHER`.
	Destination *DspClickThroughDestinationV1 `json:"destination,omitempty"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// TagSource The third party tag associated with creative.
	TagSource          string                    `json:"tagSource"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspReadWriteVideoCreativeAttributesV1 This holds common properties that can we written and updated for video creative
type DspReadWriteVideoCreativeAttributesV1 struct {
	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Click through action for video creatives
	ClickThroughAction DspVideoClickThroughActionV1 `json:"clickThroughAction"`

	// ExternalId The creative external identifier.
	ExternalId         *string                   `json:"externalId,omitempty"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspRecContentV1 Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
type DspRecContentV1 struct {
	// Background Creative customization field for displaying custom images.
	Background *[]DspAssetV1 `json:"background,omitempty"`

	// LogoHeadline Creative customization field for displaying brandlogo and headline.
	LogoHeadline *struct {
		// BrandLogo Asset to be associated with creative.
		BrandLogo DspAssetV1 `json:"brandLogo"`

		// Headline Creative customization field for displaying headline.
		Headline *string `json:"headline,omitempty"`
	} `json:"logoHeadline,omitempty"`
}

// DspRecCreativePreviewModelV1 Responsive eCommerce Creative preview model. Populate this to preview a new creative.
type DspRecCreativePreviewModelV1 struct {
	// Content Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
	Content *DspRecContentV1 `json:"content,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspRecCreativePreviewRequestV1 Responsive eCommerce creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
type DspRecCreativePreviewRequestV1 struct {
	// CreativeId The identifier of the creative.
	CreativeId *string `json:"creativeId,omitempty"`

	// CreativeModel Responsive eCommerce Creative preview model. Populate this to preview a new creative.
	CreativeModel        *DspRecCreativePreviewModelV1 `json:"creativeModel,omitempty"`
	PreviewConfiguration DspRecPreviewConfigurationV1  `json:"previewConfiguration"`
}

// DspRecCreativeV1 defines model for DspRecCreativeV1.
type DspRecCreativeV1 struct {
	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// AllowThirdPartySellers If it's true, orders can be fulfilled by third party sellers.
	AllowThirdPartySellers *bool `json:"allowThirdPartySellers,omitempty"`

	// AllowedFormats A list of formats configured to display for the creative.
	AllowedFormats *[]DspRecFormatV1 `json:"allowedFormats,omitempty"`

	// AllowedSizes A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
	AllowedSizes *[]DspSizeV1 `json:"allowedSizes,omitempty"`

	// ApprovalStatus The creative approval status.
	ApprovalStatus *DspCreativeApprovalStatusV1 `json:"approvalStatus,omitempty"`

	// AssociatedProducts Product objects associated with the creative.
	AssociatedProducts []DspRecProductV1 `json:"associatedProducts"`

	// Content Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
	Content *DspRecContentV1 `json:"content,omitempty"`

	// CreatedDate The creative created date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// LastUpdatedDate The creative last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// OptimizationGoal Metric which creative optimization should attempt to improve.
	OptimizationGoal *DspRecOptimizationGoalV1 `json:"optimizationGoal,omitempty"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string `json:"thirdPartyClickTrackers,omitempty"`

	// ThirdPartyTrackers URL used for tracking interactions with third party
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspRecCreativesResponseV1 Create/Update operation's rec creatives response.
type DspRecCreativesResponseV1 = []DspCreativeResponseV1

// DspRecFormatV1 Formats configured to display for the creative.
// * `SHOP_NOW`: Clicking on the ad will take customer to the relevant product detail page.
// * `ADD_TO_CART`: Clicking on the ad will add the product to the customer’s Cart.
// * `COUPON`: Clicking on the ad will clip the coupon and take the customer to the product detail page for that item, if signed in; otherwise take them to the coupon landing page where the customer is instructed to sign in.
type DspRecFormatV1 string

// DspRecOptimizationGoalV1 Metric which creative optimization should attempt to improve.
type DspRecOptimizationGoalV1 string

// DspRecPreviewConfigurationV1 defines model for DspRecPreviewConfigurationV1.
type DspRecPreviewConfigurationV1 struct {
	// AllowedFormat Formats configured to display for the creative.
	// * `SHOP_NOW`: Clicking on the ad will take customer to the relevant product detail page.
	// * `ADD_TO_CART`: Clicking on the ad will add the product to the customer’s Cart.
	// * `COUPON`: Clicking on the ad will clip the coupon and take the customer to the product detail page for that item, if signed in; otherwise take them to the coupon landing page where the customer is instructed to sign in.
	AllowedFormat DspRecFormatV1 `json:"allowedFormat"`

	// AllowedSize Size of the creative.
	AllowedSize DspSizeV1 `json:"allowedSize"`

	// AssociatedProduct The object representation of a product.
	AssociatedProduct DspRecProductV1 `json:"associatedProduct"`

	// IsOnAmazon If it's true, shows preview in amazon websites, else shows in other websites
	IsOnAmazon *bool `json:"isOnAmazon,omitempty"`
}

// DspRecProductV1 The object representation of a product.
type DspRecProductV1 struct {
	// Asin Amazon standard identification number.
	Asin string `json:"asin"`

	// ProductTitle Retail product title.
	ProductTitle *string `json:"productTitle,omitempty"`
}

// DspSizeV1 Size of the creative.
type DspSizeV1 struct {
	// Height The creative height in pixels.
	Height float64 `json:"height"`

	// Width The creative width in pixels.
	Width float64 `json:"width"`
}

// DspThirdPartyCreativePreviewModelV1 Third Party Creative preview model. Populate this to preview a new creative.
type DspThirdPartyCreativePreviewModelV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition DspAdChoicesPositionV1 `json:"adChoicesPosition"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// Supply Different supported supply of creative.
	Supply DspCreativeSupplyV1 `json:"supply"`

	// TagSource The third party tag associated with creative.
	TagSource          string                    `json:"tagSource"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspThirdPartyCreativePreviewRequestV1 Third Party creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
type DspThirdPartyCreativePreviewRequestV1 struct {
	// CreativeId The identifier of the creative.
	CreativeId *string `json:"creativeId,omitempty"`

	// CreativeModel Third Party Creative preview model. Populate this to preview a new creative.
	CreativeModel *DspThirdPartyCreativePreviewModelV1 `json:"creativeModel,omitempty"`

	// PreviewConfiguration Configuration settings for preview
	PreviewConfiguration DspPreviewConfigurationV1 `json:"previewConfiguration"`
}

// DspThirdPartyCreativeV1 defines model for DspThirdPartyCreativeV1.
type DspThirdPartyCreativeV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// ApprovalStatus The creative approval status.
	ApprovalStatus *DspCreativeApprovalStatusV1 `json:"approvalStatus,omitempty"`

	// CreatedDate The creative created date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// Destination Choose `AMAZON` if the `tag` links to an Amazon site like Amazon.com or IMDb. Otherwise choose `OTHER`.
	Destination *DspClickThroughDestinationV1 `json:"destination,omitempty"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// LastUpdatedDate The creative last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// Supply Different supported supply of creative.
	Supply DspCreativeSupplyV1 `json:"supply"`

	// TagSource The third party tag associated with creative.
	TagSource          string                    `json:"tagSource"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspThirdPartyCreativesResponseV1 Create/Update third party creatives response.
type DspThirdPartyCreativesResponseV1 = []DspCreativeResponseV1

// DspThirdPartyTrackerTypeV1 Third party creative tracker type.
type DspThirdPartyTrackerTypeV1 string

// DspThirdPartyTrackerV1 Trackers used for tracking interactions with third party
type DspThirdPartyTrackerV1 struct {
	// TrackerUrl URL used for tracking interactions with third party
	TrackerUrl string `json:"trackerUrl"`

	// Type Third party creative tracker type.
	Type DspThirdPartyTrackerTypeV1 `json:"type"`
}

// DspUpdateImageCreativeRequestV1 defines model for DspUpdateImageCreativeRequestV1.
type DspUpdateImageCreativeRequestV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Image's click through action which can have any one of the following properties. One action and one action alone must be provided.
	ClickThroughAction DspImageClickThroughActionV1 `json:"clickThroughAction"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string                 `json:"thirdPartyClickTrackers,omitempty"`
	ThirdPartyTrackers      *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspUpdateImageCreativesRequestV1 Update image creatives request.
type DspUpdateImageCreativesRequestV1 = []DspUpdateImageCreativeRequestV1

// DspUpdateRecCreativeRequestV1 defines model for DspUpdateRecCreativeRequestV1.
type DspUpdateRecCreativeRequestV1 struct {
	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// AllowThirdPartySellers If it's true, orders can be fulfilled by third party sellers.
	AllowThirdPartySellers *bool `json:"allowThirdPartySellers,omitempty"`

	// AllowedFormats A list of formats configured to display for the creative.
	AllowedFormats *[]DspRecFormatV1 `json:"allowedFormats,omitempty"`

	// AllowedSizes A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
	AllowedSizes *[]DspSizeV1 `json:"allowedSizes,omitempty"`

	// AssociatedProducts Product objects associated with the creative.
	AssociatedProducts []DspRecProductV1 `json:"associatedProducts"`

	// Content Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
	Content *DspRecContentV1 `json:"content,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// Name The creative name.
	Name string `json:"name"`

	// OptimizationGoal Metric which creative optimization should attempt to improve.
	OptimizationGoal *DspRecOptimizationGoalV1 `json:"optimizationGoal,omitempty"`

	// ThirdPartyClickTrackers This URL is pinged when the creative is clicked. The URL can contain macros.
	ThirdPartyClickTrackers *[]string `json:"thirdPartyClickTrackers,omitempty"`

	// ThirdPartyTrackers URL used for tracking interactions with third party
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspUpdateRecCreativesRequestV1 Update Responsive eCommerce creatives (REC) request.
type DspUpdateRecCreativesRequestV1 = []DspUpdateRecCreativeRequestV1

// DspUpdateThirdPartyCreativeRequestV1 defines model for DspUpdateThirdPartyCreativeRequestV1.
type DspUpdateThirdPartyCreativeRequestV1 struct {
	// AdChoicesPosition Default value is TOP_RIGHT.
	AdChoicesPosition *DspAdChoicesPositionV1 `json:"adChoicesPosition,omitempty"`

	// AdditionalHtml Add HTML to the creative for surveys or other arbitrary HTML.
	AdditionalHtml *string `json:"additionalHtml,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// Destination Choose `AMAZON` if the `tag` links to an Amazon site like Amazon.com or IMDb. Otherwise choose `OTHER`.
	Destination *DspClickThroughDestinationV1 `json:"destination,omitempty"`

	// ExternalId The creative external Id.
	ExternalId *string `json:"externalId,omitempty"`

	// Name The creative name.
	Name string `json:"name"`

	// Size Size of the creative.
	Size DspSizeV1 `json:"size"`

	// TagSource The third party tag associated with creative.
	TagSource          string                    `json:"tagSource"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspUpdateThirdPartyCreativesRequestV1 Update Third Party creatives request.
type DspUpdateThirdPartyCreativesRequestV1 = []DspUpdateThirdPartyCreativeRequestV1

// DspUpdateVideoCreativeRequestV1 defines model for DspUpdateVideoCreativeRequestV1.
type DspUpdateVideoCreativeRequestV1 struct {
	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Click through action for video creatives
	ClickThroughAction DspVideoClickThroughActionV1 `json:"clickThroughAction"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// ExternalId The creative external identifier.
	ExternalId *string `json:"externalId,omitempty"`

	// Name The creative name.
	Name               string                    `json:"name"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspUpdateVideoCreativesRequestV1 Update video creatives request
type DspUpdateVideoCreativesRequestV1 = []DspUpdateVideoCreativeRequestV1

// DspVideoClickThroughActionV1 Click through action for video creatives
type DspVideoClickThroughActionV1 struct {
	// CustomUrl Click through Action - Custom Url.
	CustomUrl *DspCustomUrlActionV1 `json:"customUrl,omitempty"`
}

// DspVideoCreativePreviewModelV1 Video creative preview model. Populate this to preview a new creative.
type DspVideoCreativePreviewModelV1 struct {
	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Click through action for video creatives
	ClickThroughAction *DspVideoClickThroughActionV1 `json:"clickThroughAction,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace        DspCreativeMarketplaceV1  `json:"marketplace"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspVideoCreativePreviewRequestV1 Video creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
type DspVideoCreativePreviewRequestV1 struct {
	// CreativeId The creative Id.
	CreativeId *string `json:"creativeId,omitempty"`

	// CreativeModel Video creative preview model. Populate this to preview a new creative.
	CreativeModel *DspVideoCreativePreviewModelV1 `json:"creativeModel,omitempty"`
}

// DspVideoCreativeV1 defines model for DspVideoCreativeV1.
type DspVideoCreativeV1 struct {
	// AdvertiserId The advertiser Id. It's an immutable field.
	AdvertiserId string `json:"advertiserId"`

	// ApprovalStatus The creative approval status.
	ApprovalStatus *DspCreativeApprovalStatusV1 `json:"approvalStatus,omitempty"`

	// Asset Asset to be associated with creative.
	Asset DspAssetV1 `json:"asset"`

	// ClickThroughAction Click through action for video creatives
	ClickThroughAction DspVideoClickThroughActionV1 `json:"clickThroughAction"`

	// CreatedDate The creative created date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// CreativeId The creative Id. It will be used to perform update operation. It's an immutable field.
	CreativeId string `json:"creativeId"`

	// ExternalId The creative external identifier.
	ExternalId *string `json:"externalId,omitempty"`

	// LastUpdatedDate The creative last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Marketplace Marketplace where this creative is applicable.
	Marketplace DspCreativeMarketplaceV1 `json:"marketplace"`

	// Name The creative name.
	Name               string                    `json:"name"`
	ThirdPartyTrackers *[]DspThirdPartyTrackerV1 `json:"thirdPartyTrackers,omitempty"`
}

// DspVideoCreativesResponseV1 Create/Update operation's video creatives response.
type DspVideoCreativesResponseV1 = []DspCreativeResponseV1

// DvBrandSafetyAppAgeRating A list of app age ratings to be used for excluding apps. For example, `TEENS_12_PLUS` will only exclude apps with content rated for everyone ages 12 and over. `UNKNOWN` will exclude apps with content unrated or unknown to Double Verify.
type DvBrandSafetyAppAgeRating = []string

// DvBrandSafetyAppStarRating App star rating to be used for excluding apps.
type DvBrandSafetyAppStarRating string

// DvBrandSafetyContentCategories A list of content categories to exclude from targeting.
type DvBrandSafetyContentCategories = []string

// DvBrandSafetyContentCategoriesV32 A list of content categories to exclude from targeting. EXTREME_GRAPHIC is available since version `application/vnd.dsplineitems.v3.2+json`.
type DvBrandSafetyContentCategoriesV32 = []string

// DvBrandSafetyContentCategoriesWithRisk A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
type DvBrandSafetyContentCategoriesWithRisk map[string]BrandSuitabilityRiskLevel

// DvBrandSafetyContentCategoriesWithRiskV32 A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DEATH_INJURIES`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]. `DEATH_INJURIES` is available since version `application/vnd.dsplineitems.v3.2+json`.
type DvBrandSafetyContentCategoriesWithRiskV32 map[string]BrandSuitabilityRiskLevel

// DvBrandSafetyExcludeApps Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
type DvBrandSafetyExcludeApps = bool

// DvBrandSafetyUnknownContent Set to `true` to exclude unknown content.
type DvBrandSafetyUnknownContent = bool

// DvCustomContextualSegment defines model for DvCustomContextualSegment.
type DvCustomContextualSegment struct {
	// Id The segment identifier.
	Id string `json:"id"`

	// Name The segment name.
	Name string `json:"name"`
}

// DvCustomContextualSegmentId The custom segment identifier.
type DvCustomContextualSegmentId = string

// DvCustomContextualSegments defines model for DvCustomContextualSegments.
type DvCustomContextualSegments struct {
	CustomContextualSegments *[]DvCustomContextualSegment `json:"customContextualSegments,omitempty"`
	NextToken                *string                      `json:"nextToken,omitempty"`
}

// Error The error response object.
type Error struct {
	Errors *[]SubError `json:"errors,omitempty"`

	// Message A human-readable description of the response.
	Message *string `json:"message,omitempty"`

	// RequestId Request Id that uniquely identifies your request.
	RequestId *string `json:"requestId,omitempty"`
}

// FileUploadPolicy defines model for FileUploadPolicy.
type FileUploadPolicy struct {
	// Fields Fields used in Post request. See more details at https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_s3_presigned_post.html#post-file-using-formdata-in-nodejs
	Fields *map[string]string `json:"fields,omitempty"`

	// Url The AWS S3 url for file upload. It will be used as POST request URL.
	Url *string `json:"url,omitempty"`
}

// FrequencyCap defines model for FrequencyCap.
type FrequencyCap struct {
	// MaxImpressions The maximum number of times an ad is displayed.
	MaxImpressions *int32 `json:"maxImpressions,omitempty"`

	// TimeUnit The time unit.
	TimeUnit *FrequencyCapTimeUnit `json:"timeUnit,omitempty"`

	// TimeUnitCount The count of time units.
	TimeUnitCount *int32 `json:"timeUnitCount,omitempty"`

	// Type The type of advertising frequency cap. If `UNCAPPED`, no other fields are used.
	Type FrequencyCapType `json:"type"`
}

// FrequencyCapTimeUnit The time unit.
type FrequencyCapTimeUnit string

// FrequencyCapType The type of advertising frequency cap. If `UNCAPPED`, no other fields are used.
type FrequencyCapType string

// GeoLocation Single geo location information.
type GeoLocation struct {
	// Category Category of the geo location.
	Category *GeoLocationCategory `json:"category,omitempty"`
	Id       *string              `json:"id,omitempty"`

	// Name Name of geo location.
	Name *string `json:"name,omitempty"`
}

// GeoLocationCategory Category of the geo location.
type GeoLocationCategory string

// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
type GeoLocationTargeting struct {
	Exclusions *[]Identifier `json:"exclusions,omitempty"`
	Inclusions *[]Identifier `json:"inclusions,omitempty"`

	// LocationTargetingBy The geographic location targeting type. IPADDRESS: includes IP address only. IPADDRESS_POSTALCODE: includes both IP address and postal code.
	LocationTargetingBy *GeoLocationTargetingLocationTargetingBy `json:"locationTargetingBy,omitempty"`
}

// GeoLocationTargetingLocationTargetingBy The geographic location targeting type. IPADDRESS: includes IP address only. IPADDRESS_POSTALCODE: includes both IP address and postal code.
type GeoLocationTargetingLocationTargetingBy string

// Goal The primary goal that a campaign using this configuration is trying to achieve.
type Goal string

// GoalConfiguration defines model for GoalConfiguration.
type GoalConfiguration struct {
	AvailableKpis *[]struct {
		// AutoOptimizations Which optimizations can be applied for this KPI
		AutoOptimizations *[]AutoOptimization `json:"autoOptimizations,omitempty"`

		// KpiName Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation.
		KpiName *GoalKpi `json:"kpiName,omitempty"`
	} `json:"availableKpis,omitempty"`

	// GoalName The primary goal that a campaign using this configuration is trying to achieve.
	GoalName *Goal `json:"goalName,omitempty"`
}

// GoalConfigurationV1 defines model for GoalConfigurationV1.
type GoalConfigurationV1 struct {
	AvailableKpis *[]struct {
		// AutoOptimizations Which optimizations can be applied for this KPI
		AutoOptimizations *[]AutoOptimization `json:"autoOptimizations,omitempty"`

		// KpiName Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.goalconfigurations.v1+json.
		KpiName *GoalKpiV1 `json:"kpiName,omitempty"`
	} `json:"availableKpis,omitempty"`

	// GoalName The primary goal that a campaign using this configuration is trying to achieve. PURCHASES_ON_OFF_AMAZON is available since application/vnd.goalconfigurations.v1+json.
	GoalName *GoalV1 `json:"goalName,omitempty"`
}

// GoalConfigurationV11 defines model for GoalConfigurationV1_1.
type GoalConfigurationV11 struct {
	AvailableKpis *[]struct {
		// AutoOptimizations Which optimizations can be applied for this KPI
		AutoOptimizations *[]AutoOptimization `json:"autoOptimizations,omitempty"`

		// KpiName Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.goalconfigurations.v1+json.
		// * CLICK_THROUGH_RATE: The number of click-throughs divided by the number of impressions. (CTR = Clicks / Impressions)
		// * COMBINED_RETURN_ON_AD_SPEND: Return on advertising spend for products sold on and off Amazon, measured as ad-attributed sales per local currency unit of ad spend. (Combined ROAS = Combined product sales / Total cost)
		// * COST_PER_ACTION: The cost to acquire an off-Amazon conversion. (CPA = Total cost / Off-Amazon conversions)
		// * COST_PER_CLICK: The cost paid per click-through. (CPC = Total cost / Clicks)
		// * COST_PER_DETAIL_PAGE_VIEW: The cost to acquire a detail page view for a promoted product. (CPDPV = Total cost / Detail page views)
		// * COST_PER_FIRST_APP_OPEN: The cost to acquire a first-time STV app open. (CPFAO = Total cost / First STV app opens)
		// * COST_PER_INSTALL: The cost for a mobile app install. (CPI = Total cost / Mobile app installs)
		// * COST_PER_VIDEO_COMPLETION: The cost to acquire a video complete conversion. (CPVC = Total cost / Video completions)
		// * DETAIL_PAGE_VIEW_RATE: Detail page view rate for promoted products. (DPVR = Detail page views for promoted products / Impressions)
		// * NONE: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
		// * OTHER: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
		// * REACH: The number of unique users exposed to the creative during its flight.
		// * RETURN_ON_AD_SPEND: Return on advertising spend for promoted products, measured as ad-attributed sales for promoted products per local currency unit of ad spend. (ROAS = Promoted product sales / Total cost)
		// * TOTAL_COST_PER_SUBSCRIPTION: The cost to acquire a new free trial or paid subscription for a Prime Video channel or STV app subscription. (Total cost per subscription = Total cost / Subscription sign ups)
		// * TOTAL_RETURN_ON_AD_SPEND: Return on ad spend, measured as ad-attributed sales for the brands’ products per local currency unit of ad spend. (Total ROAS = Total product sales / Total cost)
		// * VIDEO_COMPLETION_RATE: The number of video completions relative to the number of video starts. (Video completion rate = Video complete / Video start)
		KpiName *GoalKpiV11 `json:"kpiName,omitempty"`
	} `json:"availableKpis,omitempty"`

	// GoalName The primary goal that a campaign using this configuration is trying to achieve. PURCHASES_ON_OFF_AMAZON is available since application/vnd.goalconfigurations.v1+json.
	GoalName *GoalV1 `json:"goalName,omitempty"`
}

// GoalKpi Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation.
type GoalKpi string

// GoalKpiV1 Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation.
type GoalKpiV1 = GoalKpi

// GoalKpiV11 Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.goalconfigurations.v1+json.
// * CLICK_THROUGH_RATE: The number of click-throughs divided by the number of impressions. (CTR = Clicks / Impressions)
// * COMBINED_RETURN_ON_AD_SPEND: Return on advertising spend for products sold on and off Amazon, measured as ad-attributed sales per local currency unit of ad spend. (Combined ROAS = Combined product sales / Total cost)
// * COST_PER_ACTION: The cost to acquire an off-Amazon conversion. (CPA = Total cost / Off-Amazon conversions)
// * COST_PER_CLICK: The cost paid per click-through. (CPC = Total cost / Clicks)
// * COST_PER_DETAIL_PAGE_VIEW: The cost to acquire a detail page view for a promoted product. (CPDPV = Total cost / Detail page views)
// * COST_PER_FIRST_APP_OPEN: The cost to acquire a first-time STV app open. (CPFAO = Total cost / First STV app opens)
// * COST_PER_INSTALL: The cost for a mobile app install. (CPI = Total cost / Mobile app installs)
// * COST_PER_VIDEO_COMPLETION: The cost to acquire a video complete conversion. (CPVC = Total cost / Video completions)
// * DETAIL_PAGE_VIEW_RATE: Detail page view rate for promoted products. (DPVR = Detail page views for promoted products / Impressions)
// * NONE: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
// * OTHER: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
// * REACH: The number of unique users exposed to the creative during its flight.
// * RETURN_ON_AD_SPEND: Return on advertising spend for promoted products, measured as ad-attributed sales for promoted products per local currency unit of ad spend. (ROAS = Promoted product sales / Total cost)
// * TOTAL_COST_PER_SUBSCRIPTION: The cost to acquire a new free trial or paid subscription for a Prime Video channel or STV app subscription. (Total cost per subscription = Total cost / Subscription sign ups)
// * TOTAL_RETURN_ON_AD_SPEND: Return on ad spend, measured as ad-attributed sales for the brands’ products per local currency unit of ad spend. (Total ROAS = Total product sales / Total cost)
// * VIDEO_COMPLETION_RATE: The number of video completions relative to the number of video starts. (Video completion rate = Video complete / Video start)
type GoalKpiV11 string

// GoalV1 The primary goal that a campaign using this configuration is trying to achieve.
type GoalV1 = Goal

// IABContentCategory defines model for IABContentCategory.
type IABContentCategory struct {
	// Id The category identifier.
	Id string `json:"id"`

	// Name The category name.
	Name string `json:"name"`

	// ParentId The identifier of the parent category. This is blank if the category is a parent category.
	ParentId *string `json:"parentId,omitempty"`
}

// IasBrandSafety defines model for IasBrandSafety.
type IasBrandSafety struct {
	// ExcludeContent Set to `true` to exclude content that Integral Ad Science is not able to rate.
	ExcludeContent bool `json:"excludeContent"`

	// IasBrandSafetyAdult The IAS brand safety risk level.
	IasBrandSafetyAdult IasBrandSafetyLevel `json:"iasBrandSafetyAdult"`

	// IasBrandSafetyAlcohol The IAS brand safety risk level.
	IasBrandSafetyAlcohol IasBrandSafetyLevel `json:"iasBrandSafetyAlcohol"`

	// IasBrandSafetyGambling The IAS brand safety risk level.
	IasBrandSafetyGambling IasBrandSafetyLevel `json:"iasBrandSafetyGambling"`

	// IasBrandSafetyHateSpeech The IAS brand safety risk level.
	IasBrandSafetyHateSpeech IasBrandSafetyLevel `json:"iasBrandSafetyHateSpeech"`

	// IasBrandSafetyIllegalDownloads The IAS brand safety risk level.
	IasBrandSafetyIllegalDownloads IasBrandSafetyLevel `json:"iasBrandSafetyIllegalDownloads"`

	// IasBrandSafetyIllegalDrugs The IAS brand safety risk level.
	IasBrandSafetyIllegalDrugs IasBrandSafetyLevel `json:"iasBrandSafetyIllegalDrugs"`

	// IasBrandSafetyOffensiveLanguage The IAS brand safety risk level.
	IasBrandSafetyOffensiveLanguage IasBrandSafetyLevel `json:"iasBrandSafetyOffensiveLanguage"`

	// IasBrandSafetyViolence The IAS brand safety risk level.
	IasBrandSafetyViolence IasBrandSafetyLevel `json:"iasBrandSafetyViolence"`
}

// IasBrandSafetyLevel The IAS brand safety risk level.
type IasBrandSafetyLevel string

// IasBrandSafetyLevelV3 The IAS brand safety risk level.
type IasBrandSafetyLevelV3 string

// IasBrandSafetyV3 defines model for IasBrandSafetyV3.
type IasBrandSafetyV3 = IasBrandSafety

// IasFraudInvalidTraffic The type of fraud invalid traffic.
type IasFraudInvalidTraffic string

// IasViewability The IAS viewability standard.
type IasViewability struct {
	// Standard The viewability standard
	Standard IasViewabilityStandard `json:"standard"`

	// ViewabilityTargeting The type of viewability tier.
	ViewabilityTargeting ViewabilityTier `json:"viewabilityTargeting"`
}

// IasViewabilityStandard The viewability standard
type IasViewabilityStandard string

// Identifier The unique identifier of the DSP resource/object.
type Identifier = string

// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
type IntegralAdScience struct {
	BrandSafety *IasBrandSafety `json:"brandSafety,omitempty"`

	// FraudInvalidTraffic The type of fraud invalid traffic.
	FraudInvalidTraffic *IntegralAdScienceFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`

	// Viewability The IAS viewability standard.
	Viewability *IasViewability `json:"viewability,omitempty"`
}

// IntegralAdScienceFraudInvalidTraffic The type of fraud invalid traffic.
type IntegralAdScienceFraudInvalidTraffic string

// LineItem defines model for LineItem.
type LineItem struct {
	AppliedFees *AppliedFees `json:"appliedFees,omitempty"`

	// Bidding The bid values associated with a line item.
	Bidding Bidding         `json:"bidding"`
	Budget  *LineItemBudget `json:"budget,omitempty"`

	// Comments The line item comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The line item creation date.
	CreationDate    *string          `json:"creationDate,omitempty"`
	CreativeOptions *CreativeOptions `json:"creativeOptions,omitempty"`

	// CurrencyCode The currency code.
	CurrencyCode *CurrencyCode `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The lineitem delivery status. DELIVERING: The line item is delivering. OUT_OF_BUDGET: The line item is out of budget. ENDED: The line item has ended. CREATIVES_NOT_RUNNING: The line item doesn't have any active creatives to deliver. INACTIVE: The line item is paused by the user. READY_TO_DELIVER: The line item has not yet started.
	DeliveryStatus *LineItemDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
	EndDateTime string `json:"endDateTime"`

	// ExternalId The external identifier of the line item.
	ExternalId   *string      `json:"externalId,omitempty"`
	FrequencyCap FrequencyCap `json:"frequencyCap"`

	// LastUpdateDate The line item last update date.
	LastUpdateDate         *string                `json:"lastUpdateDate,omitempty"`
	LineItemClassification LineItemClassification `json:"lineItemClassification"`

	// LineItemId The line item identifier. This is required when we perform update operations. Immutable field.
	LineItemId *string `json:"lineItemId,omitempty"`

	// LineItemType The line item type.
	LineItemType LineItemType `json:"lineItemType"`

	// Name The line item name.
	Name         string               `json:"name"`
	Optimization LineItemOptimization `json:"optimization"`

	// OrderId The order to which the line item is associated. Immutable field.
	OrderId string `json:"orderId"`

	// StartDateTime The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00.
	StartDateTime string             `json:"startDateTime"`
	Targeting     *LineItemTargeting `json:"targeting,omitempty"`
}

// LineItemBasic defines model for LineItemBasic.
type LineItemBasic struct {
	// Bidding The bid values associated with a line item.
	Bidding *Bidding        `json:"bidding,omitempty"`
	Budget  *LineItemBudget `json:"budget,omitempty"`

	// Comments The line item comments.
	Comments *string `json:"comments,omitempty"`

	// CurrencyCode The currency code.
	CurrencyCode *CurrencyCode `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The lineitem delivery status. DELIVERING: The line item is delivering. OUT_OF_BUDGET: The line item is out of budget. ENDED: The line item has ended. CREATIVES_NOT_RUNNING: The line item doesn't have any active creatives to deliver. INACTIVE: The line item is paused by the user. READY_TO_DELIVER: The line item has not yet started.
	DeliveryStatus *LineItemDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example,2020-07-16T19:20:30+01:00
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The line item external identifier.
	ExternalId   *string       `json:"externalId,omitempty"`
	FrequencyCap *FrequencyCap `json:"frequencyCap,omitempty"`

	// LineItemId The line item identifier.
	LineItemId *string `json:"lineItemId,omitempty"`

	// LineItemType The line item type.
	LineItemType *LineItemType `json:"lineItemType,omitempty"`

	// Name The line item name.
	Name         *string               `json:"name,omitempty"`
	Optimization *LineItemOptimization `json:"optimization,omitempty"`

	// OrderId The order to which the line item is associated.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// LineItemBasicV21 defines model for LineItemBasicV2_1.
type LineItemBasicV21 = LineItemBasic

// LineItemBasicV22 defines model for LineItemBasicV2_2.
type LineItemBasicV22 = LineItemBasic

// LineItemBudget defines model for LineItemBudget.
type LineItemBudget struct {
	BudgetCaps *[]BudgetCap `json:"budgetCaps,omitempty"`
	Pacing     *Pacing      `json:"pacing,omitempty"`

	// TotalBudgetAmount The total budget amount.
	TotalBudgetAmount *float64 `json:"totalBudgetAmount,omitempty"`
}

// LineItemClassification defines model for LineItemClassification.
type LineItemClassification struct {
	// ProductCategories The array of identifiers of product categories associated with the line item. For `VIDEO` line item type only one parent product category or multiple sub-categories from one parent product category are allowed.
	ProductCategories []Identifier `json:"productCategories"`
}

// LineItemCreativeAssociation defines model for LineItemCreativeAssociation.
type LineItemCreativeAssociation struct {
	// CreativeId The creative to operate on.
	CreativeId string `json:"creativeId"`

	// EndDate The creative end date in in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
	EndDate *string `json:"endDate,omitempty"`

	// LineItemId The lineitem to operate on.
	LineItemId string `json:"lineItemId"`

	// StartDate The creative start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
	StartDate *string `json:"startDate,omitempty"`

	// Weight The weight of the creative. This field will be available only if the creative rotation type is `WEIGHTED`.
	Weight *int `json:"weight,omitempty"`
}

// LineItemCreativeAssociationOperation A lineItemCreativeAssociation operation.
type LineItemCreativeAssociationOperation string

// LineItemCreativeAssociations defines model for LineItemCreativeAssociations.
type LineItemCreativeAssociations struct {
	Response *[]LineItemCreativeAssociation `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// LineItemCreativeAssociationsRequest defines model for LineItemCreativeAssociationsRequest.
type LineItemCreativeAssociationsRequest struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId string `json:"advertiserId"`

	// Associations A list of the associations to operate on. This object requires only lineItemId and creativeId and other fields are not required.
	Associations []LineItemCreativeAssociation `json:"associations"`

	// Operation A lineItemCreativeAssociation operation.
	Operation LineItemCreativeAssociationOperation `json:"operation"`
}

// LineItemCreativeAssociationsResponse Response for the update operation. This object will have either success or failure property for the corresponding requests on the index.
type LineItemCreativeAssociationsResponse struct {
	// ErrorDetails The error response object.
	ErrorDetails *Error                       `json:"errorDetails,omitempty"`
	Success      *LineItemCreativeAssociation `json:"success,omitempty"`
}

// LineItemDeliveryStatus The lineitem delivery status. DELIVERING: The line item is delivering. OUT_OF_BUDGET: The line item is out of budget. ENDED: The line item has ended. CREATIVES_NOT_RUNNING: The line item doesn't have any active creatives to deliver. INACTIVE: The line item is paused by the user. READY_TO_DELIVER: The line item has not yet started.
type LineItemDeliveryStatus string

// LineItemOptimization defines model for LineItemOptimization.
type LineItemOptimization struct {
	// BudgetOptimization Set to `true` to enable budget optimization for the line item.
	BudgetOptimization bool `json:"budgetOptimization"`
}

// LineItemResponse Response for the line item create/update operations. Success contains only lineItemId and failure contains only errorDetails corresponding to that requested index in that batch (array of items).
type LineItemResponse struct {
	// ErrorDetails The error response object.
	ErrorDetails *Error `json:"errorDetails,omitempty"`

	// LineItemId The Line item identifier.
	LineItemId *string `json:"lineItemId,omitempty"`
}

// LineItemTargeting defines model for LineItemTargeting.
type LineItemTargeting struct {
	AapMobileAppTargeting        *AapMobileAppTargeting        `json:"aapMobileAppTargeting,omitempty"`
	AmazonMobileDisplayTargeting *AmazonMobileDisplayTargeting `json:"amazonMobileDisplayTargeting,omitempty"`
	StandardDisplayTargeting     *StandardDisplayTargeting     `json:"standardDisplayTargeting,omitempty"`
}

// LineItemTargetingV21 defines model for LineItemTargetingV2_1.
type LineItemTargetingV21 = LineItemTargeting

// LineItemTargetingV3 defines model for LineItemTargetingV3.
type LineItemTargetingV3 struct {
	AapMobileAppTargeting        *AapMobileAppTargetingV3        `json:"aapMobileAppTargeting,omitempty"`
	AmazonMobileDisplayTargeting *AmazonMobileDisplayTargetingV3 `json:"amazonMobileDisplayTargeting,omitempty"`
	StandardDisplayTargeting     *StandardDisplayTargetingV3     `json:"standardDisplayTargeting,omitempty"`

	// VideoTargeting This field is available since version `application/vnd.dsplineitems.v2.1+json`.
	VideoTargeting *VideoTargetingV3 `json:"videoTargeting,omitempty"`
}

// LineItemTargetingV31 defines model for LineItemTargetingV3_1.
type LineItemTargetingV31 struct {
	AapMobileAppTargeting        *AapMobileAppTargetingV31        `json:"aapMobileAppTargeting,omitempty"`
	AmazonMobileDisplayTargeting *AmazonMobileDisplayTargetingV31 `json:"amazonMobileDisplayTargeting,omitempty"`
	StandardDisplayTargeting     *StandardDisplayTargetingV31     `json:"standardDisplayTargeting,omitempty"`
	VideoTargeting               *VideoTargetingV31               `json:"videoTargeting,omitempty"`
}

// LineItemTargetingV32 defines model for LineItemTargetingV3_2.
type LineItemTargetingV32 struct {
	AapMobileAppTargeting        *AapMobileAppTargetingV32        `json:"aapMobileAppTargeting,omitempty"`
	AmazonMobileDisplayTargeting *AmazonMobileDisplayTargetingV31 `json:"amazonMobileDisplayTargeting,omitempty"`
	StandardDisplayTargeting     *StandardDisplayTargetingV32     `json:"standardDisplayTargeting,omitempty"`
	VideoTargeting               *VideoTargetingV32               `json:"videoTargeting,omitempty"`
}

// LineItemType The line item type.
type LineItemType string

// LineItemTypeBasicV21 The line item type.
type LineItemTypeBasicV21 = LineItemType

// LineItemTypeV21 The line item type.
type LineItemTypeV21 = LineItemType

// LineItemV21 defines model for LineItemV2_1.
type LineItemV21 = LineItem

// LineItemV3 defines model for LineItemV3.
type LineItemV3 struct {
	AppliedFees *AppliedFees `json:"appliedFees,omitempty"`

	// Bidding The bid values associated with a line item.
	Bidding Bidding         `json:"bidding"`
	Budget  *LineItemBudget `json:"budget,omitempty"`

	// Comments The line item comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The line item creation date.
	CreationDate    *string          `json:"creationDate,omitempty"`
	CreativeOptions *CreativeOptions `json:"creativeOptions,omitempty"`
	CurrencyCode    *CurrencyCodeV3  `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The lineitem delivery status. DELIVERING: The line item is delivering. OUT_OF_BUDGET: The line item is out of budget. ENDED: The line item has ended. CREATIVES_NOT_RUNNING: The line item doesn't have any active creatives to deliver. INACTIVE: The line item is paused by the user. READY_TO_DELIVER: The line item has not yet started.
	DeliveryStatus *LineItemDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
	EndDateTime string `json:"endDateTime"`

	// ExternalId The external identifier of the line item.
	ExternalId   *string      `json:"externalId,omitempty"`
	FrequencyCap FrequencyCap `json:"frequencyCap"`

	// LastUpdatedDate The line item last updated date.
	LastUpdatedDate        *string                `json:"lastUpdatedDate,omitempty"`
	LineItemClassification LineItemClassification `json:"lineItemClassification"`

	// LineItemId The line item identifier. This is required when we perform update operations. Immutable field.
	LineItemId *string `json:"lineItemId,omitempty"`

	// LineItemType The line item type. All operations are supported for VIDEO line item type since version `application/vnd.dsplineitems.v2.1+json`.
	LineItemType LineItemTypeV21 `json:"lineItemType"`

	// Name The line item name.
	Name         string               `json:"name"`
	Optimization LineItemOptimization `json:"optimization"`

	// OrderId The order to which the line item is associated. Immutable field.
	OrderId string `json:"orderId"`

	// StartDateTime The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00.
	StartDateTime string               `json:"startDateTime"`
	Targeting     *LineItemTargetingV3 `json:"targeting,omitempty"`
}

// LineItemV31 defines model for LineItemV3_1.
type LineItemV31 = LineItemV3

// LineItemV32 defines model for LineItemV3_2.
type LineItemV32 = LineItemV31

// LineItems defines model for LineItems.
type LineItems struct {
	Response *[]LineItemBasic `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// LineItemsV21 defines model for LineItemsV2_1.
type LineItemsV21 struct {
	Response *[]LineItemBasicV21 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// LineItemsV22 defines model for LineItemsV2_2.
type LineItemsV22 struct {
	Response *[]LineItemBasicV22 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// MergedDomainList defines model for MergedDomainList.
type MergedDomainList struct {
	// DomainListMergedFile The URL address of the domain list file after merging all domains into single file"
	DomainListMergedFile *string `json:"domainListMergedFile,omitempty"`

	// DomainListMergedTargetingType The list type of the domain. Either include or exclude
	DomainListMergedTargetingType *MergedDomainListDomainListMergedTargetingType `json:"domainListMergedTargetingType,omitempty"`
}

// MergedDomainListDomainListMergedTargetingType The list type of the domain. Either include or exclude
type MergedDomainListDomainListMergedTargetingType string

// MobileAppDoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type MobileAppDoubleVerify struct {
	AuthenticBrandSafety *DoubleVerifyAuthenticBrandSafety `json:"authenticBrandSafety,omitempty"`
	BrandSafety          *MobileAppDoubleVerifyBrandSafety `json:"brandSafety,omitempty"`

	// CustomContextualSegmentId The custom segment identifier.
	CustomContextualSegmentId *DvCustomContextualSegmentId     `json:"customContextualSegmentId,omitempty"`
	FraudInvalidTraffic       *DoubleVerifyFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
	Viewability               *DoubleVerifyViewabilityV21      `json:"viewability,omitempty"`
}

// MobileAppDoubleVerifyBrandSafety defines model for MobileAppDoubleVerifyBrandSafety.
type MobileAppDoubleVerifyBrandSafety struct {
	// AppAgeRating A list of app age ratings to be used for excluding apps. For example, `TEENS_12_PLUS` will only exclude apps with content rated for everyone ages 12 and over. `UNKNOWN` will exclude apps with content unrated or unknown to Double Verify.
	AppAgeRating *DvBrandSafetyAppAgeRating `json:"appAgeRating,omitempty"`

	// AppStarRating App star rating to be used for excluding apps.
	AppStarRating *DvBrandSafetyAppStarRating `json:"appStarRating,omitempty"`

	// ContentCategories A list of content categories to exclude from targeting.
	ContentCategories *DvBrandSafetyContentCategories `json:"contentCategories,omitempty"`

	// ContentCategoriesWithRisk A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
	ContentCategoriesWithRisk *DvBrandSafetyContentCategoriesWithRisk `json:"contentCategoriesWithRisk,omitempty"`

	// ExcludeAppsWithInsufficientRating Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
	ExcludeAppsWithInsufficientRating *DvBrandSafetyExcludeApps `json:"excludeAppsWithInsufficientRating,omitempty"`

	// UnknownContent Set to `true` to exclude unknown content.
	UnknownContent *DvBrandSafetyUnknownContent `json:"unknownContent,omitempty"`
}

// MobileAppDoubleVerifyBrandSafetyV32 defines model for MobileAppDoubleVerifyBrandSafetyV3_2.
type MobileAppDoubleVerifyBrandSafetyV32 = MobileAppDoubleVerifyBrandSafety

// MobileAppDoubleVerifyV32 Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type MobileAppDoubleVerifyV32 = MobileAppDoubleVerify

// MobileAppIntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
type MobileAppIntegralAdScience struct {
	BrandSafety *IasBrandSafetyV3 `json:"brandSafety,omitempty"`

	// FraudInvalidTraffic The type of fraud invalid traffic.
	FraudInvalidTraffic *IasFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
}

// MobileAppTargeting defines model for MobileAppTargeting.
type MobileAppTargeting struct {
	// AppIds The list of application identifiers.
	AppIds []string `json:"appIds"`

	// AppTargetingOption The mobile application targeting inclusion type.
	AppTargetingOption MobileAppTargetingAppTargetingOption `json:"appTargetingOption"`
}

// MobileAppTargetingAppTargetingOption The mobile application targeting inclusion type.
type MobileAppTargetingAppTargetingOption string

// MobileAppThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type MobileAppThirdPartyPreBidTargeting struct {
	// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
	DoubleVerify *MobileAppDoubleVerify `json:"doubleVerify,omitempty"`

	// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
	IntegralAdScience *MobileAppIntegralAdScience `json:"integralAdScience,omitempty"`
	OracleDataCloud   *OracleDataCloudV3          `json:"oracleDataCloud,omitempty"`
}

// MobileAppThirdPartyPreBidTargetingV31 Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type MobileAppThirdPartyPreBidTargetingV31 = MobileAppThirdPartyPreBidTargeting

// MobileAppThirdPartyPreBidTargetingV32 defines model for MobileAppThirdPartyPreBidTargetingV3_2.
type MobileAppThirdPartyPreBidTargetingV32 = MobileAppThirdPartyPreBidTargetingV31

// MobileDisplayDoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type MobileDisplayDoubleVerify struct {
	FraudInvalidTraffic *DoubleVerifyFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
}

// MobileDisplayIntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
type MobileDisplayIntegralAdScience struct {
	// FraudInvalidTraffic The type of fraud invalid traffic.
	FraudInvalidTraffic *IasFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
}

// MobileDisplayThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type MobileDisplayThirdPartyPreBidTargeting struct {
	// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
	DoubleVerify *MobileDisplayDoubleVerify `json:"doubleVerify,omitempty"`

	// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
	IntegralAdScience *MobileDisplayIntegralAdScience `json:"integralAdScience,omitempty"`
}

// MobileDisplayThirdPartyPreBidTargetingV31 Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type MobileDisplayThirdPartyPreBidTargetingV31 = MobileDisplayThirdPartyPreBidTargeting

// MobileOsTargeting The mobile operating system targeting type.
type MobileOsTargeting string

// ODCViewability The ODC viewability standard.
type ODCViewability struct {
	// Standard The viewability standard.
	Standard ODCViewabilityStandard `json:"standard"`

	// ViewabilityTargeting The type of ODC MRC viewability tier.
	ViewabilityTargeting ODCViewabilityViewabilityTargeting `json:"viewabilityTargeting"`
}

// ODCViewabilityStandard The viewability standard.
type ODCViewabilityStandard string

// ODCViewabilityViewabilityTargeting The type of ODC MRC viewability tier.
type ODCViewabilityViewabilityTargeting string

// OdcCustomPredicts defines model for OdcCustomPredicts.
type OdcCustomPredicts struct {
	CustomPredicts *[]OdcPredict `json:"customPredicts,omitempty"`
	NextToken      *string       `json:"nextToken,omitempty"`
}

// OdcPredict defines model for OdcPredict.
type OdcPredict struct {
	// Id The segment identifier.
	Id string `json:"id"`

	// Name The segment name.
	Name string `json:"name"`
}

// OdcStandardPredicts defines model for OdcStandardPredicts.
type OdcStandardPredicts struct {
	NextToken        *string       `json:"nextToken,omitempty"`
	StandardPredicts *[]OdcPredict `json:"standardPredicts,omitempty"`
}

// OptimizationGoal The budget optimization goal type.
type OptimizationGoal string

// OptimizationGoalKpi KPI for the selected goal.
type OptimizationGoalKpi string

// OptimizationGoalKpiV23 KPI for the selected goal.
type OptimizationGoalKpiV23 = OptimizationGoalKpi

// OptimizationGoalKpiV24 KPI for the selected goal. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.dsporders.v2.3+json.
// * CLICK_THROUGH_RATE: The number of click-throughs divided by the number of impressions. (CTR = Clicks / Impressions)
// * COMBINED_RETURN_ON_AD_SPEND: Return on advertising spend for products sold on and off Amazon, measured as ad-attributed sales per local currency unit of ad spend. (Combined ROAS = Combined product sales / Total cost)
// * COST_PER_ACTION: The cost to acquire an off-Amazon conversion. (CPA = Total cost / Off-Amazon conversions)
// * COST_PER_CLICK: The cost paid per click-through. (CPC = Total cost / Clicks)
// * COST_PER_DETAIL_PAGE_VIEW: The cost to acquire a detail page view for a promoted product. (CPDPV = Total cost / Detail page views)
// * COST_PER_FIRST_APP_OPEN: The cost to acquire a first-time STV app open. (CPFAO = Total cost / First STV app opens)
// * COST_PER_INSTALL: The cost for a mobile app install. (CPI = Total cost / Mobile app installs)
// * COST_PER_VIDEO_COMPLETION: The cost to acquire a video complete conversion. (CPVC = Total cost / Video completions)
// * DETAIL_PAGE_VIEW_RATE: Detail page view rate for promoted products. (DPVR = Detail page views for promoted products / Impressions)
// * NONE: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
// * OTHER: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
// * REACH: The number of unique users exposed to the creative during its flight.
// * RETURN_ON_AD_SPEND: Return on advertising spend for promoted products, measured as ad-attributed sales for promoted products per local currency unit of ad spend. (ROAS = Promoted product sales / Total cost)
// * TOTAL_COST_PER_SUBSCRIPTION: The cost to acquire a new free trial or paid subscription for a Prime Video channel or STV app subscription. (Total cost per subscription = Total cost / Subscription sign ups)
// * TOTAL_RETURN_ON_AD_SPEND: Return on ad spend, measured as ad-attributed sales for the brands’ products per local currency unit of ad spend. (Total ROAS = Total product sales / Total cost)
// * VIDEO_COMPLETION_RATE: The number of video completions relative to the number of video starts. (Video completion rate = Video complete / Video start)
type OptimizationGoalKpiV24 string

// OptimizationGoalV23 The budget optimization goal type.
type OptimizationGoalV23 = OptimizationGoal

// OracleDataCloud Oracle Data Cloud is a third party provider in digital ad verification. Oracle Data Cloud offers technologies to drive high-quality advertising media.
type OracleDataCloud struct {
	// BrandSafety The oracle data cloud brand safety.
	BrandSafety *OracleDataCloudBrandSafety `json:"brandSafety,omitempty"`

	// ContextualPredictsSegmentId The custom segment predict identifier.
	ContextualPredictsSegmentId *string `json:"contextualPredictsSegmentId,omitempty"`

	// CustomSegmentId The custom segment identifier.
	CustomSegmentId *string `json:"customSegmentId,omitempty"`

	// FraudInvalidTraffic The fraud invalid traffic type.
	FraudInvalidTraffic *OracleDataCloudFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
}

// OracleDataCloudFraudInvalidTraffic The fraud invalid traffic type.
type OracleDataCloudFraudInvalidTraffic string

// OracleDataCloudBrandSafety The oracle data cloud brand safety.
type OracleDataCloudBrandSafety struct {
	EssentialProtection *OracleDataCloudBrandSafetyEssentialProtection `json:"essentialProtection,omitempty"`
	TargetingOption     *OracleDataCloudBrandSafetyTargetingOption     `json:"targetingOption,omitempty"`
}

// OracleDataCloudBrandSafetyEssentialProtection defines model for OracleDataCloudBrandSafety.EssentialProtection.
type OracleDataCloudBrandSafetyEssentialProtection string

// OracleDataCloudBrandSafetyTargetingOption defines model for OracleDataCloudBrandSafety.TargetingOption.
type OracleDataCloudBrandSafetyTargetingOption string

// OracleDataCloudV3 Oracle Data Cloud is a third party provider in digital ad verification. Oracle Data Cloud offers technologies to drive high-quality advertising media.
type OracleDataCloudV3 = OracleDataCloud

// OracleDataCloudV31 defines model for OracleDataCloudV3_1.
type OracleDataCloudV31 = OracleDataCloudV3

// Order Complete order model which willl be used for create/update and get.
type Order struct {
	// AdvertiserId The advertiser identifier. Immutable field.
	AdvertiserId string `json:"advertiserId"`

	// AgencyFee The service fee associated with an agency.
	AgencyFee *AgencyFee  `json:"agencyFee,omitempty"`
	Budget    OrderBudget `json:"budget"`

	// Comments The order comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
	CreationDate *string `json:"creationDate,omitempty"`

	// CurrencyCode The currency code.
	CurrencyCode *CurrencyCode `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
	DeliveryStatus *OrderDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The end date has to be modeled as a part of flights object.
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The order external identifier, also known as purchase order number (PO number). This field is required if "Mandatory PO numbers" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
	ExternalId   *string      `json:"externalId,omitempty"`
	FrequencyCap FrequencyCap `json:"frequencyCap"`

	// LastUpdatedDate The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Name The order name.
	Name         string            `json:"name"`
	Optimization OrderOptimization `json:"optimization"`

	// OrderId The order identifier. It will be used to perform update operation. Immutable field.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The start date has to be modeled as a part of flights object.
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// OrderBasic This model is designed to support batch get operation for better performance.
type OrderBasic struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AgencyFee The service fee associated with an agency.
	AgencyFee *AgencyFee        `json:"agencyFee,omitempty"`
	Budget    *OrderBudgetBasic `json:"budget,omitempty"`

	// Comments The order comments.
	Comments *string `json:"comments,omitempty"`

	// CurrencyCode The currency code.
	CurrencyCode *CurrencyCode `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
	DeliveryStatus *OrderDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The order external identifier, also known as purchase order number (PO number). This field is required if "Mandatory PO numbers" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
	ExternalId   *string       `json:"externalId,omitempty"`
	FrequencyCap *FrequencyCap `json:"frequencyCap,omitempty"`

	// Name The order name.
	Name         *string            `json:"name,omitempty"`
	Optimization *OrderOptimization `json:"optimization,omitempty"`

	// OrderId The order identifier.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// OrderBasicV21 This model is designed to support batch get operation for better performance.
type OrderBasicV21 = OrderBasic

// OrderBasicV22 defines model for OrderBasicV2_2.
type OrderBasicV22 = OrderBasicV21

// OrderBasicV23 This model is designed to support batch get operation for better performance.
type OrderBasicV23 struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AgencyFee The service fee associated with an agency.
	AgencyFee *AgencyFee        `json:"agencyFee,omitempty"`
	Budget    *OrderBudgetBasic `json:"budget,omitempty"`

	// Comments The order comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
	CreationDate *string         `json:"creationDate,omitempty"`
	CurrencyCode *CurrencyCodeV3 `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
	DeliveryStatus *OrderDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The order external identifier, also known as purchase order number (PO number). This field is required if "Mandatory PO numbers" is set at the entity level. "N/A" (not applicable) is a valid value. This field will be deprecated and renamed to poNumber in a future release.
	ExternalId   *string       `json:"externalId,omitempty"`
	FrequencyCap *FrequencyCap `json:"frequencyCap,omitempty"`

	// LastUpdatedDate The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Name The order name.
	Name         *string               `json:"name,omitempty"`
	Optimization *OrderOptimizationV23 `json:"optimization,omitempty"`

	// OrderId The order identifier.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// OrderBasicV24 This model is designed to support batch get operation for better performance.
type OrderBasicV24 struct {
	// AdvertiserId The advertiser identifier.
	AdvertiserId *string `json:"advertiserId,omitempty"`

	// AgencyFee The service fee associated with an agency.
	AgencyFee *AgencyFee        `json:"agencyFee,omitempty"`
	Budget    *OrderBudgetBasic `json:"budget,omitempty"`

	// Comments The order comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
	CreationDate *string         `json:"creationDate,omitempty"`
	CurrencyCode *CurrencyCodeV3 `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
	DeliveryStatus *OrderDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The order external identifier, also known as purchase order number (PO number). This field is required if "Mandatory PO numbers" is set at the entity level. "N/A" (not applicable) is a valid value. This field will be deprecated and renamed to poNumber in a future release.
	ExternalId   *string       `json:"externalId,omitempty"`
	FrequencyCap *FrequencyCap `json:"frequencyCap,omitempty"`

	// LastUpdatedDate The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Name The order name.
	Name         *string               `json:"name,omitempty"`
	Optimization *OrderOptimizationV24 `json:"optimization,omitempty"`

	// OrderId The order identifier.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// OrderBudget defines model for OrderBudget.
type OrderBudget struct {
	BudgetCaps *[]BudgetCap `json:"budgetCaps,omitempty"`

	// Flights The budget, start date and end date for an order have to be modeled as flight object. An order can have multiple flights.
	Flights *[]OrderFlight `json:"flights,omitempty"`

	// TotalBudgetAmount The total budget amount. For create/update operations, budget has to be modeled as part of flights object.
	TotalBudgetAmount *float64 `json:"totalBudgetAmount,omitempty"`
}

// OrderBudgetBasic defines model for OrderBudgetBasic.
type OrderBudgetBasic struct {
	BudgetCaps *[]BudgetCap `json:"budgetCaps,omitempty"`

	// TotalBudgetAmount The total budget amount. For create/update operations, budget has to be modeled as part of flights object.
	TotalBudgetAmount *float64 `json:"totalBudgetAmount,omitempty"`
}

// OrderDeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
type OrderDeliveryStatus string

// OrderFlight defines model for OrderFlight.
type OrderFlight struct {
	// Amount The total flight budget amount.
	Amount float64 `json:"amount"`

	// EndDateTime The flight start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
	EndDateTime string `json:"endDateTime"`

	// FlightId The flight identifier. Immutable field.
	FlightId *string `json:"flightId,omitempty"`

	// RemainingAmount The remaining flight budget amount.
	RemainingAmount *float64 `json:"remainingAmount,omitempty"`

	// SpentAmount The spent flight budget amount.
	SpentAmount *float64 `json:"spentAmount,omitempty"`

	// StartDateTime The flight start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
	StartDateTime string `json:"startDateTime"`
}

// OrderOptimization defines model for OrderOptimization.
type OrderOptimization struct {
	// AutoOptimizations The list of optimizations supported.
	AutoOptimizations *AutoOptimizations `json:"autoOptimizations,omitempty"`

	// BiddingStrategy It specifies how Amazon Advertising determines bids on your behalf for each opportunity to serve an impression. It is immutable once the order has started delivering.
	BiddingStrategy *BiddingStrategy `json:"biddingStrategy,omitempty"`

	// Goal The budget optimization goal type.
	Goal OptimizationGoal `json:"goal"`

	// GoalKpi KPI for the selected goal.
	GoalKpi OptimizationGoalKpi `json:"goalKpi"`

	// ProductLocation The product location indicates whether the product is endemic or non-endemic.
	ProductLocation ProductLocation `json:"productLocation"`
}

// OrderOptimizationV23 defines model for OrderOptimizationV2_3.
type OrderOptimizationV23 struct {
	// AutoOptimizations The list of optimizations supported.
	AutoOptimizations *AutoOptimizations `json:"autoOptimizations,omitempty"`

	// BiddingStrategy It specifies how Amazon Advertising determines bids on your behalf for each opportunity to serve an impression. It is immutable once the order has started delivering.
	BiddingStrategy *BiddingStrategy `json:"biddingStrategy,omitempty"`

	// Goal The budget optimization goal type. PURCHASES_ON_OFF_AMAZON is available since application/vnd.dsporders.v2.3+json.
	Goal OptimizationGoalV23 `json:"goal"`

	// GoalKpi KPI for the selected goal. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.dsporders.v2.3+json.
	GoalKpi OptimizationGoalKpiV23 `json:"goalKpi"`

	// ProductLocation The product location indicates whether the product is endemic or non-endemic.
	ProductLocation ProductLocation `json:"productLocation"`
}

// OrderOptimizationV24 defines model for OrderOptimizationV2_4.
type OrderOptimizationV24 struct {
	// AutoOptimizations The list of optimizations supported.
	AutoOptimizations *AutoOptimizations `json:"autoOptimizations,omitempty"`

	// BiddingStrategy It specifies how Amazon Advertising determines bids on your behalf for each opportunity to serve an impression. It is immutable once the order has started delivering.
	BiddingStrategy *BiddingStrategy `json:"biddingStrategy,omitempty"`

	// Goal The budget optimization goal type. PURCHASES_ON_OFF_AMAZON is available since application/vnd.dsporders.v2.3+json.
	Goal OptimizationGoalV23 `json:"goal"`

	// GoalKpi KPI for the selected goal. COMBINED_RETURN_ON_AD_SPEND is available since application/vnd.dsporders.v2.3+json.
	// * CLICK_THROUGH_RATE: The number of click-throughs divided by the number of impressions. (CTR = Clicks / Impressions)
	// * COMBINED_RETURN_ON_AD_SPEND: Return on advertising spend for products sold on and off Amazon, measured as ad-attributed sales per local currency unit of ad spend. (Combined ROAS = Combined product sales / Total cost)
	// * COST_PER_ACTION: The cost to acquire an off-Amazon conversion. (CPA = Total cost / Off-Amazon conversions)
	// * COST_PER_CLICK: The cost paid per click-through. (CPC = Total cost / Clicks)
	// * COST_PER_DETAIL_PAGE_VIEW: The cost to acquire a detail page view for a promoted product. (CPDPV = Total cost / Detail page views)
	// * COST_PER_FIRST_APP_OPEN: The cost to acquire a first-time STV app open. (CPFAO = Total cost / First STV app opens)
	// * COST_PER_INSTALL: The cost for a mobile app install. (CPI = Total cost / Mobile app installs)
	// * COST_PER_VIDEO_COMPLETION: The cost to acquire a video complete conversion. (CPVC = Total cost / Video completions)
	// * DETAIL_PAGE_VIEW_RATE: Detail page view rate for promoted products. (DPVR = Detail page views for promoted products / Impressions)
	// * NONE: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
	// * OTHER: If this option is chosen, the Amazon DSP will not alter bids based on the likelihood that a given impression will result in a performance action.
	// * REACH: The number of unique users exposed to the creative during its flight.
	// * RETURN_ON_AD_SPEND: Return on advertising spend for promoted products, measured as ad-attributed sales for promoted products per local currency unit of ad spend. (ROAS = Promoted product sales / Total cost)
	// * TOTAL_COST_PER_SUBSCRIPTION: The cost to acquire a new free trial or paid subscription for a Prime Video channel or STV app subscription. (Total cost per subscription = Total cost / Subscription sign ups)
	// * TOTAL_RETURN_ON_AD_SPEND: Return on ad spend, measured as ad-attributed sales for the brands’ products per local currency unit of ad spend. (Total ROAS = Total product sales / Total cost)
	// * VIDEO_COMPLETION_RATE: The number of video completions relative to the number of video starts. (Video completion rate = Video complete / Video start)
	GoalKpi OptimizationGoalKpiV24 `json:"goalKpi"`

	// ProductLocation The product location indicates whether the product is endemic or non-endemic.
	ProductLocation ProductLocation `json:"productLocation"`
}

// OrderResponse Response for the order create/update operations. If operation is successful, it contains only orderId. If it is a failure, it contains only errorDetails. success and failure will be corresponding to that requested index in that batch (array of items).
type OrderResponse struct {
	// ErrorDetails The error response object.
	ErrorDetails *Error `json:"errorDetails,omitempty"`

	// OrderId The order Identifier.
	OrderId *string `json:"orderId,omitempty"`
}

// OrderV22 Complete order model which willl be used for create/update and get.
type OrderV22 = Order

// OrderV23 Complete order model which willl be used for create/update and get.
type OrderV23 struct {
	// AdvertiserId The advertiser identifier. Immutable field.
	AdvertiserId string `json:"advertiserId"`

	// AgencyFee The service fee associated with an agency.
	AgencyFee *AgencyFee  `json:"agencyFee,omitempty"`
	Budget    OrderBudget `json:"budget"`

	// Comments The order comments.
	Comments *string `json:"comments,omitempty"`

	// CreationDate The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
	CreationDate *string         `json:"creationDate,omitempty"`
	CurrencyCode *CurrencyCodeV3 `json:"currencyCode,omitempty"`

	// DeliveryActivationStatus This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem.
	DeliveryActivationStatus *DeliveryActivationStatus `json:"deliveryActivationStatus,omitempty"`

	// DeliveryStatus The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
	DeliveryStatus *OrderDeliveryStatus `json:"deliveryStatus,omitempty"`

	// EndDateTime The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The end date has to be modeled as a part of flights object.
	EndDateTime *string `json:"endDateTime,omitempty"`

	// ExternalId The order external identifier, also known as purchase order number (PO number). This field is required if "Mandatory PO numbers" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
	ExternalId   *string      `json:"externalId,omitempty"`
	FrequencyCap FrequencyCap `json:"frequencyCap"`

	// LastUpdatedDate The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`

	// Name The order name.
	Name         string               `json:"name"`
	Optimization OrderOptimizationV23 `json:"optimization"`

	// OrderId The order identifier. It will be used to perform update operation. Immutable field.
	OrderId *string `json:"orderId,omitempty"`

	// StartDateTime The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The start date has to be modeled as a part of flights object.
	StartDateTime *string `json:"startDateTime,omitempty"`
}

// Orders defines model for Orders.
type Orders struct {
	Response *[]OrderBasic `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// OrdersV21 defines model for OrdersV2_1.
type OrdersV21 struct {
	Response *[]OrderBasicV21 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// OrdersV22 defines model for OrdersV2_2.
type OrdersV22 struct {
	Response *[]OrderBasicV22 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// OrdersV23 defines model for OrdersV2_3.
type OrdersV23 struct {
	Response *[]OrderBasicV23 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// OrdersV24 defines model for OrdersV2_4.
type OrdersV24 struct {
	Response *[]OrderBasicV24 `json:"response,omitempty"`

	// TotalResults Total number of results which satisfy the filtering criteria. This will help to support pagination.
	TotalResults *int `json:"totalResults,omitempty"`
}

// OttContentGenres defines model for OttContentGenres.
type OttContentGenres string

// OttTargeting This targeting only applies to Amazon O&O and Amazon Publisher Services (APS) inventory. It can only be provided when CONNECTED_TV is selected in deviceTypeTargeting. Currently API does not support excluding delivery to audience according to content ratings. This feature will be added in later versions. If a user creates or updates a line item with this field on UI, they will not see the data for this field in API and updates via API will not update this field.
type OttTargeting struct {
	// OttAppBlocking Select the apps that should be excluded.
	OttAppBlocking *[]string `json:"ottAppBlocking,omitempty"`

	// OttContentGenres Select genres to exclude delivery to that audience.
	OttContentGenres *[]OttContentGenres `json:"ottContentGenres,omitempty"`
}

// Pacing defines model for Pacing.
type Pacing struct {
	// CatchUpBoost Turning on catch up boost will lead to inconsistent delivery. If you want to avoid delivery spikes, we recommend turning catch up boost off.
	CatchUpBoost *PacingCatchUpBoost `json:"catchUpBoost,omitempty"`

	// DeliveryProfile The type of line item delivery profile. FRONT_LOADED: Front loaded can deliver up to 25% more than the daily Even pace targets. EVENLY: Even pacing spends your budget consistently across the length of the campaign. We recommend turning catch up boost off to ensure consistent delivery.
	DeliveryProfile PacingDeliveryProfile `json:"deliveryProfile"`
}

// PacingCatchUpBoost Turning on catch up boost will lead to inconsistent delivery. If you want to avoid delivery spikes, we recommend turning catch up boost off.
type PacingCatchUpBoost string

// PacingDeliveryProfile The type of line item delivery profile. FRONT_LOADED: Front loaded can deliver up to 25% more than the daily Even pace targets. EVENLY: Even pacing spends your budget consistently across the length of the campaign. We recommend turning catch up boost off to ensure consistent delivery.
type PacingDeliveryProfile string

// Pixalate Pixalate is a third party provider for digital ad verification. Pixalate offers technologies that drive high-quality advertising media.
type Pixalate struct {
	FraudInvalidTraffic *PixalateFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
}

// PixalateFraudInvalidTraffic defines model for PixalateFraudInvalidTraffic.
type PixalateFraudInvalidTraffic struct {
	// ExcludeAppsAndDomains Set to `true` to exclude traffic from Apps and Domains identified to be fraudulent or invalid.
	ExcludeAppsAndDomains *bool `json:"excludeAppsAndDomains,omitempty"`

	// ExcludeIpAddressAndUserAgents Set to `true` to exclude traffic from IPV4 and IPV6 addresses and usger agents identified to to be fraudulent or invalid.
	ExcludeIpAddressAndUserAgents *bool `json:"excludeIpAddressAndUserAgents,omitempty"`

	// ExcludeOttAndMobileDevices Set to `true` to exclude traffic from OTT and Mobile devices identified to be fraudulent or invalid.
	ExcludeOttAndMobileDevices *bool `json:"excludeOttAndMobileDevices,omitempty"`

	// ExcludeRemovedAppsFromAppStores Set to `true` to exlude traffic from Apps that have been removed from the google play and apple app stores in the last 6 months.
	ExcludeRemovedAppsFromAppStores *bool `json:"excludeRemovedAppsFromAppStores,omitempty"`
}

// Pixel defines model for Pixel.
type Pixel struct {
	AdvertiserId *string         `json:"advertiserId,omitempty"`
	Created      *time.Time      `json:"created,omitempty"`
	Description  *string         `json:"description,omitempty"`
	Domain       *string         `json:"domain,omitempty"`
	Event        *PixelEvent     `json:"event,omitempty"`
	Id           *string         `json:"id,omitempty"`
	Name         *string         `json:"name,omitempty"`
	Purpose      *[]PixelPurpose `json:"purpose,omitempty"`
}

// PixelEvent defines model for Pixel.Event.
type PixelEvent string

// PixelPurpose defines model for Pixel.Purpose.
type PixelPurpose string

// PixelTracking A list of pixels associated with the campaign.
type PixelTracking = []string

// ProductCategory defines model for ProductCategory.
type ProductCategory struct {
	// Id The category identifier.
	Id string `json:"id"`

	// Name The category name.
	Name string `json:"name"`

	// ParentId The identifier of the parent category. This is blank if the category is a parent category.
	ParentId *string `json:"parentId,omitempty"`
}

// ProductLocation The product location indicates whether the product is endemic or non-endemic.
type ProductLocation string

// ProductTracking defines model for ProductTracking.
type ProductTracking struct {
	// ProductFile The URL of the product tracking file.
	ProductFile *string `json:"productFile,omitempty"`

	// ProductList The tracking product list.
	ProductList *[]ProductTrackingItem `json:"productList,omitempty"`
}

// ProductTrackingDomain The ASIN domain type. Applicable to ASIN line item type only.
type ProductTrackingDomain string

// ProductTrackingDomainV21 The ASIN domain type. Applicable to ASIN line item type only.
type ProductTrackingDomainV21 = ProductTrackingDomain

// ProductTrackingFile The URL of the product tracking file.
type ProductTrackingFile = string

// ProductTrackingItem defines model for ProductTrackingItem.
type ProductTrackingItem struct {
	// Domain The ASIN domain type. Applicable to ASIN line item type only.
	Domain ProductTrackingDomain `json:"domain"`

	// ProductAssociation The product feature type.
	ProductAssociation ProductTrackingItemProductAssociation `json:"productAssociation"`

	// ProductId The product identifier.
	ProductId string `json:"productId"`
}

// ProductTrackingItemProductAssociation The product feature type.
type ProductTrackingItemProductAssociation string

// ProductTrackingItemV1 defines model for ProductTrackingItemV1.
type ProductTrackingItemV1 struct {
	// Domain The ASIN domain type.
	Domain SupportedProductTrackingDomainV1 `json:"domain"`

	// ProductAssociation The product feature type.
	ProductAssociation SupportedProductAssociationV1 `json:"productAssociation"`

	// ProductId The product identifier.
	ProductId string `json:"productId"`
}

// ProductTrackingItemV21 defines model for ProductTrackingItemV2_1.
type ProductTrackingItemV21 = ProductTrackingItem

// ProductTrackingListV1 The tracking product list.
type ProductTrackingListV1 = []ProductTrackingItemV1

// ProductTrackingV1 defines model for ProductTrackingV1.
type ProductTrackingV1 struct {
	// ProductFile The URL of the product tracking file.
	ProductFile *string `json:"productFile,omitempty"`

	// ProductList The tracking product list.
	ProductList *ProductTrackingListV1 `json:"productList,omitempty"`
}

// ProductTrackingV21 defines model for ProductTrackingV2_1.
type ProductTrackingV21 = ProductTracking

// ReadDomainTargetingResponse The read operation response.
type ReadDomainTargetingResponse struct {
	// DomainListMergedFile The URL address of the domain file after merging all domains into single file, including inheritance from advertiser, domain lists, domain files, domains entered, if any.
	DomainListMergedFile *string `json:"domainListMergedFile,omitempty"`

	// InheritFromAdvertiser Set to `true` to enable domain inheritance from advertiser.
	InheritFromAdvertiser *bool `json:"inheritFromAdvertiser,omitempty"`

	// LineItemId The line item identifier.
	LineItemId *string `json:"lineItemId,omitempty"`

	// TargetingType The list type of the domain. Either INCLUDE (ALLOW_LIST) or EXCLUDE (BLOCK_LIST).
	TargetingType *TargetingType `json:"targetingType,omitempty"`
}

// ReadDomainTargetingResponses defines model for ReadDomainTargetingResponses.
type ReadDomainTargetingResponses struct {
	Response *[]ReadDomainTargetingResponse `json:"response,omitempty"`
}

// SegmentClause The segment clause.
type SegmentClause struct {
	// IsNot Set to `true` to set to negative targeting. Set to `false` to set to  positive targeting. Default is false.
	IsNot *bool `json:"isNot,omitempty"`

	// SegmentId The unique identifier of the DSP resource/object.
	SegmentId Identifier `json:"segmentId"`
}

// SegmentGroup This segment group.
type SegmentGroup struct {
	// InterOperator The inter operator used among segments within the same segment group.
	InterOperator interface{} `json:"interOperator"`

	// IntraOperator The intra operator used between two segment groups.
	IntraOperator SegmentGroupIntraOperator `json:"intraOperator"`

	// Segments The list of segment clauses.
	Segments []SegmentClause `json:"segments"`
}

// SegmentGroupIntraOperator The intra operator used between two segment groups.
type SegmentGroupIntraOperator string

// SegmentTargeting defines model for SegmentTargeting.
type SegmentTargeting struct {
	// SegmentGroups The list of segment groups.
	SegmentGroups *[]SegmentGroup `json:"segmentGroups,omitempty"`
}

// SiteLanguageTargeting The site language targeting type. For example, `EN`, `ES`.
type SiteLanguageTargeting string

// SiteLanguageTargetingV3 The site language targeting type. For example, `EN`, `ES`.
type SiteLanguageTargetingV3 = SiteLanguageTargeting

// StandardDisplayDoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type StandardDisplayDoubleVerify struct {
	AuthenticBrandSafety *DoubleVerifyAuthenticBrandSafety       `json:"authenticBrandSafety,omitempty"`
	BrandSafety          *StandardDisplayDoubleVerifyBrandSafety `json:"brandSafety,omitempty"`

	// CustomContextualSegmentId The custom segment identifier.
	CustomContextualSegmentId *DvCustomContextualSegmentId     `json:"customContextualSegmentId,omitempty"`
	FraudInvalidTraffic       *DoubleVerifyFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
	Viewability               *DoubleVerifyViewabilityV21      `json:"viewability,omitempty"`
}

// StandardDisplayDoubleVerifyBrandSafety defines model for StandardDisplayDoubleVerifyBrandSafety.
type StandardDisplayDoubleVerifyBrandSafety struct {
	// ContentCategories A list of content categories to exclude from targeting.
	ContentCategories *DvBrandSafetyContentCategories `json:"contentCategories,omitempty"`

	// ContentCategoriesWithRisk A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
	ContentCategoriesWithRisk *DvBrandSafetyContentCategoriesWithRisk `json:"contentCategoriesWithRisk,omitempty"`

	// UnknownContent Set to `true` to exclude unknown content.
	UnknownContent *DvBrandSafetyUnknownContent `json:"unknownContent,omitempty"`
}

// StandardDisplayDoubleVerifyBrandSafetyV32 defines model for StandardDisplayDoubleVerifyBrandSafetyV3_2.
type StandardDisplayDoubleVerifyBrandSafetyV32 = StandardDisplayDoubleVerifyBrandSafety

// StandardDisplayDoubleVerifyV32 Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type StandardDisplayDoubleVerifyV32 = StandardDisplayDoubleVerify

// StandardDisplayIntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
type StandardDisplayIntegralAdScience struct {
	BrandSafety *IasBrandSafetyV3 `json:"brandSafety,omitempty"`

	// FraudInvalidTraffic The type of fraud invalid traffic.
	FraudInvalidTraffic *IasFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`

	// Viewability The IAS viewability standard.
	Viewability *IasViewability `json:"viewability,omitempty"`
}

// StandardDisplayTargeting defines model for StandardDisplayTargeting.
type StandardDisplayTargeting struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContentTargeting The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
	ContentTargeting *[]Identifier `json:"contentTargeting,omitempty"`

	// ContextualTargeting Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
	ContextualTargeting *bool `json:"contextualTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceTypeTargeting The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
	DeviceTypeTargeting *StandardDisplayTargetingDeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`
	DomainListTargeting *DomainList                                  `json:"domainListTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// MobileOsTargeting The mobile operating system targeting type.
	MobileOsTargeting *MobileOsTargeting `json:"mobileOsTargeting,omitempty"`
	SegmentTargeting  *SegmentTargeting  `json:"segmentTargeting,omitempty"`

	// SiteLanguageTargeting The site language targeting type. For example, `EN`, `ES`.
	SiteLanguageTargeting *SiteLanguageTargeting `json:"siteLanguageTargeting,omitempty"`
	SupplyTargeting       *SupplyTargeting       `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *ThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
	UserLocationTargeting *UserLocationTargeting `json:"userLocationTargeting,omitempty"`
}

// StandardDisplayTargetingDeviceTypeTargeting The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
type StandardDisplayTargetingDeviceTypeTargeting string

// StandardDisplayTargetingV3 defines model for StandardDisplayTargetingV3.
type StandardDisplayTargetingV3 struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContentTargeting The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
	ContentTargeting *[]Identifier `json:"contentTargeting,omitempty"`

	// ContextualTargeting Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
	ContextualTargeting *bool `json:"contextualTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceTypeTargeting The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
	DeviceTypeTargeting *StandardDisplayTargetingV3DeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`
	DomainListTargeting *DomainList                                    `json:"domainListTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// MobileOsTargeting The mobile operating system targeting type.
	MobileOsTargeting *MobileOsTargeting `json:"mobileOsTargeting,omitempty"`
	SegmentTargeting  *SegmentTargeting  `json:"segmentTargeting,omitempty"`

	// SiteLanguageTargeting The site language targeting type. For example, US/Mexico advertisers can choose from `EN`, `ES`; Canada advertisers can choose from `EN`, `FR`; Brazil advertisers can choose from `EN`, `PT`.
	SiteLanguageTargeting *SiteLanguageTargetingV3 `json:"siteLanguageTargeting,omitempty"`
	SupplyTargeting       *SupplyTargeting         `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *StandardDisplayThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, US advertisers can choose from `US`, `EVERYWHERE`, `NON-US`; Canada advertisers can choose from `CA`, `EVERYWHERE`; Mexico advertisers can choose from `MX`, `EVERYWHERE`; Brazil advertisers can choose from `BR`, `EVERYWHERE`.
	UserLocationTargeting *UserLocationTargetingV3 `json:"userLocationTargeting,omitempty"`
}

// StandardDisplayTargetingV3DeviceTypeTargeting The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
type StandardDisplayTargetingV3DeviceTypeTargeting string

// StandardDisplayTargetingV31 defines model for StandardDisplayTargetingV3_1.
type StandardDisplayTargetingV31 = StandardDisplayTargetingV3

// StandardDisplayTargetingV32 defines model for StandardDisplayTargetingV3_2.
type StandardDisplayTargetingV32 = StandardDisplayTargetingV31

// StandardDisplayThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type StandardDisplayThirdPartyPreBidTargeting struct {
	// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
	DoubleVerify *StandardDisplayDoubleVerify `json:"doubleVerify,omitempty"`

	// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
	IntegralAdScience *StandardDisplayIntegralAdScience `json:"integralAdScience,omitempty"`
	OracleDataCloud   *OracleDataCloudV3                `json:"oracleDataCloud,omitempty"`
}

// StandardDisplayThirdPartyPreBidTargetingV31 Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type StandardDisplayThirdPartyPreBidTargetingV31 = StandardDisplayThirdPartyPreBidTargeting

// StandardDisplayThirdPartyPreBidTargetingV32 defines model for StandardDisplayThirdPartyPreBidTargetingV3_2.
type StandardDisplayThirdPartyPreBidTargetingV32 = StandardDisplayThirdPartyPreBidTargetingV31

// SubError The sub error object.
type SubError struct {
	ErrorType string  `json:"errorType"`
	FieldName *string `json:"fieldName,omitempty"`
	Message   string  `json:"message"`
}

// SupplyDealTargeting defines model for SupplyDealTargeting.
type SupplyDealTargeting struct {
	// Deals The list of deal supply sources to target.
	Deals *[]Identifier `json:"deals,omitempty"`
}

// SupplySource defines model for SupplySource.
type SupplySource struct {
	// DealInfo Deal metadata present only for the DEAL type.
	DealInfo *DealInfo `json:"dealInfo,omitempty"`

	// Id ID of the supply source item. For OPEN_EXCHANGE type, it is ID of the consolidated supply source item.
	Id *string `json:"id,omitempty"`

	// Name The name of the supply source item. For OPEN_EXCHANGE type, it is the name of the consolidated supply source item.
	Name *string `json:"name,omitempty"`

	// SupplySourceType Type of this item
	SupplySourceType *SupplySourceSupplySourceType `json:"supplySourceType,omitempty"`
}

// SupplySourceSupplySourceType Type of this item
type SupplySourceSupplySourceType string

// SupplySourceResponse defines model for SupplySourceResponse.
type SupplySourceResponse struct {
	NextToken *string `json:"nextToken,omitempty"`

	// SupplySources Array of supply source items sorted by deal start time (if available) then ID, ascending.
	SupplySources *[]SupplySource `json:"supplySources,omitempty"`
}

// SupplySourceResponseV11 defines model for SupplySourceResponseV1_1.
type SupplySourceResponseV11 struct {
	NextToken *string `json:"nextToken,omitempty"`

	// SupplySources Array of supply source items sorted by deal start time (if available) then ID, ascending.
	SupplySources *[]SupplySource `json:"supplySources,omitempty"`
}

// SupplySourceResponseV12 defines model for SupplySourceResponseV1_2.
type SupplySourceResponseV12 struct {
	NextToken *string `json:"nextToken,omitempty"`

	// SupplySources Array of supply source items sorted by deal start time (if available) then ID, ascending.
	SupplySources *[]SupplySource `json:"supplySources,omitempty"`
}

// SupplySourceTargeting defines model for SupplySourceTargeting.
type SupplySourceTargeting struct {
	// SupplySources The list of supply sources to target. In case of OPEN_EXCHANGE, the ID is of consolidated supply source.
	SupplySources *[]Identifier `json:"supplySources,omitempty"`
}

// SupplyTargeting defines model for SupplyTargeting.
type SupplyTargeting struct {
	SupplyDealTargeting   *SupplyDealTargeting   `json:"supplyDealTargeting,omitempty"`
	SupplySourceTargeting *SupplySourceTargeting `json:"supplySourceTargeting,omitempty"`
}

// SupportedLineItemTypes defines model for SupportedLineItemTypes.
type SupportedLineItemTypes string

// SupportedPolicyType defines model for SupportedPolicyType.
type SupportedPolicyType string

// SupportedProductAssociationV1 The product feature type.
type SupportedProductAssociationV1 string

// SupportedProductTrackingDomainV1 The ASIN domain type.
type SupportedProductTrackingDomainV1 string

// TargetingType The list type of the domain. Either INCLUDE (ALLOW_LIST) or EXCLUDE (BLOCK_LIST).
type TargetingType string

// ThirdPartyFee Third-party fees enable the platform to apply an additional fee. For example, a third-party vendor fee for ad verification, an agency markup fee, and the like.
type ThirdPartyFee struct {
	// FeeAllocation The type of fee allocation.
	FeeAllocation ThirdPartyFeeFeeAllocation `json:"feeAllocation"`

	// FeeAmount The fee amount associated a third-party provider.
	FeeAmount float64 `json:"feeAmount"`

	// ProviderName The provider name.
	ProviderName ThirdPartyFeeProviderName `json:"providerName"`
}

// ThirdPartyFeeFeeAllocation The type of fee allocation.
type ThirdPartyFeeFeeAllocation string

// ThirdPartyFeeProviderName The provider name.
type ThirdPartyFeeProviderName string

// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type ThirdPartyPreBidTargeting struct {
	// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
	DoubleVerify *DoubleVerify `json:"doubleVerify,omitempty"`

	// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
	IntegralAdScience *IntegralAdScience `json:"integralAdScience,omitempty"`

	// OracleDataCloud Oracle Data Cloud is a third party provider in digital ad verification. Oracle Data Cloud offers technologies to drive high-quality advertising media.
	OracleDataCloud *OracleDataCloud `json:"oracleDataCloud,omitempty"`
}

// ThirdPartyPreBidTargetingV21 Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type ThirdPartyPreBidTargetingV21 = ThirdPartyPreBidTargeting

// UpdateDomainTargetingRequest The update operation request.
type UpdateDomainTargetingRequest struct {
	// DomainFiles The list of URL addresses of the domain list files.
	DomainFiles *[]DomainFileMetaData `json:"domainFiles,omitempty"`

	// DomainLists The list of domain lists Ids get from discovery API.
	DomainLists *[]string `json:"domainLists,omitempty"`

	// DomainNames The list of raw domain names.
	DomainNames *[]string `json:"domainNames,omitempty"`

	// InheritFromAdvertiser Set to `true` to enable domain inheritance from advertiser.
	InheritFromAdvertiser bool `json:"inheritFromAdvertiser"`

	// LineItemId The line item identifier.
	LineItemId string `json:"lineItemId"`

	// TargetingType The list type of the domain. Either INCLUDE (ALLOW_LIST) or EXCLUDE (BLOCK_LIST).
	TargetingType TargetingType `json:"targetingType"`
}

// UpdateDomainTargetingResponse The update operation response. If operation is successful, it contains lineItemId (and domainFilesUploaded). If it is a failure, it contains only errorDetails. Success and failure will be corresponding to that requested index in that batch (array of items).
type UpdateDomainTargetingResponse struct {
	// DomainFilesUploaded The list of domain file validation results.
	DomainFilesUploaded *[]DomainFileValidationResponse `json:"domainFilesUploaded,omitempty"`

	// ErrorDetails The error response object.
	ErrorDetails *Error `json:"errorDetails,omitempty"`

	// LineItemId The line item identifier.
	LineItemId *string `json:"lineItemId,omitempty"`
}

// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
type UserLocationTargeting string

// UserLocationTargetingV3 The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
type UserLocationTargetingV3 = UserLocationTargeting

// VideoDoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type VideoDoubleVerify struct {
	AuthenticBrandSafety *DoubleVerifyAuthenticBrandSafety `json:"authenticBrandSafety,omitempty"`
	BrandSafety          *VideoDoubleVerifyBrandSafety     `json:"brandSafety,omitempty"`

	// CustomContextualSegmentId The custom segment identifier.
	CustomContextualSegmentId *DvCustomContextualSegmentId     `json:"customContextualSegmentId,omitempty"`
	FraudInvalidTraffic       *DoubleVerifyFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`
	Viewability               *DoubleVerifyViewabilityV21      `json:"viewability,omitempty"`
}

// VideoDoubleVerifyBrandSafety defines model for VideoDoubleVerifyBrandSafety.
type VideoDoubleVerifyBrandSafety struct {
	// AppAgeRating A list of app age ratings to be used for excluding apps. For example, `TEENS_12_PLUS` will only exclude apps with content rated for everyone ages 12 and over. `UNKNOWN` will exclude apps with content unrated or unknown to Double Verify.
	AppAgeRating *DvBrandSafetyAppAgeRating `json:"appAgeRating,omitempty"`

	// AppStarRating App star rating to be used for excluding apps.
	AppStarRating *DvBrandSafetyAppStarRating `json:"appStarRating,omitempty"`

	// ContentCategories A list of content categories to exclude from targeting.
	ContentCategories *DvBrandSafetyContentCategories `json:"contentCategories,omitempty"`

	// ContentCategoriesWithRisk A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
	ContentCategoriesWithRisk *DvBrandSafetyContentCategoriesWithRisk `json:"contentCategoriesWithRisk,omitempty"`

	// ExcludeAppsWithInsufficientRating Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
	ExcludeAppsWithInsufficientRating *DvBrandSafetyExcludeApps `json:"excludeAppsWithInsufficientRating,omitempty"`

	// UnknownContent Set to `true` to exclude unknown content.
	UnknownContent *DvBrandSafetyUnknownContent `json:"unknownContent,omitempty"`
}

// VideoDoubleVerifyBrandSafetyV32 defines model for VideoDoubleVerifyBrandSafetyV3_2.
type VideoDoubleVerifyBrandSafetyV32 = VideoDoubleVerifyBrandSafety

// VideoDoubleVerifyV32 Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
type VideoDoubleVerifyV32 = VideoDoubleVerify

// VideoIntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
type VideoIntegralAdScience struct {
	BrandSafety *IasBrandSafetyV3 `json:"brandSafety,omitempty"`

	// FraudInvalidTraffic The type of fraud invalid traffic.
	FraudInvalidTraffic *IasFraudInvalidTraffic `json:"fraudInvalidTraffic,omitempty"`

	// Viewability The IAS viewability standard.
	Viewability *IasViewability `json:"viewability,omitempty"`
}

// VideoTargeting This field is available since version `application/vnd.dsplineitems.v2.1+json`.
type VideoTargeting struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContentTargeting The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
	ContentTargeting *[]Identifier `json:"contentTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceTypeTargeting The targeted device type for video line item type. A list of device types can be provided.
	DeviceTypeTargeting *[]VideoTargetingDeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`
	DomainListTargeting *DomainList                          `json:"domainListTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// LimitToFepTargeting Limit IN STREAM ad slot to full episode players (FEP).
	LimitToFepTargeting *bool `json:"limitToFepTargeting,omitempty"`

	// MobileEnvironmentTargeting The targeted mobile environment for video line item type. It is required only when `MOBILE` device type is selected.
	MobileEnvironmentTargeting *[]VideoTargetingMobileEnvironmentTargeting `json:"mobileEnvironmentTargeting,omitempty"`

	// OttTargeting This targeting only applies to Amazon O&O and Amazon Publisher Services (APS) inventory. It can only be provided when CONNECTED_TV is selected in deviceTypeTargeting. Currently API does not support excluding delivery to audience according to content ratings. This feature will be added in later versions. If a user creates or updates a line item with this field on UI, they will not see the data for this field in API and updates via API will not update this field.
	OttTargeting     *OttTargeting     `json:"ottTargeting,omitempty"`
	SegmentTargeting *SegmentTargeting `json:"segmentTargeting,omitempty"`

	// SiteLanguageTargeting The site language targeting type. For example, `EN`, `ES`.
	SiteLanguageTargeting     *SiteLanguageTargeting        `json:"siteLanguageTargeting,omitempty"`
	SupplyTargeting           *SupplyTargeting              `json:"supplyTargeting,omitempty"`
	ThirdPartyPreBidTargeting *ThirdPartyPreBidTargetingV21 `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
	UserLocationTargeting *UserLocationTargeting `json:"userLocationTargeting,omitempty"`

	// VideoAdFormatTargeting Target a specific type of ad slot used to serve the video. A list can be provided.
	VideoAdFormatTargeting *[]VideoTargetingVideoAdFormatTargeting `json:"videoAdFormatTargeting,omitempty"`

	// VideoCompletionTargeting These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
	VideoCompletionTargeting *VideoTargetingVideoCompletionTargeting `json:"videoCompletionTargeting,omitempty"`

	// VideoInitiationTypeTargeting Target video inventory by how the video will be started. A list can be provided. If ANY is selected, no other type can be provided.
	VideoInitiationTypeTargeting *[]VideoTargetingVideoInitiationTypeTargeting `json:"videoInitiationTypeTargeting,omitempty"`

	// VideoPlayerSizeTargeting Target video inventory by publisher’s player size. A list can be provided.
	VideoPlayerSizeTargeting *[]VideoTargetingVideoPlayerSizeTargeting `json:"videoPlayerSizeTargeting,omitempty"`
}

// VideoTargetingDeviceTypeTargeting defines model for VideoTargeting.DeviceTypeTargeting.
type VideoTargetingDeviceTypeTargeting string

// VideoTargetingMobileEnvironmentTargeting defines model for VideoTargeting.MobileEnvironmentTargeting.
type VideoTargetingMobileEnvironmentTargeting string

// VideoTargetingVideoAdFormatTargeting defines model for VideoTargeting.VideoAdFormatTargeting.
type VideoTargetingVideoAdFormatTargeting string

// VideoTargetingVideoCompletionTargeting These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
type VideoTargetingVideoCompletionTargeting string

// VideoTargetingVideoInitiationTypeTargeting defines model for VideoTargeting.VideoInitiationTypeTargeting.
type VideoTargetingVideoInitiationTypeTargeting string

// VideoTargetingVideoPlayerSizeTargeting defines model for VideoTargeting.VideoPlayerSizeTargeting.
type VideoTargetingVideoPlayerSizeTargeting string

// VideoTargetingV3 This field is available since version `application/vnd.dsplineitems.v2.1+json`.
type VideoTargetingV3 struct {
	// AmazonViewabilityTargeting Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
	AmazonViewabilityTargeting *AmazonViewabilityTargeting `json:"amazonViewabilityTargeting,omitempty"`

	// ContentTargeting The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
	ContentTargeting *[]Identifier `json:"contentTargeting,omitempty"`

	// DayPartTargeting Specifies time zone and parts of the day to target delivery of the line item.
	DayPartTargeting *DayPartTargeting `json:"dayPartTargeting,omitempty"`

	// DeviceTypeTargeting The targeted device type for video line item type. A list of device types can be provided.
	DeviceTypeTargeting *[]VideoTargetingV3DeviceTypeTargeting `json:"deviceTypeTargeting,omitempty"`
	DomainListTargeting *DomainList                            `json:"domainListTargeting,omitempty"`

	// GeoLocationTargeting Targets based on city, state, country, DMA , or postal code.
	GeoLocationTargeting *GeoLocationTargeting `json:"geoLocationTargeting,omitempty"`

	// LimitToFepTargeting Limit IN STREAM ad slot to full episode players (FEP).
	LimitToFepTargeting *bool `json:"limitToFepTargeting,omitempty"`

	// MobileEnvironmentTargeting The targeted mobile environment for video line item type. It is required only when `MOBILE` device type is selected.
	MobileEnvironmentTargeting *[]VideoTargetingV3MobileEnvironmentTargeting `json:"mobileEnvironmentTargeting,omitempty"`

	// OttTargeting This targeting only applies to Amazon O&O and Amazon Publisher Services (APS) inventory. It can only be provided when CONNECTED_TV is selected in deviceTypeTargeting. Currently API does not support excluding delivery to audience according to content ratings. This feature will be added in later versions. If a user creates or updates a line item with this field on UI, they will not see the data for this field in API and updates via API will not update this field.
	OttTargeting     *OttTargeting     `json:"ottTargeting,omitempty"`
	SegmentTargeting *SegmentTargeting `json:"segmentTargeting,omitempty"`

	// SiteLanguageTargeting The site language targeting type. For example, US/Mexico advertisers can choose from `EN`, `ES`; Canada advertisers can choose from `EN`, `FR`; Brazil advertisers can choose from `EN`, `PT`.
	SiteLanguageTargeting *SiteLanguageTargetingV3 `json:"siteLanguageTargeting,omitempty"`
	SupplyTargeting       *SupplyTargeting         `json:"supplyTargeting,omitempty"`

	// ThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
	ThirdPartyPreBidTargeting *VideoThirdPartyPreBidTargeting `json:"thirdPartyPreBidTargeting,omitempty"`

	// UserLocationTargeting The geographical location type of Amazon customers targeted. For example, US advertisers can choose from `US`, `EVERYWHERE`, `NON-US`; Canada advertisers can choose from `CA`, `EVERYWHERE`; Mexico advertisers can choose from `MX`, `EVERYWHERE`; Brazil advertisers can choose from `BR`, `EVERYWHERE`.
	UserLocationTargeting *UserLocationTargetingV3 `json:"userLocationTargeting,omitempty"`

	// VideoAdFormatTargeting Target a specific type of ad slot used to serve the video. A list can be provided.
	VideoAdFormatTargeting *[]VideoTargetingV3VideoAdFormatTargeting `json:"videoAdFormatTargeting,omitempty"`

	// VideoCompletionTargeting These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
	VideoCompletionTargeting *VideoTargetingV3VideoCompletionTargeting `json:"videoCompletionTargeting,omitempty"`

	// VideoInitiationTypeTargeting Target video inventory by how the video will be started. A list can be provided. If ANY is selected, no other type can be provided.
	VideoInitiationTypeTargeting *[]VideoTargetingV3VideoInitiationTypeTargeting `json:"videoInitiationTypeTargeting,omitempty"`

	// VideoPlayerSizeTargeting Target video inventory by publisher’s player size. A list can be provided.
	VideoPlayerSizeTargeting *[]VideoTargetingV3VideoPlayerSizeTargeting `json:"videoPlayerSizeTargeting,omitempty"`
}

// VideoTargetingV3DeviceTypeTargeting defines model for VideoTargetingV3.DeviceTypeTargeting.
type VideoTargetingV3DeviceTypeTargeting string

// VideoTargetingV3MobileEnvironmentTargeting defines model for VideoTargetingV3.MobileEnvironmentTargeting.
type VideoTargetingV3MobileEnvironmentTargeting string

// VideoTargetingV3VideoAdFormatTargeting defines model for VideoTargetingV3.VideoAdFormatTargeting.
type VideoTargetingV3VideoAdFormatTargeting string

// VideoTargetingV3VideoCompletionTargeting These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
type VideoTargetingV3VideoCompletionTargeting string

// VideoTargetingV3VideoInitiationTypeTargeting defines model for VideoTargetingV3.VideoInitiationTypeTargeting.
type VideoTargetingV3VideoInitiationTypeTargeting string

// VideoTargetingV3VideoPlayerSizeTargeting defines model for VideoTargetingV3.VideoPlayerSizeTargeting.
type VideoTargetingV3VideoPlayerSizeTargeting string

// VideoTargetingV31 This field is available since version `application/vnd.dsplineitems.v2.1+json`.
type VideoTargetingV31 = VideoTargetingV3

// VideoTargetingV32 defines model for VideoTargetingV3_2.
type VideoTargetingV32 = VideoTargetingV31

// VideoThirdPartyPreBidTargeting Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type VideoThirdPartyPreBidTargeting struct {
	// DoubleVerify Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
	DoubleVerify *VideoDoubleVerify `json:"doubleVerify,omitempty"`

	// IntegralAdScience Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
	IntegralAdScience *VideoIntegralAdScience `json:"integralAdScience,omitempty"`
	OracleDataCloud   *OracleDataCloudV3      `json:"oracleDataCloud,omitempty"`
}

// VideoThirdPartyPreBidTargetingV31 Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
type VideoThirdPartyPreBidTargetingV31 = VideoThirdPartyPreBidTargeting

// VideoThirdPartyPreBidTargetingV32 defines model for VideoThirdPartyPreBidTargetingV3_2.
type VideoThirdPartyPreBidTargetingV32 = VideoThirdPartyPreBidTargetingV31

// ViewabilityTier The type of viewability tier.
type ViewabilityTier string

// ClientHeader defines model for clientHeader.
type ClientHeader = string

// CreativeIdFilter defines model for creativeIdFilter.
type CreativeIdFilter = string

// ProfileHeader defines model for profileHeader.
type ProfileHeader = string

// BadGateway The error response object.
type BadGateway = Error

// BadRequest The error response object.
type BadRequest = Error

// EndpointRequestTimedOut The error response object.
type EndpointRequestTimedOut = Error

// Forbidden The error response object.
type Forbidden = Error

// InternalServerError The error response object.
type InternalServerError = Error

// NotFound The error response object.
type NotFound = Error

// ServiceUnavailable The error response object.
type ServiceUnavailable = Error

// TooManyRequests The error response object.
type TooManyRequests = Error

// Unauthorized The error response object.
type Unauthorized = Error

// UnsupportedMediaType The error response object.
type UnsupportedMediaType = Error

// GetAppsParams defines parameters for GetApps.
type GetAppsParams struct {
	// AppIdFilter An array of app Ids to retrieve, up to 20 in one request.
	AppIdFilter *[]string `form:"appIdFilter,omitempty" json:"appIdFilter,omitempty"`

	// TextQuery Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
	TextQuery *string `form:"textQuery,omitempty" json:"textQuery,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of apps in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetCreativesParams defines parameters for GetCreatives.
type GetCreativesParams struct {
	// StartIndex Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
	StartIndex *string `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Optional. Sets the number of creatives in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creatives set `startIndex=0` and `count=10`. To return the next ten creatives, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
	Count *string `form:"count,omitempty" json:"count,omitempty"`

	// CreativeIdFilter The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
	CreativeIdFilter *string `form:"creativeIdFilter,omitempty" json:"creativeIdFilter,omitempty"`

	// AdvertiserIdFilter The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
	AdvertiserIdFilter *string `form:"advertiserIdFilter,omitempty" json:"advertiserIdFilter,omitempty"`

	// LineItemTypeFilter The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version `application/vnd.dspcreatives.v2.1+json`.
	LineItemTypeFilter *SupportedLineItemTypes `form:"lineItemTypeFilter,omitempty" json:"lineItemTypeFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetImageCreativesParams defines parameters for GetImageCreatives.
type GetImageCreativesParams struct {
	// CreativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
	CreativeIdFilter CreativeIdFilter `form:"creativeIdFilter" json:"creativeIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateImageCreativeParams defines parameters for CreateImageCreative.
type CreateImageCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateImageCreativeParams defines parameters for UpdateImageCreative.
type UpdateImageCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PreviewImageCreativeParams defines parameters for PreviewImageCreative.
type PreviewImageCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetRecCreativesParams defines parameters for GetRecCreatives.
type GetRecCreativesParams struct {
	// CreativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
	CreativeIdFilter CreativeIdFilter `form:"creativeIdFilter" json:"creativeIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateRecCreativesParams defines parameters for CreateRecCreatives.
type CreateRecCreativesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateRecCreativesParams defines parameters for UpdateRecCreatives.
type UpdateRecCreativesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PreviewRecCreativeParams defines parameters for PreviewRecCreative.
type PreviewRecCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetThirdPartyCreativesParams defines parameters for GetThirdPartyCreatives.
type GetThirdPartyCreativesParams struct {
	// CreativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
	CreativeIdFilter CreativeIdFilter `form:"creativeIdFilter" json:"creativeIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateThirdPartyCreativeParams defines parameters for CreateThirdPartyCreative.
type CreateThirdPartyCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateThirdPartyCreativeParams defines parameters for UpdateThirdPartyCreative.
type UpdateThirdPartyCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PreviewThirdPartyCreativeParams defines parameters for PreviewThirdPartyCreative.
type PreviewThirdPartyCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetVideoCreativesParams defines parameters for GetVideoCreatives.
type GetVideoCreativesParams struct {
	// CreativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
	CreativeIdFilter CreativeIdFilter `form:"creativeIdFilter" json:"creativeIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateVideoCreativesParams defines parameters for CreateVideoCreatives.
type CreateVideoCreativesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateVideoCreativesParams defines parameters for UpdateVideoCreatives.
type UpdateVideoCreativesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PreviewVideoCreativeParams defines parameters for PreviewVideoCreative.
type PreviewVideoCreativeParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDomainsParams defines parameters for GetDomains.
type GetDomainsParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of domain lists in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateFileUploadsPolicyParams defines parameters for CreateFileUploadsPolicy.
type CreateFileUploadsPolicyParams struct {
	// PolicyType The returned file upload policy is determined by policyType.
	PolicyType SupportedPolicyType `form:"policyType" json:"policyType"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetGeoLocationsParams defines parameters for GetGeoLocations.
type GetGeoLocationsParams struct {
	// GeoLocationIDFilter An array of location IDs to retrieve, up to 10 in one request.
	GeoLocationIDFilter *[]string `form:"geoLocationIDFilter,omitempty" json:"geoLocationIDFilter,omitempty"`

	// TextQuery Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
	TextQuery *string `form:"textQuery,omitempty" json:"textQuery,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of locations in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetGoalConfigurationsParams defines parameters for GetGoalConfigurations.
type GetGoalConfigurationsParams struct {
	// ProductLocation Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
	ProductLocation GetGoalConfigurationsParamsProductLocation `form:"productLocation" json:"productLocation"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetGoalConfigurationsParamsProductLocation defines parameters for GetGoalConfigurations.
type GetGoalConfigurationsParamsProductLocation string

// GetIabContentCategoriesParams defines parameters for GetIabContentCategories.
type GetIabContentCategoriesParams struct {
	// LineItemType The line item type to retrieve content categories for. This was introduced in version - `application/vnd.dspiabcontentcategories.v1+json`.
	LineItemType *DiscoveryLineItemTypes `form:"lineItemType,omitempty" json:"lineItemType,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of categories in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ListLineItemCreativeAssociationsParams defines parameters for ListLineItemCreativeAssociations.
type ListLineItemCreativeAssociationsParams struct {
	// LineItemIdFilter The returned array includes only associations to line items matching those specified in the comma-delimited string.
	LineItemIdFilter string `form:"lineItemIdFilter" json:"lineItemIdFilter"`

	// Count Optional. Sets the number of results in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten results set `startIndex=0` and `count=10`. To return the next ten results, set `startIndex=10` and `count=10`, and so on. Maximum of count is 20.
	Count *int `form:"count,omitempty" json:"count,omitempty"`

	// StartIndex Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0.
	StartIndex *int `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// AssociateLineItemsToCreativesParams defines parameters for AssociateLineItemsToCreatives.
type AssociateLineItemsToCreativesParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody defines parameters for UpdateLineItemCreativeAssociations.
type UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody = []LineItemCreativeAssociation

// UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody defines parameters for UpdateLineItemCreativeAssociations.
type UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody = []LineItemCreativeAssociation

// UpdateLineItemCreativeAssociationsParams defines parameters for UpdateLineItemCreativeAssociations.
type UpdateLineItemCreativeAssociationsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// StartIndex Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
	StartIndex *string `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Optional. Sets the number of line items in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten line items set `startIndex=0` and `count=10`. To return the next ten line items, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
	Count *string `form:"count,omitempty" json:"count,omitempty"`

	// StatusFilter Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
	StatusFilter *string `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// OrderIdFilter The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
	OrderIdFilter *string `form:"orderIdFilter,omitempty" json:"orderIdFilter,omitempty"`

	// LineItemIdFilter The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
	LineItemIdFilter *string `form:"lineItemIdFilter,omitempty" json:"lineItemIdFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateLineItemsApplicationVndDsplineitemsV2PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV2PlusJSONBody = []LineItem

// CreateLineItemsApplicationVndDsplineitemsV21PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV21PlusJSONBody = []LineItemV21

// CreateLineItemsApplicationVndDsplineitemsV22PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV22PlusJSONBody = []LineItemV21

// CreateLineItemsApplicationVndDsplineitemsV3PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV3PlusJSONBody = []LineItemV3

// CreateLineItemsApplicationVndDsplineitemsV31PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV31PlusJSONBody = []LineItemV31

// CreateLineItemsApplicationVndDsplineitemsV32PlusJSONBody defines parameters for CreateLineItems.
type CreateLineItemsApplicationVndDsplineitemsV32PlusJSONBody = []LineItemV32

// CreateLineItemsParams defines parameters for CreateLineItems.
type CreateLineItemsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONBody = []LineItem

// UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONBody = []LineItemV21

// UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONBody = []LineItemV21

// UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONBody = []LineItemV3

// UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONBody = []LineItemV31

// UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONBody defines parameters for UpdateLineItems.
type UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONBody = []LineItemV32

// UpdateLineItemsParams defines parameters for UpdateLineItems.
type UpdateLineItemsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetLineItemParams defines parameters for GetLineItem.
type GetLineItemParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SetLineItemStatusParams defines parameters for SetLineItemStatus.
type SetLineItemStatusParams struct {
	// Status The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
	Status DeliveryActivationStatus `form:"status" json:"status"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetCreativeModerationParams defines parameters for GetCreativeModeration.
type GetCreativeModerationParams struct {
	// CreativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
	CreativeIdFilter CreativeIdFilter `form:"creativeIdFilter" json:"creativeIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// StartIndex Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
	StartIndex *string `form:"startIndex,omitempty" json:"startIndex,omitempty"`

	// Count Optional. Sets the number of orders in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten orders set `startIndex=0` and `count=10`. To return the next ten orders, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
	Count *string `form:"count,omitempty" json:"count,omitempty"`

	// StatusFilter Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
	StatusFilter *string `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// OrderIdFilter The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
	OrderIdFilter *string `form:"orderIdFilter,omitempty" json:"orderIdFilter,omitempty"`

	// AdvertiserIdFilter The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
	AdvertiserIdFilter *string `form:"advertiserIdFilter,omitempty" json:"advertiserIdFilter,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateOrdersApplicationVndDspordersV2PlusJSONBody defines parameters for CreateOrders.
type CreateOrdersApplicationVndDspordersV2PlusJSONBody = []Order

// CreateOrdersApplicationVndDspordersV21PlusJSONBody defines parameters for CreateOrders.
type CreateOrdersApplicationVndDspordersV21PlusJSONBody = []Order

// CreateOrdersApplicationVndDspordersV22PlusJSONBody defines parameters for CreateOrders.
type CreateOrdersApplicationVndDspordersV22PlusJSONBody = []OrderV22

// CreateOrdersApplicationVndDspordersV23PlusJSONBody defines parameters for CreateOrders.
type CreateOrdersApplicationVndDspordersV23PlusJSONBody = []OrderV23

// CreateOrdersParams defines parameters for CreateOrders.
type CreateOrdersParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateOrdersApplicationVndDspordersV2PlusJSONBody defines parameters for UpdateOrders.
type UpdateOrdersApplicationVndDspordersV2PlusJSONBody = []Order

// UpdateOrdersApplicationVndDspordersV21PlusJSONBody defines parameters for UpdateOrders.
type UpdateOrdersApplicationVndDspordersV21PlusJSONBody = []Order

// UpdateOrdersApplicationVndDspordersV22PlusJSONBody defines parameters for UpdateOrders.
type UpdateOrdersApplicationVndDspordersV22PlusJSONBody = []OrderV22

// UpdateOrdersApplicationVndDspordersV23PlusJSONBody defines parameters for UpdateOrders.
type UpdateOrdersApplicationVndDspordersV23PlusJSONBody = []OrderV23

// UpdateOrdersParams defines parameters for UpdateOrders.
type UpdateOrdersParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetOrderParams defines parameters for GetOrder.
type GetOrderParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetConversionTrackingsParams defines parameters for GetConversionTrackings.
type GetConversionTrackingsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateConversionTrackingParams defines parameters for UpdateConversionTracking.
type UpdateConversionTrackingParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetPixelsByOrderIdParams defines parameters for GetPixelsByOrderId.
type GetPixelsByOrderIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdatePixelsByOrderIdParams defines parameters for UpdatePixelsByOrderId.
type UpdatePixelsByOrderIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetProductsByOrderIdParams defines parameters for GetProductsByOrderId.
type GetProductsByOrderIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// PutDspOrdersOrderIdConversionTrackingProductsParams defines parameters for PutDspOrdersOrderIdConversionTrackingProducts.
type PutDspOrdersOrderIdConversionTrackingProductsParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// ExportProductsByOrderIdParams defines parameters for ExportProductsByOrderId.
type ExportProductsByOrderIdParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// SetOrderStatusParams defines parameters for SetOrderStatus.
type SetOrderStatusParams struct {
	// Status The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
	Status DeliveryActivationStatus `form:"status" json:"status"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetPixelsParams defines parameters for GetPixels.
type GetPixelsParams struct {
	// AdvertiserIdFilter The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
	AdvertiserIdFilter []string `form:"advertiserIdFilter" json:"advertiserIdFilter"`

	// PixelIdFilter The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
	PixelIdFilter *[]string `form:"pixelIdFilter,omitempty" json:"pixelIdFilter,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of pixels in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetDvCustomContextualSegmentsParams defines parameters for GetDvCustomContextualSegments.
type GetDvCustomContextualSegmentsParams struct {
	// AdvertiserId The advertiser to retrieve pre-bid targeting for.
	AdvertiserId string `form:"advertiserId" json:"advertiserId"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetOdcCustomPredictsParams defines parameters for GetOdcCustomPredicts.
type GetOdcCustomPredictsParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetOdcStandardPredictsParams defines parameters for GetOdcStandardPredicts.
type GetOdcStandardPredictsParams struct {
	// NextToken Token to be used to request additional entries. If not provided, up to the first 320 entries are returned. Note: subsequent calls must be made using the same parameters as used in previous requests that returned the provided nextToken.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetProductCategoriesParams defines parameters for GetProductCategories.
type GetProductCategoriesParams struct {
	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of categories in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSupplySourcesParams defines parameters for GetSupplySources.
type GetSupplySourcesParams struct {
	// LineItemType Line item type to retrieve supply sources for
	LineItemType DiscoveryLineItemTypes `form:"lineItemType" json:"lineItemType"`

	// SupplySourceType Type of supply source to retrieve
	SupplySourceType GetSupplySourcesParamsSupplySourceType `form:"supplySourceType" json:"supplySourceType"`

	// OrderId Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
	OrderId *string `form:"orderId,omitempty" json:"orderId,omitempty"`

	// AdvertiserId Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
	AdvertiserId *string `form:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	// DeviceTypes Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
	DeviceTypes *[]GetSupplySourcesParamsDeviceTypes `form:"deviceTypes,omitempty" json:"deviceTypes,omitempty"`

	// NextToken Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// MaxResults Sets the maximum number of supply sources in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
	MaxResults *int `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// GetSupplySourcesParamsSupplySourceType defines parameters for GetSupplySources.
type GetSupplySourcesParamsSupplySourceType string

// GetSupplySourcesParamsDeviceTypes defines parameters for GetSupplySources.
type GetSupplySourcesParamsDeviceTypes string

// GetDomainTargetingParams defines parameters for GetDomainTargeting.
type GetDomainTargetingParams struct {
	// LineItemIdFilter Comma-delimited string of line item ids. Maximum 100 ids.
	LineItemIdFilter string `form:"lineItemIdFilter" json:"lineItemIdFilter"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONBody defines parameters for UpdateDomainTargeting.
type UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONBody = []UpdateDomainTargetingRequest

// UpdateDomainTargetingParams defines parameters for UpdateDomainTargeting.
type UpdateDomainTargetingParams struct {
	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId ClientHeader `json:"Amazon-Advertising-API-ClientId"`

	// AmazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input. For DSP profiles, the `type` field of the `accountInfo` object must be set to `agency` and the `subType` field must not be `AMAZON_ATTRIBUTION`.
	AmazonAdvertisingAPIScope ProfileHeader `json:"Amazon-Advertising-API-Scope"`
}

// CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody defines body for CreateImageCreative for application/vnd.dspcreateimagecreatives.v1+json ContentType.
type CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody = DspCreateImageCreativesRequestV1

// UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody defines body for UpdateImageCreative for application/vnd.dspupdateimagecreatives.v1+json ContentType.
type UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody = DspUpdateImageCreativesRequestV1

// PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody defines body for PreviewImageCreative for application/vnd.dsppreviewimagecreatives.v1+json ContentType.
type PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody = DspImageCreativePreviewRequestV1

// CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody defines body for CreateRecCreatives for application/vnd.dspcreatereccreatives.v1+json ContentType.
type CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody = DspCreateRecCreativesRequestV1

// UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody defines body for UpdateRecCreatives for application/vnd.dspupdatereccreatives.v1+json ContentType.
type UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody = DspUpdateRecCreativesRequestV1

// PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody defines body for PreviewRecCreative for application/vnd.dsppreviewreccreatives.v1+json ContentType.
type PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody = DspRecCreativePreviewRequestV1

// CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody defines body for CreateThirdPartyCreative for application/vnd.dspcreatethirdpartycreatives.v1+json ContentType.
type CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody = DspCreateThirdPartyCreativesRequestV1

// UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody defines body for UpdateThirdPartyCreative for application/vnd.dspupdatethirdpartycreatives.v1+json ContentType.
type UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody = DspUpdateThirdPartyCreativesRequestV1

// PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody defines body for PreviewThirdPartyCreative for application/vnd.dsppreviewthirdpartycreatives.v1+json ContentType.
type PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody = DspThirdPartyCreativePreviewRequestV1

// CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody defines body for CreateVideoCreatives for application/vnd.dspcreatevideocreatives.v1+json ContentType.
type CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody = DspCreateVideoCreativesRequestV1

// UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody defines body for UpdateVideoCreatives for application/vnd.dspupdatevideocreatives.v1+json ContentType.
type UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody = DspUpdateVideoCreativesRequestV1

// PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody defines body for PreviewVideoCreative for application/vnd.dsppreviewvideocreatives.v1+json ContentType.
type PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody = DspVideoCreativePreviewRequestV1

// AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody defines body for AssociateLineItemsToCreatives for application/vnd.dsplineitemcreativeassociations.v2+json ContentType.
type AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody = LineItemCreativeAssociationsRequest

// AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody defines body for AssociateLineItemsToCreatives for application/vnd.dsplineitemcreativeassociations.v2.1+json ContentType.
type AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody = LineItemCreativeAssociationsRequest

// UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody defines body for UpdateLineItemCreativeAssociations for application/vnd.dsplineitemcreativeassociations.v2+json ContentType.
type UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody = UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody

// UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody defines body for UpdateLineItemCreativeAssociations for application/vnd.dsplineitemcreativeassociations.v2.1+json ContentType.
type UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody = UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v2+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV2PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v2.1+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV21PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v2.2+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV22PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v3+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV3PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v3.1+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV31PlusJSONBody

// CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody defines body for CreateLineItems for application/vnd.dsplineitems.v3.2+json ContentType.
type CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody = CreateLineItemsApplicationVndDsplineitemsV32PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v2+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v2.1+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v2.2+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v3+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v3.1+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONBody

// UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody defines body for UpdateLineItems for application/vnd.dsplineitems.v3.2+json ContentType.
type UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody = UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONBody

// CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody defines body for CreateOrders for application/vnd.dsporders.v2+json ContentType.
type CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody = CreateOrdersApplicationVndDspordersV2PlusJSONBody

// CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody defines body for CreateOrders for application/vnd.dsporders.v2.1+json ContentType.
type CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody = CreateOrdersApplicationVndDspordersV21PlusJSONBody

// CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody defines body for CreateOrders for application/vnd.dsporders.v2.2+json ContentType.
type CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody = CreateOrdersApplicationVndDspordersV22PlusJSONBody

// CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody defines body for CreateOrders for application/vnd.dsporders.v2.3+json ContentType.
type CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody = CreateOrdersApplicationVndDspordersV23PlusJSONBody

// UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody defines body for UpdateOrders for application/vnd.dsporders.v2+json ContentType.
type UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody = UpdateOrdersApplicationVndDspordersV2PlusJSONBody

// UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody defines body for UpdateOrders for application/vnd.dsporders.v2.1+json ContentType.
type UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody = UpdateOrdersApplicationVndDspordersV21PlusJSONBody

// UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody defines body for UpdateOrders for application/vnd.dsporders.v2.2+json ContentType.
type UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody = UpdateOrdersApplicationVndDspordersV22PlusJSONBody

// UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody defines body for UpdateOrders for application/vnd.dsporders.v2.3+json ContentType.
type UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody = UpdateOrdersApplicationVndDspordersV23PlusJSONBody

// UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody defines body for UpdateConversionTracking for application/vnd.dsporders.v2+json ContentType.
type UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody = ConversionTracking

// UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody defines body for UpdateConversionTracking for application/vnd.dsporders.v2.1+json ContentType.
type UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody = ConversionTrackingV21

// UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody defines body for UpdatePixelsByOrderId for application/vnd.dsppixeltracking.v1+json ContentType.
type UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody = PixelTracking

// PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody defines body for PutDspOrdersOrderIdConversionTrackingProducts for application/vnd.dspproducttracking.v1+json ContentType.
type PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody = ProductTrackingV1

// UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody defines body for UpdateDomainTargeting for application/vnd.dspupdatedomaintargeting.v1+json ContentType.
type UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody = UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONBody

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApps request
	GetApps(ctx context.Context, params *GetAppsParams) (*http.Response, error)

	// GetCreatives request
	GetCreatives(ctx context.Context, params *GetCreativesParams) (*http.Response, error)

	// GetImageCreatives request
	GetImageCreatives(ctx context.Context, params *GetImageCreativesParams) (*http.Response, error)

	// CreateImageCreativeWithBody request with any body
	CreateImageCreativeWithBody(ctx context.Context, params *CreateImageCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	CreateImageCreativeWithApplicationVndDspcreateimagecreativesV1PlusJSONBody(ctx context.Context, params *CreateImageCreativeParams, body CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody) (*http.Response, error)

	// UpdateImageCreativeWithBody request with any body
	UpdateImageCreativeWithBody(ctx context.Context, params *UpdateImageCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateImageCreativeWithApplicationVndDspupdateimagecreativesV1PlusJSONBody(ctx context.Context, params *UpdateImageCreativeParams, body UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody) (*http.Response, error)

	// PreviewImageCreativeWithBody request with any body
	PreviewImageCreativeWithBody(ctx context.Context, params *PreviewImageCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	PreviewImageCreativeWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody(ctx context.Context, params *PreviewImageCreativeParams, body PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody) (*http.Response, error)

	// GetRecCreatives request
	GetRecCreatives(ctx context.Context, params *GetRecCreativesParams) (*http.Response, error)

	// CreateRecCreativesWithBody request with any body
	CreateRecCreativesWithBody(ctx context.Context, params *CreateRecCreativesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateRecCreativesWithApplicationVndDspcreatereccreativesV1PlusJSONBody(ctx context.Context, params *CreateRecCreativesParams, body CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody) (*http.Response, error)

	// UpdateRecCreativesWithBody request with any body
	UpdateRecCreativesWithBody(ctx context.Context, params *UpdateRecCreativesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateRecCreativesWithApplicationVndDspupdatereccreativesV1PlusJSONBody(ctx context.Context, params *UpdateRecCreativesParams, body UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody) (*http.Response, error)

	// PreviewRecCreativeWithBody request with any body
	PreviewRecCreativeWithBody(ctx context.Context, params *PreviewRecCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	PreviewRecCreativeWithApplicationVndDsppreviewreccreativesV1PlusJSONBody(ctx context.Context, params *PreviewRecCreativeParams, body PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody) (*http.Response, error)

	// GetThirdPartyCreatives request
	GetThirdPartyCreatives(ctx context.Context, params *GetThirdPartyCreativesParams) (*http.Response, error)

	// CreateThirdPartyCreativeWithBody request with any body
	CreateThirdPartyCreativeWithBody(ctx context.Context, params *CreateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	CreateThirdPartyCreativeWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody(ctx context.Context, params *CreateThirdPartyCreativeParams, body CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error)

	// UpdateThirdPartyCreativeWithBody request with any body
	UpdateThirdPartyCreativeWithBody(ctx context.Context, params *UpdateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateThirdPartyCreativeWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody(ctx context.Context, params *UpdateThirdPartyCreativeParams, body UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error)

	// PreviewThirdPartyCreativeWithBody request with any body
	PreviewThirdPartyCreativeWithBody(ctx context.Context, params *PreviewThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	PreviewThirdPartyCreativeWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody(ctx context.Context, params *PreviewThirdPartyCreativeParams, body PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error)

	// GetVideoCreatives request
	GetVideoCreatives(ctx context.Context, params *GetVideoCreativesParams) (*http.Response, error)

	// CreateVideoCreativesWithBody request with any body
	CreateVideoCreativesWithBody(ctx context.Context, params *CreateVideoCreativesParams, contentType string, body io.Reader) (*http.Response, error)

	CreateVideoCreativesWithApplicationVndDspcreatevideocreativesV1PlusJSONBody(ctx context.Context, params *CreateVideoCreativesParams, body CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody) (*http.Response, error)

	// UpdateVideoCreativesWithBody request with any body
	UpdateVideoCreativesWithBody(ctx context.Context, params *UpdateVideoCreativesParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateVideoCreativesWithApplicationVndDspupdatevideocreativesV1PlusJSONBody(ctx context.Context, params *UpdateVideoCreativesParams, body UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody) (*http.Response, error)

	// PreviewVideoCreativeWithBody request with any body
	PreviewVideoCreativeWithBody(ctx context.Context, params *PreviewVideoCreativeParams, contentType string, body io.Reader) (*http.Response, error)

	PreviewVideoCreativeWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody(ctx context.Context, params *PreviewVideoCreativeParams, body PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody) (*http.Response, error)

	// GetDomains request
	GetDomains(ctx context.Context, params *GetDomainsParams) (*http.Response, error)

	// CreateFileUploadsPolicy request
	CreateFileUploadsPolicy(ctx context.Context, params *CreateFileUploadsPolicyParams) (*http.Response, error)

	// GetGeoLocations request
	GetGeoLocations(ctx context.Context, params *GetGeoLocationsParams) (*http.Response, error)

	// GetGoalConfigurations request
	GetGoalConfigurations(ctx context.Context, params *GetGoalConfigurationsParams) (*http.Response, error)

	// GetIabContentCategories request
	GetIabContentCategories(ctx context.Context, params *GetIabContentCategoriesParams) (*http.Response, error)

	// ListLineItemCreativeAssociations request
	ListLineItemCreativeAssociations(ctx context.Context, params *ListLineItemCreativeAssociationsParams) (*http.Response, error)

	// AssociateLineItemsToCreativesWithBody request with any body
	AssociateLineItemsToCreativesWithBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, contentType string, body io.Reader) (*http.Response, error)

	AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Response, error)

	AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Response, error)

	// UpdateLineItemCreativeAssociationsWithBody request with any body
	UpdateLineItemCreativeAssociationsWithBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Response, error)

	// GetLineItems request
	GetLineItems(ctx context.Context, params *GetLineItemsParams) (*http.Response, error)

	// CreateLineItemsWithBody request with any body
	CreateLineItemsWithBody(ctx context.Context, params *CreateLineItemsParams, contentType string, body io.Reader) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Response, error)

	CreateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Response, error)

	// UpdateLineItemsWithBody request with any body
	UpdateLineItemsWithBody(ctx context.Context, params *UpdateLineItemsParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Response, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Response, error)

	// GetLineItem request
	GetLineItem(ctx context.Context, lineItemId string, params *GetLineItemParams) (*http.Response, error)

	// SetLineItemStatus request
	SetLineItemStatus(ctx context.Context, lineItemId string, params *SetLineItemStatusParams) (*http.Response, error)

	// GetCreativeModeration request
	GetCreativeModeration(ctx context.Context, params *GetCreativeModerationParams) (*http.Response, error)

	// GetOrders request
	GetOrders(ctx context.Context, params *GetOrdersParams) (*http.Response, error)

	// CreateOrdersWithBody request with any body
	CreateOrdersWithBody(ctx context.Context, params *CreateOrdersParams, contentType string, body io.Reader) (*http.Response, error)

	CreateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error)

	CreateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error)

	CreateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Response, error)

	CreateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Response, error)

	// UpdateOrdersWithBody request with any body
	UpdateOrdersWithBody(ctx context.Context, params *UpdateOrdersParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error)

	UpdateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error)

	UpdateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Response, error)

	UpdateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, orderId string, params *GetOrderParams) (*http.Response, error)

	// GetConversionTrackings request
	GetConversionTrackings(ctx context.Context, orderId string, params *GetConversionTrackingsParams) (*http.Response, error)

	// UpdateConversionTrackingWithBody request with any body
	UpdateConversionTrackingWithBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateConversionTrackingWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error)

	UpdateConversionTrackingWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error)

	// GetPixelsByOrderId request
	GetPixelsByOrderId(ctx context.Context, orderId string, params *GetPixelsByOrderIdParams) (*http.Response, error)

	// UpdatePixelsByOrderIdWithBody request with any body
	UpdatePixelsByOrderIdWithBody(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, contentType string, body io.Reader) (*http.Response, error)

	UpdatePixelsByOrderIdWithApplicationVndDsppixeltrackingV1PlusJSONBody(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, body UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody) (*http.Response, error)

	// GetProductsByOrderId request
	GetProductsByOrderId(ctx context.Context, orderId string, params *GetProductsByOrderIdParams) (*http.Response, error)

	// PutDspOrdersOrderIdConversionTrackingProductsWithBody request with any body
	PutDspOrdersOrderIdConversionTrackingProductsWithBody(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, contentType string, body io.Reader) (*http.Response, error)

	PutDspOrdersOrderIdConversionTrackingProductsWithApplicationVndDspproducttrackingV1PlusJSONBody(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, body PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody) (*http.Response, error)

	// ExportProductsByOrderId request
	ExportProductsByOrderId(ctx context.Context, orderId string, params *ExportProductsByOrderIdParams) (*http.Response, error)

	// SetOrderStatus request
	SetOrderStatus(ctx context.Context, orderId string, params *SetOrderStatusParams) (*http.Response, error)

	// GetPixels request
	GetPixels(ctx context.Context, params *GetPixelsParams) (*http.Response, error)

	// GetDvCustomContextualSegments request
	GetDvCustomContextualSegments(ctx context.Context, params *GetDvCustomContextualSegmentsParams) (*http.Response, error)

	// GetOdcCustomPredicts request
	GetOdcCustomPredicts(ctx context.Context, params *GetOdcCustomPredictsParams) (*http.Response, error)

	// GetOdcStandardPredicts request
	GetOdcStandardPredicts(ctx context.Context, params *GetOdcStandardPredictsParams) (*http.Response, error)

	// GetProductCategories request
	GetProductCategories(ctx context.Context, params *GetProductCategoriesParams) (*http.Response, error)

	// GetSupplySources request
	GetSupplySources(ctx context.Context, params *GetSupplySourcesParams) (*http.Response, error)

	// GetDomainTargeting request
	GetDomainTargeting(ctx context.Context, params *GetDomainTargetingParams) (*http.Response, error)

	// UpdateDomainTargetingWithBody request with any body
	UpdateDomainTargetingWithBody(ctx context.Context, params *UpdateDomainTargetingParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateDomainTargetingWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody(ctx context.Context, params *UpdateDomainTargetingParams, body UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetApps(ctx context.Context, params *GetAppsParams) (*http.Response, error) {
	req, err := NewGetAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCreatives(ctx context.Context, params *GetCreativesParams) (*http.Response, error) {
	req, err := NewGetCreativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetImageCreatives(ctx context.Context, params *GetImageCreativesParams) (*http.Response, error) {
	req, err := NewGetImageCreativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateImageCreativeWithBody(ctx context.Context, params *CreateImageCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateImageCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateImageCreativeWithApplicationVndDspcreateimagecreativesV1PlusJSONBody(ctx context.Context, params *CreateImageCreativeParams, body CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateImageCreativeRequestWithApplicationVndDspcreateimagecreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateImageCreativeWithBody(ctx context.Context, params *UpdateImageCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateImageCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateImageCreativeWithApplicationVndDspupdateimagecreativesV1PlusJSONBody(ctx context.Context, params *UpdateImageCreativeParams, body UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateImageCreativeRequestWithApplicationVndDspupdateimagecreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewImageCreativeWithBody(ctx context.Context, params *PreviewImageCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPreviewImageCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewImageCreativeWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody(ctx context.Context, params *PreviewImageCreativeParams, body PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewPreviewImageCreativeRequestWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetRecCreatives(ctx context.Context, params *GetRecCreativesParams) (*http.Response, error) {
	req, err := NewGetRecCreativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateRecCreativesWithBody(ctx context.Context, params *CreateRecCreativesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateRecCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateRecCreativesWithApplicationVndDspcreatereccreativesV1PlusJSONBody(ctx context.Context, params *CreateRecCreativesParams, body CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateRecCreativesRequestWithApplicationVndDspcreatereccreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateRecCreativesWithBody(ctx context.Context, params *UpdateRecCreativesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateRecCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateRecCreativesWithApplicationVndDspupdatereccreativesV1PlusJSONBody(ctx context.Context, params *UpdateRecCreativesParams, body UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateRecCreativesRequestWithApplicationVndDspupdatereccreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewRecCreativeWithBody(ctx context.Context, params *PreviewRecCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPreviewRecCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewRecCreativeWithApplicationVndDsppreviewreccreativesV1PlusJSONBody(ctx context.Context, params *PreviewRecCreativeParams, body PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewPreviewRecCreativeRequestWithApplicationVndDsppreviewreccreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetThirdPartyCreatives(ctx context.Context, params *GetThirdPartyCreativesParams) (*http.Response, error) {
	req, err := NewGetThirdPartyCreativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateThirdPartyCreativeWithBody(ctx context.Context, params *CreateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateThirdPartyCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateThirdPartyCreativeWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody(ctx context.Context, params *CreateThirdPartyCreativeParams, body CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateThirdPartyCreativeRequestWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateThirdPartyCreativeWithBody(ctx context.Context, params *UpdateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateThirdPartyCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateThirdPartyCreativeWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody(ctx context.Context, params *UpdateThirdPartyCreativeParams, body UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateThirdPartyCreativeRequestWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewThirdPartyCreativeWithBody(ctx context.Context, params *PreviewThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPreviewThirdPartyCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewThirdPartyCreativeWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody(ctx context.Context, params *PreviewThirdPartyCreativeParams, body PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewPreviewThirdPartyCreativeRequestWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetVideoCreatives(ctx context.Context, params *GetVideoCreativesParams) (*http.Response, error) {
	req, err := NewGetVideoCreativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateVideoCreativesWithBody(ctx context.Context, params *CreateVideoCreativesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateVideoCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateVideoCreativesWithApplicationVndDspcreatevideocreativesV1PlusJSONBody(ctx context.Context, params *CreateVideoCreativesParams, body CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateVideoCreativesRequestWithApplicationVndDspcreatevideocreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateVideoCreativesWithBody(ctx context.Context, params *UpdateVideoCreativesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateVideoCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateVideoCreativesWithApplicationVndDspupdatevideocreativesV1PlusJSONBody(ctx context.Context, params *UpdateVideoCreativesParams, body UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateVideoCreativesRequestWithApplicationVndDspupdatevideocreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewVideoCreativeWithBody(ctx context.Context, params *PreviewVideoCreativeParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPreviewVideoCreativeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PreviewVideoCreativeWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody(ctx context.Context, params *PreviewVideoCreativeParams, body PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewPreviewVideoCreativeRequestWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDomains(ctx context.Context, params *GetDomainsParams) (*http.Response, error) {
	req, err := NewGetDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateFileUploadsPolicy(ctx context.Context, params *CreateFileUploadsPolicyParams) (*http.Response, error) {
	req, err := NewCreateFileUploadsPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetGeoLocations(ctx context.Context, params *GetGeoLocationsParams) (*http.Response, error) {
	req, err := NewGetGeoLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetGoalConfigurations(ctx context.Context, params *GetGoalConfigurationsParams) (*http.Response, error) {
	req, err := NewGetGoalConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetIabContentCategories(ctx context.Context, params *GetIabContentCategoriesParams) (*http.Response, error) {
	req, err := NewGetIabContentCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ListLineItemCreativeAssociations(ctx context.Context, params *ListLineItemCreativeAssociationsParams) (*http.Response, error) {
	req, err := NewListLineItemCreativeAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) AssociateLineItemsToCreativesWithBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAssociateLineItemsToCreativesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemCreativeAssociationsWithBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateLineItemCreativeAssociationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetLineItems(ctx context.Context, params *GetLineItemsParams) (*http.Response, error) {
	req, err := NewGetLineItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithBody(ctx context.Context, params *CreateLineItemsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithBody(ctx context.Context, params *UpdateLineItemsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetLineItem(ctx context.Context, lineItemId string, params *GetLineItemParams) (*http.Response, error) {
	req, err := NewGetLineItemRequest(c.Server, lineItemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SetLineItemStatus(ctx context.Context, lineItemId string, params *SetLineItemStatusParams) (*http.Response, error) {
	req, err := NewSetLineItemStatusRequest(c.Server, lineItemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetCreativeModeration(ctx context.Context, params *GetCreativeModerationParams) (*http.Response, error) {
	req, err := NewGetCreativeModerationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOrders(ctx context.Context, params *GetOrdersParams) (*http.Response, error) {
	req, err := NewGetOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOrdersWithBody(ctx context.Context, params *CreateOrdersParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateOrdersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) CreateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOrdersWithBody(ctx context.Context, params *UpdateOrdersParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateOrdersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOrder(ctx context.Context, orderId string, params *GetOrderParams) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetConversionTrackings(ctx context.Context, orderId string, params *GetConversionTrackingsParams) (*http.Response, error) {
	req, err := NewGetConversionTrackingsRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateConversionTrackingWithBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateConversionTrackingRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateConversionTrackingWithApplicationVndDspordersV2PlusJSONBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateConversionTrackingRequestWithApplicationVndDspordersV2PlusJSONBody(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateConversionTrackingWithApplicationVndDspordersV21PlusJSONBody(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateConversionTrackingRequestWithApplicationVndDspordersV21PlusJSONBody(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetPixelsByOrderId(ctx context.Context, orderId string, params *GetPixelsByOrderIdParams) (*http.Response, error) {
	req, err := NewGetPixelsByOrderIdRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdatePixelsByOrderIdWithBody(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdatePixelsByOrderIdRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdatePixelsByOrderIdWithApplicationVndDsppixeltrackingV1PlusJSONBody(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, body UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdatePixelsByOrderIdRequestWithApplicationVndDsppixeltrackingV1PlusJSONBody(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductsByOrderId(ctx context.Context, orderId string, params *GetProductsByOrderIdParams) (*http.Response, error) {
	req, err := NewGetProductsByOrderIdRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PutDspOrdersOrderIdConversionTrackingProductsWithBody(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) PutDspOrdersOrderIdConversionTrackingProductsWithApplicationVndDspproducttrackingV1PlusJSONBody(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, body PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithApplicationVndDspproducttrackingV1PlusJSONBody(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) ExportProductsByOrderId(ctx context.Context, orderId string, params *ExportProductsByOrderIdParams) (*http.Response, error) {
	req, err := NewExportProductsByOrderIdRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) SetOrderStatus(ctx context.Context, orderId string, params *SetOrderStatusParams) (*http.Response, error) {
	req, err := NewSetOrderStatusRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetPixels(ctx context.Context, params *GetPixelsParams) (*http.Response, error) {
	req, err := NewGetPixelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDvCustomContextualSegments(ctx context.Context, params *GetDvCustomContextualSegmentsParams) (*http.Response, error) {
	req, err := NewGetDvCustomContextualSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOdcCustomPredicts(ctx context.Context, params *GetOdcCustomPredictsParams) (*http.Response, error) {
	req, err := NewGetOdcCustomPredictsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetOdcStandardPredicts(ctx context.Context, params *GetOdcStandardPredictsParams) (*http.Response, error) {
	req, err := NewGetOdcStandardPredictsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetProductCategories(ctx context.Context, params *GetProductCategoriesParams) (*http.Response, error) {
	req, err := NewGetProductCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetSupplySources(ctx context.Context, params *GetSupplySourcesParams) (*http.Response, error) {
	req, err := NewGetSupplySourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) GetDomainTargeting(ctx context.Context, params *GetDomainTargetingParams) (*http.Response, error) {
	req, err := NewGetDomainTargetingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDomainTargetingWithBody(ctx context.Context, params *UpdateDomainTargetingParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDomainTargetingRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UpdateDomainTargetingWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody(ctx context.Context, params *UpdateDomainTargetingParams, body UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDomainTargetingRequestWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewGetAppsRequest generates requests for GetApps
func NewGetAppsRequest(server string, params *GetAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AppIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "appIdFilter", runtime.ParamLocationQuery, *params.AppIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.TextQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "textQuery", runtime.ParamLocationQuery, *params.TextQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCreativesRequest generates requests for GetCreatives
func NewGetCreativesRequest(server string, params *GetCreativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.CreativeIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, *params.CreativeIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserIdFilter", runtime.ParamLocationQuery, *params.AdvertiserIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.LineItemTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemTypeFilter", runtime.ParamLocationQuery, *params.LineItemTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetImageCreativesRequest generates requests for GetImageCreatives
func NewGetImageCreativesRequest(server string, params *GetImageCreativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, params.CreativeIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateImageCreativeRequestWithApplicationVndDspcreateimagecreativesV1PlusJSONBody calls the generic CreateImageCreative builder with application/vnd.dspcreateimagecreatives.v1+json body
func NewCreateImageCreativeRequestWithApplicationVndDspcreateimagecreativesV1PlusJSONBody(server string, params *CreateImageCreativeParams, body CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateImageCreativeRequestWithBody(server, params, "application/vnd.dspcreateimagecreatives.v1+json", bodyReader)
}

// NewCreateImageCreativeRequestWithBody generates requests for CreateImageCreative with any type of body
func NewCreateImageCreativeRequestWithBody(server string, params *CreateImageCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateImageCreativeRequestWithApplicationVndDspupdateimagecreativesV1PlusJSONBody calls the generic UpdateImageCreative builder with application/vnd.dspupdateimagecreatives.v1+json body
func NewUpdateImageCreativeRequestWithApplicationVndDspupdateimagecreativesV1PlusJSONBody(server string, params *UpdateImageCreativeParams, body UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateImageCreativeRequestWithBody(server, params, "application/vnd.dspupdateimagecreatives.v1+json", bodyReader)
}

// NewUpdateImageCreativeRequestWithBody generates requests for UpdateImageCreative with any type of body
func NewUpdateImageCreativeRequestWithBody(server string, params *UpdateImageCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewPreviewImageCreativeRequestWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody calls the generic PreviewImageCreative builder with application/vnd.dsppreviewimagecreatives.v1+json body
func NewPreviewImageCreativeRequestWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody(server string, params *PreviewImageCreativeParams, body PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewImageCreativeRequestWithBody(server, params, "application/vnd.dsppreviewimagecreatives.v1+json", bodyReader)
}

// NewPreviewImageCreativeRequestWithBody generates requests for PreviewImageCreative with any type of body
func NewPreviewImageCreativeRequestWithBody(server string, params *PreviewImageCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/image/preview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetRecCreativesRequest generates requests for GetRecCreatives
func NewGetRecCreativesRequest(server string, params *GetRecCreativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/rec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, params.CreativeIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateRecCreativesRequestWithApplicationVndDspcreatereccreativesV1PlusJSONBody calls the generic CreateRecCreatives builder with application/vnd.dspcreatereccreatives.v1+json body
func NewCreateRecCreativesRequestWithApplicationVndDspcreatereccreativesV1PlusJSONBody(server string, params *CreateRecCreativesParams, body CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecCreativesRequestWithBody(server, params, "application/vnd.dspcreatereccreatives.v1+json", bodyReader)
}

// NewCreateRecCreativesRequestWithBody generates requests for CreateRecCreatives with any type of body
func NewCreateRecCreativesRequestWithBody(server string, params *CreateRecCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/rec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateRecCreativesRequestWithApplicationVndDspupdatereccreativesV1PlusJSONBody calls the generic UpdateRecCreatives builder with application/vnd.dspupdatereccreatives.v1+json body
func NewUpdateRecCreativesRequestWithApplicationVndDspupdatereccreativesV1PlusJSONBody(server string, params *UpdateRecCreativesParams, body UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecCreativesRequestWithBody(server, params, "application/vnd.dspupdatereccreatives.v1+json", bodyReader)
}

// NewUpdateRecCreativesRequestWithBody generates requests for UpdateRecCreatives with any type of body
func NewUpdateRecCreativesRequestWithBody(server string, params *UpdateRecCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/rec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewPreviewRecCreativeRequestWithApplicationVndDsppreviewreccreativesV1PlusJSONBody calls the generic PreviewRecCreative builder with application/vnd.dsppreviewreccreatives.v1+json body
func NewPreviewRecCreativeRequestWithApplicationVndDsppreviewreccreativesV1PlusJSONBody(server string, params *PreviewRecCreativeParams, body PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewRecCreativeRequestWithBody(server, params, "application/vnd.dsppreviewreccreatives.v1+json", bodyReader)
}

// NewPreviewRecCreativeRequestWithBody generates requests for PreviewRecCreative with any type of body
func NewPreviewRecCreativeRequestWithBody(server string, params *PreviewRecCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/rec/preview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetThirdPartyCreativesRequest generates requests for GetThirdPartyCreatives
func NewGetThirdPartyCreativesRequest(server string, params *GetThirdPartyCreativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/thirdparty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, params.CreativeIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateThirdPartyCreativeRequestWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody calls the generic CreateThirdPartyCreative builder with application/vnd.dspcreatethirdpartycreatives.v1+json body
func NewCreateThirdPartyCreativeRequestWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody(server string, params *CreateThirdPartyCreativeParams, body CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThirdPartyCreativeRequestWithBody(server, params, "application/vnd.dspcreatethirdpartycreatives.v1+json", bodyReader)
}

// NewCreateThirdPartyCreativeRequestWithBody generates requests for CreateThirdPartyCreative with any type of body
func NewCreateThirdPartyCreativeRequestWithBody(server string, params *CreateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/thirdparty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateThirdPartyCreativeRequestWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody calls the generic UpdateThirdPartyCreative builder with application/vnd.dspupdatethirdpartycreatives.v1+json body
func NewUpdateThirdPartyCreativeRequestWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody(server string, params *UpdateThirdPartyCreativeParams, body UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateThirdPartyCreativeRequestWithBody(server, params, "application/vnd.dspupdatethirdpartycreatives.v1+json", bodyReader)
}

// NewUpdateThirdPartyCreativeRequestWithBody generates requests for UpdateThirdPartyCreative with any type of body
func NewUpdateThirdPartyCreativeRequestWithBody(server string, params *UpdateThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/thirdparty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewPreviewThirdPartyCreativeRequestWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody calls the generic PreviewThirdPartyCreative builder with application/vnd.dsppreviewthirdpartycreatives.v1+json body
func NewPreviewThirdPartyCreativeRequestWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody(server string, params *PreviewThirdPartyCreativeParams, body PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewThirdPartyCreativeRequestWithBody(server, params, "application/vnd.dsppreviewthirdpartycreatives.v1+json", bodyReader)
}

// NewPreviewThirdPartyCreativeRequestWithBody generates requests for PreviewThirdPartyCreative with any type of body
func NewPreviewThirdPartyCreativeRequestWithBody(server string, params *PreviewThirdPartyCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/thirdparty/preview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetVideoCreativesRequest generates requests for GetVideoCreatives
func NewGetVideoCreativesRequest(server string, params *GetVideoCreativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, params.CreativeIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateVideoCreativesRequestWithApplicationVndDspcreatevideocreativesV1PlusJSONBody calls the generic CreateVideoCreatives builder with application/vnd.dspcreatevideocreatives.v1+json body
func NewCreateVideoCreativesRequestWithApplicationVndDspcreatevideocreativesV1PlusJSONBody(server string, params *CreateVideoCreativesParams, body CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVideoCreativesRequestWithBody(server, params, "application/vnd.dspcreatevideocreatives.v1+json", bodyReader)
}

// NewCreateVideoCreativesRequestWithBody generates requests for CreateVideoCreatives with any type of body
func NewCreateVideoCreativesRequestWithBody(server string, params *CreateVideoCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateVideoCreativesRequestWithApplicationVndDspupdatevideocreativesV1PlusJSONBody calls the generic UpdateVideoCreatives builder with application/vnd.dspupdatevideocreatives.v1+json body
func NewUpdateVideoCreativesRequestWithApplicationVndDspupdatevideocreativesV1PlusJSONBody(server string, params *UpdateVideoCreativesParams, body UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVideoCreativesRequestWithBody(server, params, "application/vnd.dspupdatevideocreatives.v1+json", bodyReader)
}

// NewUpdateVideoCreativesRequestWithBody generates requests for UpdateVideoCreatives with any type of body
func NewUpdateVideoCreativesRequestWithBody(server string, params *UpdateVideoCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewPreviewVideoCreativeRequestWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody calls the generic PreviewVideoCreative builder with application/vnd.dsppreviewvideocreatives.v1+json body
func NewPreviewVideoCreativeRequestWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody(server string, params *PreviewVideoCreativeParams, body PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewVideoCreativeRequestWithBody(server, params, "application/vnd.dsppreviewvideocreatives.v1+json", bodyReader)
}

// NewPreviewVideoCreativeRequestWithBody generates requests for PreviewVideoCreative with any type of body
func NewPreviewVideoCreativeRequestWithBody(server string, params *PreviewVideoCreativeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/creatives/video/preview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDomainsRequest generates requests for GetDomains
func NewGetDomainsRequest(server string, params *GetDomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/domainLists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateFileUploadsPolicyRequest generates requests for CreateFileUploadsPolicy
func NewCreateFileUploadsPolicyRequest(server string, params *CreateFileUploadsPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/fileUploads/policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyType", runtime.ParamLocationQuery, params.PolicyType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetGeoLocationsRequest generates requests for GetGeoLocations
func NewGetGeoLocationsRequest(server string, params *GetGeoLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/geoLocations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GeoLocationIDFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geoLocationIDFilter", runtime.ParamLocationQuery, *params.GeoLocationIDFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.TextQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "textQuery", runtime.ParamLocationQuery, *params.TextQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetGoalConfigurationsRequest generates requests for GetGoalConfigurations
func NewGetGoalConfigurationsRequest(server string, params *GetGoalConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/goalConfigurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productLocation", runtime.ParamLocationQuery, params.ProductLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetIabContentCategoriesRequest generates requests for GetIabContentCategories
func NewGetIabContentCategoriesRequest(server string, params *GetIabContentCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/iabContentCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LineItemType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemType", runtime.ParamLocationQuery, *params.LineItemType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewListLineItemCreativeAssociationsRequest generates requests for ListLineItemCreativeAssociations
func NewListLineItemCreativeAssociationsRequest(server string, params *ListLineItemCreativeAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItemCreativeAssociations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemIdFilter", runtime.ParamLocationQuery, params.LineItemIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody calls the generic AssociateLineItemsToCreatives builder with application/vnd.dsplineitemcreativeassociations.v2+json body
func NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(server string, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateLineItemsToCreativesRequestWithBody(server, params, "application/vnd.dsplineitemcreativeassociations.v2+json", bodyReader)
}

// NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody calls the generic AssociateLineItemsToCreatives builder with application/vnd.dsplineitemcreativeassociations.v2.1+json body
func NewAssociateLineItemsToCreativesRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(server string, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateLineItemsToCreativesRequestWithBody(server, params, "application/vnd.dsplineitemcreativeassociations.v2.1+json", bodyReader)
}

// NewAssociateLineItemsToCreativesRequestWithBody generates requests for AssociateLineItemsToCreatives with any type of body
func NewAssociateLineItemsToCreativesRequestWithBody(server string, params *AssociateLineItemsToCreativesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItemCreativeAssociations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody calls the generic UpdateLineItemCreativeAssociations builder with application/vnd.dsplineitemcreativeassociations.v2+json body
func NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(server string, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemCreativeAssociationsRequestWithBody(server, params, "application/vnd.dsplineitemcreativeassociations.v2+json", bodyReader)
}

// NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody calls the generic UpdateLineItemCreativeAssociations builder with application/vnd.dsplineitemcreativeassociations.v2.1+json body
func NewUpdateLineItemCreativeAssociationsRequestWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(server string, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemCreativeAssociationsRequestWithBody(server, params, "application/vnd.dsplineitemcreativeassociations.v2.1+json", bodyReader)
}

// NewUpdateLineItemCreativeAssociationsRequestWithBody generates requests for UpdateLineItemCreativeAssociations with any type of body
func NewUpdateLineItemCreativeAssociationsRequestWithBody(server string, params *UpdateLineItemCreativeAssociationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItemCreativeAssociations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetLineItemsRequest generates requests for GetLineItems
func NewGetLineItemsRequest(server string, params *GetLineItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StatusFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusFilter", runtime.ParamLocationQuery, *params.StatusFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.OrderIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderIdFilter", runtime.ParamLocationQuery, *params.OrderIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.LineItemIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemIdFilter", runtime.ParamLocationQuery, *params.LineItemIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v2+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2+json", bodyReader)
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v2.1+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2.1+json", bodyReader)
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v2.2+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2.2+json", bodyReader)
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v3+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3+json", bodyReader)
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v3.1+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3.1+json", bodyReader)
}

// NewCreateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody calls the generic CreateLineItems builder with application/vnd.dsplineitems.v3.2+json body
func NewCreateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody(server string, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3.2+json", bodyReader)
}

// NewCreateLineItemsRequestWithBody generates requests for CreateLineItems with any type of body
func NewCreateLineItemsRequestWithBody(server string, params *CreateLineItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v2+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV2PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2+json", bodyReader)
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v2.1+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV21PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2.1+json", bodyReader)
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v2.2+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV22PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v2.2+json", bodyReader)
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v3+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV3PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3+json", bodyReader)
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v3.1+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV31PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3.1+json", bodyReader)
}

// NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody calls the generic UpdateLineItems builder with application/vnd.dsplineitems.v3.2+json body
func NewUpdateLineItemsRequestWithApplicationVndDsplineitemsV32PlusJSONBody(server string, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLineItemsRequestWithBody(server, params, "application/vnd.dsplineitems.v3.2+json", bodyReader)
}

// NewUpdateLineItemsRequestWithBody generates requests for UpdateLineItems with any type of body
func NewUpdateLineItemsRequestWithBody(server string, params *UpdateLineItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetLineItemRequest generates requests for GetLineItem
func NewGetLineItemRequest(server string, lineItemId string, params *GetLineItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "lineItemId", runtime.ParamLocationPath, lineItemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSetLineItemStatusRequest generates requests for SetLineItemStatus
func NewSetLineItemStatusRequest(server string, lineItemId string, params *SetLineItemStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "lineItemId", runtime.ParamLocationPath, lineItemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/lineItems/%s/deliveryActivationStatus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetCreativeModerationRequest generates requests for GetCreativeModeration
func NewGetCreativeModerationRequest(server string, params *GetCreativeModerationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/moderation/creatives")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creativeIdFilter", runtime.ParamLocationQuery, params.CreativeIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetOrdersRequest generates requests for GetOrders
func NewGetOrdersRequest(server string, params *GetOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.StatusFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusFilter", runtime.ParamLocationQuery, *params.StatusFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.OrderIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderIdFilter", runtime.ParamLocationQuery, *params.OrderIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserIdFilter", runtime.ParamLocationQuery, *params.AdvertiserIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewCreateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody calls the generic CreateOrders builder with application/vnd.dsporders.v2+json body
func NewCreateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody(server string, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2+json", bodyReader)
}

// NewCreateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody calls the generic CreateOrders builder with application/vnd.dsporders.v2.1+json body
func NewCreateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody(server string, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.1+json", bodyReader)
}

// NewCreateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody calls the generic CreateOrders builder with application/vnd.dsporders.v2.2+json body
func NewCreateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody(server string, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.2+json", bodyReader)
}

// NewCreateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody calls the generic CreateOrders builder with application/vnd.dsporders.v2.3+json body
func NewCreateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody(server string, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.3+json", bodyReader)
}

// NewCreateOrdersRequestWithBody generates requests for CreateOrders with any type of body
func NewCreateOrdersRequestWithBody(server string, params *CreateOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody calls the generic UpdateOrders builder with application/vnd.dsporders.v2+json body
func NewUpdateOrdersRequestWithApplicationVndDspordersV2PlusJSONBody(server string, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2+json", bodyReader)
}

// NewUpdateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody calls the generic UpdateOrders builder with application/vnd.dsporders.v2.1+json body
func NewUpdateOrdersRequestWithApplicationVndDspordersV21PlusJSONBody(server string, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.1+json", bodyReader)
}

// NewUpdateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody calls the generic UpdateOrders builder with application/vnd.dsporders.v2.2+json body
func NewUpdateOrdersRequestWithApplicationVndDspordersV22PlusJSONBody(server string, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.2+json", bodyReader)
}

// NewUpdateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody calls the generic UpdateOrders builder with application/vnd.dsporders.v2.3+json body
func NewUpdateOrdersRequestWithApplicationVndDspordersV23PlusJSONBody(server string, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrdersRequestWithBody(server, params, "application/vnd.dsporders.v2.3+json", bodyReader)
}

// NewUpdateOrdersRequestWithBody generates requests for UpdateOrders with any type of body
func NewUpdateOrdersRequestWithBody(server string, params *UpdateOrdersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, orderId string, params *GetOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetConversionTrackingsRequest generates requests for GetConversionTrackings
func NewGetConversionTrackingsRequest(server string, orderId string, params *GetConversionTrackingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateConversionTrackingRequestWithApplicationVndDspordersV2PlusJSONBody calls the generic UpdateConversionTracking builder with application/vnd.dsporders.v2+json body
func NewUpdateConversionTrackingRequestWithApplicationVndDspordersV2PlusJSONBody(server string, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConversionTrackingRequestWithBody(server, orderId, params, "application/vnd.dsporders.v2+json", bodyReader)
}

// NewUpdateConversionTrackingRequestWithApplicationVndDspordersV21PlusJSONBody calls the generic UpdateConversionTracking builder with application/vnd.dsporders.v2.1+json body
func NewUpdateConversionTrackingRequestWithApplicationVndDspordersV21PlusJSONBody(server string, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConversionTrackingRequestWithBody(server, orderId, params, "application/vnd.dsporders.v2.1+json", bodyReader)
}

// NewUpdateConversionTrackingRequestWithBody generates requests for UpdateConversionTracking with any type of body
func NewUpdateConversionTrackingRequestWithBody(server string, orderId string, params *UpdateConversionTrackingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetPixelsByOrderIdRequest generates requests for GetPixelsByOrderId
func NewGetPixelsByOrderIdRequest(server string, orderId string, params *GetPixelsByOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking/pixels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdatePixelsByOrderIdRequestWithApplicationVndDsppixeltrackingV1PlusJSONBody calls the generic UpdatePixelsByOrderId builder with application/vnd.dsppixeltracking.v1+json body
func NewUpdatePixelsByOrderIdRequestWithApplicationVndDsppixeltrackingV1PlusJSONBody(server string, orderId string, params *UpdatePixelsByOrderIdParams, body UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePixelsByOrderIdRequestWithBody(server, orderId, params, "application/vnd.dsppixeltracking.v1+json", bodyReader)
}

// NewUpdatePixelsByOrderIdRequestWithBody generates requests for UpdatePixelsByOrderId with any type of body
func NewUpdatePixelsByOrderIdRequestWithBody(server string, orderId string, params *UpdatePixelsByOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking/pixels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetProductsByOrderIdRequest generates requests for GetProductsByOrderId
func NewGetProductsByOrderIdRequest(server string, orderId string, params *GetProductsByOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithApplicationVndDspproducttrackingV1PlusJSONBody calls the generic PutDspOrdersOrderIdConversionTrackingProducts builder with application/vnd.dspproducttracking.v1+json body
func NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithApplicationVndDspproducttrackingV1PlusJSONBody(server string, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, body PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithBody(server, orderId, params, "application/vnd.dspproducttracking.v1+json", bodyReader)
}

// NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithBody generates requests for PutDspOrdersOrderIdConversionTrackingProducts with any type of body
func NewPutDspOrdersOrderIdConversionTrackingProductsRequestWithBody(server string, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewExportProductsByOrderIdRequest generates requests for ExportProductsByOrderId
func NewExportProductsByOrderIdRequest(server string, orderId string, params *ExportProductsByOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/conversionTracking/products/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewSetOrderStatusRequest generates requests for SetOrderStatus
func NewSetOrderStatusRequest(server string, orderId string, params *SetOrderStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/orders/%s/deliveryActivationStatus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetPixelsRequest generates requests for GetPixels
func NewGetPixelsRequest(server string, params *GetPixelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/pixels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "advertiserIdFilter", runtime.ParamLocationQuery, params.AdvertiserIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.PixelIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pixelIdFilter", runtime.ParamLocationQuery, *params.PixelIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDvCustomContextualSegmentsRequest generates requests for GetDvCustomContextualSegments
func NewGetDvCustomContextualSegmentsRequest(server string, params *GetDvCustomContextualSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/preBidTargeting/doubleVerify/customContextualSegments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "advertiserId", runtime.ParamLocationQuery, params.AdvertiserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetOdcCustomPredictsRequest generates requests for GetOdcCustomPredicts
func NewGetOdcCustomPredictsRequest(server string, params *GetOdcCustomPredictsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/preBidTargeting/oracleDataCloud/customPredicts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetOdcStandardPredictsRequest generates requests for GetOdcStandardPredicts
func NewGetOdcStandardPredictsRequest(server string, params *GetOdcStandardPredictsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/preBidTargeting/oracleDataCloud/standardPredicts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetProductCategoriesRequest generates requests for GetProductCategories
func NewGetProductCategoriesRequest(server string, params *GetProductCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/productCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetSupplySourcesRequest generates requests for GetSupplySources
func NewGetSupplySourcesRequest(server string, params *GetSupplySourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/supplySources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemType", runtime.ParamLocationQuery, params.LineItemType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supplySourceType", runtime.ParamLocationQuery, params.SupplySourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		if params.OrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderId", runtime.ParamLocationQuery, *params.OrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.AdvertiserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "advertiserId", runtime.ParamLocationQuery, *params.AdvertiserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.DeviceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "deviceTypes", runtime.ParamLocationQuery, *params.DeviceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					values := make([]string, 0)
					for _, v2 := range v {
						values = append(values, v2)
					}
					queryValues.Add(k, strings.Join(values, ","))
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewGetDomainTargetingRequest generates requests for GetDomainTargeting
func NewGetDomainTargetingRequest(server string, params *GetDomainTargetingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/targeting/domain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lineItemIdFilter", runtime.ParamLocationQuery, params.LineItemIdFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				values := make([]string, 0)
				for _, v2 := range v {
					values = append(values, v2)
				}
				queryValues.Add(k, strings.Join(values, ","))
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

// NewUpdateDomainTargetingRequestWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody calls the generic UpdateDomainTargeting builder with application/vnd.dspupdatedomaintargeting.v1+json body
func NewUpdateDomainTargetingRequestWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody(server string, params *UpdateDomainTargetingParams, body UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainTargetingRequestWithBody(server, params, "application/vnd.dspupdatedomaintargeting.v1+json", bodyReader)
}

// NewUpdateDomainTargetingRequestWithBody generates requests for UpdateDomainTargeting with any type of body
func NewUpdateDomainTargetingRequestWithBody(server string, params *UpdateDomainTargetingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dsp/targeting/domain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-Scope", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIScope)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-Scope", headerParam1)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAppsWithResponse request
	GetAppsWithResponse(ctx context.Context, params *GetAppsParams) (*GetAppsResp, error)

	// GetCreativesWithResponse request
	GetCreativesWithResponse(ctx context.Context, params *GetCreativesParams) (*GetCreativesResp, error)

	// GetImageCreativesWithResponse request
	GetImageCreativesWithResponse(ctx context.Context, params *GetImageCreativesParams) (*GetImageCreativesResp, error)

	// CreateImageCreativeWithBodyWithResponse request with any body
	CreateImageCreativeWithBodyWithResponse(ctx context.Context, params *CreateImageCreativeParams, contentType string, body io.Reader) (*CreateImageCreativeResp, error)

	CreateImageCreativeWithApplicationVndDspcreateimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateImageCreativeParams, body CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody) (*CreateImageCreativeResp, error)

	// UpdateImageCreativeWithBodyWithResponse request with any body
	UpdateImageCreativeWithBodyWithResponse(ctx context.Context, params *UpdateImageCreativeParams, contentType string, body io.Reader) (*UpdateImageCreativeResp, error)

	UpdateImageCreativeWithApplicationVndDspupdateimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateImageCreativeParams, body UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody) (*UpdateImageCreativeResp, error)

	// PreviewImageCreativeWithBodyWithResponse request with any body
	PreviewImageCreativeWithBodyWithResponse(ctx context.Context, params *PreviewImageCreativeParams, contentType string, body io.Reader) (*PreviewImageCreativeResp, error)

	PreviewImageCreativeWithApplicationVndDsppreviewimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewImageCreativeParams, body PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody) (*PreviewImageCreativeResp, error)

	// GetRecCreativesWithResponse request
	GetRecCreativesWithResponse(ctx context.Context, params *GetRecCreativesParams) (*GetRecCreativesResp, error)

	// CreateRecCreativesWithBodyWithResponse request with any body
	CreateRecCreativesWithBodyWithResponse(ctx context.Context, params *CreateRecCreativesParams, contentType string, body io.Reader) (*CreateRecCreativesResp, error)

	CreateRecCreativesWithApplicationVndDspcreatereccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateRecCreativesParams, body CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody) (*CreateRecCreativesResp, error)

	// UpdateRecCreativesWithBodyWithResponse request with any body
	UpdateRecCreativesWithBodyWithResponse(ctx context.Context, params *UpdateRecCreativesParams, contentType string, body io.Reader) (*UpdateRecCreativesResp, error)

	UpdateRecCreativesWithApplicationVndDspupdatereccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateRecCreativesParams, body UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody) (*UpdateRecCreativesResp, error)

	// PreviewRecCreativeWithBodyWithResponse request with any body
	PreviewRecCreativeWithBodyWithResponse(ctx context.Context, params *PreviewRecCreativeParams, contentType string, body io.Reader) (*PreviewRecCreativeResp, error)

	PreviewRecCreativeWithApplicationVndDsppreviewreccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewRecCreativeParams, body PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody) (*PreviewRecCreativeResp, error)

	// GetThirdPartyCreativesWithResponse request
	GetThirdPartyCreativesWithResponse(ctx context.Context, params *GetThirdPartyCreativesParams) (*GetThirdPartyCreativesResp, error)

	// CreateThirdPartyCreativeWithBodyWithResponse request with any body
	CreateThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *CreateThirdPartyCreativeParams, contentType string, body io.Reader) (*CreateThirdPartyCreativeResp, error)

	CreateThirdPartyCreativeWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateThirdPartyCreativeParams, body CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody) (*CreateThirdPartyCreativeResp, error)

	// UpdateThirdPartyCreativeWithBodyWithResponse request with any body
	UpdateThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *UpdateThirdPartyCreativeParams, contentType string, body io.Reader) (*UpdateThirdPartyCreativeResp, error)

	UpdateThirdPartyCreativeWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateThirdPartyCreativeParams, body UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody) (*UpdateThirdPartyCreativeResp, error)

	// PreviewThirdPartyCreativeWithBodyWithResponse request with any body
	PreviewThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *PreviewThirdPartyCreativeParams, contentType string, body io.Reader) (*PreviewThirdPartyCreativeResp, error)

	PreviewThirdPartyCreativeWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewThirdPartyCreativeParams, body PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody) (*PreviewThirdPartyCreativeResp, error)

	// GetVideoCreativesWithResponse request
	GetVideoCreativesWithResponse(ctx context.Context, params *GetVideoCreativesParams) (*GetVideoCreativesResp, error)

	// CreateVideoCreativesWithBodyWithResponse request with any body
	CreateVideoCreativesWithBodyWithResponse(ctx context.Context, params *CreateVideoCreativesParams, contentType string, body io.Reader) (*CreateVideoCreativesResp, error)

	CreateVideoCreativesWithApplicationVndDspcreatevideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateVideoCreativesParams, body CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody) (*CreateVideoCreativesResp, error)

	// UpdateVideoCreativesWithBodyWithResponse request with any body
	UpdateVideoCreativesWithBodyWithResponse(ctx context.Context, params *UpdateVideoCreativesParams, contentType string, body io.Reader) (*UpdateVideoCreativesResp, error)

	UpdateVideoCreativesWithApplicationVndDspupdatevideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateVideoCreativesParams, body UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody) (*UpdateVideoCreativesResp, error)

	// PreviewVideoCreativeWithBodyWithResponse request with any body
	PreviewVideoCreativeWithBodyWithResponse(ctx context.Context, params *PreviewVideoCreativeParams, contentType string, body io.Reader) (*PreviewVideoCreativeResp, error)

	PreviewVideoCreativeWithApplicationVndDsppreviewvideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewVideoCreativeParams, body PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody) (*PreviewVideoCreativeResp, error)

	// GetDomainsWithResponse request
	GetDomainsWithResponse(ctx context.Context, params *GetDomainsParams) (*GetDomainsResp, error)

	// CreateFileUploadsPolicyWithResponse request
	CreateFileUploadsPolicyWithResponse(ctx context.Context, params *CreateFileUploadsPolicyParams) (*CreateFileUploadsPolicyResp, error)

	// GetGeoLocationsWithResponse request
	GetGeoLocationsWithResponse(ctx context.Context, params *GetGeoLocationsParams) (*GetGeoLocationsResp, error)

	// GetGoalConfigurationsWithResponse request
	GetGoalConfigurationsWithResponse(ctx context.Context, params *GetGoalConfigurationsParams) (*GetGoalConfigurationsResp, error)

	// GetIabContentCategoriesWithResponse request
	GetIabContentCategoriesWithResponse(ctx context.Context, params *GetIabContentCategoriesParams) (*GetIabContentCategoriesResp, error)

	// ListLineItemCreativeAssociationsWithResponse request
	ListLineItemCreativeAssociationsWithResponse(ctx context.Context, params *ListLineItemCreativeAssociationsParams) (*ListLineItemCreativeAssociationsResp, error)

	// AssociateLineItemsToCreativesWithBodyWithResponse request with any body
	AssociateLineItemsToCreativesWithBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, contentType string, body io.Reader) (*AssociateLineItemsToCreativesResp, error)

	AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*AssociateLineItemsToCreativesResp, error)

	AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*AssociateLineItemsToCreativesResp, error)

	// UpdateLineItemCreativeAssociationsWithBodyWithResponse request with any body
	UpdateLineItemCreativeAssociationsWithBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, contentType string, body io.Reader) (*UpdateLineItemCreativeAssociationsResp, error)

	UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*UpdateLineItemCreativeAssociationsResp, error)

	UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*UpdateLineItemCreativeAssociationsResp, error)

	// GetLineItemsWithResponse request
	GetLineItemsWithResponse(ctx context.Context, params *GetLineItemsParams) (*GetLineItemsResp, error)

	// CreateLineItemsWithBodyWithResponse request with any body
	CreateLineItemsWithBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, contentType string, body io.Reader) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*CreateLineItemsResp, error)

	CreateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*CreateLineItemsResp, error)

	// UpdateLineItemsWithBodyWithResponse request with any body
	UpdateLineItemsWithBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, contentType string, body io.Reader) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	UpdateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*UpdateLineItemsResp, error)

	// GetLineItemWithResponse request
	GetLineItemWithResponse(ctx context.Context, lineItemId string, params *GetLineItemParams) (*GetLineItemResp, error)

	// SetLineItemStatusWithResponse request
	SetLineItemStatusWithResponse(ctx context.Context, lineItemId string, params *SetLineItemStatusParams) (*SetLineItemStatusResp, error)

	// GetCreativeModerationWithResponse request
	GetCreativeModerationWithResponse(ctx context.Context, params *GetCreativeModerationParams) (*GetCreativeModerationResp, error)

	// GetOrdersWithResponse request
	GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams) (*GetOrdersResp, error)

	// CreateOrdersWithBodyWithResponse request with any body
	CreateOrdersWithBodyWithResponse(ctx context.Context, params *CreateOrdersParams, contentType string, body io.Reader) (*CreateOrdersResp, error)

	CreateOrdersWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*CreateOrdersResp, error)

	CreateOrdersWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*CreateOrdersResp, error)

	CreateOrdersWithApplicationVndDspordersV22PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*CreateOrdersResp, error)

	CreateOrdersWithApplicationVndDspordersV23PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*CreateOrdersResp, error)

	// UpdateOrdersWithBodyWithResponse request with any body
	UpdateOrdersWithBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, contentType string, body io.Reader) (*UpdateOrdersResp, error)

	UpdateOrdersWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*UpdateOrdersResp, error)

	UpdateOrdersWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*UpdateOrdersResp, error)

	UpdateOrdersWithApplicationVndDspordersV22PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*UpdateOrdersResp, error)

	UpdateOrdersWithApplicationVndDspordersV23PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*UpdateOrdersResp, error)

	// GetOrderWithResponse request
	GetOrderWithResponse(ctx context.Context, orderId string, params *GetOrderParams) (*GetOrderResp, error)

	// GetConversionTrackingsWithResponse request
	GetConversionTrackingsWithResponse(ctx context.Context, orderId string, params *GetConversionTrackingsParams) (*GetConversionTrackingsResp, error)

	// UpdateConversionTrackingWithBodyWithResponse request with any body
	UpdateConversionTrackingWithBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, contentType string, body io.Reader) (*UpdateConversionTrackingResp, error)

	UpdateConversionTrackingWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody) (*UpdateConversionTrackingResp, error)

	UpdateConversionTrackingWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody) (*UpdateConversionTrackingResp, error)

	// GetPixelsByOrderIdWithResponse request
	GetPixelsByOrderIdWithResponse(ctx context.Context, orderId string, params *GetPixelsByOrderIdParams) (*GetPixelsByOrderIdResp, error)

	// UpdatePixelsByOrderIdWithBodyWithResponse request with any body
	UpdatePixelsByOrderIdWithBodyWithResponse(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, contentType string, body io.Reader) (*UpdatePixelsByOrderIdResp, error)

	UpdatePixelsByOrderIdWithApplicationVndDsppixeltrackingV1PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, body UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody) (*UpdatePixelsByOrderIdResp, error)

	// GetProductsByOrderIdWithResponse request
	GetProductsByOrderIdWithResponse(ctx context.Context, orderId string, params *GetProductsByOrderIdParams) (*GetProductsByOrderIdResp, error)

	// PutDspOrdersOrderIdConversionTrackingProductsWithBodyWithResponse request with any body
	PutDspOrdersOrderIdConversionTrackingProductsWithBodyWithResponse(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, contentType string, body io.Reader) (*PutDspOrdersOrderIdConversionTrackingProductsResp, error)

	PutDspOrdersOrderIdConversionTrackingProductsWithApplicationVndDspproducttrackingV1PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, body PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody) (*PutDspOrdersOrderIdConversionTrackingProductsResp, error)

	// ExportProductsByOrderIdWithResponse request
	ExportProductsByOrderIdWithResponse(ctx context.Context, orderId string, params *ExportProductsByOrderIdParams) (*ExportProductsByOrderIdResp, error)

	// SetOrderStatusWithResponse request
	SetOrderStatusWithResponse(ctx context.Context, orderId string, params *SetOrderStatusParams) (*SetOrderStatusResp, error)

	// GetPixelsWithResponse request
	GetPixelsWithResponse(ctx context.Context, params *GetPixelsParams) (*GetPixelsResp, error)

	// GetDvCustomContextualSegmentsWithResponse request
	GetDvCustomContextualSegmentsWithResponse(ctx context.Context, params *GetDvCustomContextualSegmentsParams) (*GetDvCustomContextualSegmentsResp, error)

	// GetOdcCustomPredictsWithResponse request
	GetOdcCustomPredictsWithResponse(ctx context.Context, params *GetOdcCustomPredictsParams) (*GetOdcCustomPredictsResp, error)

	// GetOdcStandardPredictsWithResponse request
	GetOdcStandardPredictsWithResponse(ctx context.Context, params *GetOdcStandardPredictsParams) (*GetOdcStandardPredictsResp, error)

	// GetProductCategoriesWithResponse request
	GetProductCategoriesWithResponse(ctx context.Context, params *GetProductCategoriesParams) (*GetProductCategoriesResp, error)

	// GetSupplySourcesWithResponse request
	GetSupplySourcesWithResponse(ctx context.Context, params *GetSupplySourcesParams) (*GetSupplySourcesResp, error)

	// GetDomainTargetingWithResponse request
	GetDomainTargetingWithResponse(ctx context.Context, params *GetDomainTargetingParams) (*GetDomainTargetingResp, error)

	// UpdateDomainTargetingWithBodyWithResponse request with any body
	UpdateDomainTargetingWithBodyWithResponse(ctx context.Context, params *UpdateDomainTargetingParams, contentType string, body io.Reader) (*UpdateDomainTargetingResp, error)

	UpdateDomainTargetingWithApplicationVndDspupdatedomaintargetingV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDomainTargetingParams, body UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody) (*UpdateDomainTargetingResp, error)
}

type GetAppsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspgetappsV1JSON200 *Apps
	ApplicationvndDspgetappsV1JSON400 *Error
	ApplicationvndDspgetappsV1JSON401 *Error
	ApplicationvndDspgetappsV1JSON403 *Error
	ApplicationvndDspgetappsV1JSON415 *Error
	ApplicationvndDspgetappsV1JSON429 *Error
	ApplicationvndDspgetappsV1JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetAppsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreativesResp struct {
	Body                                 []byte
	HTTPResponse                         *http.Response
	ApplicationvndDspcreativesV2JSON200  *Creatives
	ApplicationvndDspcreativesV21JSON200 *Creatives
	ApplicationvndDspcreativesV2JSON400  *Error
	ApplicationvndDspcreativesV21JSON400 *Error
	ApplicationvndDspcreativesV2JSON401  *Error
	ApplicationvndDspcreativesV21JSON401 *Error
	ApplicationvndDspcreativesV2JSON403  *Error
	ApplicationvndDspcreativesV21JSON403 *Error
	ApplicationvndDspcreativesV2JSON404  *Error
	ApplicationvndDspcreativesV21JSON404 *Error
	ApplicationvndDspcreativesV2JSON415  *Error
	ApplicationvndDspcreativesV21JSON415 *Error
	ApplicationvndDspcreativesV2JSON429  *Error
	ApplicationvndDspcreativesV21JSON429 *Error
	ApplicationvndDspcreativesV2JSON500  *Error
	ApplicationvndDspcreativesV21JSON500 *Error
	ApplicationvndDspcreativesV2JSON502  *Error
	ApplicationvndDspcreativesV21JSON502 *Error
	ApplicationvndDspcreativesV2JSON503  *Error
	ApplicationvndDspcreativesV21JSON503 *Error
	ApplicationvndDspcreativesV2JSON504  *Error
	ApplicationvndDspcreativesV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r GetCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageCreativesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndDspimagecreativesV1JSON200 *DspReadImageCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400         *BadRequest
	ApplicationvndDsperrorsV1JSON401         *Unauthorized
	ApplicationvndDsperrorsV1JSON403         *Forbidden
	ApplicationvndDsperrorsV1JSON404         *NotFound
	JSON415                                  *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429         *TooManyRequests
	ApplicationvndDsperrorsV1JSON500         *InternalServerError
	ApplicationvndDsperrorsV1JSON502         *BadGateway
	ApplicationvndDsperrorsV1JSON503         *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504         *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetImageCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageCreativeResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndDspimagecreativesresponseV1JSON207 *DspImageCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                 *BadRequest
	ApplicationvndDsperrorsV1JSON401                 *Unauthorized
	ApplicationvndDsperrorsV1JSON403                 *Forbidden
	ApplicationvndDsperrorsV1JSON404                 *NotFound
	JSON415                                          *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                 *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                 *InternalServerError
	ApplicationvndDsperrorsV1JSON502                 *BadGateway
	ApplicationvndDsperrorsV1JSON503                 *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                 *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r CreateImageCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateImageCreativeResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndDspimagecreativesresponseV1JSON207 *DspImageCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                 *BadRequest
	ApplicationvndDsperrorsV1JSON401                 *Unauthorized
	ApplicationvndDsperrorsV1JSON403                 *Forbidden
	ApplicationvndDsperrorsV1JSON404                 *NotFound
	JSON415                                          *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                 *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                 *InternalServerError
	ApplicationvndDsperrorsV1JSON502                 *BadGateway
	ApplicationvndDsperrorsV1JSON503                 *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                 *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r UpdateImageCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateImageCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewImageCreativeResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndDsppreviewcreativesresponseV1JSON200 *DspCreativePreviewResponseV1
	ApplicationvndDsperrorsV1JSON400                   *BadRequest
	ApplicationvndDsperrorsV1JSON401                   *Unauthorized
	ApplicationvndDsperrorsV1JSON403                   *Forbidden
	ApplicationvndDsperrorsV1JSON404                   *NotFound
	JSON415                                            *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                   *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                   *InternalServerError
	ApplicationvndDsperrorsV1JSON502                   *BadGateway
	ApplicationvndDsperrorsV1JSON503                   *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                   *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r PreviewImageCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewImageCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecCreativesResp struct {
	Body                                   []byte
	HTTPResponse                           *http.Response
	ApplicationvndDspreccreativesV1JSON200 *DspReadRecCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400       *BadRequest
	ApplicationvndDsperrorsV1JSON401       *Unauthorized
	ApplicationvndDsperrorsV1JSON403       *Forbidden
	ApplicationvndDsperrorsV1JSON404       *NotFound
	JSON415                                *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429       *TooManyRequests
	ApplicationvndDsperrorsV1JSON500       *InternalServerError
	ApplicationvndDsperrorsV1JSON502       *BadGateway
	ApplicationvndDsperrorsV1JSON503       *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504       *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetRecCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecCreativesResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndDspreccreativesresponseV1JSON207 *DspRecCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400               *BadRequest
	ApplicationvndDsperrorsV1JSON401               *Unauthorized
	ApplicationvndDsperrorsV1JSON403               *Forbidden
	ApplicationvndDsperrorsV1JSON404               *NotFound
	JSON415                                        *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429               *TooManyRequests
	ApplicationvndDsperrorsV1JSON500               *InternalServerError
	ApplicationvndDsperrorsV1JSON502               *BadGateway
	ApplicationvndDsperrorsV1JSON503               *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504               *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r CreateRecCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecCreativesResp struct {
	Body                                           []byte
	HTTPResponse                                   *http.Response
	ApplicationvndDspreccreativesresponseV1JSON207 *DspRecCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400               *BadRequest
	ApplicationvndDsperrorsV1JSON401               *Unauthorized
	ApplicationvndDsperrorsV1JSON403               *Forbidden
	ApplicationvndDsperrorsV1JSON404               *NotFound
	JSON415                                        *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429               *TooManyRequests
	ApplicationvndDsperrorsV1JSON500               *InternalServerError
	ApplicationvndDsperrorsV1JSON502               *BadGateway
	ApplicationvndDsperrorsV1JSON503               *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504               *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r UpdateRecCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewRecCreativeResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndDsppreviewcreativesresponseV1JSON200 *DspCreativePreviewResponseV1
	ApplicationvndDsperrorsV1JSON400                   *BadRequest
	ApplicationvndDsperrorsV1JSON401                   *Unauthorized
	ApplicationvndDsperrorsV1JSON403                   *Forbidden
	ApplicationvndDsperrorsV1JSON404                   *NotFound
	JSON415                                            *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                   *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                   *InternalServerError
	ApplicationvndDsperrorsV1JSON502                   *BadGateway
	ApplicationvndDsperrorsV1JSON503                   *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                   *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r PreviewRecCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewRecCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThirdPartyCreativesResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndDspthirdpartycreativesV1JSON200 *DspReadThirdPartyCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400              *BadRequest
	ApplicationvndDsperrorsV1JSON401              *Unauthorized
	ApplicationvndDsperrorsV1JSON403              *Forbidden
	ApplicationvndDsperrorsV1JSON404              *NotFound
	JSON415                                       *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429              *TooManyRequests
	ApplicationvndDsperrorsV1JSON500              *InternalServerError
	ApplicationvndDsperrorsV1JSON502              *BadGateway
	ApplicationvndDsperrorsV1JSON503              *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504              *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetThirdPartyCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThirdPartyCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThirdPartyCreativeResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndDspthirdpartycreativesresponseV1JSON207 *DspThirdPartyCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                      *BadRequest
	ApplicationvndDsperrorsV1JSON401                      *Unauthorized
	ApplicationvndDsperrorsV1JSON403                      *Forbidden
	ApplicationvndDsperrorsV1JSON404                      *NotFound
	JSON415                                               *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                      *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                      *InternalServerError
	ApplicationvndDsperrorsV1JSON502                      *BadGateway
	ApplicationvndDsperrorsV1JSON503                      *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                      *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r CreateThirdPartyCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThirdPartyCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateThirdPartyCreativeResp struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	ApplicationvndDspthirdpartycreativesresponseV1JSON207 *DspThirdPartyCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                      *BadRequest
	ApplicationvndDsperrorsV1JSON401                      *Unauthorized
	ApplicationvndDsperrorsV1JSON403                      *Forbidden
	ApplicationvndDsperrorsV1JSON404                      *NotFound
	JSON415                                               *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                      *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                      *InternalServerError
	ApplicationvndDsperrorsV1JSON502                      *BadGateway
	ApplicationvndDsperrorsV1JSON503                      *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                      *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r UpdateThirdPartyCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateThirdPartyCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewThirdPartyCreativeResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndDsppreviewcreativesresponseV1JSON200 *DspCreativePreviewResponseV1
	ApplicationvndDsperrorsV1JSON400                   *BadRequest
	ApplicationvndDsperrorsV1JSON401                   *Unauthorized
	ApplicationvndDsperrorsV1JSON403                   *Forbidden
	ApplicationvndDsperrorsV1JSON404                   *NotFound
	JSON415                                            *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                   *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                   *InternalServerError
	ApplicationvndDsperrorsV1JSON502                   *BadGateway
	ApplicationvndDsperrorsV1JSON503                   *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                   *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r PreviewThirdPartyCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewThirdPartyCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoCreativesResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndDspvideocreativesV1JSON200 *DspReadVideoCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400         *BadRequest
	ApplicationvndDsperrorsV1JSON401         *Unauthorized
	ApplicationvndDsperrorsV1JSON403         *Forbidden
	ApplicationvndDsperrorsV1JSON404         *NotFound
	JSON415                                  *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429         *TooManyRequests
	ApplicationvndDsperrorsV1JSON500         *InternalServerError
	ApplicationvndDsperrorsV1JSON502         *BadGateway
	ApplicationvndDsperrorsV1JSON503         *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504         *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetVideoCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVideoCreativesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndDspvideocreativesresponseV1JSON207 *DspVideoCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                 *BadRequest
	ApplicationvndDsperrorsV1JSON401                 *Unauthorized
	ApplicationvndDsperrorsV1JSON403                 *Forbidden
	ApplicationvndDsperrorsV1JSON404                 *NotFound
	JSON415                                          *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                 *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                 *InternalServerError
	ApplicationvndDsperrorsV1JSON502                 *BadGateway
	ApplicationvndDsperrorsV1JSON503                 *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                 *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r CreateVideoCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVideoCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVideoCreativesResp struct {
	Body                                             []byte
	HTTPResponse                                     *http.Response
	ApplicationvndDspvideocreativesresponseV1JSON207 *DspVideoCreativesResponseV1
	ApplicationvndDsperrorsV1JSON400                 *BadRequest
	ApplicationvndDsperrorsV1JSON401                 *Unauthorized
	ApplicationvndDsperrorsV1JSON403                 *Forbidden
	ApplicationvndDsperrorsV1JSON404                 *NotFound
	JSON415                                          *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                 *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                 *InternalServerError
	ApplicationvndDsperrorsV1JSON502                 *BadGateway
	ApplicationvndDsperrorsV1JSON503                 *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                 *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r UpdateVideoCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVideoCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewVideoCreativeResp struct {
	Body                                               []byte
	HTTPResponse                                       *http.Response
	ApplicationvndDsppreviewcreativesresponseV1JSON200 *DspCreativePreviewResponseV1
	ApplicationvndDsperrorsV1JSON400                   *BadRequest
	ApplicationvndDsperrorsV1JSON401                   *Unauthorized
	ApplicationvndDsperrorsV1JSON403                   *Forbidden
	ApplicationvndDsperrorsV1JSON404                   *NotFound
	JSON415                                            *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                   *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                   *InternalServerError
	ApplicationvndDsperrorsV1JSON502                   *BadGateway
	ApplicationvndDsperrorsV1JSON503                   *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                   *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r PreviewVideoCreativeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewVideoCreativeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// DomainLists Array of domain lists sorted by creation time, ascending
		DomainLists *interface{} `json:"domainLists,omitempty"`
		NextToken   *string      `json:"nextToken,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON429 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetDomainsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFileUploadsPolicyResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndDspfileuploadpoliciesV1JSON200 *FileUploadPolicy
	ApplicationvndDsperrorsV1JSON400             *Error
	ApplicationvndDsperrorsV1JSON401             *Error
	ApplicationvndDsperrorsV1JSON415             *Error
	ApplicationvndDsperrorsV1JSON429             *Error
	ApplicationvndDsperrorsV1JSON500             *Error
	ApplicationvndDsperrorsV1JSON502             *Error
	ApplicationvndDsperrorsV1JSON503             *Error
	ApplicationvndDsperrorsV1JSON504             *Error
}

// Status returns HTTPResponse.Status
func (r CreateFileUploadsPolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFileUploadsPolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeoLocationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// GeoLocations Array of results matching the given IDs or text query
		GeoLocations *[]GeoLocation `json:"geoLocations,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON429 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetGeoLocationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeoLocationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGoalConfigurationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
		GoalConfigurations *[]GoalConfiguration `json:"goalConfigurations,omitempty"`
	}
	ApplicationvndGoalconfigurationsV1JSON200 *struct {
		// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
		GoalConfigurations *[]GoalConfigurationV1 `json:"goalConfigurations,omitempty"`
	}
	ApplicationvndGoalconfigurationsV11JSON200 *struct {
		// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
		GoalConfigurations *[]GoalConfigurationV11 `json:"goalConfigurations,omitempty"`
	}
	JSON400                                   *Error
	ApplicationvndGoalconfigurationsV1JSON400 *Error
	JSON401                                   *Error
	ApplicationvndGoalconfigurationsV1JSON401 *Error
	JSON403                                   *Error
	ApplicationvndGoalconfigurationsV1JSON403 *Error
	JSON429                                   *Error
	ApplicationvndGoalconfigurationsV1JSON429 *Error
	JSON500                                   *Error
	ApplicationvndGoalconfigurationsV1JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetGoalConfigurationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGoalConfigurationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIabContentCategoriesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// IabContentCategories Array of IABContentCategory sorted by ID in ascending lexicographical order.
		IabContentCategories *[]IABContentCategory `json:"iabContentCategories,omitempty"`
		NextToken            *string               `json:"nextToken,omitempty"`
	}
	ApplicationvndDspiabcontentcategoriesV1JSON200 *struct {
		// IabContentCategories Array of IABContentCategory sorted by ID in ascending lexicographical order.
		IabContentCategories *[]IABContentCategory `json:"iabContentCategories,omitempty"`
		NextToken            *string               `json:"nextToken,omitempty"`
	}
	JSON400                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON400 *Error
	JSON401                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON401 *Error
	JSON403                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON403 *Error
	JSON415                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON415 *Error
	JSON429                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON429 *Error
	JSON500                                        *Error
	ApplicationvndDspiabcontentcategoriesV1JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIabContentCategoriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIabContentCategoriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLineItemCreativeAssociationsResp struct {
	Body                                                    []byte
	HTTPResponse                                            *http.Response
	ApplicationvndDsplineitemcreativeassociationsV2JSON200  *LineItemCreativeAssociations
	ApplicationvndDsplineitemcreativeassociationsV21JSON200 *LineItemCreativeAssociations
	ApplicationvndDsplineitemcreativeassociationsV2JSON400  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON400 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON401  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON401 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON403  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON403 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON404  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON404 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON415  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON415 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON429  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON429 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON500  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON500 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON502  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON502 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON503  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON503 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON504  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r ListLineItemCreativeAssociationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLineItemCreativeAssociationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateLineItemsToCreativesResp struct {
	Body                                                    []byte
	HTTPResponse                                            *http.Response
	ApplicationvndDsplineitemcreativeassociationsV2JSON207  *LineItemCreativeAssociationsResponse
	ApplicationvndDsplineitemcreativeassociationsV21JSON207 *LineItemCreativeAssociationsResponse
	ApplicationvndDsplineitemcreativeassociationsV2JSON400  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON400 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON401  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON401 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON403  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON403 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON404  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON404 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON415  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON415 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON429  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON429 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON500  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON500 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON502  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON502 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON503  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON503 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON504  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r AssociateLineItemsToCreativesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateLineItemsToCreativesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLineItemCreativeAssociationsResp struct {
	Body                                                    []byte
	HTTPResponse                                            *http.Response
	ApplicationvndDsplineitemcreativeassociationsV2JSON207  *[]LineItemCreativeAssociationsResponse
	ApplicationvndDsplineitemcreativeassociationsV21JSON207 *[]LineItemCreativeAssociationsResponse
	ApplicationvndDsplineitemcreativeassociationsV2JSON400  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON400 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON401  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON401 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON403  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON403 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON404  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON404 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON415  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON415 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON429  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON429 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON500  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON500 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON502  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON502 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON503  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON503 *Error
	ApplicationvndDsplineitemcreativeassociationsV2JSON504  *Error
	ApplicationvndDsplineitemcreativeassociationsV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateLineItemCreativeAssociationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLineItemCreativeAssociationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLineItemsResp struct {
	Body                                     []byte
	HTTPResponse                             *http.Response
	ApplicationvndDspbasiclineitemsV3JSON200 *LineItemsV22
	ApplicationvndDsplineitemsV2JSON200      *LineItems
	ApplicationvndDsplineitemsV21JSON200     *LineItemsV21
	ApplicationvndDsplineitemsV22JSON200     *LineItemsV22
	ApplicationvndDsperrorsV3JSON400         *Error
	ApplicationvndDsplineitemsV2JSON400      *Error
	ApplicationvndDsplineitemsV21JSON400     *Error
	ApplicationvndDsplineitemsV22JSON400     *Error
	ApplicationvndDsperrorsV3JSON401         *Error
	ApplicationvndDsplineitemsV2JSON401      *Error
	ApplicationvndDsplineitemsV21JSON401     *Error
	ApplicationvndDsplineitemsV22JSON401     *Error
	ApplicationvndDsperrorsV3JSON403         *Error
	ApplicationvndDsplineitemsV2JSON403      *Error
	ApplicationvndDsplineitemsV21JSON403     *Error
	ApplicationvndDsplineitemsV22JSON403     *Error
	ApplicationvndDsperrorsV3JSON404         *Error
	ApplicationvndDsplineitemsV2JSON404      *Error
	ApplicationvndDsplineitemsV21JSON404     *Error
	ApplicationvndDsplineitemsV22JSON404     *Error
	ApplicationvndDsperrorsV3JSON415         *Error
	ApplicationvndDsplineitemsV2JSON415      *Error
	ApplicationvndDsplineitemsV21JSON415     *Error
	ApplicationvndDsplineitemsV22JSON415     *Error
	ApplicationvndDsperrorsV3JSON429         *Error
	ApplicationvndDsplineitemsV2JSON429      *Error
	ApplicationvndDsplineitemsV21JSON429     *Error
	ApplicationvndDsplineitemsV22JSON429     *Error
	ApplicationvndDsperrorsV3JSON500         *Error
	ApplicationvndDsplineitemsV2JSON500      *Error
	ApplicationvndDsplineitemsV21JSON500     *Error
	ApplicationvndDsplineitemsV22JSON500     *Error
	ApplicationvndDsperrorsV3JSON502         *Error
	ApplicationvndDsplineitemsV2JSON502      *Error
	ApplicationvndDsplineitemsV21JSON502     *Error
	ApplicationvndDsplineitemsV22JSON502     *Error
	ApplicationvndDsperrorsV3JSON503         *Error
	ApplicationvndDsplineitemsV2JSON503      *Error
	ApplicationvndDsplineitemsV21JSON503     *Error
	ApplicationvndDsplineitemsV22JSON503     *Error
	ApplicationvndDsperrorsV3JSON504         *Error
	ApplicationvndDsplineitemsV2JSON504      *Error
	ApplicationvndDsplineitemsV21JSON504     *Error
	ApplicationvndDsplineitemsV22JSON504     *Error
}

// Status returns HTTPResponse.Status
func (r GetLineItemsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLineItemsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLineItemsResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndDsplineitemsV2JSON207          *[]LineItemResponse
	ApplicationvndDsplineitemsV21JSON207         *[]LineItemResponse
	ApplicationvndDsplineitemsV22JSON207         *[]LineItemResponse
	ApplicationvndDsplineitemsresponseV3JSON207  *[]LineItemResponse
	ApplicationvndDsplineitemsresponseV31JSON207 *[]LineItemResponse
	ApplicationvndDsperrorsV3JSON400             *Error
	ApplicationvndDsplineitemsV2JSON400          *Error
	ApplicationvndDsplineitemsV21JSON400         *Error
	ApplicationvndDsplineitemsV22JSON400         *Error
	ApplicationvndDsperrorsV3JSON401             *Error
	ApplicationvndDsplineitemsV2JSON401          *Error
	ApplicationvndDsplineitemsV21JSON401         *Error
	ApplicationvndDsplineitemsV22JSON401         *Error
	ApplicationvndDsperrorsV3JSON403             *Error
	ApplicationvndDsplineitemsV2JSON403          *Error
	ApplicationvndDsplineitemsV21JSON403         *Error
	ApplicationvndDsplineitemsV22JSON403         *Error
	ApplicationvndDsperrorsV3JSON404             *Error
	ApplicationvndDsplineitemsV2JSON404          *Error
	ApplicationvndDsplineitemsV21JSON404         *Error
	ApplicationvndDsplineitemsV22JSON404         *Error
	ApplicationvndDsperrorsV3JSON415             *Error
	ApplicationvndDsplineitemsV2JSON415          *Error
	ApplicationvndDsplineitemsV21JSON415         *Error
	ApplicationvndDsplineitemsV22JSON415         *Error
	ApplicationvndDsperrorsV3JSON429             *Error
	ApplicationvndDsplineitemsV2JSON429          *Error
	ApplicationvndDsplineitemsV21JSON429         *Error
	ApplicationvndDsplineitemsV22JSON429         *Error
	ApplicationvndDsperrorsV3JSON500             *Error
	ApplicationvndDsplineitemsV2JSON500          *Error
	ApplicationvndDsplineitemsV21JSON500         *Error
	ApplicationvndDsplineitemsV22JSON500         *Error
	ApplicationvndDsperrorsV3JSON502             *Error
	ApplicationvndDsplineitemsV2JSON502          *Error
	ApplicationvndDsplineitemsV21JSON502         *Error
	ApplicationvndDsplineitemsV22JSON502         *Error
	ApplicationvndDsperrorsV3JSON503             *Error
	ApplicationvndDsplineitemsV2JSON503          *Error
	ApplicationvndDsplineitemsV21JSON503         *Error
	ApplicationvndDsplineitemsV22JSON503         *Error
	ApplicationvndDsperrorsV3JSON504             *Error
	ApplicationvndDsplineitemsV2JSON504          *Error
	ApplicationvndDsplineitemsV21JSON504         *Error
	ApplicationvndDsplineitemsV22JSON504         *Error
}

// Status returns HTTPResponse.Status
func (r CreateLineItemsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLineItemsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLineItemsResp struct {
	Body                                         []byte
	HTTPResponse                                 *http.Response
	ApplicationvndDsplineitemsV2JSON207          *[]LineItemResponse
	ApplicationvndDsplineitemsV21JSON207         *[]LineItemResponse
	ApplicationvndDsplineitemsV22JSON207         *[]LineItemResponse
	ApplicationvndDsplineitemsresponseV3JSON207  *[]LineItemResponse
	ApplicationvndDsplineitemsresponseV31JSON207 *[]LineItemResponse
	ApplicationvndDsperrorsV3JSON400             *Error
	ApplicationvndDsplineitemsV2JSON400          *Error
	ApplicationvndDsplineitemsV21JSON400         *Error
	ApplicationvndDsplineitemsV22JSON400         *Error
	ApplicationvndDsperrorsV3JSON401             *Error
	ApplicationvndDsplineitemsV2JSON401          *Error
	ApplicationvndDsplineitemsV21JSON401         *Error
	ApplicationvndDsplineitemsV22JSON401         *Error
	ApplicationvndDsperrorsV3JSON403             *Error
	ApplicationvndDsplineitemsV2JSON403          *Error
	ApplicationvndDsplineitemsV21JSON403         *Error
	ApplicationvndDsplineitemsV22JSON403         *Error
	ApplicationvndDsperrorsV3JSON404             *Error
	ApplicationvndDsplineitemsV2JSON404          *Error
	ApplicationvndDsplineitemsV21JSON404         *Error
	ApplicationvndDsplineitemsV22JSON404         *Error
	ApplicationvndDsperrorsV3JSON415             *Error
	ApplicationvndDsplineitemsV2JSON415          *Error
	ApplicationvndDsplineitemsV21JSON415         *Error
	ApplicationvndDsplineitemsV22JSON415         *Error
	ApplicationvndDsperrorsV3JSON429             *Error
	ApplicationvndDsplineitemsV2JSON429          *Error
	ApplicationvndDsplineitemsV21JSON429         *Error
	ApplicationvndDsplineitemsV22JSON429         *Error
	ApplicationvndDsperrorsV3JSON500             *Error
	ApplicationvndDsplineitemsV2JSON500          *Error
	ApplicationvndDsplineitemsV21JSON500         *Error
	ApplicationvndDsplineitemsV22JSON500         *Error
	ApplicationvndDsperrorsV3JSON502             *Error
	ApplicationvndDsplineitemsV2JSON502          *Error
	ApplicationvndDsplineitemsV21JSON502         *Error
	ApplicationvndDsplineitemsV22JSON502         *Error
	ApplicationvndDsperrorsV3JSON503             *Error
	ApplicationvndDsplineitemsV2JSON503          *Error
	ApplicationvndDsplineitemsV21JSON503         *Error
	ApplicationvndDsplineitemsV22JSON503         *Error
	ApplicationvndDsperrorsV3JSON504             *Error
	ApplicationvndDsplineitemsV2JSON504          *Error
	ApplicationvndDsplineitemsV21JSON504         *Error
	ApplicationvndDsplineitemsV22JSON504         *Error
}

// Status returns HTTPResponse.Status
func (r UpdateLineItemsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLineItemsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLineItemResp struct {
	Body                                 []byte
	HTTPResponse                         *http.Response
	ApplicationvndDsplineitemsV2JSON200  *LineItem
	ApplicationvndDsplineitemsV21JSON200 *LineItemV21
	ApplicationvndDsplineitemsV22JSON200 *LineItemV21
	ApplicationvndDsplineitemsV3JSON200  *LineItemV3
	ApplicationvndDsplineitemsV31JSON200 *LineItemV31
	ApplicationvndDsplineitemsV32JSON200 *LineItemV32
	ApplicationvndDsperrorsV3JSON400     *Error
	ApplicationvndDsplineitemsV2JSON400  *Error
	ApplicationvndDsplineitemsV21JSON400 *Error
	ApplicationvndDsplineitemsV22JSON400 *Error
	ApplicationvndDsperrorsV3JSON401     *Error
	ApplicationvndDsplineitemsV2JSON401  *Error
	ApplicationvndDsplineitemsV21JSON401 *Error
	ApplicationvndDsplineitemsV22JSON401 *Error
	ApplicationvndDsperrorsV3JSON403     *Error
	ApplicationvndDsplineitemsV2JSON403  *Error
	ApplicationvndDsplineitemsV21JSON403 *Error
	ApplicationvndDsplineitemsV22JSON403 *Error
	ApplicationvndDsperrorsV3JSON404     *Error
	ApplicationvndDsplineitemsV2JSON404  *Error
	ApplicationvndDsplineitemsV21JSON404 *Error
	ApplicationvndDsplineitemsV22JSON404 *Error
	ApplicationvndDsperrorsV3JSON415     *Error
	ApplicationvndDsplineitemsV2JSON415  *Error
	ApplicationvndDsplineitemsV21JSON415 *Error
	ApplicationvndDsplineitemsV22JSON415 *Error
	ApplicationvndDsperrorsV3JSON429     *Error
	ApplicationvndDsplineitemsV2JSON429  *Error
	ApplicationvndDsplineitemsV21JSON429 *Error
	ApplicationvndDsplineitemsV22JSON429 *Error
	ApplicationvndDsperrorsV3JSON500     *Error
	ApplicationvndDsplineitemsV2JSON500  *Error
	ApplicationvndDsplineitemsV21JSON500 *Error
	ApplicationvndDsplineitemsV22JSON500 *Error
	ApplicationvndDsperrorsV3JSON502     *Error
	ApplicationvndDsplineitemsV2JSON502  *Error
	ApplicationvndDsplineitemsV21JSON502 *Error
	ApplicationvndDsplineitemsV22JSON502 *Error
	ApplicationvndDsperrorsV3JSON503     *Error
	ApplicationvndDsplineitemsV2JSON503  *Error
	ApplicationvndDsplineitemsV21JSON503 *Error
	ApplicationvndDsplineitemsV22JSON503 *Error
	ApplicationvndDsperrorsV3JSON504     *Error
	ApplicationvndDsplineitemsV2JSON504  *Error
	ApplicationvndDsplineitemsV21JSON504 *Error
	ApplicationvndDsplineitemsV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r GetLineItemResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLineItemResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetLineItemStatusResp struct {
	Body                                 []byte
	HTTPResponse                         *http.Response
	ApplicationvndDsperrorsV3JSON400     *Error
	ApplicationvndDsplineitemsV2JSON400  *Error
	ApplicationvndDsplineitemsV21JSON400 *Error
	ApplicationvndDsplineitemsV22JSON400 *Error
	ApplicationvndDsperrorsV3JSON401     *Error
	ApplicationvndDsplineitemsV2JSON401  *Error
	ApplicationvndDsplineitemsV21JSON401 *Error
	ApplicationvndDsplineitemsV22JSON401 *Error
	ApplicationvndDsperrorsV3JSON403     *Error
	ApplicationvndDsplineitemsV2JSON403  *Error
	ApplicationvndDsplineitemsV21JSON403 *Error
	ApplicationvndDsplineitemsV22JSON403 *Error
	ApplicationvndDsperrorsV3JSON404     *Error
	ApplicationvndDsplineitemsV2JSON404  *Error
	ApplicationvndDsplineitemsV21JSON404 *Error
	ApplicationvndDsplineitemsV22JSON404 *Error
	ApplicationvndDsperrorsV3JSON415     *Error
	ApplicationvndDsplineitemsV2JSON415  *Error
	ApplicationvndDsplineitemsV21JSON415 *Error
	ApplicationvndDsplineitemsV22JSON415 *Error
	ApplicationvndDsperrorsV3JSON429     *Error
	ApplicationvndDsplineitemsV2JSON429  *Error
	ApplicationvndDsplineitemsV21JSON429 *Error
	ApplicationvndDsplineitemsV22JSON429 *Error
	ApplicationvndDsperrorsV3JSON500     *Error
	ApplicationvndDsplineitemsV2JSON500  *Error
	ApplicationvndDsplineitemsV21JSON500 *Error
	ApplicationvndDsplineitemsV22JSON500 *Error
	ApplicationvndDsperrorsV3JSON502     *Error
	ApplicationvndDsplineitemsV2JSON502  *Error
	ApplicationvndDsplineitemsV21JSON502 *Error
	ApplicationvndDsplineitemsV22JSON502 *Error
	ApplicationvndDsperrorsV3JSON503     *Error
	ApplicationvndDsplineitemsV2JSON503  *Error
	ApplicationvndDsplineitemsV21JSON503 *Error
	ApplicationvndDsplineitemsV22JSON503 *Error
	ApplicationvndDsperrorsV3JSON504     *Error
	ApplicationvndDsplineitemsV2JSON504  *Error
	ApplicationvndDsplineitemsV21JSON504 *Error
	ApplicationvndDsplineitemsV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r SetLineItemStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetLineItemStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreativeModerationResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndDspmoderationcreativesV1JSON200 *[]DspCreativeModerationV1
	ApplicationvndDsperrorsV1JSON400              *BadRequest
	ApplicationvndDsperrorsV1JSON401              *Unauthorized
	ApplicationvndDsperrorsV1JSON403              *Forbidden
	ApplicationvndDsperrorsV1JSON404              *NotFound
	JSON415                                       *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429              *TooManyRequests
	ApplicationvndDsperrorsV1JSON500              *InternalServerError
	ApplicationvndDsperrorsV1JSON502              *BadGateway
	ApplicationvndDsperrorsV1JSON503              *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504              *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetCreativeModerationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreativeModerationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON200  *Orders
	ApplicationvndDspordersV21JSON200 *OrdersV21
	ApplicationvndDspordersV22JSON200 *OrdersV22
	ApplicationvndDspordersV23JSON200 *OrdersV23
	ApplicationvndDspordersV24JSON200 *OrdersV24
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV22JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV22JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV22JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV22JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV22JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV22JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV22JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV22JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV22JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
	ApplicationvndDspordersV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrdersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrdersResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON207  *[]OrderResponse
	ApplicationvndDspordersV21JSON207 *[]OrderResponse
	ApplicationvndDspordersV22JSON207 *[]OrderResponse
	ApplicationvndDspordersV23JSON207 *[]OrderResponse
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV22JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV22JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV22JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV22JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV22JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV22JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV22JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV22JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV22JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
	ApplicationvndDspordersV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrdersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrdersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrdersResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON207  *[]OrderResponse
	ApplicationvndDspordersV21JSON207 *[]OrderResponse
	ApplicationvndDspordersV22JSON207 *[]OrderResponse
	ApplicationvndDspordersV23JSON207 *[]OrderResponse
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV22JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV22JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV22JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV22JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV22JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV22JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV22JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV22JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV22JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
	ApplicationvndDspordersV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOrdersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrdersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON200  *Order
	ApplicationvndDspordersV21JSON200 *Order
	ApplicationvndDspordersV22JSON200 *OrderV22
	ApplicationvndDspordersV23JSON200 *OrderV23
	ApplicationvndDspordersV24JSON200 *OrdersV24
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV22JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV22JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV22JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV22JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV22JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV22JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV22JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV22JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV22JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
	ApplicationvndDspordersV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrderResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversionTrackingsResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON200  *ConversionTracking
	ApplicationvndDspordersV21JSON200 *ConversionTrackingV21
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r GetConversionTrackingsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversionTrackingsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConversionTrackingResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateConversionTrackingResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConversionTrackingResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPixelsByOrderIdResp struct {
	Body                                    []byte
	HTTPResponse                            *http.Response
	ApplicationvndDsppixeltrackingV1JSON200 *PixelTracking
	ApplicationvndDsperrorsV1JSON400        *Error
	ApplicationvndDsperrorsV1JSON401        *Error
	ApplicationvndDsperrorsV1JSON403        *Error
	ApplicationvndDsperrorsV1JSON404        *Error
	ApplicationvndDsperrorsV1JSON415        *Error
	ApplicationvndDsperrorsV1JSON429        *Error
	ApplicationvndDsperrorsV1JSON500        *Error
	ApplicationvndDsperrorsV1JSON502        *Error
	ApplicationvndDsperrorsV1JSON503        *Error
	ApplicationvndDsperrorsV1JSON504        *Error
}

// Status returns HTTPResponse.Status
func (r GetPixelsByOrderIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPixelsByOrderIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePixelsByOrderIdResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndDsperrorsV1JSON400 *Error
	ApplicationvndDsperrorsV1JSON401 *Error
	ApplicationvndDsperrorsV1JSON403 *Error
	ApplicationvndDsperrorsV1JSON404 *Error
	ApplicationvndDsperrorsV1JSON415 *Error
	ApplicationvndDsperrorsV1JSON429 *Error
	ApplicationvndDsperrorsV1JSON500 *Error
	ApplicationvndDsperrorsV1JSON502 *Error
	ApplicationvndDsperrorsV1JSON503 *Error
	ApplicationvndDsperrorsV1JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePixelsByOrderIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePixelsByOrderIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsByOrderIdResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndDspproducttrackinglistV1JSON200 *ProductTrackingListV1
	ApplicationvndDsperrorsV1JSON400              *Error
	ApplicationvndDsperrorsV1JSON401              *Error
	ApplicationvndDsperrorsV1JSON403              *Error
	ApplicationvndDsperrorsV1JSON404              *Error
	ApplicationvndDsperrorsV1JSON415              *Error
	ApplicationvndDsperrorsV1JSON429              *Error
	ApplicationvndDsperrorsV1JSON500              *Error
	ApplicationvndDsperrorsV1JSON502              *Error
	ApplicationvndDsperrorsV1JSON503              *Error
	ApplicationvndDsperrorsV1JSON504              *Error
}

// Status returns HTTPResponse.Status
func (r GetProductsByOrderIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsByOrderIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDspOrdersOrderIdConversionTrackingProductsResp struct {
	Body                             []byte
	HTTPResponse                     *http.Response
	ApplicationvndDsperrorsV1JSON400 *Error
	ApplicationvndDsperrorsV1JSON401 *Error
	ApplicationvndDsperrorsV1JSON403 *Error
	ApplicationvndDsperrorsV1JSON404 *Error
	ApplicationvndDsperrorsV1JSON415 *Error
	ApplicationvndDsperrorsV1JSON429 *Error
	ApplicationvndDsperrorsV1JSON500 *Error
	ApplicationvndDsperrorsV1JSON502 *Error
	ApplicationvndDsperrorsV1JSON503 *Error
	ApplicationvndDsperrorsV1JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r PutDspOrdersOrderIdConversionTrackingProductsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDspOrdersOrderIdConversionTrackingProductsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportProductsByOrderIdResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndDspproducttrackingfileV1JSON200 *ProductTrackingFile
	ApplicationvndDsperrorsV1JSON400              *Error
	ApplicationvndDsperrorsV1JSON401              *Error
	ApplicationvndDsperrorsV1JSON403              *Error
	ApplicationvndDsperrorsV1JSON404              *Error
	ApplicationvndDsperrorsV1JSON415              *Error
	ApplicationvndDsperrorsV1JSON429              *Error
	ApplicationvndDsperrorsV1JSON500              *Error
	ApplicationvndDsperrorsV1JSON502              *Error
	ApplicationvndDsperrorsV1JSON503              *Error
	ApplicationvndDsperrorsV1JSON504              *Error
}

// Status returns HTTPResponse.Status
func (r ExportProductsByOrderIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportProductsByOrderIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetOrderStatusResp struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	ApplicationvndDspordersV2JSON400  *Error
	ApplicationvndDspordersV21JSON400 *Error
	ApplicationvndDspordersV22JSON400 *Error
	ApplicationvndDspordersV2JSON401  *Error
	ApplicationvndDspordersV21JSON401 *Error
	ApplicationvndDspordersV22JSON401 *Error
	ApplicationvndDspordersV2JSON403  *Error
	ApplicationvndDspordersV21JSON403 *Error
	ApplicationvndDspordersV22JSON403 *Error
	ApplicationvndDspordersV2JSON404  *Error
	ApplicationvndDspordersV21JSON404 *Error
	ApplicationvndDspordersV22JSON404 *Error
	ApplicationvndDspordersV2JSON415  *Error
	ApplicationvndDspordersV21JSON415 *Error
	ApplicationvndDspordersV22JSON415 *Error
	ApplicationvndDspordersV2JSON429  *Error
	ApplicationvndDspordersV21JSON429 *Error
	ApplicationvndDspordersV22JSON429 *Error
	ApplicationvndDspordersV2JSON500  *Error
	ApplicationvndDspordersV21JSON500 *Error
	ApplicationvndDspordersV22JSON500 *Error
	ApplicationvndDspordersV2JSON502  *Error
	ApplicationvndDspordersV21JSON502 *Error
	ApplicationvndDspordersV22JSON502 *Error
	ApplicationvndDspordersV2JSON503  *Error
	ApplicationvndDspordersV21JSON503 *Error
	ApplicationvndDspordersV22JSON503 *Error
	ApplicationvndDspordersV2JSON504  *Error
	ApplicationvndDspordersV21JSON504 *Error
	ApplicationvndDspordersV22JSON504 *Error
}

// Status returns HTTPResponse.Status
func (r SetOrderStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetOrderStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPixelsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		NextToken *string `json:"nextToken,omitempty"`

		// Pixels Array of pixels sorted by create time, earliest first.
		Pixels *[]Pixel `json:"pixels,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON429 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetPixelsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPixelsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDvCustomContextualSegmentsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DvCustomContextualSegments
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON429      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDvCustomContextualSegmentsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDvCustomContextualSegmentsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOdcCustomPredictsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OdcCustomPredicts
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON429      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOdcCustomPredictsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOdcCustomPredictsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOdcStandardPredictsResp struct {
	Body                                       []byte
	HTTPResponse                               *http.Response
	ApplicationvndOdcstandardpredictsV1JSON200 *OdcStandardPredicts
	ApplicationvndDsperrorsV1JSON400           *BadRequest
	ApplicationvndDsperrorsV1JSON401           *Unauthorized
	ApplicationvndDsperrorsV1JSON403           *Forbidden
	ApplicationvndDsperrorsV1JSON404           *NotFound
	JSON415                                    *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429           *TooManyRequests
	ApplicationvndDsperrorsV1JSON500           *InternalServerError
	ApplicationvndDsperrorsV1JSON502           *BadGateway
	ApplicationvndDsperrorsV1JSON503           *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504           *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetOdcStandardPredictsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOdcStandardPredictsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductCategoriesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		NextToken *string `json:"nextToken,omitempty"`

		// ProductCategories Array of ProductCategory sorted by ID in ascending lexicographical order.
		ProductCategories *[]ProductCategory `json:"productCategories,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON429 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProductCategoriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductCategoriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupplySourcesResp struct {
	Body                                  []byte
	HTTPResponse                          *http.Response
	JSON200                               *SupplySourceResponse
	ApplicationvndSupplysourcesV1JSON200  *SupplySourceResponse
	ApplicationvndSupplysourcesV11JSON200 *SupplySourceResponseV11
	ApplicationvndSupplysourcesV12JSON200 *SupplySourceResponseV12
	JSON400                               *Error
	ApplicationvndSupplysourcesV1JSON400  *Error
	ApplicationvndSupplysourcesV11JSON400 *Error
	ApplicationvndSupplysourcesV12JSON400 *Error
	JSON401                               *Error
	ApplicationvndSupplysourcesV1JSON401  *Error
	ApplicationvndSupplysourcesV11JSON401 *Error
	ApplicationvndSupplysourcesV12JSON401 *Error
	JSON403                               *Error
	ApplicationvndSupplysourcesV1JSON403  *Error
	ApplicationvndSupplysourcesV11JSON403 *Error
	ApplicationvndSupplysourcesV12JSON403 *Error
	JSON415                               *Error
	ApplicationvndSupplysourcesV1JSON415  *Error
	ApplicationvndSupplysourcesV11JSON415 *Error
	ApplicationvndSupplysourcesV12JSON415 *Error
	JSON429                               *Error
	ApplicationvndSupplysourcesV1JSON429  *Error
	ApplicationvndSupplysourcesV11JSON429 *Error
	ApplicationvndSupplysourcesV12JSON429 *Error
	JSON500                               *Error
	ApplicationvndSupplysourcesV1JSON500  *Error
	ApplicationvndSupplysourcesV11JSON500 *Error
	ApplicationvndSupplysourcesV12JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetSupplySourcesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupplySourcesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainTargetingResp struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	ApplicationvndDspreaddomaintargetingV1JSON200 *ReadDomainTargetingResponses
	ApplicationvndDsperrorsV1JSON400              *BadRequest
	ApplicationvndDsperrorsV1JSON401              *Unauthorized
	ApplicationvndDsperrorsV1JSON403              *Forbidden
	ApplicationvndDsperrorsV1JSON404              *NotFound
	JSON415                                       *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429              *TooManyRequests
	ApplicationvndDsperrorsV1JSON500              *InternalServerError
	ApplicationvndDsperrorsV1JSON502              *BadGateway
	ApplicationvndDsperrorsV1JSON503              *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504              *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r GetDomainTargetingResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainTargetingResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainTargetingResp struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	ApplicationvndDspdomaintargetingresponseV1JSON207 *[]UpdateDomainTargetingResponse
	ApplicationvndDsperrorsV1JSON400                  *BadRequest
	ApplicationvndDsperrorsV1JSON401                  *Unauthorized
	ApplicationvndDsperrorsV1JSON403                  *Forbidden
	ApplicationvndDsperrorsV1JSON404                  *NotFound
	JSON415                                           *UnsupportedMediaType
	ApplicationvndDsperrorsV1JSON429                  *TooManyRequests
	ApplicationvndDsperrorsV1JSON500                  *InternalServerError
	ApplicationvndDsperrorsV1JSON502                  *BadGateway
	ApplicationvndDsperrorsV1JSON503                  *ServiceUnavailable
	ApplicationvndDsperrorsV1JSON504                  *EndpointRequestTimedOut
}

// Status returns HTTPResponse.Status
func (r UpdateDomainTargetingResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainTargetingResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAppsWithResponse request returning *GetAppsResp
func (c *ClientWithResponses) GetAppsWithResponse(ctx context.Context, params *GetAppsParams) (*GetAppsResp, error) {
	rsp, err := c.GetApps(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAppsResp(rsp)
}

// GetCreativesWithResponse request returning *GetCreativesResp
func (c *ClientWithResponses) GetCreativesWithResponse(ctx context.Context, params *GetCreativesParams) (*GetCreativesResp, error) {
	rsp, err := c.GetCreatives(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCreativesResp(rsp)
}

// GetImageCreativesWithResponse request returning *GetImageCreativesResp
func (c *ClientWithResponses) GetImageCreativesWithResponse(ctx context.Context, params *GetImageCreativesParams) (*GetImageCreativesResp, error) {
	rsp, err := c.GetImageCreatives(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetImageCreativesResp(rsp)
}

// CreateImageCreativeWithBodyWithResponse request with arbitrary body returning *CreateImageCreativeResp
func (c *ClientWithResponses) CreateImageCreativeWithBodyWithResponse(ctx context.Context, params *CreateImageCreativeParams, contentType string, body io.Reader) (*CreateImageCreativeResp, error) {
	rsp, err := c.CreateImageCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateImageCreativeWithApplicationVndDspcreateimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateImageCreativeParams, body CreateImageCreativeApplicationVndDspcreateimagecreativesV1PlusJSONRequestBody) (*CreateImageCreativeResp, error) {
	rsp, err := c.CreateImageCreativeWithApplicationVndDspcreateimagecreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageCreativeResp(rsp)
}

// UpdateImageCreativeWithBodyWithResponse request with arbitrary body returning *UpdateImageCreativeResp
func (c *ClientWithResponses) UpdateImageCreativeWithBodyWithResponse(ctx context.Context, params *UpdateImageCreativeParams, contentType string, body io.Reader) (*UpdateImageCreativeResp, error) {
	rsp, err := c.UpdateImageCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImageCreativeResp(rsp)
}

func (c *ClientWithResponses) UpdateImageCreativeWithApplicationVndDspupdateimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateImageCreativeParams, body UpdateImageCreativeApplicationVndDspupdateimagecreativesV1PlusJSONRequestBody) (*UpdateImageCreativeResp, error) {
	rsp, err := c.UpdateImageCreativeWithApplicationVndDspupdateimagecreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImageCreativeResp(rsp)
}

// PreviewImageCreativeWithBodyWithResponse request with arbitrary body returning *PreviewImageCreativeResp
func (c *ClientWithResponses) PreviewImageCreativeWithBodyWithResponse(ctx context.Context, params *PreviewImageCreativeParams, contentType string, body io.Reader) (*PreviewImageCreativeResp, error) {
	rsp, err := c.PreviewImageCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewImageCreativeResp(rsp)
}

func (c *ClientWithResponses) PreviewImageCreativeWithApplicationVndDsppreviewimagecreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewImageCreativeParams, body PreviewImageCreativeApplicationVndDsppreviewimagecreativesV1PlusJSONRequestBody) (*PreviewImageCreativeResp, error) {
	rsp, err := c.PreviewImageCreativeWithApplicationVndDsppreviewimagecreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewImageCreativeResp(rsp)
}

// GetRecCreativesWithResponse request returning *GetRecCreativesResp
func (c *ClientWithResponses) GetRecCreativesWithResponse(ctx context.Context, params *GetRecCreativesParams) (*GetRecCreativesResp, error) {
	rsp, err := c.GetRecCreatives(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRecCreativesResp(rsp)
}

// CreateRecCreativesWithBodyWithResponse request with arbitrary body returning *CreateRecCreativesResp
func (c *ClientWithResponses) CreateRecCreativesWithBodyWithResponse(ctx context.Context, params *CreateRecCreativesParams, contentType string, body io.Reader) (*CreateRecCreativesResp, error) {
	rsp, err := c.CreateRecCreativesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecCreativesResp(rsp)
}

func (c *ClientWithResponses) CreateRecCreativesWithApplicationVndDspcreatereccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateRecCreativesParams, body CreateRecCreativesApplicationVndDspcreatereccreativesV1PlusJSONRequestBody) (*CreateRecCreativesResp, error) {
	rsp, err := c.CreateRecCreativesWithApplicationVndDspcreatereccreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecCreativesResp(rsp)
}

// UpdateRecCreativesWithBodyWithResponse request with arbitrary body returning *UpdateRecCreativesResp
func (c *ClientWithResponses) UpdateRecCreativesWithBodyWithResponse(ctx context.Context, params *UpdateRecCreativesParams, contentType string, body io.Reader) (*UpdateRecCreativesResp, error) {
	rsp, err := c.UpdateRecCreativesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecCreativesResp(rsp)
}

func (c *ClientWithResponses) UpdateRecCreativesWithApplicationVndDspupdatereccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateRecCreativesParams, body UpdateRecCreativesApplicationVndDspupdatereccreativesV1PlusJSONRequestBody) (*UpdateRecCreativesResp, error) {
	rsp, err := c.UpdateRecCreativesWithApplicationVndDspupdatereccreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecCreativesResp(rsp)
}

// PreviewRecCreativeWithBodyWithResponse request with arbitrary body returning *PreviewRecCreativeResp
func (c *ClientWithResponses) PreviewRecCreativeWithBodyWithResponse(ctx context.Context, params *PreviewRecCreativeParams, contentType string, body io.Reader) (*PreviewRecCreativeResp, error) {
	rsp, err := c.PreviewRecCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewRecCreativeResp(rsp)
}

func (c *ClientWithResponses) PreviewRecCreativeWithApplicationVndDsppreviewreccreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewRecCreativeParams, body PreviewRecCreativeApplicationVndDsppreviewreccreativesV1PlusJSONRequestBody) (*PreviewRecCreativeResp, error) {
	rsp, err := c.PreviewRecCreativeWithApplicationVndDsppreviewreccreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewRecCreativeResp(rsp)
}

// GetThirdPartyCreativesWithResponse request returning *GetThirdPartyCreativesResp
func (c *ClientWithResponses) GetThirdPartyCreativesWithResponse(ctx context.Context, params *GetThirdPartyCreativesParams) (*GetThirdPartyCreativesResp, error) {
	rsp, err := c.GetThirdPartyCreatives(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetThirdPartyCreativesResp(rsp)
}

// CreateThirdPartyCreativeWithBodyWithResponse request with arbitrary body returning *CreateThirdPartyCreativeResp
func (c *ClientWithResponses) CreateThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *CreateThirdPartyCreativeParams, contentType string, body io.Reader) (*CreateThirdPartyCreativeResp, error) {
	rsp, err := c.CreateThirdPartyCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateThirdPartyCreativeResp(rsp)
}

func (c *ClientWithResponses) CreateThirdPartyCreativeWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateThirdPartyCreativeParams, body CreateThirdPartyCreativeApplicationVndDspcreatethirdpartycreativesV1PlusJSONRequestBody) (*CreateThirdPartyCreativeResp, error) {
	rsp, err := c.CreateThirdPartyCreativeWithApplicationVndDspcreatethirdpartycreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateThirdPartyCreativeResp(rsp)
}

// UpdateThirdPartyCreativeWithBodyWithResponse request with arbitrary body returning *UpdateThirdPartyCreativeResp
func (c *ClientWithResponses) UpdateThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *UpdateThirdPartyCreativeParams, contentType string, body io.Reader) (*UpdateThirdPartyCreativeResp, error) {
	rsp, err := c.UpdateThirdPartyCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateThirdPartyCreativeResp(rsp)
}

func (c *ClientWithResponses) UpdateThirdPartyCreativeWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateThirdPartyCreativeParams, body UpdateThirdPartyCreativeApplicationVndDspupdatethirdpartycreativesV1PlusJSONRequestBody) (*UpdateThirdPartyCreativeResp, error) {
	rsp, err := c.UpdateThirdPartyCreativeWithApplicationVndDspupdatethirdpartycreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateThirdPartyCreativeResp(rsp)
}

// PreviewThirdPartyCreativeWithBodyWithResponse request with arbitrary body returning *PreviewThirdPartyCreativeResp
func (c *ClientWithResponses) PreviewThirdPartyCreativeWithBodyWithResponse(ctx context.Context, params *PreviewThirdPartyCreativeParams, contentType string, body io.Reader) (*PreviewThirdPartyCreativeResp, error) {
	rsp, err := c.PreviewThirdPartyCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewThirdPartyCreativeResp(rsp)
}

func (c *ClientWithResponses) PreviewThirdPartyCreativeWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewThirdPartyCreativeParams, body PreviewThirdPartyCreativeApplicationVndDsppreviewthirdpartycreativesV1PlusJSONRequestBody) (*PreviewThirdPartyCreativeResp, error) {
	rsp, err := c.PreviewThirdPartyCreativeWithApplicationVndDsppreviewthirdpartycreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewThirdPartyCreativeResp(rsp)
}

// GetVideoCreativesWithResponse request returning *GetVideoCreativesResp
func (c *ClientWithResponses) GetVideoCreativesWithResponse(ctx context.Context, params *GetVideoCreativesParams) (*GetVideoCreativesResp, error) {
	rsp, err := c.GetVideoCreatives(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoCreativesResp(rsp)
}

// CreateVideoCreativesWithBodyWithResponse request with arbitrary body returning *CreateVideoCreativesResp
func (c *ClientWithResponses) CreateVideoCreativesWithBodyWithResponse(ctx context.Context, params *CreateVideoCreativesParams, contentType string, body io.Reader) (*CreateVideoCreativesResp, error) {
	rsp, err := c.CreateVideoCreativesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateVideoCreativesResp(rsp)
}

func (c *ClientWithResponses) CreateVideoCreativesWithApplicationVndDspcreatevideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *CreateVideoCreativesParams, body CreateVideoCreativesApplicationVndDspcreatevideocreativesV1PlusJSONRequestBody) (*CreateVideoCreativesResp, error) {
	rsp, err := c.CreateVideoCreativesWithApplicationVndDspcreatevideocreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateVideoCreativesResp(rsp)
}

// UpdateVideoCreativesWithBodyWithResponse request with arbitrary body returning *UpdateVideoCreativesResp
func (c *ClientWithResponses) UpdateVideoCreativesWithBodyWithResponse(ctx context.Context, params *UpdateVideoCreativesParams, contentType string, body io.Reader) (*UpdateVideoCreativesResp, error) {
	rsp, err := c.UpdateVideoCreativesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVideoCreativesResp(rsp)
}

func (c *ClientWithResponses) UpdateVideoCreativesWithApplicationVndDspupdatevideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateVideoCreativesParams, body UpdateVideoCreativesApplicationVndDspupdatevideocreativesV1PlusJSONRequestBody) (*UpdateVideoCreativesResp, error) {
	rsp, err := c.UpdateVideoCreativesWithApplicationVndDspupdatevideocreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVideoCreativesResp(rsp)
}

// PreviewVideoCreativeWithBodyWithResponse request with arbitrary body returning *PreviewVideoCreativeResp
func (c *ClientWithResponses) PreviewVideoCreativeWithBodyWithResponse(ctx context.Context, params *PreviewVideoCreativeParams, contentType string, body io.Reader) (*PreviewVideoCreativeResp, error) {
	rsp, err := c.PreviewVideoCreativeWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewVideoCreativeResp(rsp)
}

func (c *ClientWithResponses) PreviewVideoCreativeWithApplicationVndDsppreviewvideocreativesV1PlusJSONBodyWithResponse(ctx context.Context, params *PreviewVideoCreativeParams, body PreviewVideoCreativeApplicationVndDsppreviewvideocreativesV1PlusJSONRequestBody) (*PreviewVideoCreativeResp, error) {
	rsp, err := c.PreviewVideoCreativeWithApplicationVndDsppreviewvideocreativesV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePreviewVideoCreativeResp(rsp)
}

// GetDomainsWithResponse request returning *GetDomainsResp
func (c *ClientWithResponses) GetDomainsWithResponse(ctx context.Context, params *GetDomainsParams) (*GetDomainsResp, error) {
	rsp, err := c.GetDomains(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainsResp(rsp)
}

// CreateFileUploadsPolicyWithResponse request returning *CreateFileUploadsPolicyResp
func (c *ClientWithResponses) CreateFileUploadsPolicyWithResponse(ctx context.Context, params *CreateFileUploadsPolicyParams) (*CreateFileUploadsPolicyResp, error) {
	rsp, err := c.CreateFileUploadsPolicy(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileUploadsPolicyResp(rsp)
}

// GetGeoLocationsWithResponse request returning *GetGeoLocationsResp
func (c *ClientWithResponses) GetGeoLocationsWithResponse(ctx context.Context, params *GetGeoLocationsParams) (*GetGeoLocationsResp, error) {
	rsp, err := c.GetGeoLocations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetGeoLocationsResp(rsp)
}

// GetGoalConfigurationsWithResponse request returning *GetGoalConfigurationsResp
func (c *ClientWithResponses) GetGoalConfigurationsWithResponse(ctx context.Context, params *GetGoalConfigurationsParams) (*GetGoalConfigurationsResp, error) {
	rsp, err := c.GetGoalConfigurations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetGoalConfigurationsResp(rsp)
}

// GetIabContentCategoriesWithResponse request returning *GetIabContentCategoriesResp
func (c *ClientWithResponses) GetIabContentCategoriesWithResponse(ctx context.Context, params *GetIabContentCategoriesParams) (*GetIabContentCategoriesResp, error) {
	rsp, err := c.GetIabContentCategories(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIabContentCategoriesResp(rsp)
}

// ListLineItemCreativeAssociationsWithResponse request returning *ListLineItemCreativeAssociationsResp
func (c *ClientWithResponses) ListLineItemCreativeAssociationsWithResponse(ctx context.Context, params *ListLineItemCreativeAssociationsParams) (*ListLineItemCreativeAssociationsResp, error) {
	rsp, err := c.ListLineItemCreativeAssociations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListLineItemCreativeAssociationsResp(rsp)
}

// AssociateLineItemsToCreativesWithBodyWithResponse request with arbitrary body returning *AssociateLineItemsToCreativesResp
func (c *ClientWithResponses) AssociateLineItemsToCreativesWithBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, contentType string, body io.Reader) (*AssociateLineItemsToCreativesResp, error) {
	rsp, err := c.AssociateLineItemsToCreativesWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAssociateLineItemsToCreativesResp(rsp)
}

func (c *ClientWithResponses) AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*AssociateLineItemsToCreativesResp, error) {
	rsp, err := c.AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseAssociateLineItemsToCreativesResp(rsp)
}

func (c *ClientWithResponses) AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBodyWithResponse(ctx context.Context, params *AssociateLineItemsToCreativesParams, body AssociateLineItemsToCreativesApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*AssociateLineItemsToCreativesResp, error) {
	rsp, err := c.AssociateLineItemsToCreativesWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseAssociateLineItemsToCreativesResp(rsp)
}

// UpdateLineItemCreativeAssociationsWithBodyWithResponse request with arbitrary body returning *UpdateLineItemCreativeAssociationsResp
func (c *ClientWithResponses) UpdateLineItemCreativeAssociationsWithBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, contentType string, body io.Reader) (*UpdateLineItemCreativeAssociationsResp, error) {
	rsp, err := c.UpdateLineItemCreativeAssociationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemCreativeAssociationsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV2PlusJSONRequestBody) (*UpdateLineItemCreativeAssociationsResp, error) {
	rsp, err := c.UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemCreativeAssociationsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemCreativeAssociationsParams, body UpdateLineItemCreativeAssociationsApplicationVndDsplineitemcreativeassociationsV21PlusJSONRequestBody) (*UpdateLineItemCreativeAssociationsResp, error) {
	rsp, err := c.UpdateLineItemCreativeAssociationsWithApplicationVndDsplineitemcreativeassociationsV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemCreativeAssociationsResp(rsp)
}

// GetLineItemsWithResponse request returning *GetLineItemsResp
func (c *ClientWithResponses) GetLineItemsWithResponse(ctx context.Context, params *GetLineItemsParams) (*GetLineItemsResp, error) {
	rsp, err := c.GetLineItems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetLineItemsResp(rsp)
}

// CreateLineItemsWithBodyWithResponse request with arbitrary body returning *CreateLineItemsResp
func (c *ClientWithResponses) CreateLineItemsWithBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, contentType string, body io.Reader) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

func (c *ClientWithResponses) CreateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBodyWithResponse(ctx context.Context, params *CreateLineItemsParams, body CreateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*CreateLineItemsResp, error) {
	rsp, err := c.CreateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLineItemsResp(rsp)
}

// UpdateLineItemsWithBodyWithResponse request with arbitrary body returning *UpdateLineItemsResp
func (c *ClientWithResponses) UpdateLineItemsWithBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, contentType string, body io.Reader) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV2PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV21PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV22PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV22PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV3PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV31PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV31PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

func (c *ClientWithResponses) UpdateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBodyWithResponse(ctx context.Context, params *UpdateLineItemsParams, body UpdateLineItemsApplicationVndDsplineitemsV32PlusJSONRequestBody) (*UpdateLineItemsResp, error) {
	rsp, err := c.UpdateLineItemsWithApplicationVndDsplineitemsV32PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLineItemsResp(rsp)
}

// GetLineItemWithResponse request returning *GetLineItemResp
func (c *ClientWithResponses) GetLineItemWithResponse(ctx context.Context, lineItemId string, params *GetLineItemParams) (*GetLineItemResp, error) {
	rsp, err := c.GetLineItem(ctx, lineItemId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetLineItemResp(rsp)
}

// SetLineItemStatusWithResponse request returning *SetLineItemStatusResp
func (c *ClientWithResponses) SetLineItemStatusWithResponse(ctx context.Context, lineItemId string, params *SetLineItemStatusParams) (*SetLineItemStatusResp, error) {
	rsp, err := c.SetLineItemStatus(ctx, lineItemId, params)
	if err != nil {
		return nil, err
	}
	return ParseSetLineItemStatusResp(rsp)
}

// GetCreativeModerationWithResponse request returning *GetCreativeModerationResp
func (c *ClientWithResponses) GetCreativeModerationWithResponse(ctx context.Context, params *GetCreativeModerationParams) (*GetCreativeModerationResp, error) {
	rsp, err := c.GetCreativeModeration(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCreativeModerationResp(rsp)
}

// GetOrdersWithResponse request returning *GetOrdersResp
func (c *ClientWithResponses) GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams) (*GetOrdersResp, error) {
	rsp, err := c.GetOrders(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersResp(rsp)
}

// CreateOrdersWithBodyWithResponse request with arbitrary body returning *CreateOrdersResp
func (c *ClientWithResponses) CreateOrdersWithBodyWithResponse(ctx context.Context, params *CreateOrdersParams, contentType string, body io.Reader) (*CreateOrdersResp, error) {
	rsp, err := c.CreateOrdersWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrdersResp(rsp)
}

func (c *ClientWithResponses) CreateOrdersWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*CreateOrdersResp, error) {
	rsp, err := c.CreateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrdersResp(rsp)
}

func (c *ClientWithResponses) CreateOrdersWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*CreateOrdersResp, error) {
	rsp, err := c.CreateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrdersResp(rsp)
}

func (c *ClientWithResponses) CreateOrdersWithApplicationVndDspordersV22PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*CreateOrdersResp, error) {
	rsp, err := c.CreateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrdersResp(rsp)
}

func (c *ClientWithResponses) CreateOrdersWithApplicationVndDspordersV23PlusJSONBodyWithResponse(ctx context.Context, params *CreateOrdersParams, body CreateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*CreateOrdersResp, error) {
	rsp, err := c.CreateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrdersResp(rsp)
}

// UpdateOrdersWithBodyWithResponse request with arbitrary body returning *UpdateOrdersResp
func (c *ClientWithResponses) UpdateOrdersWithBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, contentType string, body io.Reader) (*UpdateOrdersResp, error) {
	rsp, err := c.UpdateOrdersWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrdersResp(rsp)
}

func (c *ClientWithResponses) UpdateOrdersWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV2PlusJSONRequestBody) (*UpdateOrdersResp, error) {
	rsp, err := c.UpdateOrdersWithApplicationVndDspordersV2PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrdersResp(rsp)
}

func (c *ClientWithResponses) UpdateOrdersWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV21PlusJSONRequestBody) (*UpdateOrdersResp, error) {
	rsp, err := c.UpdateOrdersWithApplicationVndDspordersV21PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrdersResp(rsp)
}

func (c *ClientWithResponses) UpdateOrdersWithApplicationVndDspordersV22PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV22PlusJSONRequestBody) (*UpdateOrdersResp, error) {
	rsp, err := c.UpdateOrdersWithApplicationVndDspordersV22PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrdersResp(rsp)
}

func (c *ClientWithResponses) UpdateOrdersWithApplicationVndDspordersV23PlusJSONBodyWithResponse(ctx context.Context, params *UpdateOrdersParams, body UpdateOrdersApplicationVndDspordersV23PlusJSONRequestBody) (*UpdateOrdersResp, error) {
	rsp, err := c.UpdateOrdersWithApplicationVndDspordersV23PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrdersResp(rsp)
}

// GetOrderWithResponse request returning *GetOrderResp
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, orderId string, params *GetOrderParams) (*GetOrderResp, error) {
	rsp, err := c.GetOrder(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResp(rsp)
}

// GetConversionTrackingsWithResponse request returning *GetConversionTrackingsResp
func (c *ClientWithResponses) GetConversionTrackingsWithResponse(ctx context.Context, orderId string, params *GetConversionTrackingsParams) (*GetConversionTrackingsResp, error) {
	rsp, err := c.GetConversionTrackings(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetConversionTrackingsResp(rsp)
}

// UpdateConversionTrackingWithBodyWithResponse request with arbitrary body returning *UpdateConversionTrackingResp
func (c *ClientWithResponses) UpdateConversionTrackingWithBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, contentType string, body io.Reader) (*UpdateConversionTrackingResp, error) {
	rsp, err := c.UpdateConversionTrackingWithBody(ctx, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConversionTrackingResp(rsp)
}

func (c *ClientWithResponses) UpdateConversionTrackingWithApplicationVndDspordersV2PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV2PlusJSONRequestBody) (*UpdateConversionTrackingResp, error) {
	rsp, err := c.UpdateConversionTrackingWithApplicationVndDspordersV2PlusJSONBody(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConversionTrackingResp(rsp)
}

func (c *ClientWithResponses) UpdateConversionTrackingWithApplicationVndDspordersV21PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdateConversionTrackingParams, body UpdateConversionTrackingApplicationVndDspordersV21PlusJSONRequestBody) (*UpdateConversionTrackingResp, error) {
	rsp, err := c.UpdateConversionTrackingWithApplicationVndDspordersV21PlusJSONBody(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConversionTrackingResp(rsp)
}

// GetPixelsByOrderIdWithResponse request returning *GetPixelsByOrderIdResp
func (c *ClientWithResponses) GetPixelsByOrderIdWithResponse(ctx context.Context, orderId string, params *GetPixelsByOrderIdParams) (*GetPixelsByOrderIdResp, error) {
	rsp, err := c.GetPixelsByOrderId(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPixelsByOrderIdResp(rsp)
}

// UpdatePixelsByOrderIdWithBodyWithResponse request with arbitrary body returning *UpdatePixelsByOrderIdResp
func (c *ClientWithResponses) UpdatePixelsByOrderIdWithBodyWithResponse(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, contentType string, body io.Reader) (*UpdatePixelsByOrderIdResp, error) {
	rsp, err := c.UpdatePixelsByOrderIdWithBody(ctx, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePixelsByOrderIdResp(rsp)
}

func (c *ClientWithResponses) UpdatePixelsByOrderIdWithApplicationVndDsppixeltrackingV1PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *UpdatePixelsByOrderIdParams, body UpdatePixelsByOrderIdApplicationVndDsppixeltrackingV1PlusJSONRequestBody) (*UpdatePixelsByOrderIdResp, error) {
	rsp, err := c.UpdatePixelsByOrderIdWithApplicationVndDsppixeltrackingV1PlusJSONBody(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePixelsByOrderIdResp(rsp)
}

// GetProductsByOrderIdWithResponse request returning *GetProductsByOrderIdResp
func (c *ClientWithResponses) GetProductsByOrderIdWithResponse(ctx context.Context, orderId string, params *GetProductsByOrderIdParams) (*GetProductsByOrderIdResp, error) {
	rsp, err := c.GetProductsByOrderId(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsByOrderIdResp(rsp)
}

// PutDspOrdersOrderIdConversionTrackingProductsWithBodyWithResponse request with arbitrary body returning *PutDspOrdersOrderIdConversionTrackingProductsResp
func (c *ClientWithResponses) PutDspOrdersOrderIdConversionTrackingProductsWithBodyWithResponse(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, contentType string, body io.Reader) (*PutDspOrdersOrderIdConversionTrackingProductsResp, error) {
	rsp, err := c.PutDspOrdersOrderIdConversionTrackingProductsWithBody(ctx, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDspOrdersOrderIdConversionTrackingProductsResp(rsp)
}

func (c *ClientWithResponses) PutDspOrdersOrderIdConversionTrackingProductsWithApplicationVndDspproducttrackingV1PlusJSONBodyWithResponse(ctx context.Context, orderId string, params *PutDspOrdersOrderIdConversionTrackingProductsParams, body PutDspOrdersOrderIdConversionTrackingProductsApplicationVndDspproducttrackingV1PlusJSONRequestBody) (*PutDspOrdersOrderIdConversionTrackingProductsResp, error) {
	rsp, err := c.PutDspOrdersOrderIdConversionTrackingProductsWithApplicationVndDspproducttrackingV1PlusJSONBody(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDspOrdersOrderIdConversionTrackingProductsResp(rsp)
}

// ExportProductsByOrderIdWithResponse request returning *ExportProductsByOrderIdResp
func (c *ClientWithResponses) ExportProductsByOrderIdWithResponse(ctx context.Context, orderId string, params *ExportProductsByOrderIdParams) (*ExportProductsByOrderIdResp, error) {
	rsp, err := c.ExportProductsByOrderId(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseExportProductsByOrderIdResp(rsp)
}

// SetOrderStatusWithResponse request returning *SetOrderStatusResp
func (c *ClientWithResponses) SetOrderStatusWithResponse(ctx context.Context, orderId string, params *SetOrderStatusParams) (*SetOrderStatusResp, error) {
	rsp, err := c.SetOrderStatus(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseSetOrderStatusResp(rsp)
}

// GetPixelsWithResponse request returning *GetPixelsResp
func (c *ClientWithResponses) GetPixelsWithResponse(ctx context.Context, params *GetPixelsParams) (*GetPixelsResp, error) {
	rsp, err := c.GetPixels(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPixelsResp(rsp)
}

// GetDvCustomContextualSegmentsWithResponse request returning *GetDvCustomContextualSegmentsResp
func (c *ClientWithResponses) GetDvCustomContextualSegmentsWithResponse(ctx context.Context, params *GetDvCustomContextualSegmentsParams) (*GetDvCustomContextualSegmentsResp, error) {
	rsp, err := c.GetDvCustomContextualSegments(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDvCustomContextualSegmentsResp(rsp)
}

// GetOdcCustomPredictsWithResponse request returning *GetOdcCustomPredictsResp
func (c *ClientWithResponses) GetOdcCustomPredictsWithResponse(ctx context.Context, params *GetOdcCustomPredictsParams) (*GetOdcCustomPredictsResp, error) {
	rsp, err := c.GetOdcCustomPredicts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOdcCustomPredictsResp(rsp)
}

// GetOdcStandardPredictsWithResponse request returning *GetOdcStandardPredictsResp
func (c *ClientWithResponses) GetOdcStandardPredictsWithResponse(ctx context.Context, params *GetOdcStandardPredictsParams) (*GetOdcStandardPredictsResp, error) {
	rsp, err := c.GetOdcStandardPredicts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOdcStandardPredictsResp(rsp)
}

// GetProductCategoriesWithResponse request returning *GetProductCategoriesResp
func (c *ClientWithResponses) GetProductCategoriesWithResponse(ctx context.Context, params *GetProductCategoriesParams) (*GetProductCategoriesResp, error) {
	rsp, err := c.GetProductCategories(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProductCategoriesResp(rsp)
}

// GetSupplySourcesWithResponse request returning *GetSupplySourcesResp
func (c *ClientWithResponses) GetSupplySourcesWithResponse(ctx context.Context, params *GetSupplySourcesParams) (*GetSupplySourcesResp, error) {
	rsp, err := c.GetSupplySources(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSupplySourcesResp(rsp)
}

// GetDomainTargetingWithResponse request returning *GetDomainTargetingResp
func (c *ClientWithResponses) GetDomainTargetingWithResponse(ctx context.Context, params *GetDomainTargetingParams) (*GetDomainTargetingResp, error) {
	rsp, err := c.GetDomainTargeting(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainTargetingResp(rsp)
}

// UpdateDomainTargetingWithBodyWithResponse request with arbitrary body returning *UpdateDomainTargetingResp
func (c *ClientWithResponses) UpdateDomainTargetingWithBodyWithResponse(ctx context.Context, params *UpdateDomainTargetingParams, contentType string, body io.Reader) (*UpdateDomainTargetingResp, error) {
	rsp, err := c.UpdateDomainTargetingWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainTargetingResp(rsp)
}

func (c *ClientWithResponses) UpdateDomainTargetingWithApplicationVndDspupdatedomaintargetingV1PlusJSONBodyWithResponse(ctx context.Context, params *UpdateDomainTargetingParams, body UpdateDomainTargetingApplicationVndDspupdatedomaintargetingV1PlusJSONRequestBody) (*UpdateDomainTargetingResp, error) {
	rsp, err := c.UpdateDomainTargetingWithApplicationVndDspupdatedomaintargetingV1PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainTargetingResp(rsp)
}

// ParseGetAppsResp parses an HTTP response from a GetAppsWithResponse call
func ParseGetAppsResp(rsp *http.Response) (*GetAppsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Apps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspgetappsV1JSON500 = &dest

	}

	return response, nil
}

// ParseGetCreativesResp parses an HTTP response from a GetCreativesWithResponse call
func ParseGetCreativesResp(rsp *http.Response) (*GetCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 200:
		var dest Creatives
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 200:
		var dest Creatives
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspcreatives.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspcreativesV21JSON504 = &dest

	}

	return response, nil
}

// ParseGetImageCreativesResp parses an HTTP response from a GetImageCreativesWithResponse call
func ParseGetImageCreativesResp(rsp *http.Response) (*GetImageCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspReadImageCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspimagecreativesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseCreateImageCreativeResp parses an HTTP response from a CreateImageCreativeWithResponse call
func ParseCreateImageCreativeResp(rsp *http.Response) (*CreateImageCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspImageCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspimagecreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateImageCreativeResp parses an HTTP response from a UpdateImageCreativeWithResponse call
func ParseUpdateImageCreativeResp(rsp *http.Response) (*UpdateImageCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateImageCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspImageCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspimagecreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParsePreviewImageCreativeResp parses an HTTP response from a PreviewImageCreativeWithResponse call
func ParsePreviewImageCreativeResp(rsp *http.Response) (*PreviewImageCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewImageCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspCreativePreviewResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsppreviewcreativesresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetRecCreativesResp parses an HTTP response from a GetRecCreativesWithResponse call
func ParseGetRecCreativesResp(rsp *http.Response) (*GetRecCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspReadRecCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspreccreativesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseCreateRecCreativesResp parses an HTTP response from a CreateRecCreativesWithResponse call
func ParseCreateRecCreativesResp(rsp *http.Response) (*CreateRecCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspRecCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspreccreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateRecCreativesResp parses an HTTP response from a UpdateRecCreativesWithResponse call
func ParseUpdateRecCreativesResp(rsp *http.Response) (*UpdateRecCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspRecCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspreccreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParsePreviewRecCreativeResp parses an HTTP response from a PreviewRecCreativeWithResponse call
func ParsePreviewRecCreativeResp(rsp *http.Response) (*PreviewRecCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewRecCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspCreativePreviewResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsppreviewcreativesresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetThirdPartyCreativesResp parses an HTTP response from a GetThirdPartyCreativesWithResponse call
func ParseGetThirdPartyCreativesResp(rsp *http.Response) (*GetThirdPartyCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThirdPartyCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspReadThirdPartyCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspthirdpartycreativesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseCreateThirdPartyCreativeResp parses an HTTP response from a CreateThirdPartyCreativeWithResponse call
func ParseCreateThirdPartyCreativeResp(rsp *http.Response) (*CreateThirdPartyCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThirdPartyCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspThirdPartyCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspthirdpartycreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateThirdPartyCreativeResp parses an HTTP response from a UpdateThirdPartyCreativeWithResponse call
func ParseUpdateThirdPartyCreativeResp(rsp *http.Response) (*UpdateThirdPartyCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateThirdPartyCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspThirdPartyCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspthirdpartycreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParsePreviewThirdPartyCreativeResp parses an HTTP response from a PreviewThirdPartyCreativeWithResponse call
func ParsePreviewThirdPartyCreativeResp(rsp *http.Response) (*PreviewThirdPartyCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewThirdPartyCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspCreativePreviewResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsppreviewcreativesresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetVideoCreativesResp parses an HTTP response from a GetVideoCreativesWithResponse call
func ParseGetVideoCreativesResp(rsp *http.Response) (*GetVideoCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspReadVideoCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspvideocreativesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseCreateVideoCreativesResp parses an HTTP response from a CreateVideoCreativesWithResponse call
func ParseCreateVideoCreativesResp(rsp *http.Response) (*CreateVideoCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVideoCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspVideoCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspvideocreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateVideoCreativesResp parses an HTTP response from a UpdateVideoCreativesWithResponse call
func ParseUpdateVideoCreativesResp(rsp *http.Response) (*UpdateVideoCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVideoCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest DspVideoCreativesResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspvideocreativesresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParsePreviewVideoCreativeResp parses an HTTP response from a PreviewVideoCreativeWithResponse call
func ParsePreviewVideoCreativeResp(rsp *http.Response) (*PreviewVideoCreativeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewVideoCreativeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DspCreativePreviewResponseV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsppreviewcreativesresponseV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetDomainsResp parses an HTTP response from a GetDomainsWithResponse call
func ParseGetDomainsResp(rsp *http.Response) (*GetDomainsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// DomainLists Array of domain lists sorted by creation time, ascending
			DomainLists *interface{} `json:"domainLists,omitempty"`
			NextToken   *string      `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateFileUploadsPolicyResp parses an HTTP response from a CreateFileUploadsPolicyWithResponse call
func ParseCreateFileUploadsPolicyResp(rsp *http.Response) (*CreateFileUploadsPolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFileUploadsPolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileUploadPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspfileuploadpoliciesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetGeoLocationsResp parses an HTTP response from a GetGeoLocationsWithResponse call
func ParseGetGeoLocationsResp(rsp *http.Response) (*GetGeoLocationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeoLocationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// GeoLocations Array of results matching the given IDs or text query
			GeoLocations *[]GeoLocation `json:"geoLocations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGoalConfigurationsResp parses an HTTP response from a GetGoalConfigurationsWithResponse call
func ParseGetGoalConfigurationsResp(rsp *http.Response) (*GetGoalConfigurationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGoalConfigurationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest struct {
			// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
			GoalConfigurations *[]GoalConfiguration `json:"goalConfigurations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 200:
		var dest struct {
			// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
			GoalConfigurations *[]GoalConfigurationV1 `json:"goalConfigurations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.goalconfigurations.v1.1+json" && rsp.StatusCode == 200:
		var dest struct {
			// GoalConfigurations Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
			GoalConfigurations *[]GoalConfigurationV11 `json:"goalConfigurations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndGoalconfigurationsV11JSON200 = &dest

	}

	return response, nil
}

// ParseGetIabContentCategoriesResp parses an HTTP response from a GetIabContentCategoriesWithResponse call
func ParseGetIabContentCategoriesResp(rsp *http.Response) (*GetIabContentCategoriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIabContentCategoriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest struct {
			// IabContentCategories Array of IABContentCategory sorted by ID in ascending lexicographical order.
			IabContentCategories *[]IABContentCategory `json:"iabContentCategories,omitempty"`
			NextToken            *string               `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 200:
		var dest struct {
			// IabContentCategories Array of IABContentCategory sorted by ID in ascending lexicographical order.
			IabContentCategories *[]IABContentCategory `json:"iabContentCategories,omitempty"`
			NextToken            *string               `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dspiabcontentcategories.v1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspiabcontentcategoriesV1JSON500 = &dest

	}

	return response, nil
}

// ParseListLineItemCreativeAssociationsResp parses an HTTP response from a ListLineItemCreativeAssociationsWithResponse call
func ParseListLineItemCreativeAssociationsResp(rsp *http.Response) (*ListLineItemCreativeAssociationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLineItemCreativeAssociationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 200:
		var dest LineItemCreativeAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 200:
		var dest LineItemCreativeAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON504 = &dest

	}

	return response, nil
}

// ParseAssociateLineItemsToCreativesResp parses an HTTP response from a AssociateLineItemsToCreativesWithResponse call
func ParseAssociateLineItemsToCreativesResp(rsp *http.Response) (*AssociateLineItemsToCreativesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateLineItemsToCreativesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 207:
		var dest LineItemCreativeAssociationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 207:
		var dest LineItemCreativeAssociationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateLineItemCreativeAssociationsResp parses an HTTP response from a UpdateLineItemCreativeAssociationsWithResponse call
func ParseUpdateLineItemCreativeAssociationsResp(rsp *http.Response) (*UpdateLineItemCreativeAssociationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLineItemCreativeAssociationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 207:
		var dest []LineItemCreativeAssociationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 207:
		var dest []LineItemCreativeAssociationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemcreativeassociations.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemcreativeassociationsV21JSON504 = &dest

	}

	return response, nil
}

// ParseGetLineItemsResp parses an HTTP response from a GetLineItemsWithResponse call
func ParseGetLineItemsResp(rsp *http.Response) (*GetLineItemsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLineItemsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dspbasiclineitems.v3+json" && rsp.StatusCode == 200:
		var dest LineItemsV22
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspbasiclineitemsV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 200:
		var dest LineItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 200:
		var dest LineItemsV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 200:
		var dest LineItemsV22
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON504 = &dest

	}

	return response, nil
}

// ParseCreateLineItemsResp parses an HTTP response from a CreateLineItemsWithResponse call
func ParseCreateLineItemsResp(rsp *http.Response) (*CreateLineItemsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLineItemsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemsresponse.v3+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsresponseV3JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemsresponse.v3.1+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsresponseV31JSON207 = &dest

	}

	return response, nil
}

// ParseUpdateLineItemsResp parses an HTTP response from a UpdateLineItemsWithResponse call
func ParseUpdateLineItemsResp(rsp *http.Response) (*UpdateLineItemsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLineItemsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemsresponse.v3+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsresponseV3JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitemsresponse.v3.1+json" && rsp.StatusCode == 207:
		var dest []LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsresponseV31JSON207 = &dest

	}

	return response, nil
}

// ParseGetLineItemResp parses an HTTP response from a GetLineItemWithResponse call
func ParseGetLineItemResp(rsp *http.Response) (*GetLineItemResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLineItemResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 200:
		var dest LineItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 200:
		var dest LineItemV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 200:
		var dest LineItemV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v3+json" && rsp.StatusCode == 200:
		var dest LineItemV3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV3JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v3.1+json" && rsp.StatusCode == 200:
		var dest LineItemV31
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV31JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v3.2+json" && rsp.StatusCode == 200:
		var dest LineItemV32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV32JSON200 = &dest

	}

	return response, nil
}

// ParseSetLineItemStatusResp parses an HTTP response from a SetLineItemStatusWithResponse call
func ParseSetLineItemStatusResp(rsp *http.Response) (*SetLineItemStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetLineItemStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsperrors.v3+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV3JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsplineitems.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsplineitemsV22JSON504 = &dest

	}

	return response, nil
}

// ParseGetCreativeModerationResp parses an HTTP response from a GetCreativeModerationWithResponse call
func ParseGetCreativeModerationResp(rsp *http.Response) (*GetCreativeModerationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreativeModerationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DspCreativeModerationV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspmoderationcreativesV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetOrdersResp parses an HTTP response from a GetOrdersWithResponse call
func ParseGetOrdersResp(rsp *http.Response) (*GetOrdersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 200:
		var dest Orders
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 200:
		var dest OrdersV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 200:
		var dest OrdersV22
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.3+json" && rsp.StatusCode == 200:
		var dest OrdersV23
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV23JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.4+json" && rsp.StatusCode == 200:
		var dest OrdersV24
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV24JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrdersResp parses an HTTP response from a CreateOrdersWithResponse call
func ParseCreateOrdersResp(rsp *http.Response) (*CreateOrdersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrdersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.3+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV23JSON207 = &dest

	}

	return response, nil
}

// ParseUpdateOrdersResp parses an HTTP response from a UpdateOrdersWithResponse call
func ParseUpdateOrdersResp(rsp *http.Response) (*UpdateOrdersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrdersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.3+json" && rsp.StatusCode == 207:
		var dest []OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV23JSON207 = &dest

	}

	return response, nil
}

// ParseGetOrderResp parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResp(rsp *http.Response) (*GetOrderResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 200:
		var dest OrderV22
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.3+json" && rsp.StatusCode == 200:
		var dest OrderV23
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV23JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.4+json" && rsp.StatusCode == 200:
		var dest OrdersV24
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV24JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversionTrackingsResp parses an HTTP response from a GetConversionTrackingsWithResponse call
func ParseGetConversionTrackingsResp(rsp *http.Response) (*GetConversionTrackingsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversionTrackingsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 200:
		var dest ConversionTracking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 200:
		var dest ConversionTrackingV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateConversionTrackingResp parses an HTTP response from a UpdateConversionTrackingWithResponse call
func ParseUpdateConversionTrackingResp(rsp *http.Response) (*UpdateConversionTrackingResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConversionTrackingResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	}

	return response, nil
}

// ParseGetPixelsByOrderIdResp parses an HTTP response from a GetPixelsByOrderIdWithResponse call
func ParseGetPixelsByOrderIdResp(rsp *http.Response) (*GetPixelsByOrderIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPixelsByOrderIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PixelTracking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsppixeltrackingV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdatePixelsByOrderIdResp parses an HTTP response from a UpdatePixelsByOrderIdWithResponse call
func ParseUpdatePixelsByOrderIdResp(rsp *http.Response) (*UpdatePixelsByOrderIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePixelsByOrderIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetProductsByOrderIdResp parses an HTTP response from a GetProductsByOrderIdWithResponse call
func ParseGetProductsByOrderIdResp(rsp *http.Response) (*GetProductsByOrderIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsByOrderIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTrackingListV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspproducttrackinglistV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParsePutDspOrdersOrderIdConversionTrackingProductsResp parses an HTTP response from a PutDspOrdersOrderIdConversionTrackingProductsWithResponse call
func ParsePutDspOrdersOrderIdConversionTrackingProductsResp(rsp *http.Response) (*PutDspOrdersOrderIdConversionTrackingProductsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDspOrdersOrderIdConversionTrackingProductsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseExportProductsByOrderIdResp parses an HTTP response from a ExportProductsByOrderIdWithResponse call
func ParseExportProductsByOrderIdResp(rsp *http.Response) (*ExportProductsByOrderIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportProductsByOrderIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTrackingFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspproducttrackingfileV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseSetOrderStatusResp parses an HTTP response from a SetOrderStatusWithResponse call
func ParseSetOrderStatusResp(rsp *http.Response) (*SetOrderStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetOrderStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV2JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.1+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV21JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 502:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON502 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 503:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dsporders.v2.2+json" && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspordersV22JSON504 = &dest

	}

	return response, nil
}

// ParseGetPixelsResp parses an HTTP response from a GetPixelsWithResponse call
func ParseGetPixelsResp(rsp *http.Response) (*GetPixelsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPixelsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			NextToken *string `json:"nextToken,omitempty"`

			// Pixels Array of pixels sorted by create time, earliest first.
			Pixels *[]Pixel `json:"pixels,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDvCustomContextualSegmentsResp parses an HTTP response from a GetDvCustomContextualSegmentsWithResponse call
func ParseGetDvCustomContextualSegmentsResp(rsp *http.Response) (*GetDvCustomContextualSegmentsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDvCustomContextualSegmentsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DvCustomContextualSegments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOdcCustomPredictsResp parses an HTTP response from a GetOdcCustomPredictsWithResponse call
func ParseGetOdcCustomPredictsResp(rsp *http.Response) (*GetOdcCustomPredictsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOdcCustomPredictsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OdcCustomPredicts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOdcStandardPredictsResp parses an HTTP response from a GetOdcStandardPredictsWithResponse call
func ParseGetOdcStandardPredictsResp(rsp *http.Response) (*GetOdcStandardPredictsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOdcStandardPredictsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OdcStandardPredicts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOdcstandardpredictsV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseGetProductCategoriesResp parses an HTTP response from a GetProductCategoriesWithResponse call
func ParseGetProductCategoriesResp(rsp *http.Response) (*GetProductCategoriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductCategoriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			NextToken *string `json:"nextToken,omitempty"`

			// ProductCategories Array of ProductCategory sorted by ID in ascending lexicographical order.
			ProductCategories *[]ProductCategory `json:"productCategories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSupplySourcesResp parses an HTTP response from a GetSupplySourcesWithResponse call
func ParseGetSupplySourcesResp(rsp *http.Response) (*GetSupplySourcesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupplySourcesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest SupplySourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 200:
		var dest SupplySourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV1JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 200:
		var dest SupplySourceResponseV11
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.1+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV11JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 200:
		var dest SupplySourceResponseV12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 415:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON415 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.supplysources.v1.2+json" && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndSupplysourcesV12JSON500 = &dest

	}

	return response, nil
}

// ParseGetDomainTargetingResp parses an HTTP response from a GetDomainTargetingWithResponse call
func ParseGetDomainTargetingResp(rsp *http.Response) (*GetDomainTargetingResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainTargetingResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadDomainTargetingResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspreaddomaintargetingV1JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDomainTargetingResp parses an HTTP response from a UpdateDomainTargetingWithResponse call
func ParseUpdateDomainTargetingResp(rsp *http.Response) (*UpdateDomainTargetingResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainTargetingResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest []UpdateDomainTargetingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDspdomaintargetingresponseV1JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest EndpointRequestTimedOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDsperrorsV1JSON504 = &dest

	}

	return response, nil
}
