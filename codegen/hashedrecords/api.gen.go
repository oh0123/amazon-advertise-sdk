// Package hashedrecords provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package hashedrecords

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	runt "runtime"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// HashedRecord defines model for HashedRecord.
type HashedRecord struct {
	// Address The street address normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	Address *Sha256String `json:"address,omitempty"`

	// City The city normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	City *Sha256String `json:"city,omitempty"`

	// Email The email address normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	Email *Sha256String `json:"email,omitempty"`

	// FirstName The first name normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	FirstName *Sha256String `json:"firstName,omitempty"`

	// LastName The last name normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	LastName *Sha256String `json:"lastName,omitempty"`

	// Phone The phone number normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	Phone *Sha256String `json:"phone,omitempty"`

	// PostalCode The postal code normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	PostalCode *Sha256String `json:"postalCode,omitempty"`

	// State The state or province normalized and hashed [according to the documentation](https://advertising.amazon.com/help/GCCXMZYCK4RXWS6C).
	State *Sha256String `json:"state,omitempty"`
}

// IngestionRecord defines model for IngestionRecord.
type IngestionRecord struct {
	// ExternalId The external identifier for this record.  This can be any ID unique to the record in the caller's own identity space, and following regex pattern [0-9a-zA-Z\-\_]{1,128}
	ExternalId string `json:"externalId"`

	// HashedRecords list of hashed records data
	HashedRecords []HashedRecord `json:"hashedRecords"`
}

// IngestionRecordsList The list of hashed records.
type IngestionRecordsList = []IngestionRecord

// Sha256String defines model for Sha256String.
type Sha256String = string

// UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody defines parameters for UploadHashedRecords.
type UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody struct {
	// Records The list of hashed records.
	Records IngestionRecordsList `json:"records"`
}

// UploadHashedRecordsParams defines parameters for UploadHashedRecords.
type UploadHashedRecordsParams struct {
	// Authorization A valid access token.
	Authorization string `json:"Authorization"`

	// AmazonAdvertisingAPIClientId The identifier of a client associated with a "Login with Amazon" account.
	AmazonAdvertisingAPIClientId string `json:"Amazon-Advertising-API-ClientId"`

	// ContentType The Content-Type is application/json.
	ContentType string `json:"Content-Type"`
}

// UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody defines body for UploadHashedRecords for application/vnd.dpuploadhashedrecordsrequest.v3+json ContentType.
type UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody

// RequestEditorFn is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// ResponseEditorFn is the function signature for the ResponseEditor callback function
type ResponseEditorFn func(ctx context.Context, rsp *http.Response) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	// A callback for modifying response which are generated after receive from the network.
	ResponseEditors []ResponseEditorFn

	// The user agent header identifies your application, its version number, and the platform and programming language you are using.
	// You must include a user agent header in each request submitted to the sales partner API.
	UserAgent string
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	// setting the default useragent
	if client.UserAgent == "" {
		client.UserAgent = fmt.Sprintf("selling-partner-api-sdk/v2.0 (Language=%s; Platform=%s-%s)", strings.Replace(runt.Version(), "go", "go/", -1), runt.GOOS, runt.GOARCH)
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// WithResponseEditorFn allows setting up a callback function, which will be
// called right after receive the response.
func WithResponseEditorFn(fn ResponseEditorFn) ClientOption {
	return func(c *Client) error {
		c.ResponseEditors = append(c.ResponseEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UploadHashedRecordsWithBody request with any body
	UploadHashedRecordsWithBody(ctx context.Context, params *UploadHashedRecordsParams, contentType string, body io.Reader) (*http.Response, error)

	UploadHashedRecordsWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody(ctx context.Context, params *UploadHashedRecordsParams, body UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody) (*http.Response, error)
}

func (c *Client) UploadHashedRecordsWithBody(ctx context.Context, params *UploadHashedRecordsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUploadHashedRecordsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *Client) UploadHashedRecordsWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody(ctx context.Context, params *UploadHashedRecordsParams, body UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody) (*http.Response, error) {
	req, err := NewUploadHashedRecordsRequestWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	req.Header.Set("User-Agent", c.UserAgent)
	if err := c.applyReqEditors(ctx, req); err != nil {
		return nil, err
	}
	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	if err := c.applyRspEditor(ctx, rsp); err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewUploadHashedRecordsRequestWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody calls the generic UploadHashedRecords builder with application/vnd.dpuploadhashedrecordsrequest.v3+json body
func NewUploadHashedRecordsRequestWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody(server string, params *UploadHashedRecordsParams, body UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadHashedRecordsRequestWithBody(server, params, "application/vnd.dpuploadhashedrecordsrequest.v3+json", bodyReader)
}

// NewUploadHashedRecordsRequestWithBody generates requests for UploadHashedRecords with any type of body
func NewUploadHashedRecordsRequestWithBody(server string, params *UploadHashedRecordsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dp/records/hashed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Amazon-Advertising-API-ClientId", runtime.ParamLocationHeader, params.AmazonAdvertisingAPIClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Amazon-Advertising-API-ClientId", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam2)

	}

	return req, nil
}

func (c *Client) applyReqEditors(ctx context.Context, req *http.Request) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

func (c *Client) applyRspEditor(ctx context.Context, rsp *http.Response) error {
	for _, r := range c.ResponseEditors {
		if err := r(ctx, rsp); err != nil {
			return err
		}
	}
	return nil
} // ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UploadHashedRecordsWithBodyWithResponse request with any body
	UploadHashedRecordsWithBodyWithResponse(ctx context.Context, params *UploadHashedRecordsParams, contentType string, body io.Reader) (*UploadHashedRecordsResp, error)

	UploadHashedRecordsWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *UploadHashedRecordsParams, body UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody) (*UploadHashedRecordsResp, error)
}

type UploadHashedRecordsResp struct {
	Body                                                 []byte
	HTTPResponse                                         *http.Response
	ApplicationvndDpuploadhashedrecordsresponseV3JSON200 *struct {
		RequestId *string `json:"requestId,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON400 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV31JSON400 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON401 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON413 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON415 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON429 *map[string]interface{}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON500 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON503 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
	ApplicationvndDpuploadhashedrecordsresponseV3JSON505 *struct {
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UploadHashedRecordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadHashedRecordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UploadHashedRecordsWithBodyWithResponse request with arbitrary body returning *UploadHashedRecordsResp
func (c *ClientWithResponses) UploadHashedRecordsWithBodyWithResponse(ctx context.Context, params *UploadHashedRecordsParams, contentType string, body io.Reader) (*UploadHashedRecordsResp, error) {
	rsp, err := c.UploadHashedRecordsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUploadHashedRecordsResp(rsp)
}

func (c *ClientWithResponses) UploadHashedRecordsWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBodyWithResponse(ctx context.Context, params *UploadHashedRecordsParams, body UploadHashedRecordsApplicationVndDpuploadhashedrecordsrequestV3PlusJSONRequestBody) (*UploadHashedRecordsResp, error) {
	rsp, err := c.UploadHashedRecordsWithApplicationVndDpuploadhashedrecordsrequestV3PlusJSONBody(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUploadHashedRecordsResp(rsp)
}

// ParseUploadHashedRecordsResp parses an HTTP response from a UploadHashedRecordsWithResponse call
func ParseUploadHashedRecordsResp(rsp *http.Response) (*UploadHashedRecordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadHashedRecordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/vnd.dpuploadhashedrecordsresponse.v3+json" && rsp.StatusCode == 400:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.dpuploadhashedrecordsresponse.v3.1+json" && rsp.StatusCode == 400:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV31JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RequestId *string `json:"requestId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 505:
		var dest struct {
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndDpuploadhashedrecordsresponseV3JSON505 = &dest

	}

	return response, nil
}
